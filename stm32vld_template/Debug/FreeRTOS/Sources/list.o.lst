   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"list.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.vListInitialise,"ax",%progbits
  19              		.align	2
  20              		.global	vListInitialise
  21              		.thumb
  22              		.thumb_func
  24              	vListInitialise:
  25              	.LFB0:
  26              		.file 1 "../FreeRTOS/Sources/list.c"
   1:../FreeRTOS/Sources/list.c **** /*
   2:../FreeRTOS/Sources/list.c ****     FreeRTOS V7.4.0 - Copyright (C) 2013 Real Time Engineers Ltd.
   3:../FreeRTOS/Sources/list.c **** 
   4:../FreeRTOS/Sources/list.c ****     FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
   5:../FreeRTOS/Sources/list.c ****     http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../FreeRTOS/Sources/list.c **** 
   7:../FreeRTOS/Sources/list.c ****     ***************************************************************************
   8:../FreeRTOS/Sources/list.c ****      *                                                                       *
   9:../FreeRTOS/Sources/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
  10:../FreeRTOS/Sources/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
  11:../FreeRTOS/Sources/list.c ****      *    available.                                                         *
  12:../FreeRTOS/Sources/list.c ****      *                                                                       *
  13:../FreeRTOS/Sources/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  14:../FreeRTOS/Sources/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  15:../FreeRTOS/Sources/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  16:../FreeRTOS/Sources/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  17:../FreeRTOS/Sources/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  18:../FreeRTOS/Sources/list.c ****      *    for microcontrollers - completely free of charge!                  *
  19:../FreeRTOS/Sources/list.c ****      *                                                                       *
  20:../FreeRTOS/Sources/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  21:../FreeRTOS/Sources/list.c ****      *                                                                       *
  22:../FreeRTOS/Sources/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  23:../FreeRTOS/Sources/list.c ****      *                                                                       *
  24:../FreeRTOS/Sources/list.c ****     ***************************************************************************
  25:../FreeRTOS/Sources/list.c **** 
  26:../FreeRTOS/Sources/list.c **** 
  27:../FreeRTOS/Sources/list.c ****     This file is part of the FreeRTOS distribution.
  28:../FreeRTOS/Sources/list.c **** 
  29:../FreeRTOS/Sources/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  30:../FreeRTOS/Sources/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  31:../FreeRTOS/Sources/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  32:../FreeRTOS/Sources/list.c **** 
  33:../FreeRTOS/Sources/list.c ****     >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
  34:../FreeRTOS/Sources/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  35:../FreeRTOS/Sources/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  36:../FreeRTOS/Sources/list.c ****     kernel.
  37:../FreeRTOS/Sources/list.c **** 
  38:../FreeRTOS/Sources/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  39:../FreeRTOS/Sources/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  40:../FreeRTOS/Sources/list.c ****     FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  41:../FreeRTOS/Sources/list.c ****     details. You should have received a copy of the GNU General Public License
  42:../FreeRTOS/Sources/list.c ****     and the FreeRTOS license exception along with FreeRTOS; if not itcan be
  43:../FreeRTOS/Sources/list.c ****     viewed here: http://www.freertos.org/a00114.html and also obtained by
  44:../FreeRTOS/Sources/list.c ****     writing to Real Time Engineers Ltd., contact details for whom are available
  45:../FreeRTOS/Sources/list.c ****     on the FreeRTOS WEB site.
  46:../FreeRTOS/Sources/list.c **** 
  47:../FreeRTOS/Sources/list.c ****     1 tab == 4 spaces!
  48:../FreeRTOS/Sources/list.c **** 
  49:../FreeRTOS/Sources/list.c ****     ***************************************************************************
  50:../FreeRTOS/Sources/list.c ****      *                                                                       *
  51:../FreeRTOS/Sources/list.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  52:../FreeRTOS/Sources/list.c ****      *    not run, what could be wrong?"                                     *
  53:../FreeRTOS/Sources/list.c ****      *                                                                       *
  54:../FreeRTOS/Sources/list.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  55:../FreeRTOS/Sources/list.c ****      *                                                                       *
  56:../FreeRTOS/Sources/list.c ****     ***************************************************************************
  57:../FreeRTOS/Sources/list.c **** 
  58:../FreeRTOS/Sources/list.c **** 
  59:../FreeRTOS/Sources/list.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
  60:../FreeRTOS/Sources/list.c ****     license and Real Time Engineers Ltd. contact details.
  61:../FreeRTOS/Sources/list.c **** 
  62:../FreeRTOS/Sources/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  63:../FreeRTOS/Sources/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, and our new
  64:../FreeRTOS/Sources/list.c ****     fully thread aware and reentrant UDP/IP stack.
  65:../FreeRTOS/Sources/list.c **** 
  66:../FreeRTOS/Sources/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
  67:../FreeRTOS/Sources/list.c ****     Integrity Systems, who sell the code with commercial support, 
  68:../FreeRTOS/Sources/list.c ****     indemnification and middleware, under the OpenRTOS brand.
  69:../FreeRTOS/Sources/list.c ****     
  70:../FreeRTOS/Sources/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
  71:../FreeRTOS/Sources/list.c ****     engineered and independently SIL3 certified version for use in safety and 
  72:../FreeRTOS/Sources/list.c ****     mission critical applications that require provable dependability.
  73:../FreeRTOS/Sources/list.c **** */
  74:../FreeRTOS/Sources/list.c **** 
  75:../FreeRTOS/Sources/list.c **** 
  76:../FreeRTOS/Sources/list.c **** #include <stdlib.h>
  77:../FreeRTOS/Sources/list.c **** #include "FreeRTOS.h"
  78:../FreeRTOS/Sources/list.c **** #include "list.h"
  79:../FreeRTOS/Sources/list.c **** 
  80:../FreeRTOS/Sources/list.c **** /*-----------------------------------------------------------
  81:../FreeRTOS/Sources/list.c ****  * PUBLIC LIST API documented in list.h
  82:../FreeRTOS/Sources/list.c ****  *----------------------------------------------------------*/
  83:../FreeRTOS/Sources/list.c **** 
  84:../FreeRTOS/Sources/list.c **** void vListInitialise( xList *pxList )
  85:../FreeRTOS/Sources/list.c **** {
  27              		.loc 1 85 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  86:../FreeRTOS/Sources/list.c **** 	/* The list structure contains a list item which is used to mark the
  87:../FreeRTOS/Sources/list.c **** 	end of the list.  To initialise the list the list end is inserted
  88:../FreeRTOS/Sources/list.c **** 	as the only list entry. */
  89:../FreeRTOS/Sources/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  43              		.loc 1 89 0
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 03F10802 		add	r2, r3, #8
  46 000e 7B68     		ldr	r3, [r7, #4]
  47 0010 5A60     		str	r2, [r3, #4]
  90:../FreeRTOS/Sources/list.c **** 
  91:../FreeRTOS/Sources/list.c **** 	/* The list end value is the highest possible value in the list to
  92:../FreeRTOS/Sources/list.c **** 	ensure it remains at the end of the list. */
  93:../FreeRTOS/Sources/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  48              		.loc 1 93 0
  49 0012 7B68     		ldr	r3, [r7, #4]
  50 0014 4FF0FF32 		mov	r2, #-1
  51 0018 9A60     		str	r2, [r3, #8]
  94:../FreeRTOS/Sources/list.c **** 
  95:../FreeRTOS/Sources/list.c **** 	/* The list end next and previous pointers point to itself so we know
  96:../FreeRTOS/Sources/list.c **** 	when the list is empty. */
  97:../FreeRTOS/Sources/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  52              		.loc 1 97 0
  53 001a 7B68     		ldr	r3, [r7, #4]
  54 001c 03F10802 		add	r2, r3, #8
  55 0020 7B68     		ldr	r3, [r7, #4]
  56 0022 DA60     		str	r2, [r3, #12]
  98:../FreeRTOS/Sources/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  57              		.loc 1 98 0
  58 0024 7B68     		ldr	r3, [r7, #4]
  59 0026 03F10802 		add	r2, r3, #8
  60 002a 7B68     		ldr	r3, [r7, #4]
  61 002c 1A61     		str	r2, [r3, #16]
  99:../FreeRTOS/Sources/list.c **** 
 100:../FreeRTOS/Sources/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  62              		.loc 1 100 0
  63 002e 7B68     		ldr	r3, [r7, #4]
  64 0030 4FF00002 		mov	r2, #0
  65 0034 1A60     		str	r2, [r3, #0]
 101:../FreeRTOS/Sources/list.c **** }
  66              		.loc 1 101 0
  67 0036 07F10C07 		add	r7, r7, #12
  68 003a BD46     		mov	sp, r7
  69 003c 80BC     		pop	{r7}
  70 003e 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE0:
  74              		.section	.text.vListInitialiseItem,"ax",%progbits
  75              		.align	2
  76              		.global	vListInitialiseItem
  77              		.thumb
  78              		.thumb_func
  80              	vListInitialiseItem:
  81              	.LFB1:
 102:../FreeRTOS/Sources/list.c **** /*-----------------------------------------------------------*/
 103:../FreeRTOS/Sources/list.c **** 
 104:../FreeRTOS/Sources/list.c **** void vListInitialiseItem( xListItem *pxItem )
 105:../FreeRTOS/Sources/list.c **** {
  82              		.loc 1 105 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87 0000 80B4     		push	{r7}
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 4
  90              		.cfi_offset 7, -4
  91 0002 83B0     		sub	sp, sp, #12
  92              	.LCFI4:
  93              		.cfi_def_cfa_offset 16
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI5:
  96              		.cfi_def_cfa_register 7
  97 0006 7860     		str	r0, [r7, #4]
 106:../FreeRTOS/Sources/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:../FreeRTOS/Sources/list.c **** 	pxItem->pvContainer = NULL;
  98              		.loc 1 107 0
  99 0008 7B68     		ldr	r3, [r7, #4]
 100 000a 4FF00002 		mov	r2, #0
 101 000e 1A61     		str	r2, [r3, #16]
 108:../FreeRTOS/Sources/list.c **** }
 102              		.loc 1 108 0
 103 0010 07F10C07 		add	r7, r7, #12
 104 0014 BD46     		mov	sp, r7
 105 0016 80BC     		pop	{r7}
 106 0018 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE1:
 110 001a 00BF     		.section	.text.vListInsertEnd,"ax",%progbits
 111              		.align	2
 112              		.global	vListInsertEnd
 113              		.thumb
 114              		.thumb_func
 116              	vListInsertEnd:
 117              	.LFB2:
 109:../FreeRTOS/Sources/list.c **** /*-----------------------------------------------------------*/
 110:../FreeRTOS/Sources/list.c **** 
 111:../FreeRTOS/Sources/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
 112:../FreeRTOS/Sources/list.c **** {
 118              		.loc 1 112 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 16
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123 0000 80B4     		push	{r7}
 124              	.LCFI6:
 125              		.cfi_def_cfa_offset 4
 126              		.cfi_offset 7, -4
 127 0002 85B0     		sub	sp, sp, #20
 128              	.LCFI7:
 129              		.cfi_def_cfa_offset 24
 130 0004 00AF     		add	r7, sp, #0
 131              	.LCFI8:
 132              		.cfi_def_cfa_register 7
 133 0006 7860     		str	r0, [r7, #4]
 134 0008 3960     		str	r1, [r7, #0]
 113:../FreeRTOS/Sources/list.c **** volatile xListItem * pxIndex;
 114:../FreeRTOS/Sources/list.c **** 
 115:../FreeRTOS/Sources/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 116:../FreeRTOS/Sources/list.c **** 	makes the new list item the last item to be removed by a call to
 117:../FreeRTOS/Sources/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
 118:../FreeRTOS/Sources/list.c **** 	the pxIndex member. */
 119:../FreeRTOS/Sources/list.c **** 	pxIndex = pxList->pxIndex;
 135              		.loc 1 119 0
 136 000a 7B68     		ldr	r3, [r7, #4]
 137 000c 5B68     		ldr	r3, [r3, #4]
 138 000e FB60     		str	r3, [r7, #12]
 120:../FreeRTOS/Sources/list.c **** 
 121:../FreeRTOS/Sources/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 139              		.loc 1 121 0
 140 0010 FB68     		ldr	r3, [r7, #12]
 141 0012 5A68     		ldr	r2, [r3, #4]
 142 0014 3B68     		ldr	r3, [r7, #0]
 143 0016 5A60     		str	r2, [r3, #4]
 122:../FreeRTOS/Sources/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 144              		.loc 1 122 0
 145 0018 7B68     		ldr	r3, [r7, #4]
 146 001a 5A68     		ldr	r2, [r3, #4]
 147 001c 3B68     		ldr	r3, [r7, #0]
 148 001e 9A60     		str	r2, [r3, #8]
 123:../FreeRTOS/Sources/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 149              		.loc 1 123 0
 150 0020 FB68     		ldr	r3, [r7, #12]
 151 0022 5B68     		ldr	r3, [r3, #4]
 152 0024 3A68     		ldr	r2, [r7, #0]
 153 0026 9A60     		str	r2, [r3, #8]
 124:../FreeRTOS/Sources/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 154              		.loc 1 124 0
 155 0028 FB68     		ldr	r3, [r7, #12]
 156 002a 3A68     		ldr	r2, [r7, #0]
 157 002c 5A60     		str	r2, [r3, #4]
 125:../FreeRTOS/Sources/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 158              		.loc 1 125 0
 159 002e 7B68     		ldr	r3, [r7, #4]
 160 0030 3A68     		ldr	r2, [r7, #0]
 161 0032 5A60     		str	r2, [r3, #4]
 126:../FreeRTOS/Sources/list.c **** 
 127:../FreeRTOS/Sources/list.c **** 	/* Remember which list the item is in. */
 128:../FreeRTOS/Sources/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 162              		.loc 1 128 0
 163 0034 3B68     		ldr	r3, [r7, #0]
 164 0036 7A68     		ldr	r2, [r7, #4]
 165 0038 1A61     		str	r2, [r3, #16]
 129:../FreeRTOS/Sources/list.c **** 
 130:../FreeRTOS/Sources/list.c **** 	( pxList->uxNumberOfItems )++;
 166              		.loc 1 130 0
 167 003a 7B68     		ldr	r3, [r7, #4]
 168 003c 1B68     		ldr	r3, [r3, #0]
 169 003e 03F10102 		add	r2, r3, #1
 170 0042 7B68     		ldr	r3, [r7, #4]
 171 0044 1A60     		str	r2, [r3, #0]
 131:../FreeRTOS/Sources/list.c **** }
 172              		.loc 1 131 0
 173 0046 07F11407 		add	r7, r7, #20
 174 004a BD46     		mov	sp, r7
 175 004c 80BC     		pop	{r7}
 176 004e 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE2:
 180              		.section	.text.vListInsert,"ax",%progbits
 181              		.align	2
 182              		.global	vListInsert
 183              		.thumb
 184              		.thumb_func
 186              	vListInsert:
 187              	.LFB3:
 132:../FreeRTOS/Sources/list.c **** /*-----------------------------------------------------------*/
 133:../FreeRTOS/Sources/list.c **** 
 134:../FreeRTOS/Sources/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 135:../FreeRTOS/Sources/list.c **** {
 188              		.loc 1 135 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 16
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 0000 80B4     		push	{r7}
 194              	.LCFI9:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 85B0     		sub	sp, sp, #20
 198              	.LCFI10:
 199              		.cfi_def_cfa_offset 24
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI11:
 202              		.cfi_def_cfa_register 7
 203 0006 7860     		str	r0, [r7, #4]
 204 0008 3960     		str	r1, [r7, #0]
 136:../FreeRTOS/Sources/list.c **** volatile xListItem *pxIterator;
 137:../FreeRTOS/Sources/list.c **** portTickType xValueOfInsertion;
 138:../FreeRTOS/Sources/list.c **** 
 139:../FreeRTOS/Sources/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 140:../FreeRTOS/Sources/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 205              		.loc 1 140 0
 206 000a 3B68     		ldr	r3, [r7, #0]
 207 000c 1B68     		ldr	r3, [r3, #0]
 208 000e BB60     		str	r3, [r7, #8]
 141:../FreeRTOS/Sources/list.c **** 
 142:../FreeRTOS/Sources/list.c **** 	/* If the list already contains a list item with the same item value then
 143:../FreeRTOS/Sources/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 144:../FreeRTOS/Sources/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 145:../FreeRTOS/Sources/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 146:../FreeRTOS/Sources/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 147:../FreeRTOS/Sources/list.c **** 	to guard against this by checking the value first and modifying the
 148:../FreeRTOS/Sources/list.c **** 	algorithm slightly if necessary. */
 149:../FreeRTOS/Sources/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 209              		.loc 1 149 0
 210 0010 BB68     		ldr	r3, [r7, #8]
 211 0012 B3F1FF3F 		cmp	r3, #-1
 212 0016 03D1     		bne	.L5
 150:../FreeRTOS/Sources/list.c **** 	{
 151:../FreeRTOS/Sources/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 213              		.loc 1 151 0
 214 0018 7B68     		ldr	r3, [r7, #4]
 215 001a 1B69     		ldr	r3, [r3, #16]
 216 001c FB60     		str	r3, [r7, #12]
 217 001e 0DE0     		b	.L6
 218              	.L5:
 152:../FreeRTOS/Sources/list.c **** 	}
 153:../FreeRTOS/Sources/list.c **** 	else
 154:../FreeRTOS/Sources/list.c **** 	{
 155:../FreeRTOS/Sources/list.c **** 		/* *** NOTE ***********************************************************
 156:../FreeRTOS/Sources/list.c **** 		If you find your application is crashing here then likely causes are:
 157:../FreeRTOS/Sources/list.c **** 			1) Stack overflow -
 158:../FreeRTOS/Sources/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 159:../FreeRTOS/Sources/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 160:../FreeRTOS/Sources/list.c **** 			   parts where numerically high priority values denote low actual
 161:../FreeRTOS/Sources/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 162:../FreeRTOS/Sources/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 163:../FreeRTOS/Sources/list.c **** 			3) Calling an API function from within a critical section or when
 164:../FreeRTOS/Sources/list.c **** 			   the scheduler is suspended.
 165:../FreeRTOS/Sources/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 166:../FreeRTOS/Sources/list.c **** 			   before the scheduler has been started (are interrupts firing
 167:../FreeRTOS/Sources/list.c **** 			   before vTaskStartScheduler() has been called?).
 168:../FreeRTOS/Sources/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 169:../FreeRTOS/Sources/list.c **** 		**********************************************************************/
 170:../FreeRTOS/Sources/list.c **** 
 171:../FreeRTOS/Sources/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 219              		.loc 1 171 0
 220 0020 7B68     		ldr	r3, [r7, #4]
 221 0022 03F10803 		add	r3, r3, #8
 222 0026 FB60     		str	r3, [r7, #12]
 223 0028 02E0     		b	.L7
 224              	.L8:
 225              		.loc 1 171 0 is_stmt 0 discriminator 2
 226 002a FB68     		ldr	r3, [r7, #12]
 227 002c 5B68     		ldr	r3, [r3, #4]
 228 002e FB60     		str	r3, [r7, #12]
 229              	.L7:
 230              		.loc 1 171 0 discriminator 1
 231 0030 FB68     		ldr	r3, [r7, #12]
 232 0032 5B68     		ldr	r3, [r3, #4]
 233 0034 1A68     		ldr	r2, [r3, #0]
 234 0036 BB68     		ldr	r3, [r7, #8]
 235 0038 9A42     		cmp	r2, r3
 236 003a F6D9     		bls	.L8
 237              	.L6:
 172:../FreeRTOS/Sources/list.c **** 		{
 173:../FreeRTOS/Sources/list.c **** 			/* There is nothing to do here, we are just iterating to the
 174:../FreeRTOS/Sources/list.c **** 			wanted insertion position. */
 175:../FreeRTOS/Sources/list.c **** 		}
 176:../FreeRTOS/Sources/list.c **** 	}
 177:../FreeRTOS/Sources/list.c **** 
 178:../FreeRTOS/Sources/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 238              		.loc 1 178 0 is_stmt 1
 239 003c FB68     		ldr	r3, [r7, #12]
 240 003e 5A68     		ldr	r2, [r3, #4]
 241 0040 3B68     		ldr	r3, [r7, #0]
 242 0042 5A60     		str	r2, [r3, #4]
 179:../FreeRTOS/Sources/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 243              		.loc 1 179 0
 244 0044 3B68     		ldr	r3, [r7, #0]
 245 0046 5B68     		ldr	r3, [r3, #4]
 246 0048 3A68     		ldr	r2, [r7, #0]
 247 004a 9A60     		str	r2, [r3, #8]
 180:../FreeRTOS/Sources/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 248              		.loc 1 180 0
 249 004c 3B68     		ldr	r3, [r7, #0]
 250 004e FA68     		ldr	r2, [r7, #12]
 251 0050 9A60     		str	r2, [r3, #8]
 181:../FreeRTOS/Sources/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 252              		.loc 1 181 0
 253 0052 FB68     		ldr	r3, [r7, #12]
 254 0054 3A68     		ldr	r2, [r7, #0]
 255 0056 5A60     		str	r2, [r3, #4]
 182:../FreeRTOS/Sources/list.c **** 
 183:../FreeRTOS/Sources/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 184:../FreeRTOS/Sources/list.c **** 	item later. */
 185:../FreeRTOS/Sources/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 256              		.loc 1 185 0
 257 0058 3B68     		ldr	r3, [r7, #0]
 258 005a 7A68     		ldr	r2, [r7, #4]
 259 005c 1A61     		str	r2, [r3, #16]
 186:../FreeRTOS/Sources/list.c **** 
 187:../FreeRTOS/Sources/list.c **** 	( pxList->uxNumberOfItems )++;
 260              		.loc 1 187 0
 261 005e 7B68     		ldr	r3, [r7, #4]
 262 0060 1B68     		ldr	r3, [r3, #0]
 263 0062 03F10102 		add	r2, r3, #1
 264 0066 7B68     		ldr	r3, [r7, #4]
 265 0068 1A60     		str	r2, [r3, #0]
 188:../FreeRTOS/Sources/list.c **** }
 266              		.loc 1 188 0
 267 006a 07F11407 		add	r7, r7, #20
 268 006e BD46     		mov	sp, r7
 269 0070 80BC     		pop	{r7}
 270 0072 7047     		bx	lr
 271              		.cfi_endproc
 272              	.LFE3:
 274              		.section	.text.uxListRemove,"ax",%progbits
 275              		.align	2
 276              		.global	uxListRemove
 277              		.thumb
 278              		.thumb_func
 280              	uxListRemove:
 281              	.LFB4:
 189:../FreeRTOS/Sources/list.c **** /*-----------------------------------------------------------*/
 190:../FreeRTOS/Sources/list.c **** 
 191:../FreeRTOS/Sources/list.c **** unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
 192:../FreeRTOS/Sources/list.c **** {
 282              		.loc 1 192 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 16
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287 0000 80B4     		push	{r7}
 288              	.LCFI12:
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 7, -4
 291 0002 85B0     		sub	sp, sp, #20
 292              	.LCFI13:
 293              		.cfi_def_cfa_offset 24
 294 0004 00AF     		add	r7, sp, #0
 295              	.LCFI14:
 296              		.cfi_def_cfa_register 7
 297 0006 7860     		str	r0, [r7, #4]
 193:../FreeRTOS/Sources/list.c **** xList * pxList;
 194:../FreeRTOS/Sources/list.c **** 
 195:../FreeRTOS/Sources/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 298              		.loc 1 195 0
 299 0008 7B68     		ldr	r3, [r7, #4]
 300 000a 5B68     		ldr	r3, [r3, #4]
 301 000c 7A68     		ldr	r2, [r7, #4]
 302 000e 9268     		ldr	r2, [r2, #8]
 303 0010 9A60     		str	r2, [r3, #8]
 196:../FreeRTOS/Sources/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 304              		.loc 1 196 0
 305 0012 7B68     		ldr	r3, [r7, #4]
 306 0014 9B68     		ldr	r3, [r3, #8]
 307 0016 7A68     		ldr	r2, [r7, #4]
 308 0018 5268     		ldr	r2, [r2, #4]
 309 001a 5A60     		str	r2, [r3, #4]
 197:../FreeRTOS/Sources/list.c **** 
 198:../FreeRTOS/Sources/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 199:../FreeRTOS/Sources/list.c **** 	item. */
 200:../FreeRTOS/Sources/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 310              		.loc 1 200 0
 311 001c 7B68     		ldr	r3, [r7, #4]
 312 001e 1B69     		ldr	r3, [r3, #16]
 313 0020 FB60     		str	r3, [r7, #12]
 201:../FreeRTOS/Sources/list.c **** 
 202:../FreeRTOS/Sources/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 203:../FreeRTOS/Sources/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 314              		.loc 1 203 0
 315 0022 FB68     		ldr	r3, [r7, #12]
 316 0024 5A68     		ldr	r2, [r3, #4]
 317 0026 7B68     		ldr	r3, [r7, #4]
 318 0028 9A42     		cmp	r2, r3
 319 002a 03D1     		bne	.L10
 204:../FreeRTOS/Sources/list.c **** 	{
 205:../FreeRTOS/Sources/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 320              		.loc 1 205 0
 321 002c 7B68     		ldr	r3, [r7, #4]
 322 002e 9A68     		ldr	r2, [r3, #8]
 323 0030 FB68     		ldr	r3, [r7, #12]
 324 0032 5A60     		str	r2, [r3, #4]
 325              	.L10:
 206:../FreeRTOS/Sources/list.c **** 	}
 207:../FreeRTOS/Sources/list.c **** 
 208:../FreeRTOS/Sources/list.c **** 	pxItemToRemove->pvContainer = NULL;
 326              		.loc 1 208 0
 327 0034 7B68     		ldr	r3, [r7, #4]
 328 0036 4FF00002 		mov	r2, #0
 329 003a 1A61     		str	r2, [r3, #16]
 209:../FreeRTOS/Sources/list.c **** 	( pxList->uxNumberOfItems )--;
 330              		.loc 1 209 0
 331 003c FB68     		ldr	r3, [r7, #12]
 332 003e 1B68     		ldr	r3, [r3, #0]
 333 0040 03F1FF32 		add	r2, r3, #-1
 334 0044 FB68     		ldr	r3, [r7, #12]
 335 0046 1A60     		str	r2, [r3, #0]
 210:../FreeRTOS/Sources/list.c **** 
 211:../FreeRTOS/Sources/list.c **** 	return pxList->uxNumberOfItems;
 336              		.loc 1 211 0
 337 0048 FB68     		ldr	r3, [r7, #12]
 338 004a 1B68     		ldr	r3, [r3, #0]
 212:../FreeRTOS/Sources/list.c **** }
 339              		.loc 1 212 0
 340 004c 1846     		mov	r0, r3
 341 004e 07F11407 		add	r7, r7, #20
 342 0052 BD46     		mov	sp, r7
 343 0054 80BC     		pop	{r7}
 344 0056 7047     		bx	lr
 345              		.cfi_endproc
 346              	.LFE4:
 348              		.text
 349              	.Letext0:
 350              		.file 2 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeRTOS/Headers/list.h"
 351              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeRTOS/Headers/portmacro.h
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/ccoHSDnn.s:19     .text.vListInitialise:00000000 $t
     /tmp/ccoHSDnn.s:24     .text.vListInitialise:00000000 vListInitialise
     /tmp/ccoHSDnn.s:75     .text.vListInitialiseItem:00000000 $t
     /tmp/ccoHSDnn.s:80     .text.vListInitialiseItem:00000000 vListInitialiseItem
     /tmp/ccoHSDnn.s:111    .text.vListInsertEnd:00000000 $t
     /tmp/ccoHSDnn.s:116    .text.vListInsertEnd:00000000 vListInsertEnd
     /tmp/ccoHSDnn.s:181    .text.vListInsert:00000000 $t
     /tmp/ccoHSDnn.s:186    .text.vListInsert:00000000 vListInsert
     /tmp/ccoHSDnn.s:275    .text.uxListRemove:00000000 $t
     /tmp/ccoHSDnn.s:280    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f2d2167d278fc96c4a7439609634148
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.50.f5923f1950ced340a337f4676566f65a
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.projdefs.h.76.214f319a5937dae232f0ee2912b07e1d
                           .group:00000000 wm4.FreeRTOSConfig.h.86.73ce2c6afaf7535ca053cc9af81f6119
                           .group:00000000 wm4.portmacro.h.77.8d562aa278cb516c96f7646e8f3849cb
                           .group:00000000 wm4.portable.h.332.e25bf3f97ebf50a0f90736144cb8c3f8
                           .group:00000000 wm4.mpu_wrappers.h.76.3abcfc7ebb6d78909ee0b4ad2f20f282
                           .group:00000000 wm4.FreeRTOS.h.159.741cbf33489b2c951994722716e9692e
                           .group:00000000 wm4.list.h.105.6a6307ce3396638a078c02ff83387dc6

NO UNDEFINED SYMBOLS
