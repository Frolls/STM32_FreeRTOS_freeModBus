   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"portserial.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.vMBPortSerialEnable,"ax",%progbits
  19              		.align	2
  20              		.global	vMBPortSerialEnable
  21              		.thumb
  22              		.thumb_func
  24              	vMBPortSerialEnable:
  25              	.LFB29:
  26              		.file 1 "../FreeModbus/STM32/port/portserial.c"
   1:../FreeModbus/STM32/port/portserial.c **** /*
   2:../FreeModbus/STM32/port/portserial.c ****  * FreeModbus Libary: BARE Port
   3:../FreeModbus/STM32/port/portserial.c ****  * Copyright (C) 2006 Christian Walter <wolti@sil.at>
   4:../FreeModbus/STM32/port/portserial.c ****  *
   5:../FreeModbus/STM32/port/portserial.c ****  * This library is free software; you can redistribute it and/or
   6:../FreeModbus/STM32/port/portserial.c ****  * modify it under the terms of the GNU Lesser General Public
   7:../FreeModbus/STM32/port/portserial.c ****  * License as published by the Free Software Foundation; either
   8:../FreeModbus/STM32/port/portserial.c ****  * version 2.1 of the License, or (at your option) any later version.
   9:../FreeModbus/STM32/port/portserial.c ****  *
  10:../FreeModbus/STM32/port/portserial.c ****  * This library is distributed in the hope that it will be useful,
  11:../FreeModbus/STM32/port/portserial.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:../FreeModbus/STM32/port/portserial.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:../FreeModbus/STM32/port/portserial.c ****  * Lesser General Public License for more details.
  14:../FreeModbus/STM32/port/portserial.c ****  *
  15:../FreeModbus/STM32/port/portserial.c ****  * You should have received a copy of the GNU Lesser General Public
  16:../FreeModbus/STM32/port/portserial.c ****  * License along with this library; if not, write to the Free Software
  17:../FreeModbus/STM32/port/portserial.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  18:../FreeModbus/STM32/port/portserial.c ****  *
  19:../FreeModbus/STM32/port/portserial.c ****  * File: $Id: portserial.c,v 1.1 2006/08/22 21:35:13 wolti Exp $
  20:../FreeModbus/STM32/port/portserial.c ****  */
  21:../FreeModbus/STM32/port/portserial.c **** 
  22:../FreeModbus/STM32/port/portserial.c **** #include "port.h"
  23:../FreeModbus/STM32/port/portserial.c **** 
  24:../FreeModbus/STM32/port/portserial.c **** /* ----------------------- Modbus includes ----------------------------------*/
  25:../FreeModbus/STM32/port/portserial.c **** #include "mb.h"
  26:../FreeModbus/STM32/port/portserial.c **** #include "mbport.h"
  27:../FreeModbus/STM32/port/portserial.c **** 
  28:../FreeModbus/STM32/port/portserial.c **** /* ----------------------- STM32 includes ---------------------------------- */
  29:../FreeModbus/STM32/port/portserial.c **** #include <stm32f10x.h>
  30:../FreeModbus/STM32/port/portserial.c **** #include <stm32f10x_gpio.h>
  31:../FreeModbus/STM32/port/portserial.c **** #include <stm32f10x_usart.h>
  32:../FreeModbus/STM32/port/portserial.c **** 
  33:../FreeModbus/STM32/port/portserial.c **** /* ----------------------- static functions ---------------------------------*/
  34:../FreeModbus/STM32/port/portserial.c **** static void prvvUARTTxReadyISR( void );
  35:../FreeModbus/STM32/port/portserial.c **** static void prvvUARTRxISR( void );
  36:../FreeModbus/STM32/port/portserial.c **** 
  37:../FreeModbus/STM32/port/portserial.c **** /* ----------------------- Start implementation -----------------------------*/
  38:../FreeModbus/STM32/port/portserial.c **** void
  39:../FreeModbus/STM32/port/portserial.c **** vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
  40:../FreeModbus/STM32/port/portserial.c **** {
  27              		.loc 1 40 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 0246     		mov	r2, r0
  43 0008 0B46     		mov	r3, r1
  44 000a FA71     		strb	r2, [r7, #7]
  45 000c BB71     		strb	r3, [r7, #6]
  41:../FreeModbus/STM32/port/portserial.c ****     /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  42:../FreeModbus/STM32/port/portserial.c ****      * transmitter empty interrupts.
  43:../FreeModbus/STM32/port/portserial.c ****      */
  44:../FreeModbus/STM32/port/portserial.c **** 	if(TRUE==xRxEnable)
  46              		.loc 1 44 0
  47 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  48 0010 012B     		cmp	r3, #1
  49 0012 0AD1     		bne	.L2
  45:../FreeModbus/STM32/port/portserial.c **** 		{
  46:../FreeModbus/STM32/port/portserial.c **** 			USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
  50              		.loc 1 46 0
  51 0014 4FF48840 		mov	r0, #17408
  52 0018 C4F20000 		movt	r0, 16384
  53 001c 40F22551 		movw	r1, #1317
  54 0020 4FF00102 		mov	r2, #1
  55 0024 FFF7FEFF 		bl	USART_ITConfig
  56 0028 09E0     		b	.L3
  57              	.L2:
  47:../FreeModbus/STM32/port/portserial.c **** 		}
  48:../FreeModbus/STM32/port/portserial.c **** 		else
  49:../FreeModbus/STM32/port/portserial.c **** 		{
  50:../FreeModbus/STM32/port/portserial.c **** 			USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
  58              		.loc 1 50 0
  59 002a 4FF48840 		mov	r0, #17408
  60 002e C4F20000 		movt	r0, 16384
  61 0032 40F22551 		movw	r1, #1317
  62 0036 4FF00002 		mov	r2, #0
  63 003a FFF7FEFF 		bl	USART_ITConfig
  64              	.L3:
  51:../FreeModbus/STM32/port/portserial.c **** 		}
  52:../FreeModbus/STM32/port/portserial.c **** 
  53:../FreeModbus/STM32/port/portserial.c **** 		if(TRUE==xTxEnable)
  65              		.loc 1 53 0
  66 003e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
  67 0040 012B     		cmp	r3, #1
  68 0042 0AD1     		bne	.L4
  54:../FreeModbus/STM32/port/portserial.c **** 		{
  55:../FreeModbus/STM32/port/portserial.c **** 			USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
  69              		.loc 1 55 0
  70 0044 4FF48840 		mov	r0, #17408
  71 0048 C4F20000 		movt	r0, 16384
  72 004c 40F22771 		movw	r1, #1831
  73 0050 4FF00102 		mov	r2, #1
  74 0054 FFF7FEFF 		bl	USART_ITConfig
  75 0058 09E0     		b	.L1
  76              	.L4:
  56:../FreeModbus/STM32/port/portserial.c **** 		}
  57:../FreeModbus/STM32/port/portserial.c **** 		else
  58:../FreeModbus/STM32/port/portserial.c **** 		{
  59:../FreeModbus/STM32/port/portserial.c **** 		   USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
  77              		.loc 1 59 0
  78 005a 4FF48840 		mov	r0, #17408
  79 005e C4F20000 		movt	r0, 16384
  80 0062 40F22771 		movw	r1, #1831
  81 0066 4FF00002 		mov	r2, #0
  82 006a FFF7FEFF 		bl	USART_ITConfig
  83              	.L1:
  60:../FreeModbus/STM32/port/portserial.c **** 		}
  61:../FreeModbus/STM32/port/portserial.c **** }
  84              		.loc 1 61 0
  85 006e 07F10807 		add	r7, r7, #8
  86 0072 BD46     		mov	sp, r7
  87 0074 80BD     		pop	{r7, pc}
  88              		.cfi_endproc
  89              	.LFE29:
  91 0076 00BF     		.section	.text.xMBPortSerialInit,"ax",%progbits
  92              		.align	2
  93              		.global	xMBPortSerialInit
  94              		.thumb
  95              		.thumb_func
  97              	xMBPortSerialInit:
  98              	.LFB30:
  62:../FreeModbus/STM32/port/portserial.c **** 
  63:../FreeModbus/STM32/port/portserial.c **** BOOL
  64:../FreeModbus/STM32/port/portserial.c **** xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
  65:../FreeModbus/STM32/port/portserial.c **** {
  99              		.loc 1 65 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 40
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103 0000 80B5     		push	{r7, lr}
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 0002 8AB0     		sub	sp, sp, #40
 109              	.LCFI4:
 110              		.cfi_def_cfa_offset 48
 111 0004 00AF     		add	r7, sp, #0
 112              	.LCFI5:
 113              		.cfi_def_cfa_register 7
 114 0006 3960     		str	r1, [r7, #0]
 115 0008 0146     		mov	r1, r0
 116 000a F971     		strb	r1, [r7, #7]
 117 000c BA71     		strb	r2, [r7, #6]
 118 000e 7B71     		strb	r3, [r7, #5]
  66:../FreeModbus/STM32/port/portserial.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
  67:../FreeModbus/STM32/port/portserial.c **** 	USART_InitTypeDef USART_InitStructure;
  68:../FreeModbus/STM32/port/portserial.c **** 	USART_ClockInitTypeDef USART_ClockInitStructure;
  69:../FreeModbus/STM32/port/portserial.c **** 	NVIC_InitTypeDef NVIC_InitStructure;
  70:../FreeModbus/STM32/port/portserial.c **** 
  71:../FreeModbus/STM32/port/portserial.c **** 	//enable bus clocks
  72:../FreeModbus/STM32/port/portserial.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 /*| RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO*/, ENA
 119              		.loc 1 72 0
 120 0010 4FF40030 		mov	r0, #131072
 121 0014 4FF00101 		mov	r1, #1
 122 0018 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  73:../FreeModbus/STM32/port/portserial.c **** 
  74:../FreeModbus/STM32/port/portserial.c **** 	//Set USART2 Tx (PA.02) as AF push-pull
  75:../FreeModbus/STM32/port/portserial.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 123              		.loc 1 75 0
 124 001c 4FF00403 		mov	r3, #4
 125 0020 BB84     		strh	r3, [r7, #36]	@ movhi
  76:../FreeModbus/STM32/port/portserial.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 126              		.loc 1 76 0
 127 0022 4FF01803 		mov	r3, #24
 128 0026 87F82730 		strb	r3, [r7, #39]
  77:../FreeModbus/STM32/port/portserial.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 129              		.loc 1 77 0
 130 002a 4FF00303 		mov	r3, #3
 131 002e 87F82630 		strb	r3, [r7, #38]
  78:../FreeModbus/STM32/port/portserial.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 132              		.loc 1 78 0
 133 0032 07F12403 		add	r3, r7, #36
 134 0036 4FF40060 		mov	r0, #2048
 135 003a C4F20100 		movt	r0, 16385
 136 003e 1946     		mov	r1, r3
 137 0040 FFF7FEFF 		bl	GPIO_Init
  79:../FreeModbus/STM32/port/portserial.c **** 	//Set USART2 Rx (PA.03) as input floating
  80:../FreeModbus/STM32/port/portserial.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 138              		.loc 1 80 0
 139 0044 4FF00803 		mov	r3, #8
 140 0048 BB84     		strh	r3, [r7, #36]	@ movhi
  81:../FreeModbus/STM32/port/portserial.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 141              		.loc 1 81 0
 142 004a 4FF00403 		mov	r3, #4
 143 004e 87F82730 		strb	r3, [r7, #39]
  82:../FreeModbus/STM32/port/portserial.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 144              		.loc 1 82 0
 145 0052 07F12403 		add	r3, r7, #36
 146 0056 4FF40060 		mov	r0, #2048
 147 005a C4F20100 		movt	r0, 16385
 148 005e 1946     		mov	r1, r3
 149 0060 FFF7FEFF 		bl	GPIO_Init
  83:../FreeModbus/STM32/port/portserial.c **** 
  84:../FreeModbus/STM32/port/portserial.c ****     USART_InitStructure.USART_BaudRate = ulBaudRate;
 150              		.loc 1 84 0
 151 0064 3B68     		ldr	r3, [r7, #0]
 152 0066 7B61     		str	r3, [r7, #20]
  85:../FreeModbus/STM32/port/portserial.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 153              		.loc 1 85 0
 154 0068 4FF00003 		mov	r3, #0
 155 006c 3B83     		strh	r3, [r7, #24]	@ movhi
  86:../FreeModbus/STM32/port/portserial.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 156              		.loc 1 86 0
 157 006e 4FF00003 		mov	r3, #0
 158 0072 7B83     		strh	r3, [r7, #26]	@ movhi
  87:../FreeModbus/STM32/port/portserial.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 159              		.loc 1 87 0
 160 0074 4FF00003 		mov	r3, #0
 161 0078 BB83     		strh	r3, [r7, #28]	@ movhi
  88:../FreeModbus/STM32/port/portserial.c **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 162              		.loc 1 88 0
 163 007a 4FF00003 		mov	r3, #0
 164 007e 3B84     		strh	r3, [r7, #32]	@ movhi
  89:../FreeModbus/STM32/port/portserial.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 165              		.loc 1 89 0
 166 0080 4FF00C03 		mov	r3, #12
 167 0084 FB83     		strh	r3, [r7, #30]	@ movhi
  90:../FreeModbus/STM32/port/portserial.c **** 
  91:../FreeModbus/STM32/port/portserial.c **** 	USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;
 168              		.loc 1 91 0
 169 0086 4FF00003 		mov	r3, #0
 170 008a BB81     		strh	r3, [r7, #12]	@ movhi
  92:../FreeModbus/STM32/port/portserial.c **** 	USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;
 171              		.loc 1 92 0
 172 008c 4FF00003 		mov	r3, #0
 173 0090 FB81     		strh	r3, [r7, #14]	@ movhi
  93:../FreeModbus/STM32/port/portserial.c **** 	USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;
 174              		.loc 1 93 0
 175 0092 4FF40073 		mov	r3, #512
 176 0096 3B82     		strh	r3, [r7, #16]	@ movhi
  94:../FreeModbus/STM32/port/portserial.c **** 	USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable;
 177              		.loc 1 94 0
 178 0098 4FF00003 		mov	r3, #0
 179 009c 7B82     		strh	r3, [r7, #18]	@ movhi
  95:../FreeModbus/STM32/port/portserial.c **** 
  96:../FreeModbus/STM32/port/portserial.c **** 	USART_ClockInit(USART1, &USART_ClockInitStructure);
 180              		.loc 1 96 0
 181 009e 07F10C03 		add	r3, r7, #12
 182 00a2 4FF46050 		mov	r0, #14336
 183 00a6 C4F20100 		movt	r0, 16385
 184 00aa 1946     		mov	r1, r3
 185 00ac FFF7FEFF 		bl	USART_ClockInit
  97:../FreeModbus/STM32/port/portserial.c ****     USART_Init(USART2, &USART_InitStructure);
 186              		.loc 1 97 0
 187 00b0 07F11403 		add	r3, r7, #20
 188 00b4 4FF48840 		mov	r0, #17408
 189 00b8 C4F20000 		movt	r0, 16384
 190 00bc 1946     		mov	r1, r3
 191 00be FFF7FEFF 		bl	USART_Init
  98:../FreeModbus/STM32/port/portserial.c **** 
  99:../FreeModbus/STM32/port/portserial.c **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 192              		.loc 1 99 0
 193 00c2 4FF4C060 		mov	r0, #1536
 194 00c6 FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 100:../FreeModbus/STM32/port/portserial.c **** 
 101:../FreeModbus/STM32/port/portserial.c **** 	 /* Enable USART2_IRQn  Channel */
 102:../FreeModbus/STM32/port/portserial.c **** 	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 195              		.loc 1 102 0
 196 00ca 4FF02603 		mov	r3, #38
 197 00ce 3B72     		strb	r3, [r7, #8]
 103:../FreeModbus/STM32/port/portserial.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 198              		.loc 1 103 0
 199 00d0 4FF00003 		mov	r3, #0
 200 00d4 7B72     		strb	r3, [r7, #9]
 104:../FreeModbus/STM32/port/portserial.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 201              		.loc 1 104 0
 202 00d6 4FF00003 		mov	r3, #0
 203 00da BB72     		strb	r3, [r7, #10]
 105:../FreeModbus/STM32/port/portserial.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 204              		.loc 1 105 0
 205 00dc 4FF00103 		mov	r3, #1
 206 00e0 FB72     		strb	r3, [r7, #11]
 106:../FreeModbus/STM32/port/portserial.c **** 	NVIC_Init(&NVIC_InitStructure);
 207              		.loc 1 106 0
 208 00e2 07F10803 		add	r3, r7, #8
 209 00e6 1846     		mov	r0, r3
 210 00e8 FFF7FEFF 		bl	NVIC_Init
 107:../FreeModbus/STM32/port/portserial.c ****     /* ENABLE the USARTx */
 108:../FreeModbus/STM32/port/portserial.c ****     USART_Cmd(USART2, ENABLE);
 211              		.loc 1 108 0
 212 00ec 4FF48840 		mov	r0, #17408
 213 00f0 C4F20000 		movt	r0, 16384
 214 00f4 4FF00101 		mov	r1, #1
 215 00f8 FFF7FEFF 		bl	USART_Cmd
 109:../FreeModbus/STM32/port/portserial.c **** 
 110:../FreeModbus/STM32/port/portserial.c **** 	return TRUE;
 216              		.loc 1 110 0
 217 00fc 4FF00103 		mov	r3, #1
 111:../FreeModbus/STM32/port/portserial.c **** }
 218              		.loc 1 111 0
 219 0100 1846     		mov	r0, r3
 220 0102 07F12807 		add	r7, r7, #40
 221 0106 BD46     		mov	sp, r7
 222 0108 80BD     		pop	{r7, pc}
 223              		.cfi_endproc
 224              	.LFE30:
 226 010a 00BF     		.section	.text.xMBPortSerialPutByte,"ax",%progbits
 227              		.align	2
 228              		.global	xMBPortSerialPutByte
 229              		.thumb
 230              		.thumb_func
 232              	xMBPortSerialPutByte:
 233              	.LFB31:
 112:../FreeModbus/STM32/port/portserial.c **** 
 113:../FreeModbus/STM32/port/portserial.c **** BOOL
 114:../FreeModbus/STM32/port/portserial.c **** xMBPortSerialPutByte( CHAR ucByte )
 115:../FreeModbus/STM32/port/portserial.c **** {
 234              		.loc 1 115 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 8
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238 0000 80B5     		push	{r7, lr}
 239              	.LCFI6:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 7, -8
 242              		.cfi_offset 14, -4
 243 0002 82B0     		sub	sp, sp, #8
 244              	.LCFI7:
 245              		.cfi_def_cfa_offset 16
 246 0004 00AF     		add	r7, sp, #0
 247              	.LCFI8:
 248              		.cfi_def_cfa_register 7
 249 0006 0346     		mov	r3, r0
 250 0008 FB71     		strb	r3, [r7, #7]
 116:../FreeModbus/STM32/port/portserial.c ****     /* Put a byte in the UARTs transmit buffer. This function is called
 117:../FreeModbus/STM32/port/portserial.c ****      * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
 118:../FreeModbus/STM32/port/portserial.c ****      * called. */
 119:../FreeModbus/STM32/port/portserial.c **** 	USART_SendData(USART2, ucByte);
 251              		.loc 1 119 0
 252 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 253 000c 9BB2     		uxth	r3, r3
 254 000e 4FF48840 		mov	r0, #17408
 255 0012 C4F20000 		movt	r0, 16384
 256 0016 1946     		mov	r1, r3
 257 0018 FFF7FEFF 		bl	USART_SendData
 120:../FreeModbus/STM32/port/portserial.c **** 	return TRUE;
 258              		.loc 1 120 0
 259 001c 4FF00103 		mov	r3, #1
 121:../FreeModbus/STM32/port/portserial.c **** }
 260              		.loc 1 121 0
 261 0020 1846     		mov	r0, r3
 262 0022 07F10807 		add	r7, r7, #8
 263 0026 BD46     		mov	sp, r7
 264 0028 80BD     		pop	{r7, pc}
 265              		.cfi_endproc
 266              	.LFE31:
 268 002a 00BF     		.section	.text.xMBPortSerialGetByte,"ax",%progbits
 269              		.align	2
 270              		.global	xMBPortSerialGetByte
 271              		.thumb
 272              		.thumb_func
 274              	xMBPortSerialGetByte:
 275              	.LFB32:
 122:../FreeModbus/STM32/port/portserial.c **** 
 123:../FreeModbus/STM32/port/portserial.c **** BOOL
 124:../FreeModbus/STM32/port/portserial.c **** xMBPortSerialGetByte( CHAR * pucByte )
 125:../FreeModbus/STM32/port/portserial.c **** {
 276              		.loc 1 125 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 8
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280 0000 80B5     		push	{r7, lr}
 281              	.LCFI9:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 82B0     		sub	sp, sp, #8
 286              	.LCFI10:
 287              		.cfi_def_cfa_offset 16
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI11:
 290              		.cfi_def_cfa_register 7
 291 0006 7860     		str	r0, [r7, #4]
 126:../FreeModbus/STM32/port/portserial.c ****     /* Return the byte in the UARTs receive buffer. This function is called
 127:../FreeModbus/STM32/port/portserial.c ****      * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
 128:../FreeModbus/STM32/port/portserial.c ****      */
 129:../FreeModbus/STM32/port/portserial.c **** 	*pucByte = USART_ReceiveData(USART2);
 292              		.loc 1 129 0
 293 0008 4FF48840 		mov	r0, #17408
 294 000c C4F20000 		movt	r0, 16384
 295 0010 FFF7FEFF 		bl	USART_ReceiveData
 296 0014 0346     		mov	r3, r0
 297 0016 DAB2     		uxtb	r2, r3
 298 0018 7B68     		ldr	r3, [r7, #4]
 299 001a 1A70     		strb	r2, [r3, #0]
 130:../FreeModbus/STM32/port/portserial.c **** 	 return TRUE;
 300              		.loc 1 130 0
 301 001c 4FF00103 		mov	r3, #1
 131:../FreeModbus/STM32/port/portserial.c **** }
 302              		.loc 1 131 0
 303 0020 1846     		mov	r0, r3
 304 0022 07F10807 		add	r7, r7, #8
 305 0026 BD46     		mov	sp, r7
 306 0028 80BD     		pop	{r7, pc}
 307              		.cfi_endproc
 308              	.LFE32:
 310 002a 00BF     		.section	.text.prvvUARTTxReadyISR,"ax",%progbits
 311              		.align	2
 312              		.thumb
 313              		.thumb_func
 315              	prvvUARTTxReadyISR:
 316              	.LFB33:
 132:../FreeModbus/STM32/port/portserial.c **** 
 133:../FreeModbus/STM32/port/portserial.c **** /* Create an interrupt handler for the transmit buffer empty interrupt
 134:../FreeModbus/STM32/port/portserial.c ****  * (or an equivalent) for your target processor. This function should then
 135:../FreeModbus/STM32/port/portserial.c ****  * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 136:../FreeModbus/STM32/port/portserial.c ****  * a new character can be sent. The protocol stack will then call 
 137:../FreeModbus/STM32/port/portserial.c ****  * xMBPortSerialPutByte( ) to send the character.
 138:../FreeModbus/STM32/port/portserial.c ****  */
 139:../FreeModbus/STM32/port/portserial.c **** static void prvvUARTTxReadyISR( void )
 140:../FreeModbus/STM32/port/portserial.c **** {
 317              		.loc 1 140 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321 0000 80B5     		push	{r7, lr}
 322              	.LCFI12:
 323              		.cfi_def_cfa_offset 8
 324              		.cfi_offset 7, -8
 325              		.cfi_offset 14, -4
 326 0002 00AF     		add	r7, sp, #0
 327              	.LCFI13:
 328              		.cfi_def_cfa_register 7
 141:../FreeModbus/STM32/port/portserial.c ****     pxMBFrameCBTransmitterEmpty(  );
 329              		.loc 1 141 0
 330 0004 40F20003 		movw	r3, #:lower16:pxMBFrameCBTransmitterEmpty
 331 0008 C0F20003 		movt	r3, #:upper16:pxMBFrameCBTransmitterEmpty
 332 000c 1B68     		ldr	r3, [r3, #0]
 333 000e 9847     		blx	r3
 142:../FreeModbus/STM32/port/portserial.c **** }
 334              		.loc 1 142 0
 335 0010 80BD     		pop	{r7, pc}
 336              		.cfi_endproc
 337              	.LFE33:
 339 0012 00BF     		.section	.text.prvvUARTRxISR,"ax",%progbits
 340              		.align	2
 341              		.thumb
 342              		.thumb_func
 344              	prvvUARTRxISR:
 345              	.LFB34:
 143:../FreeModbus/STM32/port/portserial.c **** 
 144:../FreeModbus/STM32/port/portserial.c **** /* Create an interrupt handler for the receive interrupt for your target
 145:../FreeModbus/STM32/port/portserial.c ****  * processor. This function should then call pxMBFrameCBByteReceived( ). The
 146:../FreeModbus/STM32/port/portserial.c ****  * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 147:../FreeModbus/STM32/port/portserial.c ****  * character.
 148:../FreeModbus/STM32/port/portserial.c ****  */
 149:../FreeModbus/STM32/port/portserial.c **** static void prvvUARTRxISR( void )
 150:../FreeModbus/STM32/port/portserial.c **** {
 346              		.loc 1 150 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              	.LCFI14:
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 7, -8
 354              		.cfi_offset 14, -4
 355 0002 00AF     		add	r7, sp, #0
 356              	.LCFI15:
 357              		.cfi_def_cfa_register 7
 151:../FreeModbus/STM32/port/portserial.c ****     pxMBFrameCBByteReceived(  );
 358              		.loc 1 151 0
 359 0004 40F20003 		movw	r3, #:lower16:pxMBFrameCBByteReceived
 360 0008 C0F20003 		movt	r3, #:upper16:pxMBFrameCBByteReceived
 361 000c 1B68     		ldr	r3, [r3, #0]
 362 000e 9847     		blx	r3
 152:../FreeModbus/STM32/port/portserial.c **** }
 363              		.loc 1 152 0
 364 0010 80BD     		pop	{r7, pc}
 365              		.cfi_endproc
 366              	.LFE34:
 368 0012 00BF     		.text
 369              	.Letext0:
 370              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 371              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/stm32f10x.h"
 372              		.file 4 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/misc
 373              		.file 5 "../FreeModbus/STM32/port/port.h"
 374              		.file 6 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeModbus/modbus/include/mb
 375              		.file 7 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 376              		.file 8 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 377              		.file 9 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 portserial.c
     /tmp/ccYOAiSX.s:19     .text.vMBPortSerialEnable:00000000 $t
     /tmp/ccYOAiSX.s:24     .text.vMBPortSerialEnable:00000000 vMBPortSerialEnable
     /tmp/ccYOAiSX.s:92     .text.xMBPortSerialInit:00000000 $t
     /tmp/ccYOAiSX.s:97     .text.xMBPortSerialInit:00000000 xMBPortSerialInit
     /tmp/ccYOAiSX.s:227    .text.xMBPortSerialPutByte:00000000 $t
     /tmp/ccYOAiSX.s:232    .text.xMBPortSerialPutByte:00000000 xMBPortSerialPutByte
     /tmp/ccYOAiSX.s:269    .text.xMBPortSerialGetByte:00000000 $t
     /tmp/ccYOAiSX.s:274    .text.xMBPortSerialGetByte:00000000 xMBPortSerialGetByte
     /tmp/ccYOAiSX.s:311    .text.prvvUARTTxReadyISR:00000000 $t
     /tmp/ccYOAiSX.s:315    .text.prvvUARTTxReadyISR:00000000 prvvUARTTxReadyISR
     /tmp/ccYOAiSX.s:340    .text.prvvUARTRxISR:00000000 $t
     /tmp/ccYOAiSX.s:344    .text.prvvUARTRxISR:00000000 prvvUARTRxISR
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f2d2167d278fc96c4a7439609634148
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.assert.h.11.f9b6feb3ce5083ec030f5895cd9c4353
                           .group:00000000 wm4.stm32f10x.h.51.643d5396a325ce00fe75ea490db6ba44
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.524.bbf52ca28bdf7ef267115429e0387679
                           .group:00000000 wm4.stm32f10x_conf.h.9.3838e46d9de2be24c7ed73296c5ae8b5
                           .group:00000000 wm4.stm32f10x.h.8267.abe69e40cf43ea9673cb5d472d4b6964
                           .group:00000000 wm4.stm32f10x_tim.h.25.039a15552706aae650954590356e6d7a
                           .group:00000000 wm4.stm32f10x_rcc.h.25.ce2a81c1048696f722ee0c144eb62674
                           .group:00000000 wm4.misc.h.25.424b617a460d2f3de12ba0450a07cec2
                           .group:00000000 wm4.port.h.32.2852faaa22d6eb1bafbc0c1d982e4177
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6

UNDEFINED SYMBOLS
USART_ITConfig
RCC_APB1PeriphClockCmd
GPIO_Init
USART_ClockInit
USART_Init
NVIC_PriorityGroupConfig
NVIC_Init
USART_Cmd
USART_SendData
USART_ReceiveData
pxMBFrameCBTransmitterEmpty
pxMBFrameCBByteReceived
