   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"demo.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.data.usRegInputStart,"aw",%progbits
  19              		.align	1
  22              	usRegInputStart:
  23 0000 E803     		.short	1000
  24              		.section	.bss.usRegInputBuf,"aw",%nobits
  25              		.align	2
  28              	usRegInputBuf:
  29 0000 00000000 		.space	8
  29      00000000 
  30              		.section	.text.eMBRegInputCB,"ax",%progbits
  31              		.align	2
  32              		.global	eMBRegInputCB
  33              		.thumb
  34              		.thumb_func
  36              	eMBRegInputCB:
  37              	.LFB29:
  38              		.file 1 "../FreeModbus/STM32/demo.c"
   1:../FreeModbus/STM32/demo.c **** /*
   2:../FreeModbus/STM32/demo.c ****  * FreeModbus Libary: BARE Demo Application
   3:../FreeModbus/STM32/demo.c ****  * Copyright (C) 2006 Christian Walter <wolti@sil.at>
   4:../FreeModbus/STM32/demo.c ****  *
   5:../FreeModbus/STM32/demo.c ****  * This program is free software; you can redistribute it and/or modify
   6:../FreeModbus/STM32/demo.c ****  * it under the terms of the GNU General Public License as published by
   7:../FreeModbus/STM32/demo.c ****  * the Free Software Foundation; either version 2 of the License, or
   8:../FreeModbus/STM32/demo.c ****  * (at your option) any later version.
   9:../FreeModbus/STM32/demo.c ****  *
  10:../FreeModbus/STM32/demo.c ****  * This program is distributed in the hope that it will be useful,
  11:../FreeModbus/STM32/demo.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:../FreeModbus/STM32/demo.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:../FreeModbus/STM32/demo.c ****  * GNU General Public License for more details.
  14:../FreeModbus/STM32/demo.c ****  *
  15:../FreeModbus/STM32/demo.c ****  * You should have received a copy of the GNU General Public License
  16:../FreeModbus/STM32/demo.c ****  * along with this program; if not, write to the Free Software
  17:../FreeModbus/STM32/demo.c ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  18:../FreeModbus/STM32/demo.c ****  *
  19:../FreeModbus/STM32/demo.c ****  * File: $Id: demo.c,v 1.1 2006/08/22 21:35:13 wolti Exp $
  20:../FreeModbus/STM32/demo.c ****  */
  21:../FreeModbus/STM32/demo.c **** 
  22:../FreeModbus/STM32/demo.c **** /* ----------------------- Modbus includes ----------------------------------*/
  23:../FreeModbus/STM32/demo.c **** #include "mb.h"
  24:../FreeModbus/STM32/demo.c **** #include "mbport.h"
  25:../FreeModbus/STM32/demo.c **** 
  26:../FreeModbus/STM32/demo.c **** /* ----------------------- Defines ------------------------------------------*/
  27:../FreeModbus/STM32/demo.c **** #define REG_INPUT_START 1000
  28:../FreeModbus/STM32/demo.c **** #define REG_INPUT_NREGS 4
  29:../FreeModbus/STM32/demo.c **** 
  30:../FreeModbus/STM32/demo.c **** /* ----------------------- Static variables ---------------------------------*/
  31:../FreeModbus/STM32/demo.c **** static USHORT   usRegInputStart = REG_INPUT_START;
  32:../FreeModbus/STM32/demo.c **** static USHORT   usRegInputBuf[REG_INPUT_NREGS];
  33:../FreeModbus/STM32/demo.c **** 
  34:../FreeModbus/STM32/demo.c **** /* ----------------------- Start implementation -----------------------------*/
  35:../FreeModbus/STM32/demo.c **** /*
  36:../FreeModbus/STM32/demo.c **** int
  37:../FreeModbus/STM32/demo.c **** main( void )
  38:../FreeModbus/STM32/demo.c **** {
  39:../FreeModbus/STM32/demo.c ****     eMBErrorCode    eStatus;
  40:../FreeModbus/STM32/demo.c **** 
  41:../FreeModbus/STM32/demo.c ****     eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_EVEN );
  42:../FreeModbus/STM32/demo.c **** 
  43:../FreeModbus/STM32/demo.c ****     // Enable the Modbus Protocol Stack.
  44:../FreeModbus/STM32/demo.c ****     eStatus = eMBEnable(  );
  45:../FreeModbus/STM32/demo.c **** 
  46:../FreeModbus/STM32/demo.c ****     for( ;; )
  47:../FreeModbus/STM32/demo.c ****     {
  48:../FreeModbus/STM32/demo.c ****         ( void )eMBPoll(  );
  49:../FreeModbus/STM32/demo.c **** 
  50:../FreeModbus/STM32/demo.c ****         // Here we simply count the number of poll cycles.
  51:../FreeModbus/STM32/demo.c ****         usRegInputBuf[0]++;
  52:../FreeModbus/STM32/demo.c ****     }
  53:../FreeModbus/STM32/demo.c **** }
  54:../FreeModbus/STM32/demo.c **** */
  55:../FreeModbus/STM32/demo.c **** eMBErrorCode
  56:../FreeModbus/STM32/demo.c **** eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
  57:../FreeModbus/STM32/demo.c **** {
  39              		.loc 1 57 0
  40              		.cfi_startproc
  41              		@ args = 0, pretend = 0, frame = 16
  42              		@ frame_needed = 1, uses_anonymous_args = 0
  43              		@ link register save eliminated.
  44 0000 80B4     		push	{r7}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 4
  47              		.cfi_offset 7, -4
  48 0002 85B0     		sub	sp, sp, #20
  49              	.LCFI1:
  50              		.cfi_def_cfa_offset 24
  51 0004 00AF     		add	r7, sp, #0
  52              	.LCFI2:
  53              		.cfi_def_cfa_register 7
  54 0006 7860     		str	r0, [r7, #4]
  55 0008 1346     		mov	r3, r2
  56 000a 0A46     		mov	r2, r1	@ movhi
  57 000c 7A80     		strh	r2, [r7, #2]	@ movhi
  58 000e 3B80     		strh	r3, [r7, #0]	@ movhi
  58:../FreeModbus/STM32/demo.c ****     eMBErrorCode    eStatus = MB_ENOERR;
  59              		.loc 1 58 0
  60 0010 4FF00003 		mov	r3, #0
  61 0014 FB73     		strb	r3, [r7, #15]
  59:../FreeModbus/STM32/demo.c ****     int             iRegIndex;
  60:../FreeModbus/STM32/demo.c **** 
  61:../FreeModbus/STM32/demo.c ****     if( ( usAddress >= REG_INPUT_START )
  62              		.loc 1 61 0
  63 0016 7A88     		ldrh	r2, [r7, #2]
  64 0018 40F2E733 		movw	r3, #999
  65 001c 9A42     		cmp	r2, r3
  66 001e 39D9     		bls	.L2
  62:../FreeModbus/STM32/demo.c ****         && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
  67              		.loc 1 62 0
  68 0020 7A88     		ldrh	r2, [r7, #2]
  69 0022 3B88     		ldrh	r3, [r7, #0]
  70 0024 D318     		adds	r3, r2, r3
  71 0026 B3F57B7F 		cmp	r3, #1004
  72 002a 33DC     		bgt	.L2
  63:../FreeModbus/STM32/demo.c ****     {
  64:../FreeModbus/STM32/demo.c ****         iRegIndex = ( int )( usAddress - usRegInputStart );
  73              		.loc 1 64 0
  74 002c 7A88     		ldrh	r2, [r7, #2]
  75 002e 40F20003 		movw	r3, #:lower16:usRegInputStart
  76 0032 C0F20003 		movt	r3, #:upper16:usRegInputStart
  77 0036 1B88     		ldrh	r3, [r3, #0]
  78 0038 D31A     		subs	r3, r2, r3
  79 003a BB60     		str	r3, [r7, #8]
  65:../FreeModbus/STM32/demo.c ****         while( usNRegs > 0 )
  80              		.loc 1 65 0
  81 003c 26E0     		b	.L3
  82              	.L4:
  66:../FreeModbus/STM32/demo.c ****         {
  67:../FreeModbus/STM32/demo.c ****             *pucRegBuffer++ =
  68:../FreeModbus/STM32/demo.c ****                 ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
  83              		.loc 1 68 0
  84 003e 40F20003 		movw	r3, #:lower16:usRegInputBuf
  85 0042 C0F20003 		movt	r3, #:upper16:usRegInputBuf
  86 0046 BA68     		ldr	r2, [r7, #8]
  87 0048 33F81230 		ldrh	r3, [r3, r2, lsl #1]
  88 004c 4FEA1323 		lsr	r3, r3, #8
  89 0050 9BB2     		uxth	r3, r3
  90 0052 DAB2     		uxtb	r2, r3
  67:../FreeModbus/STM32/demo.c ****             *pucRegBuffer++ =
  91              		.loc 1 67 0
  92 0054 7B68     		ldr	r3, [r7, #4]
  93 0056 1A70     		strb	r2, [r3, #0]
  94 0058 7B68     		ldr	r3, [r7, #4]
  95 005a 03F10103 		add	r3, r3, #1
  96 005e 7B60     		str	r3, [r7, #4]
  69:../FreeModbus/STM32/demo.c ****             *pucRegBuffer++ =
  70:../FreeModbus/STM32/demo.c ****                 ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
  97              		.loc 1 70 0
  98 0060 40F20003 		movw	r3, #:lower16:usRegInputBuf
  99 0064 C0F20003 		movt	r3, #:upper16:usRegInputBuf
 100 0068 BA68     		ldr	r2, [r7, #8]
 101 006a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 102 006e DAB2     		uxtb	r2, r3
  69:../FreeModbus/STM32/demo.c ****             *pucRegBuffer++ =
 103              		.loc 1 69 0
 104 0070 7B68     		ldr	r3, [r7, #4]
 105 0072 1A70     		strb	r2, [r3, #0]
 106 0074 7B68     		ldr	r3, [r7, #4]
 107 0076 03F10103 		add	r3, r3, #1
 108 007a 7B60     		str	r3, [r7, #4]
  71:../FreeModbus/STM32/demo.c ****             iRegIndex++;
 109              		.loc 1 71 0
 110 007c BB68     		ldr	r3, [r7, #8]
 111 007e 03F10103 		add	r3, r3, #1
 112 0082 BB60     		str	r3, [r7, #8]
  72:../FreeModbus/STM32/demo.c ****             usNRegs--;
 113              		.loc 1 72 0
 114 0084 3B88     		ldrh	r3, [r7, #0]	@ movhi
 115 0086 03F1FF33 		add	r3, r3, #-1
 116 008a 3B80     		strh	r3, [r7, #0]	@ movhi
 117              	.L3:
  65:../FreeModbus/STM32/demo.c ****         while( usNRegs > 0 )
 118              		.loc 1 65 0 discriminator 1
 119 008c 3B88     		ldrh	r3, [r7, #0]
 120 008e 002B     		cmp	r3, #0
 121 0090 D5D1     		bne	.L4
  61:../FreeModbus/STM32/demo.c ****     if( ( usAddress >= REG_INPUT_START )
 122              		.loc 1 61 0
 123 0092 02E0     		b	.L5
 124              	.L2:
  73:../FreeModbus/STM32/demo.c ****         }
  74:../FreeModbus/STM32/demo.c ****     }
  75:../FreeModbus/STM32/demo.c ****     else
  76:../FreeModbus/STM32/demo.c ****     {
  77:../FreeModbus/STM32/demo.c ****         eStatus = MB_ENOREG;
 125              		.loc 1 77 0
 126 0094 4FF00103 		mov	r3, #1
 127 0098 FB73     		strb	r3, [r7, #15]
 128              	.L5:
  78:../FreeModbus/STM32/demo.c ****     }
  79:../FreeModbus/STM32/demo.c **** 
  80:../FreeModbus/STM32/demo.c ****     return eStatus;
 129              		.loc 1 80 0
 130 009a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  81:../FreeModbus/STM32/demo.c **** }
 131              		.loc 1 81 0
 132 009c 1846     		mov	r0, r3
 133 009e 07F11407 		add	r7, r7, #20
 134 00a2 BD46     		mov	sp, r7
 135 00a4 80BC     		pop	{r7}
 136 00a6 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE29:
 140              		.section	.text.eMBRegHoldingCB,"ax",%progbits
 141              		.align	2
 142              		.global	eMBRegHoldingCB
 143              		.thumb
 144              		.thumb_func
 146              	eMBRegHoldingCB:
 147              	.LFB30:
  82:../FreeModbus/STM32/demo.c **** 
  83:../FreeModbus/STM32/demo.c **** eMBErrorCode
  84:../FreeModbus/STM32/demo.c **** eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
  85:../FreeModbus/STM32/demo.c ****                  eMBRegisterMode eMode )
  86:../FreeModbus/STM32/demo.c **** {
 148              		.loc 1 86 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 16
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 80B4     		push	{r7}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 4
 156              		.cfi_offset 7, -4
 157 0002 85B0     		sub	sp, sp, #20
 158              	.LCFI4:
 159              		.cfi_def_cfa_offset 24
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI5:
 162              		.cfi_def_cfa_register 7
 163 0006 F860     		str	r0, [r7, #12]
 164 0008 7981     		strh	r1, [r7, #10]	@ movhi
 165 000a 3A81     		strh	r2, [r7, #8]	@ movhi
 166 000c FB71     		strb	r3, [r7, #7]
  87:../FreeModbus/STM32/demo.c ****     return MB_ENOREG;
 167              		.loc 1 87 0
 168 000e 4FF00103 		mov	r3, #1
  88:../FreeModbus/STM32/demo.c **** }
 169              		.loc 1 88 0
 170 0012 1846     		mov	r0, r3
 171 0014 07F11407 		add	r7, r7, #20
 172 0018 BD46     		mov	sp, r7
 173 001a 80BC     		pop	{r7}
 174 001c 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE30:
 178 001e 00BF     		.section	.text.eMBRegCoilsCB,"ax",%progbits
 179              		.align	2
 180              		.global	eMBRegCoilsCB
 181              		.thumb
 182              		.thumb_func
 184              	eMBRegCoilsCB:
 185              	.LFB31:
  89:../FreeModbus/STM32/demo.c **** 
  90:../FreeModbus/STM32/demo.c **** 
  91:../FreeModbus/STM32/demo.c **** eMBErrorCode
  92:../FreeModbus/STM32/demo.c **** eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
  93:../FreeModbus/STM32/demo.c ****                eMBRegisterMode eMode )
  94:../FreeModbus/STM32/demo.c **** {
 186              		.loc 1 94 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 16
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 0000 80B4     		push	{r7}
 192              	.LCFI6:
 193              		.cfi_def_cfa_offset 4
 194              		.cfi_offset 7, -4
 195 0002 85B0     		sub	sp, sp, #20
 196              	.LCFI7:
 197              		.cfi_def_cfa_offset 24
 198 0004 00AF     		add	r7, sp, #0
 199              	.LCFI8:
 200              		.cfi_def_cfa_register 7
 201 0006 F860     		str	r0, [r7, #12]
 202 0008 7981     		strh	r1, [r7, #10]	@ movhi
 203 000a 3A81     		strh	r2, [r7, #8]	@ movhi
 204 000c FB71     		strb	r3, [r7, #7]
  95:../FreeModbus/STM32/demo.c ****     return MB_ENOREG;
 205              		.loc 1 95 0
 206 000e 4FF00103 		mov	r3, #1
  96:../FreeModbus/STM32/demo.c **** }
 207              		.loc 1 96 0
 208 0012 1846     		mov	r0, r3
 209 0014 07F11407 		add	r7, r7, #20
 210 0018 BD46     		mov	sp, r7
 211 001a 80BC     		pop	{r7}
 212 001c 7047     		bx	lr
 213              		.cfi_endproc
 214              	.LFE31:
 216 001e 00BF     		.section	.text.eMBRegDiscreteCB,"ax",%progbits
 217              		.align	2
 218              		.global	eMBRegDiscreteCB
 219              		.thumb
 220              		.thumb_func
 222              	eMBRegDiscreteCB:
 223              	.LFB32:
  97:../FreeModbus/STM32/demo.c **** 
  98:../FreeModbus/STM32/demo.c **** eMBErrorCode
  99:../FreeModbus/STM32/demo.c **** eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
 100:../FreeModbus/STM32/demo.c **** {
 224              		.loc 1 100 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 1, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229 0000 80B4     		push	{r7}
 230              	.LCFI9:
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 83B0     		sub	sp, sp, #12
 234              	.LCFI10:
 235              		.cfi_def_cfa_offset 16
 236 0004 00AF     		add	r7, sp, #0
 237              	.LCFI11:
 238              		.cfi_def_cfa_register 7
 239 0006 7860     		str	r0, [r7, #4]
 240 0008 1346     		mov	r3, r2
 241 000a 0A46     		mov	r2, r1	@ movhi
 242 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 243 000e 3B80     		strh	r3, [r7, #0]	@ movhi
 101:../FreeModbus/STM32/demo.c ****     return MB_ENOREG;
 244              		.loc 1 101 0
 245 0010 4FF00103 		mov	r3, #1
 102:../FreeModbus/STM32/demo.c **** }
 246              		.loc 1 102 0
 247 0014 1846     		mov	r0, r3
 248 0016 07F10C07 		add	r7, r7, #12
 249 001a BD46     		mov	sp, r7
 250 001c 80BC     		pop	{r7}
 251 001e 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE32:
 255              		.text
 256              	.Letext0:
 257              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 258              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeModbus/STM32/port/port.h
 259              		.file 4 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeModbus/modbus/include/mb
 260              		.file 5 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 demo.c
     /tmp/ccucDQ1h.s:19     .data.usRegInputStart:00000000 $d
     /tmp/ccucDQ1h.s:22     .data.usRegInputStart:00000000 usRegInputStart
     /tmp/ccucDQ1h.s:25     .bss.usRegInputBuf:00000000 $d
     /tmp/ccucDQ1h.s:28     .bss.usRegInputBuf:00000000 usRegInputBuf
     /tmp/ccucDQ1h.s:31     .text.eMBRegInputCB:00000000 $t
     /tmp/ccucDQ1h.s:36     .text.eMBRegInputCB:00000000 eMBRegInputCB
     /tmp/ccucDQ1h.s:141    .text.eMBRegHoldingCB:00000000 $t
     /tmp/ccucDQ1h.s:146    .text.eMBRegHoldingCB:00000000 eMBRegHoldingCB
     /tmp/ccucDQ1h.s:179    .text.eMBRegCoilsCB:00000000 $t
     /tmp/ccucDQ1h.s:184    .text.eMBRegCoilsCB:00000000 eMBRegCoilsCB
     /tmp/ccucDQ1h.s:217    .text.eMBRegDiscreteCB:00000000 $t
     /tmp/ccucDQ1h.s:222    .text.eMBRegDiscreteCB:00000000 eMBRegDiscreteCB
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
