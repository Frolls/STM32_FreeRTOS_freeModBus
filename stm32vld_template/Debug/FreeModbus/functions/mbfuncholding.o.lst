   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mbfuncholding.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.eMBFuncWriteHoldingRegister,"ax",%progbits
  19              		.align	2
  20              		.global	eMBFuncWriteHoldingRegister
  21              		.thumb
  22              		.thumb_func
  24              	eMBFuncWriteHoldingRegister:
  25              	.LFB29:
  26              		.file 1 "../FreeModbus/functions/mbfuncholding.c"
   1:../FreeModbus/functions/mbfuncholding.c **** /* 
   2:../FreeModbus/functions/mbfuncholding.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:../FreeModbus/functions/mbfuncholding.c ****  * Copyright (c) 2006 Christian Walter <wolti@sil.at>
   4:../FreeModbus/functions/mbfuncholding.c ****  * All rights reserved.
   5:../FreeModbus/functions/mbfuncholding.c ****  *
   6:../FreeModbus/functions/mbfuncholding.c ****  * Redistribution and use in source and binary forms, with or without
   7:../FreeModbus/functions/mbfuncholding.c ****  * modification, are permitted provided that the following conditions
   8:../FreeModbus/functions/mbfuncholding.c ****  * are met:
   9:../FreeModbus/functions/mbfuncholding.c ****  * 1. Redistributions of source code must retain the above copyright
  10:../FreeModbus/functions/mbfuncholding.c ****  *    notice, this list of conditions and the following disclaimer.
  11:../FreeModbus/functions/mbfuncholding.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:../FreeModbus/functions/mbfuncholding.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:../FreeModbus/functions/mbfuncholding.c ****  *    documentation and/or other materials provided with the distribution.
  14:../FreeModbus/functions/mbfuncholding.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:../FreeModbus/functions/mbfuncholding.c ****  *    derived from this software without specific prior written permission.
  16:../FreeModbus/functions/mbfuncholding.c ****  *
  17:../FreeModbus/functions/mbfuncholding.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:../FreeModbus/functions/mbfuncholding.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:../FreeModbus/functions/mbfuncholding.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:../FreeModbus/functions/mbfuncholding.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:../FreeModbus/functions/mbfuncholding.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:../FreeModbus/functions/mbfuncholding.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:../FreeModbus/functions/mbfuncholding.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:../FreeModbus/functions/mbfuncholding.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:../FreeModbus/functions/mbfuncholding.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:../FreeModbus/functions/mbfuncholding.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:../FreeModbus/functions/mbfuncholding.c ****  *
  28:../FreeModbus/functions/mbfuncholding.c ****  * File: $Id: mbfuncholding.c,v 1.12 2007/02/18 23:48:22 wolti Exp $
  29:../FreeModbus/functions/mbfuncholding.c ****  */
  30:../FreeModbus/functions/mbfuncholding.c **** 
  31:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- System includes ----------------------------------*/
  32:../FreeModbus/functions/mbfuncholding.c **** #include "stdlib.h"
  33:../FreeModbus/functions/mbfuncholding.c **** #include "string.h"
  34:../FreeModbus/functions/mbfuncholding.c **** 
  35:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Platform includes --------------------------------*/
  36:../FreeModbus/functions/mbfuncholding.c **** #include "port.h"
  37:../FreeModbus/functions/mbfuncholding.c **** 
  38:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Modbus includes ----------------------------------*/
  39:../FreeModbus/functions/mbfuncholding.c **** #include "mb.h"
  40:../FreeModbus/functions/mbfuncholding.c **** #include "mbframe.h"
  41:../FreeModbus/functions/mbfuncholding.c **** #include "mbproto.h"
  42:../FreeModbus/functions/mbfuncholding.c **** #include "mbconfig.h"
  43:../FreeModbus/functions/mbfuncholding.c **** 
  44:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Defines ------------------------------------------*/
  45:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_ADDR_OFF               ( MB_PDU_DATA_OFF + 0)
  46:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_REGCNT_OFF             ( MB_PDU_DATA_OFF + 2 )
  47:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_SIZE                   ( 4 )
  48:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_REGCNT_MAX             ( 0x007D )
  49:../FreeModbus/functions/mbfuncholding.c **** 
  50:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_ADDR_OFF              ( MB_PDU_DATA_OFF + 0)
  51:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_VALUE_OFF             ( MB_PDU_DATA_OFF + 2 )
  52:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_SIZE                  ( 4 )
  53:../FreeModbus/functions/mbfuncholding.c **** 
  54:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_ADDR_OFF          ( MB_PDU_DATA_OFF + 0 )
  55:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
  56:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF       ( MB_PDU_DATA_OFF + 4 )
  57:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_VALUES_OFF        ( MB_PDU_DATA_OFF + 5 )
  58:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_SIZE_MIN          ( 5 )
  59:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX        ( 0x0078 )
  60:../FreeModbus/functions/mbfuncholding.c **** 
  61:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_READ_ADDR_OFF     ( MB_PDU_DATA_OFF + 0 )
  62:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF   ( MB_PDU_DATA_OFF + 2 )
  63:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF    ( MB_PDU_DATA_OFF + 4 )
  64:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF  ( MB_PDU_DATA_OFF + 6 )
  65:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_BYTECNT_OFF       ( MB_PDU_DATA_OFF + 8 )
  66:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF  ( MB_PDU_DATA_OFF + 9 )
  67:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_SIZE_MIN          ( 9 )
  68:../FreeModbus/functions/mbfuncholding.c **** 
  69:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Static functions ---------------------------------*/
  70:../FreeModbus/functions/mbfuncholding.c **** eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
  71:../FreeModbus/functions/mbfuncholding.c **** 
  72:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Start implementation -----------------------------*/
  73:../FreeModbus/functions/mbfuncholding.c **** 
  74:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
  75:../FreeModbus/functions/mbfuncholding.c **** 
  76:../FreeModbus/functions/mbfuncholding.c **** eMBException
  77:../FreeModbus/functions/mbfuncholding.c **** eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
  78:../FreeModbus/functions/mbfuncholding.c **** {
  27              		.loc 1 78 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43 0008 3960     		str	r1, [r7, #0]
  79:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegAddress;
  80:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
  44              		.loc 1 80 0
  45 000a 4FF00003 		mov	r3, #0
  46 000e FB73     		strb	r3, [r7, #15]
  81:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
  82:../FreeModbus/functions/mbfuncholding.c **** 
  83:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
  47              		.loc 1 83 0
  48 0010 3B68     		ldr	r3, [r7, #0]
  49 0012 1B88     		ldrh	r3, [r3, #0]
  50 0014 052B     		cmp	r3, #5
  51 0016 2AD1     		bne	.L2
  84:../FreeModbus/functions/mbfuncholding.c ****     {
  85:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
  52              		.loc 1 85 0
  53 0018 7B68     		ldr	r3, [r7, #4]
  54 001a 03F10103 		add	r3, r3, #1
  55 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  56 0020 4FEA0323 		lsl	r3, r3, #8
  57 0024 BB81     		strh	r3, [r7, #12]	@ movhi
  86:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
  58              		.loc 1 86 0
  59 0026 7B68     		ldr	r3, [r7, #4]
  60 0028 03F10203 		add	r3, r3, #2
  61 002c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  62 002e 1A46     		mov	r2, r3
  63 0030 BB89     		ldrh	r3, [r7, #12]	@ movhi
  64 0032 1343     		orrs	r3, r3, r2
  65 0034 BB81     		strh	r3, [r7, #12]	@ movhi
  87:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress++;
  66              		.loc 1 87 0
  67 0036 BB89     		ldrh	r3, [r7, #12]	@ movhi
  68 0038 03F10103 		add	r3, r3, #1
  69 003c BB81     		strh	r3, [r7, #12]	@ movhi
  88:../FreeModbus/functions/mbfuncholding.c **** 
  89:../FreeModbus/functions/mbfuncholding.c ****         /* Make callback to update the value. */
  90:../FreeModbus/functions/mbfuncholding.c ****         eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
  70              		.loc 1 90 0
  71 003e 7B68     		ldr	r3, [r7, #4]
  72 0040 03F10302 		add	r2, r3, #3
  73 0044 BB89     		ldrh	r3, [r7, #12]
  74 0046 1046     		mov	r0, r2
  75 0048 1946     		mov	r1, r3
  76 004a 4FF00102 		mov	r2, #1
  77 004e 4FF00103 		mov	r3, #1
  78 0052 FFF7FEFF 		bl	eMBRegHoldingCB
  79 0056 0346     		mov	r3, r0
  80 0058 FB72     		strb	r3, [r7, #11]
  91:../FreeModbus/functions/mbfuncholding.c ****                                       usRegAddress, 1, MB_REG_WRITE );
  92:../FreeModbus/functions/mbfuncholding.c **** 
  93:../FreeModbus/functions/mbfuncholding.c ****         /* If an error occured convert it into a Modbus exception. */
  94:../FreeModbus/functions/mbfuncholding.c ****         if( eRegStatus != MB_ENOERR )
  81              		.loc 1 94 0
  82 005a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
  83 005c 002B     		cmp	r3, #0
  84 005e 09D0     		beq	.L3
  95:../FreeModbus/functions/mbfuncholding.c ****         {
  96:../FreeModbus/functions/mbfuncholding.c ****             eStatus = prveMBError2Exception( eRegStatus );
  85              		.loc 1 96 0
  86 0060 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
  87 0062 1846     		mov	r0, r3
  88 0064 FFF7FEFF 		bl	prveMBError2Exception
  89 0068 0346     		mov	r3, r0
  90 006a FB73     		strb	r3, [r7, #15]
  91 006c 02E0     		b	.L3
  92              	.L2:
  97:../FreeModbus/functions/mbfuncholding.c ****         }
  98:../FreeModbus/functions/mbfuncholding.c ****     }
  99:../FreeModbus/functions/mbfuncholding.c ****     else
 100:../FreeModbus/functions/mbfuncholding.c ****     {
 101:../FreeModbus/functions/mbfuncholding.c ****         /* Can't be a valid request because the length is incorrect. */
 102:../FreeModbus/functions/mbfuncholding.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
  93              		.loc 1 102 0
  94 006e 4FF00303 		mov	r3, #3
  95 0072 FB73     		strb	r3, [r7, #15]
  96              	.L3:
 103:../FreeModbus/functions/mbfuncholding.c ****     }
 104:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
  97              		.loc 1 104 0
  98 0074 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 105:../FreeModbus/functions/mbfuncholding.c **** }
  99              		.loc 1 105 0
 100 0076 1846     		mov	r0, r3
 101 0078 07F11007 		add	r7, r7, #16
 102 007c BD46     		mov	sp, r7
 103 007e 80BD     		pop	{r7, pc}
 104              		.cfi_endproc
 105              	.LFE29:
 107              		.section	.text.eMBFuncWriteMultipleHoldingRegister,"ax",%progbits
 108              		.align	2
 109              		.global	eMBFuncWriteMultipleHoldingRegister
 110              		.thumb
 111              		.thumb_func
 113              	eMBFuncWriteMultipleHoldingRegister:
 114              	.LFB30:
 106:../FreeModbus/functions/mbfuncholding.c **** #endif
 107:../FreeModbus/functions/mbfuncholding.c **** 
 108:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
 109:../FreeModbus/functions/mbfuncholding.c **** eMBException
 110:../FreeModbus/functions/mbfuncholding.c **** eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
 111:../FreeModbus/functions/mbfuncholding.c **** {
 115              		.loc 1 111 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 16
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119 0000 80B5     		push	{r7, lr}
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 7, -8
 123              		.cfi_offset 14, -4
 124 0002 84B0     		sub	sp, sp, #16
 125              	.LCFI4:
 126              		.cfi_def_cfa_offset 24
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI5:
 129              		.cfi_def_cfa_register 7
 130 0006 7860     		str	r0, [r7, #4]
 131 0008 3960     		str	r1, [r7, #0]
 112:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegAddress;
 113:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegCount;
 114:../FreeModbus/functions/mbfuncholding.c ****     UCHAR           ucRegByteCount;
 115:../FreeModbus/functions/mbfuncholding.c **** 
 116:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
 132              		.loc 1 116 0
 133 000a 4FF00003 		mov	r3, #0
 134 000e FB73     		strb	r3, [r7, #15]
 117:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
 118:../FreeModbus/functions/mbfuncholding.c **** 
 119:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 135              		.loc 1 119 0
 136 0010 3B68     		ldr	r3, [r7, #0]
 137 0012 1B88     		ldrh	r3, [r3, #0]
 138 0014 052B     		cmp	r3, #5
 139 0016 54D9     		bls	.L6
 120:../FreeModbus/functions/mbfuncholding.c ****     {
 121:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 140              		.loc 1 121 0
 141 0018 7B68     		ldr	r3, [r7, #4]
 142 001a 03F10103 		add	r3, r3, #1
 143 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 144 0020 4FEA0323 		lsl	r3, r3, #8
 145 0024 BB81     		strh	r3, [r7, #12]	@ movhi
 122:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 146              		.loc 1 122 0
 147 0026 7B68     		ldr	r3, [r7, #4]
 148 0028 03F10203 		add	r3, r3, #2
 149 002c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 150 002e 1A46     		mov	r2, r3
 151 0030 BB89     		ldrh	r3, [r7, #12]	@ movhi
 152 0032 1343     		orrs	r3, r3, r2
 153 0034 BB81     		strh	r3, [r7, #12]	@ movhi
 123:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress++;
 154              		.loc 1 123 0
 155 0036 BB89     		ldrh	r3, [r7, #12]	@ movhi
 156 0038 03F10103 		add	r3, r3, #1
 157 003c BB81     		strh	r3, [r7, #12]	@ movhi
 124:../FreeModbus/functions/mbfuncholding.c **** 
 125:../FreeModbus/functions/mbfuncholding.c ****         usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 158              		.loc 1 125 0
 159 003e 7B68     		ldr	r3, [r7, #4]
 160 0040 03F10303 		add	r3, r3, #3
 161 0044 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 162 0046 4FEA0323 		lsl	r3, r3, #8
 163 004a 7B81     		strh	r3, [r7, #10]	@ movhi
 126:../FreeModbus/functions/mbfuncholding.c ****         usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 164              		.loc 1 126 0
 165 004c 7B68     		ldr	r3, [r7, #4]
 166 004e 03F10403 		add	r3, r3, #4
 167 0052 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 168 0054 1A46     		mov	r2, r3
 169 0056 7B89     		ldrh	r3, [r7, #10]	@ movhi
 170 0058 1343     		orrs	r3, r3, r2
 171 005a 7B81     		strh	r3, [r7, #10]	@ movhi
 127:../FreeModbus/functions/mbfuncholding.c **** 
 128:../FreeModbus/functions/mbfuncholding.c ****         ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 172              		.loc 1 128 0
 173 005c 7B68     		ldr	r3, [r7, #4]
 174 005e 5B79     		ldrb	r3, [r3, #5]
 175 0060 7B72     		strb	r3, [r7, #9]
 129:../FreeModbus/functions/mbfuncholding.c **** 
 130:../FreeModbus/functions/mbfuncholding.c ****         if( ( usRegCount >= 1 ) &&
 176              		.loc 1 130 0
 177 0062 7B89     		ldrh	r3, [r7, #10]
 178 0064 002B     		cmp	r3, #0
 179 0066 28D0     		beq	.L7
 180              		.loc 1 130 0 is_stmt 0 discriminator 1
 181 0068 7B89     		ldrh	r3, [r7, #10]
 182 006a 782B     		cmp	r3, #120
 183 006c 25D8     		bhi	.L7
 131:../FreeModbus/functions/mbfuncholding.c ****             ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 132:../FreeModbus/functions/mbfuncholding.c ****             ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 184              		.loc 1 132 0 is_stmt 1
 185 006e 7B89     		ldrh	r3, [r7, #10]	@ movhi
 186 0070 DBB2     		uxtb	r3, r3
 187 0072 4FEA4303 		lsl	r3, r3, #1
 188 0076 DBB2     		uxtb	r3, r3
 131:../FreeModbus/functions/mbfuncholding.c ****             ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 189              		.loc 1 131 0
 190 0078 7A7A     		ldrb	r2, [r7, #9]	@ zero_extendqisi2
 191 007a 9A42     		cmp	r2, r3
 192 007c 1DD1     		bne	.L7
 133:../FreeModbus/functions/mbfuncholding.c ****         {
 134:../FreeModbus/functions/mbfuncholding.c ****             /* Make callback to update the register values. */
 135:../FreeModbus/functions/mbfuncholding.c ****             eRegStatus =
 136:../FreeModbus/functions/mbfuncholding.c ****                 eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 193              		.loc 1 136 0
 194 007e 7B68     		ldr	r3, [r7, #4]
 195 0080 03F10601 		add	r1, r3, #6
 135:../FreeModbus/functions/mbfuncholding.c ****             eRegStatus =
 196              		.loc 1 135 0
 197 0084 BA89     		ldrh	r2, [r7, #12]
 198 0086 7B89     		ldrh	r3, [r7, #10]
 199 0088 0846     		mov	r0, r1
 200 008a 1146     		mov	r1, r2
 201 008c 1A46     		mov	r2, r3
 202 008e 4FF00103 		mov	r3, #1
 203 0092 FFF7FEFF 		bl	eMBRegHoldingCB
 204 0096 0346     		mov	r3, r0
 205 0098 3B72     		strb	r3, [r7, #8]
 137:../FreeModbus/functions/mbfuncholding.c ****                                  usRegAddress, usRegCount, MB_REG_WRITE );
 138:../FreeModbus/functions/mbfuncholding.c **** 
 139:../FreeModbus/functions/mbfuncholding.c ****             /* If an error occured convert it into a Modbus exception. */
 140:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 206              		.loc 1 140 0
 207 009a 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 208 009c 002B     		cmp	r3, #0
 209 009e 06D0     		beq	.L8
 141:../FreeModbus/functions/mbfuncholding.c ****             {
 142:../FreeModbus/functions/mbfuncholding.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 210              		.loc 1 142 0
 211 00a0 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 212 00a2 1846     		mov	r0, r3
 213 00a4 FFF7FEFF 		bl	prveMBError2Exception
 214 00a8 0346     		mov	r3, r0
 215 00aa FB73     		strb	r3, [r7, #15]
 140:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 216              		.loc 1 140 0
 217 00ac 0CE0     		b	.L11
 218              	.L8:
 143:../FreeModbus/functions/mbfuncholding.c ****             }
 144:../FreeModbus/functions/mbfuncholding.c ****             else
 145:../FreeModbus/functions/mbfuncholding.c ****             {
 146:../FreeModbus/functions/mbfuncholding.c ****                 /* The response contains the function code, the starting
 147:../FreeModbus/functions/mbfuncholding.c ****                  * address and the quantity of registers. We reuse the
 148:../FreeModbus/functions/mbfuncholding.c ****                  * old values in the buffer because they are still valid.
 149:../FreeModbus/functions/mbfuncholding.c ****                  */
 150:../FreeModbus/functions/mbfuncholding.c ****                 *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 219              		.loc 1 150 0
 220 00ae 3B68     		ldr	r3, [r7, #0]
 221 00b0 4FF00502 		mov	r2, #5
 222 00b4 1A80     		strh	r2, [r3, #0]	@ movhi
 140:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 223              		.loc 1 140 0
 224 00b6 00BF     		nop
 225 00b8 06E0     		b	.L11
 226              	.L7:
 151:../FreeModbus/functions/mbfuncholding.c ****             }
 152:../FreeModbus/functions/mbfuncholding.c ****         }
 153:../FreeModbus/functions/mbfuncholding.c ****         else
 154:../FreeModbus/functions/mbfuncholding.c ****         {
 155:../FreeModbus/functions/mbfuncholding.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 227              		.loc 1 155 0
 228 00ba 4FF00303 		mov	r3, #3
 229 00be FB73     		strb	r3, [r7, #15]
 230 00c0 02E0     		b	.L11
 231              	.L6:
 156:../FreeModbus/functions/mbfuncholding.c ****         }
 157:../FreeModbus/functions/mbfuncholding.c ****     }
 158:../FreeModbus/functions/mbfuncholding.c ****     else
 159:../FreeModbus/functions/mbfuncholding.c ****     {
 160:../FreeModbus/functions/mbfuncholding.c ****         /* Can't be a valid request because the length is incorrect. */
 161:../FreeModbus/functions/mbfuncholding.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 232              		.loc 1 161 0
 233 00c2 4FF00303 		mov	r3, #3
 234 00c6 FB73     		strb	r3, [r7, #15]
 235              	.L11:
 162:../FreeModbus/functions/mbfuncholding.c ****     }
 163:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
 236              		.loc 1 163 0
 237 00c8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 164:../FreeModbus/functions/mbfuncholding.c **** }
 238              		.loc 1 164 0
 239 00ca 1846     		mov	r0, r3
 240 00cc 07F11007 		add	r7, r7, #16
 241 00d0 BD46     		mov	sp, r7
 242 00d2 80BD     		pop	{r7, pc}
 243              		.cfi_endproc
 244              	.LFE30:
 246              		.section	.text.eMBFuncReadHoldingRegister,"ax",%progbits
 247              		.align	2
 248              		.global	eMBFuncReadHoldingRegister
 249              		.thumb
 250              		.thumb_func
 252              	eMBFuncReadHoldingRegister:
 253              	.LFB31:
 165:../FreeModbus/functions/mbfuncholding.c **** #endif
 166:../FreeModbus/functions/mbfuncholding.c **** 
 167:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_READ_HOLDING_ENABLED > 0
 168:../FreeModbus/functions/mbfuncholding.c **** 
 169:../FreeModbus/functions/mbfuncholding.c **** eMBException
 170:../FreeModbus/functions/mbfuncholding.c **** eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
 171:../FreeModbus/functions/mbfuncholding.c **** {
 254              		.loc 1 171 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 24
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258 0000 80B5     		push	{r7, lr}
 259              	.LCFI6:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 86B0     		sub	sp, sp, #24
 264              	.LCFI7:
 265              		.cfi_def_cfa_offset 32
 266 0004 00AF     		add	r7, sp, #0
 267              	.LCFI8:
 268              		.cfi_def_cfa_register 7
 269 0006 7860     		str	r0, [r7, #4]
 270 0008 3960     		str	r1, [r7, #0]
 172:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegAddress;
 173:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegCount;
 174:../FreeModbus/functions/mbfuncholding.c ****     UCHAR          *pucFrameCur;
 175:../FreeModbus/functions/mbfuncholding.c **** 
 176:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
 271              		.loc 1 176 0
 272 000a 4FF00003 		mov	r3, #0
 273 000e FB75     		strb	r3, [r7, #23]
 177:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
 178:../FreeModbus/functions/mbfuncholding.c **** 
 179:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 274              		.loc 1 179 0
 275 0010 3B68     		ldr	r3, [r7, #0]
 276 0012 1B88     		ldrh	r3, [r3, #0]
 277 0014 052B     		cmp	r3, #5
 278 0016 70D1     		bne	.L14
 180:../FreeModbus/functions/mbfuncholding.c ****     {
 181:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 279              		.loc 1 181 0
 280 0018 7B68     		ldr	r3, [r7, #4]
 281 001a 03F10103 		add	r3, r3, #1
 282 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 283 0020 4FEA0323 		lsl	r3, r3, #8
 284 0024 BB82     		strh	r3, [r7, #20]	@ movhi
 182:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 285              		.loc 1 182 0
 286 0026 7B68     		ldr	r3, [r7, #4]
 287 0028 03F10203 		add	r3, r3, #2
 288 002c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 289 002e 1A46     		mov	r2, r3
 290 0030 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 291 0032 1343     		orrs	r3, r3, r2
 292 0034 BB82     		strh	r3, [r7, #20]	@ movhi
 183:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress++;
 293              		.loc 1 183 0
 294 0036 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 295 0038 03F10103 		add	r3, r3, #1
 296 003c BB82     		strh	r3, [r7, #20]	@ movhi
 184:../FreeModbus/functions/mbfuncholding.c **** 
 185:../FreeModbus/functions/mbfuncholding.c ****         usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 297              		.loc 1 185 0
 298 003e 7B68     		ldr	r3, [r7, #4]
 299 0040 03F10303 		add	r3, r3, #3
 300 0044 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 301 0046 4FEA0323 		lsl	r3, r3, #8
 302 004a 7B82     		strh	r3, [r7, #18]	@ movhi
 186:../FreeModbus/functions/mbfuncholding.c ****         usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 303              		.loc 1 186 0
 304 004c 7B68     		ldr	r3, [r7, #4]
 305 004e 03F10403 		add	r3, r3, #4
 306 0052 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 307 0054 7B82     		strh	r3, [r7, #18]	@ movhi
 187:../FreeModbus/functions/mbfuncholding.c **** 
 188:../FreeModbus/functions/mbfuncholding.c ****         /* Check if the number of registers to read is valid. If not
 189:../FreeModbus/functions/mbfuncholding.c ****          * return Modbus illegal data value exception. 
 190:../FreeModbus/functions/mbfuncholding.c ****          */
 191:../FreeModbus/functions/mbfuncholding.c ****         if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 308              		.loc 1 191 0
 309 0056 7B8A     		ldrh	r3, [r7, #18]
 310 0058 002B     		cmp	r3, #0
 311 005a 4AD0     		beq	.L15
 312              		.loc 1 191 0 is_stmt 0 discriminator 1
 313 005c 7B8A     		ldrh	r3, [r7, #18]
 314 005e 7D2B     		cmp	r3, #125
 315 0060 47D8     		bhi	.L15
 192:../FreeModbus/functions/mbfuncholding.c ****         {
 193:../FreeModbus/functions/mbfuncholding.c ****             /* Set the current PDU data pointer to the beginning. */
 194:../FreeModbus/functions/mbfuncholding.c ****             pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 316              		.loc 1 194 0 is_stmt 1
 317 0062 7B68     		ldr	r3, [r7, #4]
 318 0064 FB60     		str	r3, [r7, #12]
 195:../FreeModbus/functions/mbfuncholding.c ****             *usLen = MB_PDU_FUNC_OFF;
 319              		.loc 1 195 0
 320 0066 3B68     		ldr	r3, [r7, #0]
 321 0068 4FF00002 		mov	r2, #0
 322 006c 1A80     		strh	r2, [r3, #0]	@ movhi
 196:../FreeModbus/functions/mbfuncholding.c **** 
 197:../FreeModbus/functions/mbfuncholding.c ****             /* First byte contains the function code. */
 198:../FreeModbus/functions/mbfuncholding.c ****             *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 323              		.loc 1 198 0
 324 006e FB68     		ldr	r3, [r7, #12]
 325 0070 4FF00302 		mov	r2, #3
 326 0074 1A70     		strb	r2, [r3, #0]
 327 0076 FB68     		ldr	r3, [r7, #12]
 328 0078 03F10103 		add	r3, r3, #1
 329 007c FB60     		str	r3, [r7, #12]
 199:../FreeModbus/functions/mbfuncholding.c ****             *usLen += 1;
 330              		.loc 1 199 0
 331 007e 3B68     		ldr	r3, [r7, #0]
 332 0080 1B88     		ldrh	r3, [r3, #0]
 333 0082 03F10103 		add	r3, r3, #1
 334 0086 9AB2     		uxth	r2, r3
 335 0088 3B68     		ldr	r3, [r7, #0]
 336 008a 1A80     		strh	r2, [r3, #0]	@ movhi
 200:../FreeModbus/functions/mbfuncholding.c **** 
 201:../FreeModbus/functions/mbfuncholding.c ****             /* Second byte in the response contain the number of bytes. */
 202:../FreeModbus/functions/mbfuncholding.c ****             *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 337              		.loc 1 202 0
 338 008c 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 339 008e DBB2     		uxtb	r3, r3
 340 0090 4FEA4303 		lsl	r3, r3, #1
 341 0094 DAB2     		uxtb	r2, r3
 342 0096 FB68     		ldr	r3, [r7, #12]
 343 0098 1A70     		strb	r2, [r3, #0]
 344 009a FB68     		ldr	r3, [r7, #12]
 345 009c 03F10103 		add	r3, r3, #1
 346 00a0 FB60     		str	r3, [r7, #12]
 203:../FreeModbus/functions/mbfuncholding.c ****             *usLen += 1;
 347              		.loc 1 203 0
 348 00a2 3B68     		ldr	r3, [r7, #0]
 349 00a4 1B88     		ldrh	r3, [r3, #0]
 350 00a6 03F10103 		add	r3, r3, #1
 351 00aa 9AB2     		uxth	r2, r3
 352 00ac 3B68     		ldr	r3, [r7, #0]
 353 00ae 1A80     		strh	r2, [r3, #0]	@ movhi
 204:../FreeModbus/functions/mbfuncholding.c **** 
 205:../FreeModbus/functions/mbfuncholding.c ****             /* Make callback to fill the buffer. */
 206:../FreeModbus/functions/mbfuncholding.c ****             eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 354              		.loc 1 206 0
 355 00b0 BA8A     		ldrh	r2, [r7, #20]
 356 00b2 7B8A     		ldrh	r3, [r7, #18]
 357 00b4 F868     		ldr	r0, [r7, #12]
 358 00b6 1146     		mov	r1, r2
 359 00b8 1A46     		mov	r2, r3
 360 00ba 4FF00003 		mov	r3, #0
 361 00be FFF7FEFF 		bl	eMBRegHoldingCB
 362 00c2 0346     		mov	r3, r0
 363 00c4 FB72     		strb	r3, [r7, #11]
 207:../FreeModbus/functions/mbfuncholding.c ****             /* If an error occured convert it into a Modbus exception. */
 208:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 364              		.loc 1 208 0
 365 00c6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 366 00c8 002B     		cmp	r3, #0
 367 00ca 06D0     		beq	.L16
 209:../FreeModbus/functions/mbfuncholding.c ****             {
 210:../FreeModbus/functions/mbfuncholding.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 368              		.loc 1 210 0
 369 00cc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 370 00ce 1846     		mov	r0, r3
 371 00d0 FFF7FEFF 		bl	prveMBError2Exception
 372 00d4 0346     		mov	r3, r0
 373 00d6 FB75     		strb	r3, [r7, #23]
 208:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 374              		.loc 1 208 0
 375 00d8 12E0     		b	.L19
 376              	.L16:
 211:../FreeModbus/functions/mbfuncholding.c ****             }
 212:../FreeModbus/functions/mbfuncholding.c ****             else
 213:../FreeModbus/functions/mbfuncholding.c ****             {
 214:../FreeModbus/functions/mbfuncholding.c ****                 *usLen += usRegCount * 2;
 377              		.loc 1 214 0
 378 00da 3B68     		ldr	r3, [r7, #0]
 379 00dc 1A88     		ldrh	r2, [r3, #0]
 380 00de 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 381 00e0 4FEA4303 		lsl	r3, r3, #1
 382 00e4 9BB2     		uxth	r3, r3
 383 00e6 D318     		adds	r3, r2, r3
 384 00e8 9AB2     		uxth	r2, r3
 385 00ea 3B68     		ldr	r3, [r7, #0]
 386 00ec 1A80     		strh	r2, [r3, #0]	@ movhi
 208:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 387              		.loc 1 208 0
 388 00ee 00BF     		nop
 389 00f0 06E0     		b	.L19
 390              	.L15:
 215:../FreeModbus/functions/mbfuncholding.c ****             }
 216:../FreeModbus/functions/mbfuncholding.c ****         }
 217:../FreeModbus/functions/mbfuncholding.c ****         else
 218:../FreeModbus/functions/mbfuncholding.c ****         {
 219:../FreeModbus/functions/mbfuncholding.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 391              		.loc 1 219 0
 392 00f2 4FF00303 		mov	r3, #3
 393 00f6 FB75     		strb	r3, [r7, #23]
 394 00f8 02E0     		b	.L19
 395              	.L14:
 220:../FreeModbus/functions/mbfuncholding.c ****         }
 221:../FreeModbus/functions/mbfuncholding.c ****     }
 222:../FreeModbus/functions/mbfuncholding.c ****     else
 223:../FreeModbus/functions/mbfuncholding.c ****     {
 224:../FreeModbus/functions/mbfuncholding.c ****         /* Can't be a valid request because the length is incorrect. */
 225:../FreeModbus/functions/mbfuncholding.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 396              		.loc 1 225 0
 397 00fa 4FF00303 		mov	r3, #3
 398 00fe FB75     		strb	r3, [r7, #23]
 399              	.L19:
 226:../FreeModbus/functions/mbfuncholding.c ****     }
 227:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
 400              		.loc 1 227 0
 401 0100 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 228:../FreeModbus/functions/mbfuncholding.c **** }
 402              		.loc 1 228 0
 403 0102 1846     		mov	r0, r3
 404 0104 07F11807 		add	r7, r7, #24
 405 0108 BD46     		mov	sp, r7
 406 010a 80BD     		pop	{r7, pc}
 407              		.cfi_endproc
 408              	.LFE31:
 410              		.section	.text.eMBFuncReadWriteMultipleHoldingRegister,"ax",%progbits
 411              		.align	2
 412              		.global	eMBFuncReadWriteMultipleHoldingRegister
 413              		.thumb
 414              		.thumb_func
 416              	eMBFuncReadWriteMultipleHoldingRegister:
 417              	.LFB32:
 229:../FreeModbus/functions/mbfuncholding.c **** 
 230:../FreeModbus/functions/mbfuncholding.c **** #endif
 231:../FreeModbus/functions/mbfuncholding.c **** 
 232:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
 233:../FreeModbus/functions/mbfuncholding.c **** 
 234:../FreeModbus/functions/mbfuncholding.c **** eMBException
 235:../FreeModbus/functions/mbfuncholding.c **** eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
 236:../FreeModbus/functions/mbfuncholding.c **** {
 418              		.loc 1 236 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 24
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}
 423              	.LCFI9:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 0002 86B0     		sub	sp, sp, #24
 428              	.LCFI10:
 429              		.cfi_def_cfa_offset 32
 430 0004 00AF     		add	r7, sp, #0
 431              	.LCFI11:
 432              		.cfi_def_cfa_register 7
 433 0006 7860     		str	r0, [r7, #4]
 434 0008 3960     		str	r1, [r7, #0]
 237:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegReadAddress;
 238:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegReadCount;
 239:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegWriteAddress;
 240:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegWriteCount;
 241:../FreeModbus/functions/mbfuncholding.c ****     UCHAR           ucRegWriteByteCount;
 242:../FreeModbus/functions/mbfuncholding.c ****     UCHAR          *pucFrameCur;
 243:../FreeModbus/functions/mbfuncholding.c **** 
 244:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
 435              		.loc 1 244 0
 436 000a 4FF00003 		mov	r3, #0
 437 000e FB75     		strb	r3, [r7, #23]
 245:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
 246:../FreeModbus/functions/mbfuncholding.c **** 
 247:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 438              		.loc 1 247 0
 439 0010 3B68     		ldr	r3, [r7, #0]
 440 0012 1B88     		ldrh	r3, [r3, #0]
 441 0014 092B     		cmp	r3, #9
 442 0016 40F2B680 		bls	.L22
 248:../FreeModbus/functions/mbfuncholding.c ****     {
 249:../FreeModbus/functions/mbfuncholding.c ****         usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 443              		.loc 1 249 0
 444 001a 7B68     		ldr	r3, [r7, #4]
 445 001c 03F10103 		add	r3, r3, #1
 446 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 447 0022 4FEA0323 		lsl	r3, r3, #8
 448 0026 BB82     		strh	r3, [r7, #20]	@ movhi
 250:../FreeModbus/functions/mbfuncholding.c ****         usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 449              		.loc 1 250 0
 450 0028 7B68     		ldr	r3, [r7, #4]
 451 002a 03F10203 		add	r3, r3, #2
 452 002e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 453 0030 1A46     		mov	r2, r3
 454 0032 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 455 0034 1343     		orrs	r3, r3, r2
 456 0036 BB82     		strh	r3, [r7, #20]	@ movhi
 251:../FreeModbus/functions/mbfuncholding.c ****         usRegReadAddress++;
 457              		.loc 1 251 0
 458 0038 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 459 003a 03F10103 		add	r3, r3, #1
 460 003e BB82     		strh	r3, [r7, #20]	@ movhi
 252:../FreeModbus/functions/mbfuncholding.c **** 
 253:../FreeModbus/functions/mbfuncholding.c ****         usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 461              		.loc 1 253 0
 462 0040 7B68     		ldr	r3, [r7, #4]
 463 0042 03F10303 		add	r3, r3, #3
 464 0046 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 465 0048 4FEA0323 		lsl	r3, r3, #8
 466 004c 7B82     		strh	r3, [r7, #18]	@ movhi
 254:../FreeModbus/functions/mbfuncholding.c ****         usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 467              		.loc 1 254 0
 468 004e 7B68     		ldr	r3, [r7, #4]
 469 0050 03F10403 		add	r3, r3, #4
 470 0054 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 471 0056 1A46     		mov	r2, r3
 472 0058 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 473 005a 1343     		orrs	r3, r3, r2
 474 005c 7B82     		strh	r3, [r7, #18]	@ movhi
 255:../FreeModbus/functions/mbfuncholding.c **** 
 256:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 475              		.loc 1 256 0
 476 005e 7B68     		ldr	r3, [r7, #4]
 477 0060 03F10503 		add	r3, r3, #5
 478 0064 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 479 0066 4FEA0323 		lsl	r3, r3, #8
 480 006a 3B82     		strh	r3, [r7, #16]	@ movhi
 257:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 481              		.loc 1 257 0
 482 006c 7B68     		ldr	r3, [r7, #4]
 483 006e 03F10603 		add	r3, r3, #6
 484 0072 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 485 0074 1A46     		mov	r2, r3
 486 0076 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 487 0078 1343     		orrs	r3, r3, r2
 488 007a 3B82     		strh	r3, [r7, #16]	@ movhi
 258:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteAddress++;
 489              		.loc 1 258 0
 490 007c 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 491 007e 03F10103 		add	r3, r3, #1
 492 0082 3B82     		strh	r3, [r7, #16]	@ movhi
 259:../FreeModbus/functions/mbfuncholding.c **** 
 260:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 493              		.loc 1 260 0
 494 0084 7B68     		ldr	r3, [r7, #4]
 495 0086 03F10703 		add	r3, r3, #7
 496 008a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 497 008c 4FEA0323 		lsl	r3, r3, #8
 498 0090 FB81     		strh	r3, [r7, #14]	@ movhi
 261:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 499              		.loc 1 261 0
 500 0092 7B68     		ldr	r3, [r7, #4]
 501 0094 03F10803 		add	r3, r3, #8
 502 0098 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 503 009a 1A46     		mov	r2, r3
 504 009c FB89     		ldrh	r3, [r7, #14]	@ movhi
 505 009e 1343     		orrs	r3, r3, r2
 506 00a0 FB81     		strh	r3, [r7, #14]	@ movhi
 262:../FreeModbus/functions/mbfuncholding.c **** 
 263:../FreeModbus/functions/mbfuncholding.c ****         ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 507              		.loc 1 263 0
 508 00a2 7B68     		ldr	r3, [r7, #4]
 509 00a4 5B7A     		ldrb	r3, [r3, #9]
 510 00a6 7B73     		strb	r3, [r7, #13]
 264:../FreeModbus/functions/mbfuncholding.c **** 
 265:../FreeModbus/functions/mbfuncholding.c ****         if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 511              		.loc 1 265 0
 512 00a8 7B8A     		ldrh	r3, [r7, #18]
 513 00aa 002B     		cmp	r3, #0
 514 00ac 68D0     		beq	.L23
 515              		.loc 1 265 0 is_stmt 0 discriminator 1
 516 00ae 7B8A     		ldrh	r3, [r7, #18]
 517 00b0 7D2B     		cmp	r3, #125
 518 00b2 65D8     		bhi	.L23
 519 00b4 FB89     		ldrh	r3, [r7, #14]
 520 00b6 002B     		cmp	r3, #0
 521 00b8 62D0     		beq	.L23
 266:../FreeModbus/functions/mbfuncholding.c ****             ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 522              		.loc 1 266 0 is_stmt 1
 523 00ba FB89     		ldrh	r3, [r7, #14]
 524 00bc 792B     		cmp	r3, #121
 525 00be 5FD8     		bhi	.L23
 267:../FreeModbus/functions/mbfuncholding.c ****             ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 526              		.loc 1 267 0 discriminator 1
 527 00c0 FB89     		ldrh	r3, [r7, #14]
 528 00c2 4FEA4302 		lsl	r2, r3, #1
 529 00c6 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 266:../FreeModbus/functions/mbfuncholding.c ****             ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 530              		.loc 1 266 0 discriminator 1
 531 00c8 9A42     		cmp	r2, r3
 532 00ca 59D1     		bne	.L23
 268:../FreeModbus/functions/mbfuncholding.c ****         {
 269:../FreeModbus/functions/mbfuncholding.c ****             /* Make callback to update the register values. */
 270:../FreeModbus/functions/mbfuncholding.c ****             eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 533              		.loc 1 270 0
 534 00cc 7B68     		ldr	r3, [r7, #4]
 535 00ce 03F10A01 		add	r1, r3, #10
 536 00d2 3A8A     		ldrh	r2, [r7, #16]
 537 00d4 FB89     		ldrh	r3, [r7, #14]
 538 00d6 0846     		mov	r0, r1
 539 00d8 1146     		mov	r1, r2
 540 00da 1A46     		mov	r2, r3
 541 00dc 4FF00103 		mov	r3, #1
 542 00e0 FFF7FEFF 		bl	eMBRegHoldingCB
 543 00e4 0346     		mov	r3, r0
 544 00e6 BB75     		strb	r3, [r7, #22]
 271:../FreeModbus/functions/mbfuncholding.c ****                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
 272:../FreeModbus/functions/mbfuncholding.c **** 
 273:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus == MB_ENOERR )
 545              		.loc 1 273 0
 546 00e8 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 547 00ea 002B     		cmp	r3, #0
 548 00ec 3ED1     		bne	.L24
 274:../FreeModbus/functions/mbfuncholding.c ****             {
 275:../FreeModbus/functions/mbfuncholding.c ****                 /* Set the current PDU data pointer to the beginning. */
 276:../FreeModbus/functions/mbfuncholding.c ****                 pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 549              		.loc 1 276 0
 550 00ee 7B68     		ldr	r3, [r7, #4]
 551 00f0 BB60     		str	r3, [r7, #8]
 277:../FreeModbus/functions/mbfuncholding.c ****                 *usLen = MB_PDU_FUNC_OFF;
 552              		.loc 1 277 0
 553 00f2 3B68     		ldr	r3, [r7, #0]
 554 00f4 4FF00002 		mov	r2, #0
 555 00f8 1A80     		strh	r2, [r3, #0]	@ movhi
 278:../FreeModbus/functions/mbfuncholding.c **** 
 279:../FreeModbus/functions/mbfuncholding.c ****                 /* First byte contains the function code. */
 280:../FreeModbus/functions/mbfuncholding.c ****                 *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 556              		.loc 1 280 0
 557 00fa BB68     		ldr	r3, [r7, #8]
 558 00fc 4FF01702 		mov	r2, #23
 559 0100 1A70     		strb	r2, [r3, #0]
 560 0102 BB68     		ldr	r3, [r7, #8]
 561 0104 03F10103 		add	r3, r3, #1
 562 0108 BB60     		str	r3, [r7, #8]
 281:../FreeModbus/functions/mbfuncholding.c ****                 *usLen += 1;
 563              		.loc 1 281 0
 564 010a 3B68     		ldr	r3, [r7, #0]
 565 010c 1B88     		ldrh	r3, [r3, #0]
 566 010e 03F10103 		add	r3, r3, #1
 567 0112 9AB2     		uxth	r2, r3
 568 0114 3B68     		ldr	r3, [r7, #0]
 569 0116 1A80     		strh	r2, [r3, #0]	@ movhi
 282:../FreeModbus/functions/mbfuncholding.c **** 
 283:../FreeModbus/functions/mbfuncholding.c ****                 /* Second byte in the response contain the number of bytes. */
 284:../FreeModbus/functions/mbfuncholding.c ****                 *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 570              		.loc 1 284 0
 571 0118 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 572 011a DBB2     		uxtb	r3, r3
 573 011c 4FEA4303 		lsl	r3, r3, #1
 574 0120 DAB2     		uxtb	r2, r3
 575 0122 BB68     		ldr	r3, [r7, #8]
 576 0124 1A70     		strb	r2, [r3, #0]
 577 0126 BB68     		ldr	r3, [r7, #8]
 578 0128 03F10103 		add	r3, r3, #1
 579 012c BB60     		str	r3, [r7, #8]
 285:../FreeModbus/functions/mbfuncholding.c ****                 *usLen += 1;
 580              		.loc 1 285 0
 581 012e 3B68     		ldr	r3, [r7, #0]
 582 0130 1B88     		ldrh	r3, [r3, #0]
 583 0132 03F10103 		add	r3, r3, #1
 584 0136 9AB2     		uxth	r2, r3
 585 0138 3B68     		ldr	r3, [r7, #0]
 586 013a 1A80     		strh	r2, [r3, #0]	@ movhi
 286:../FreeModbus/functions/mbfuncholding.c **** 
 287:../FreeModbus/functions/mbfuncholding.c ****                 /* Make the read callback. */
 288:../FreeModbus/functions/mbfuncholding.c ****                 eRegStatus =
 587              		.loc 1 288 0
 588 013c BA8A     		ldrh	r2, [r7, #20]
 589 013e 7B8A     		ldrh	r3, [r7, #18]
 590 0140 B868     		ldr	r0, [r7, #8]
 591 0142 1146     		mov	r1, r2
 592 0144 1A46     		mov	r2, r3
 593 0146 4FF00003 		mov	r3, #0
 594 014a FFF7FEFF 		bl	eMBRegHoldingCB
 595 014e 0346     		mov	r3, r0
 596 0150 BB75     		strb	r3, [r7, #22]
 289:../FreeModbus/functions/mbfuncholding.c ****                     eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 290:../FreeModbus/functions/mbfuncholding.c ****                 if( eRegStatus == MB_ENOERR )
 597              		.loc 1 290 0
 598 0152 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 599 0154 002B     		cmp	r3, #0
 600 0156 09D1     		bne	.L24
 291:../FreeModbus/functions/mbfuncholding.c ****                 {
 292:../FreeModbus/functions/mbfuncholding.c ****                     *usLen += 2 * usRegReadCount;
 601              		.loc 1 292 0
 602 0158 3B68     		ldr	r3, [r7, #0]
 603 015a 1A88     		ldrh	r2, [r3, #0]
 604 015c 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 605 015e 4FEA4303 		lsl	r3, r3, #1
 606 0162 9BB2     		uxth	r3, r3
 607 0164 D318     		adds	r3, r2, r3
 608 0166 9AB2     		uxth	r2, r3
 609 0168 3B68     		ldr	r3, [r7, #0]
 610 016a 1A80     		strh	r2, [r3, #0]	@ movhi
 611              	.L24:
 293:../FreeModbus/functions/mbfuncholding.c ****                 }
 294:../FreeModbus/functions/mbfuncholding.c ****             }
 295:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 612              		.loc 1 295 0
 613 016c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 614 016e 002B     		cmp	r3, #0
 615 0170 09D0     		beq	.L22
 296:../FreeModbus/functions/mbfuncholding.c ****             {
 297:../FreeModbus/functions/mbfuncholding.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 616              		.loc 1 297 0
 617 0172 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 618 0174 1846     		mov	r0, r3
 619 0176 FFF7FEFF 		bl	prveMBError2Exception
 620 017a 0346     		mov	r3, r0
 621 017c FB75     		strb	r3, [r7, #23]
 295:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 622              		.loc 1 295 0
 623 017e 02E0     		b	.L22
 624              	.L23:
 298:../FreeModbus/functions/mbfuncholding.c ****             }
 299:../FreeModbus/functions/mbfuncholding.c ****         }
 300:../FreeModbus/functions/mbfuncholding.c ****         else
 301:../FreeModbus/functions/mbfuncholding.c ****         {
 302:../FreeModbus/functions/mbfuncholding.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 625              		.loc 1 302 0
 626 0180 4FF00303 		mov	r3, #3
 627 0184 FB75     		strb	r3, [r7, #23]
 628              	.L22:
 303:../FreeModbus/functions/mbfuncholding.c ****         }
 304:../FreeModbus/functions/mbfuncholding.c ****     }
 305:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
 629              		.loc 1 305 0
 630 0186 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 306:../FreeModbus/functions/mbfuncholding.c **** }
 631              		.loc 1 306 0
 632 0188 1846     		mov	r0, r3
 633 018a 07F11807 		add	r7, r7, #24
 634 018e BD46     		mov	sp, r7
 635 0190 80BD     		pop	{r7, pc}
 636              		.cfi_endproc
 637              	.LFE32:
 639 0192 00BF     		.text
 640              	.Letext0:
 641              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 642              		.file 3 "/home/frolls/ARM/stm32vld_template/FreeModbus/STM32/port/port.h"
 643              		.file 4 "/home/frolls/ARM/stm32vld_template/FreeModbus/include/mbproto.h"
 644              		.file 5 "/home/frolls/ARM/stm32vld_template/FreeModbus/include/mb.h"
 645              		.file 6 "/home/frolls/ARM/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mbfuncholding.c
     /tmp/cc9J4udS.s:19     .text.eMBFuncWriteHoldingRegister:00000000 $t
     /tmp/cc9J4udS.s:24     .text.eMBFuncWriteHoldingRegister:00000000 eMBFuncWriteHoldingRegister
     /tmp/cc9J4udS.s:108    .text.eMBFuncWriteMultipleHoldingRegister:00000000 $t
     /tmp/cc9J4udS.s:113    .text.eMBFuncWriteMultipleHoldingRegister:00000000 eMBFuncWriteMultipleHoldingRegister
     /tmp/cc9J4udS.s:247    .text.eMBFuncReadHoldingRegister:00000000 $t
     /tmp/cc9J4udS.s:252    .text.eMBFuncReadHoldingRegister:00000000 eMBFuncReadHoldingRegister
     /tmp/cc9J4udS.s:411    .text.eMBFuncReadWriteMultipleHoldingRegister:00000000 $t
     /tmp/cc9J4udS.s:416    .text.eMBFuncReadWriteMultipleHoldingRegister:00000000 eMBFuncReadWriteMultipleHoldingRegister
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f2d2167d278fc96c4a7439609634148
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.50.f5923f1950ced340a337f4676566f65a
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.assert.h.11.f9b6feb3ce5083ec030f5895cd9c4353
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x_conf.h.9.3838e46d9de2be24c7ed73296c5ae8b5
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.port.h.31.c65f7045ab74541fcd8cda05fe501502
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.mbframe.h.32.cb3fc2a5a44fcaf8fe721dce49a4ba3c
                           .group:00000000 wm4.mbconfig.h.32.83c2cfaf5d833886f6b04c01d1c2a24c

UNDEFINED SYMBOLS
eMBRegHoldingCB
prveMBError2Exception
