   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mbfuncdisc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.eMBFuncReadDiscreteInputs,"ax",%progbits
  19              		.align	2
  20              		.global	eMBFuncReadDiscreteInputs
  21              		.thumb
  22              		.thumb_func
  24              	eMBFuncReadDiscreteInputs:
  25              	.LFB29:
  26              		.file 1 "../FreeModbus/functions/mbfuncdisc.c"
   1:../FreeModbus/functions/mbfuncdisc.c ****  /*
   2:../FreeModbus/functions/mbfuncdisc.c ****   * FreeRTOS Modbus Libary: A Modbus serial implementation for FreeRTOS
   3:../FreeModbus/functions/mbfuncdisc.c ****   * Copyright (C) 2006 Christian Walter <wolti@sil.at>
   4:../FreeModbus/functions/mbfuncdisc.c ****   *
   5:../FreeModbus/functions/mbfuncdisc.c ****   * This library is free software; you can redistribute it and/or
   6:../FreeModbus/functions/mbfuncdisc.c ****   * modify it under the terms of the GNU Lesser General Public
   7:../FreeModbus/functions/mbfuncdisc.c ****   * License as published by the Free Software Foundation; either
   8:../FreeModbus/functions/mbfuncdisc.c ****   * version 2.1 of the License, or (at your option) any later version.
   9:../FreeModbus/functions/mbfuncdisc.c ****   *
  10:../FreeModbus/functions/mbfuncdisc.c ****   * This library is distributed in the hope that it will be useful,
  11:../FreeModbus/functions/mbfuncdisc.c ****   * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:../FreeModbus/functions/mbfuncdisc.c ****   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:../FreeModbus/functions/mbfuncdisc.c ****   * Lesser General Public License for more details.
  14:../FreeModbus/functions/mbfuncdisc.c ****   *
  15:../FreeModbus/functions/mbfuncdisc.c ****   * You should have received a copy of the GNU Lesser General Public
  16:../FreeModbus/functions/mbfuncdisc.c ****   * License along with this library; if not, write to the Free Software
  17:../FreeModbus/functions/mbfuncdisc.c ****   * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  18:../FreeModbus/functions/mbfuncdisc.c ****   */
  19:../FreeModbus/functions/mbfuncdisc.c **** 
  20:../FreeModbus/functions/mbfuncdisc.c **** 
  21:../FreeModbus/functions/mbfuncdisc.c **** 
  22:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- System includes ----------------------------------*/
  23:../FreeModbus/functions/mbfuncdisc.c **** #include "stdlib.h"
  24:../FreeModbus/functions/mbfuncdisc.c **** #include "string.h"
  25:../FreeModbus/functions/mbfuncdisc.c **** 
  26:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Platform includes --------------------------------*/
  27:../FreeModbus/functions/mbfuncdisc.c **** #include "port.h"
  28:../FreeModbus/functions/mbfuncdisc.c **** 
  29:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Modbus includes ----------------------------------*/
  30:../FreeModbus/functions/mbfuncdisc.c **** #include "mb.h"
  31:../FreeModbus/functions/mbfuncdisc.c **** #include "mbframe.h"
  32:../FreeModbus/functions/mbfuncdisc.c **** #include "mbproto.h"
  33:../FreeModbus/functions/mbfuncdisc.c **** #include "mbconfig.h"
  34:../FreeModbus/functions/mbfuncdisc.c **** 
  35:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Defines ------------------------------------------*/
  36:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_ADDR_OFF           ( MB_PDU_DATA_OFF )
  37:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_DISCCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
  38:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_SIZE               ( 4 )
  39:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_DISCCNT_MAX        ( 0x07D0 )
  40:../FreeModbus/functions/mbfuncdisc.c **** 
  41:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Static functions ---------------------------------*/
  42:../FreeModbus/functions/mbfuncdisc.c **** eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
  43:../FreeModbus/functions/mbfuncdisc.c **** 
  44:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Start implementation -----------------------------*/
  45:../FreeModbus/functions/mbfuncdisc.c **** 
  46:../FreeModbus/functions/mbfuncdisc.c **** #if MB_FUNC_READ_COILS_ENABLED > 0
  47:../FreeModbus/functions/mbfuncdisc.c **** 
  48:../FreeModbus/functions/mbfuncdisc.c **** eMBException
  49:../FreeModbus/functions/mbfuncdisc.c **** eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
  50:../FreeModbus/functions/mbfuncdisc.c **** {
  27              		.loc 1 50 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 86B0     		sub	sp, sp, #24
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 32
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43 0008 3960     		str	r1, [r7, #0]
  51:../FreeModbus/functions/mbfuncdisc.c ****     USHORT          usRegAddress;
  52:../FreeModbus/functions/mbfuncdisc.c ****     USHORT          usDiscreteCnt;
  53:../FreeModbus/functions/mbfuncdisc.c ****     UCHAR           ucNBytes;
  54:../FreeModbus/functions/mbfuncdisc.c ****     UCHAR          *pucFrameCur;
  55:../FreeModbus/functions/mbfuncdisc.c **** 
  56:../FreeModbus/functions/mbfuncdisc.c ****     eMBException    eStatus = MB_EX_NONE;
  44              		.loc 1 56 0
  45 000a 4FF00003 		mov	r3, #0
  46 000e BB75     		strb	r3, [r7, #22]
  57:../FreeModbus/functions/mbfuncdisc.c ****     eMBErrorCode    eRegStatus;
  58:../FreeModbus/functions/mbfuncdisc.c **** 
  59:../FreeModbus/functions/mbfuncdisc.c ****     if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
  47              		.loc 1 59 0
  48 0010 3B68     		ldr	r3, [r7, #0]
  49 0012 1B88     		ldrh	r3, [r3, #0]
  50 0014 052B     		cmp	r3, #5
  51 0016 40F08180 		bne	.L2
  60:../FreeModbus/functions/mbfuncdisc.c ****     {
  61:../FreeModbus/functions/mbfuncdisc.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
  52              		.loc 1 61 0
  53 001a 7B68     		ldr	r3, [r7, #4]
  54 001c 03F10103 		add	r3, r3, #1
  55 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  56 0022 4FEA0323 		lsl	r3, r3, #8
  57 0026 BB82     		strh	r3, [r7, #20]	@ movhi
  62:../FreeModbus/functions/mbfuncdisc.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
  58              		.loc 1 62 0
  59 0028 7B68     		ldr	r3, [r7, #4]
  60 002a 03F10203 		add	r3, r3, #2
  61 002e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  62 0030 1A46     		mov	r2, r3
  63 0032 BB8A     		ldrh	r3, [r7, #20]	@ movhi
  64 0034 1343     		orrs	r3, r3, r2
  65 0036 BB82     		strh	r3, [r7, #20]	@ movhi
  63:../FreeModbus/functions/mbfuncdisc.c ****         usRegAddress++;
  66              		.loc 1 63 0
  67 0038 BB8A     		ldrh	r3, [r7, #20]	@ movhi
  68 003a 03F10103 		add	r3, r3, #1
  69 003e BB82     		strh	r3, [r7, #20]	@ movhi
  64:../FreeModbus/functions/mbfuncdisc.c **** 
  65:../FreeModbus/functions/mbfuncdisc.c ****         usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
  70              		.loc 1 65 0
  71 0040 7B68     		ldr	r3, [r7, #4]
  72 0042 03F10303 		add	r3, r3, #3
  73 0046 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  74 0048 4FEA0323 		lsl	r3, r3, #8
  75 004c 7B82     		strh	r3, [r7, #18]	@ movhi
  66:../FreeModbus/functions/mbfuncdisc.c ****         usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
  76              		.loc 1 66 0
  77 004e 7B68     		ldr	r3, [r7, #4]
  78 0050 03F10403 		add	r3, r3, #4
  79 0054 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  80 0056 1A46     		mov	r2, r3
  81 0058 7B8A     		ldrh	r3, [r7, #18]	@ movhi
  82 005a 1343     		orrs	r3, r3, r2
  83 005c 7B82     		strh	r3, [r7, #18]	@ movhi
  67:../FreeModbus/functions/mbfuncdisc.c **** 
  68:../FreeModbus/functions/mbfuncdisc.c ****         /* Check if the number of registers to read is valid. If not
  69:../FreeModbus/functions/mbfuncdisc.c ****          * return Modbus illegal data value exception. 
  70:../FreeModbus/functions/mbfuncdisc.c ****          */
  71:../FreeModbus/functions/mbfuncdisc.c ****         if( ( usDiscreteCnt >= 1 ) &&
  84              		.loc 1 71 0
  85 005e 7B8A     		ldrh	r3, [r7, #18]
  86 0060 002B     		cmp	r3, #0
  87 0062 57D0     		beq	.L3
  88              		.loc 1 71 0 is_stmt 0 discriminator 1
  89 0064 7A8A     		ldrh	r2, [r7, #18]
  90 0066 40F2CF73 		movw	r3, #1999
  91 006a 9A42     		cmp	r2, r3
  92 006c 52D8     		bhi	.L3
  72:../FreeModbus/functions/mbfuncdisc.c ****             ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
  73:../FreeModbus/functions/mbfuncdisc.c ****         {
  74:../FreeModbus/functions/mbfuncdisc.c ****             /* Set the current PDU data pointer to the beginning. */
  75:../FreeModbus/functions/mbfuncdisc.c ****             pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
  93              		.loc 1 75 0 is_stmt 1
  94 006e 7B68     		ldr	r3, [r7, #4]
  95 0070 FB60     		str	r3, [r7, #12]
  76:../FreeModbus/functions/mbfuncdisc.c ****             *usLen = MB_PDU_FUNC_OFF;
  96              		.loc 1 76 0
  97 0072 3B68     		ldr	r3, [r7, #0]
  98 0074 4FF00002 		mov	r2, #0
  99 0078 1A80     		strh	r2, [r3, #0]	@ movhi
  77:../FreeModbus/functions/mbfuncdisc.c **** 
  78:../FreeModbus/functions/mbfuncdisc.c ****             /* First byte contains the function code. */
  79:../FreeModbus/functions/mbfuncdisc.c ****             *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 100              		.loc 1 79 0
 101 007a FB68     		ldr	r3, [r7, #12]
 102 007c 4FF00202 		mov	r2, #2
 103 0080 1A70     		strb	r2, [r3, #0]
 104 0082 FB68     		ldr	r3, [r7, #12]
 105 0084 03F10103 		add	r3, r3, #1
 106 0088 FB60     		str	r3, [r7, #12]
  80:../FreeModbus/functions/mbfuncdisc.c ****             *usLen += 1;
 107              		.loc 1 80 0
 108 008a 3B68     		ldr	r3, [r7, #0]
 109 008c 1B88     		ldrh	r3, [r3, #0]
 110 008e 03F10103 		add	r3, r3, #1
 111 0092 9AB2     		uxth	r2, r3
 112 0094 3B68     		ldr	r3, [r7, #0]
 113 0096 1A80     		strh	r2, [r3, #0]	@ movhi
  81:../FreeModbus/functions/mbfuncdisc.c **** 
  82:../FreeModbus/functions/mbfuncdisc.c ****             /* Test if the quantity of coils is a multiple of 8. If not last
  83:../FreeModbus/functions/mbfuncdisc.c ****              * byte is only partially field with unused coils set to zero. */
  84:../FreeModbus/functions/mbfuncdisc.c ****             if( ( usDiscreteCnt & 0x0007 ) != 0 )
 114              		.loc 1 84 0
 115 0098 7B8A     		ldrh	r3, [r7, #18]
 116 009a 03F00703 		and	r3, r3, #7
 117 009e 002B     		cmp	r3, #0
 118 00a0 08D0     		beq	.L4
  85:../FreeModbus/functions/mbfuncdisc.c ****             {
  86:../FreeModbus/functions/mbfuncdisc.c ****                 ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 119              		.loc 1 86 0
 120 00a2 7B8A     		ldrh	r3, [r7, #18]
 121 00a4 4FEAD303 		lsr	r3, r3, #3
 122 00a8 9BB2     		uxth	r3, r3
 123 00aa DBB2     		uxtb	r3, r3
 124 00ac 03F10103 		add	r3, r3, #1
 125 00b0 FB75     		strb	r3, [r7, #23]
 126 00b2 04E0     		b	.L5
 127              	.L4:
  87:../FreeModbus/functions/mbfuncdisc.c ****             }
  88:../FreeModbus/functions/mbfuncdisc.c ****             else
  89:../FreeModbus/functions/mbfuncdisc.c ****             {
  90:../FreeModbus/functions/mbfuncdisc.c ****                 ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 128              		.loc 1 90 0
 129 00b4 7B8A     		ldrh	r3, [r7, #18]
 130 00b6 4FEAD303 		lsr	r3, r3, #3
 131 00ba 9BB2     		uxth	r3, r3
 132 00bc FB75     		strb	r3, [r7, #23]
 133              	.L5:
  91:../FreeModbus/functions/mbfuncdisc.c ****             }
  92:../FreeModbus/functions/mbfuncdisc.c ****             *pucFrameCur++ = ucNBytes;
 134              		.loc 1 92 0
 135 00be FB68     		ldr	r3, [r7, #12]
 136 00c0 FA7D     		ldrb	r2, [r7, #23]
 137 00c2 1A70     		strb	r2, [r3, #0]
 138 00c4 FB68     		ldr	r3, [r7, #12]
 139 00c6 03F10103 		add	r3, r3, #1
 140 00ca FB60     		str	r3, [r7, #12]
  93:../FreeModbus/functions/mbfuncdisc.c ****             *usLen += 1;
 141              		.loc 1 93 0
 142 00cc 3B68     		ldr	r3, [r7, #0]
 143 00ce 1B88     		ldrh	r3, [r3, #0]
 144 00d0 03F10103 		add	r3, r3, #1
 145 00d4 9AB2     		uxth	r2, r3
 146 00d6 3B68     		ldr	r3, [r7, #0]
 147 00d8 1A80     		strh	r2, [r3, #0]	@ movhi
  94:../FreeModbus/functions/mbfuncdisc.c **** 
  95:../FreeModbus/functions/mbfuncdisc.c ****             eRegStatus =
 148              		.loc 1 95 0
 149 00da BA8A     		ldrh	r2, [r7, #20]
 150 00dc 7B8A     		ldrh	r3, [r7, #18]
 151 00de F868     		ldr	r0, [r7, #12]
 152 00e0 1146     		mov	r1, r2
 153 00e2 1A46     		mov	r2, r3
 154 00e4 FFF7FEFF 		bl	eMBRegDiscreteCB
 155 00e8 0346     		mov	r3, r0
 156 00ea FB72     		strb	r3, [r7, #11]
  96:../FreeModbus/functions/mbfuncdisc.c ****                 eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
  97:../FreeModbus/functions/mbfuncdisc.c **** 
  98:../FreeModbus/functions/mbfuncdisc.c ****             /* If an error occured convert it into a Modbus exception. */
  99:../FreeModbus/functions/mbfuncdisc.c ****             if( eRegStatus != MB_ENOERR )
 157              		.loc 1 99 0
 158 00ec FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 159 00ee 002B     		cmp	r3, #0
 160 00f0 06D0     		beq	.L6
 100:../FreeModbus/functions/mbfuncdisc.c ****             {
 101:../FreeModbus/functions/mbfuncdisc.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 161              		.loc 1 101 0
 162 00f2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 163 00f4 1846     		mov	r0, r3
 164 00f6 FFF7FEFF 		bl	prveMBError2Exception
 165 00fa 0346     		mov	r3, r0
 166 00fc BB75     		strb	r3, [r7, #22]
  99:../FreeModbus/functions/mbfuncdisc.c ****             if( eRegStatus != MB_ENOERR )
 167              		.loc 1 99 0
 168 00fe 10E0     		b	.L9
 169              	.L6:
 102:../FreeModbus/functions/mbfuncdisc.c ****             }
 103:../FreeModbus/functions/mbfuncdisc.c ****             else
 104:../FreeModbus/functions/mbfuncdisc.c ****             {
 105:../FreeModbus/functions/mbfuncdisc.c ****                 /* The response contains the function code, the starting address
 106:../FreeModbus/functions/mbfuncdisc.c ****                  * and the quantity of registers. We reuse the old values in the 
 107:../FreeModbus/functions/mbfuncdisc.c ****                  * buffer because they are still valid. */
 108:../FreeModbus/functions/mbfuncdisc.c ****                 *usLen += ucNBytes;;
 170              		.loc 1 108 0
 171 0100 3B68     		ldr	r3, [r7, #0]
 172 0102 1A88     		ldrh	r2, [r3, #0]
 173 0104 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 174 0106 9BB2     		uxth	r3, r3
 175 0108 D318     		adds	r3, r2, r3
 176 010a 9AB2     		uxth	r2, r3
 177 010c 3B68     		ldr	r3, [r7, #0]
 178 010e 1A80     		strh	r2, [r3, #0]	@ movhi
  99:../FreeModbus/functions/mbfuncdisc.c ****             if( eRegStatus != MB_ENOERR )
 179              		.loc 1 99 0
 180 0110 00BF     		nop
 181 0112 06E0     		b	.L9
 182              	.L3:
 109:../FreeModbus/functions/mbfuncdisc.c ****             }
 110:../FreeModbus/functions/mbfuncdisc.c ****         }
 111:../FreeModbus/functions/mbfuncdisc.c ****         else
 112:../FreeModbus/functions/mbfuncdisc.c ****         {
 113:../FreeModbus/functions/mbfuncdisc.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 183              		.loc 1 113 0
 184 0114 4FF00303 		mov	r3, #3
 185 0118 BB75     		strb	r3, [r7, #22]
 186 011a 02E0     		b	.L9
 187              	.L2:
 114:../FreeModbus/functions/mbfuncdisc.c ****         }
 115:../FreeModbus/functions/mbfuncdisc.c ****     }
 116:../FreeModbus/functions/mbfuncdisc.c ****     else
 117:../FreeModbus/functions/mbfuncdisc.c ****     {
 118:../FreeModbus/functions/mbfuncdisc.c ****         /* Can't be a valid read coil register request because the length
 119:../FreeModbus/functions/mbfuncdisc.c ****          * is incorrect. */
 120:../FreeModbus/functions/mbfuncdisc.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 188              		.loc 1 120 0
 189 011c 4FF00303 		mov	r3, #3
 190 0120 BB75     		strb	r3, [r7, #22]
 191              	.L9:
 121:../FreeModbus/functions/mbfuncdisc.c ****     }
 122:../FreeModbus/functions/mbfuncdisc.c ****     return eStatus;
 192              		.loc 1 122 0
 193 0122 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 123:../FreeModbus/functions/mbfuncdisc.c **** }
 194              		.loc 1 123 0
 195 0124 1846     		mov	r0, r3
 196 0126 07F11807 		add	r7, r7, #24
 197 012a BD46     		mov	sp, r7
 198 012c 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE29:
 202 012e 00BF     		.text
 203              	.Letext0:
 204              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 205              		.file 3 "/home/frolls/ARM/stm32vld_template/FreeModbus/STM32/port/port.h"
 206              		.file 4 "/home/frolls/ARM/stm32vld_template/FreeModbus/include/mbproto.h"
 207              		.file 5 "/home/frolls/ARM/stm32vld_template/FreeModbus/include/mb.h"
 208              		.file 6 "/home/frolls/ARM/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mbfuncdisc.c
     /tmp/cceB0qrI.s:19     .text.eMBFuncReadDiscreteInputs:00000000 $t
     /tmp/cceB0qrI.s:24     .text.eMBFuncReadDiscreteInputs:00000000 eMBFuncReadDiscreteInputs
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f2d2167d278fc96c4a7439609634148
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.50.f5923f1950ced340a337f4676566f65a
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.assert.h.11.f9b6feb3ce5083ec030f5895cd9c4353
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x_conf.h.9.3838e46d9de2be24c7ed73296c5ae8b5
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.port.h.31.c65f7045ab74541fcd8cda05fe501502
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.mbframe.h.32.cb3fc2a5a44fcaf8fe721dce49a4ba3c
                           .group:00000000 wm4.mbconfig.h.32.83c2cfaf5d833886f6b04c01d1c2a24c

UNDEFINED SYMBOLS
eMBRegDiscreteCB
prveMBError2Exception
