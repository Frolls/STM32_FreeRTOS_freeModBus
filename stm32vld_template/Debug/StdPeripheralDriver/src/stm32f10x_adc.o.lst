   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ADC_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	ADC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	ADC_DeInit:
  25              	.LFB29:
  26              		.file 1 "../StdPeripheralDriver/src/stm32f10x_adc.c"
   1:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_adc.c ****  ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @file    stm32f10x_adc.c
   4:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief   This file provides all the ADC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_adc.c ****  ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @attention
  10:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *
  11:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *
  18:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_adc.c ****  ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
  21:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_adc.h"
  24:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_rcc.h"
  25:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  26:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
  28:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
  29:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  30:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC 
  31:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief ADC driver modules
  32:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
  33:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
  34:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  35:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_TypesDefinitions
  36:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
  37:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
  38:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  39:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
  40:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @}
  41:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
  42:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  43:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Defines
  44:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
  45:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
  46:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  47:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCNUM mask */
  48:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCNUM_Reset           ((uint32_t)0xFFFF1FFF)
  49:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  50:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCEN mask */
  51:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Set              ((uint32_t)0x00000800)
  52:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Reset            ((uint32_t)0xFFFFF7FF)
  53:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  54:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JAUTO mask */
  55:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Set               ((uint32_t)0x00000400)
  56:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Reset             ((uint32_t)0xFFFFFBFF)
  57:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  58:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDISCEN mask */
  59:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Set             ((uint32_t)0x00001000)
  60:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Reset           ((uint32_t)0xFFFFEFFF)
  61:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  62:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC AWDCH mask */
  63:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDCH_Reset             ((uint32_t)0xFFFFFFE0)
  64:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Analog watchdog enable mode mask */
  66:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDMode_Reset           ((uint32_t)0xFF3FFDFF)
  67:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  68:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR1 register Mask */
  69:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_CLEAR_Mask              ((uint32_t)0xFFF0FEFF)
  70:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  71:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC ADON mask */
  72:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Set                ((uint32_t)0x00000001)
  73:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Reset              ((uint32_t)0xFFFFFFFE)
  74:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  75:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DMA mask */
  76:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Set                 ((uint32_t)0x00000100)
  77:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Reset               ((uint32_t)0xFFFFFEFF)
  78:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC RSTCAL mask */
  80:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_RSTCAL_Set              ((uint32_t)0x00000008)
  81:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  82:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC CAL mask */
  83:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CAL_Set                 ((uint32_t)0x00000004)
  84:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  85:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SWSTART mask */
  86:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_SWSTART_Set             ((uint32_t)0x00400000)
  87:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  88:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC EXTTRIG mask */
  89:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Set             ((uint32_t)0x00100000)
  90:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Reset           ((uint32_t)0xFFEFFFFF)
  91:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  92:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Software start mask */
  93:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Set     ((uint32_t)0x00500000)
  94:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Reset   ((uint32_t)0xFFAFFFFF)
  95:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  96:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTSEL mask */
  97:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTSEL_Reset           ((uint32_t)0xFFFF8FFF)
  98:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  99:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTTRIG mask */
 100:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Set            ((uint32_t)0x00008000)
 101:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Reset          ((uint32_t)0xFFFF7FFF)
 102:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 103:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSWSTART mask */
 104:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JSWSTART_Set            ((uint32_t)0x00200000)
 105:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 106:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC injected software start mask */
 107:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Set   ((uint32_t)0x00208000)
 108:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Reset ((uint32_t)0xFFDF7FFF)
 109:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 110:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC TSPD mask */
 111:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Set             ((uint32_t)0x00800000)
 112:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Reset           ((uint32_t)0xFF7FFFFF)
 113:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 114:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR2 register Mask */
 115:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CLEAR_Mask              ((uint32_t)0xFFF1F7FD)
 116:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 117:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SQx mask */
 118:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR3_SQ_Set                 ((uint32_t)0x0000001F)
 119:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR2_SQ_Set                 ((uint32_t)0x0000001F)
 120:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_SQ_Set                 ((uint32_t)0x0000001F)
 121:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 122:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* SQR1 register Mask */
 123:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_CLEAR_Mask             ((uint32_t)0xFF0FFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 125:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSQx mask */
 126:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JSQ_Set                ((uint32_t)0x0000001F)
 127:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 128:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JL mask */
 129:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Set                 ((uint32_t)0x00300000)
 130:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Reset               ((uint32_t)0xFFCFFFFF)
 131:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 132:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SMPx mask */
 133:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR1_SMP_Set               ((uint32_t)0x00000007)
 134:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR2_SMP_Set               ((uint32_t)0x00000007)
 135:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 136:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDRx registers offset */
 137:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JDR_Offset                  ((uint8_t)0x28)
 138:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 139:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC1 DR register base address */
 140:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define DR_ADDRESS                  ((uint32_t)0x4001244C)
 141:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 142:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 143:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @}
 144:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 145:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 146:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Macros
 147:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
 148:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 149:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 150:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 151:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @}
 152:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 153:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 154:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Variables
 155:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
 156:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 157:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 158:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 159:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @}
 160:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 161:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_FunctionPrototypes
 163:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
 164:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 165:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 166:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 167:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @}
 168:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 169:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 170:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Functions
 171:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @{
 172:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 173:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 175:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
 176:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 177:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 178:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 179:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DeInit(ADC_TypeDef* ADCx) {
  27              		.loc 1 179 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 180:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 181:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 182:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 183:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (ADCx == ADC1 ) {
  43              		.loc 1 183 0
  44 0008 7A68     		ldr	r2, [r7, #4]
  45 000a 4FF41053 		mov	r3, #9216
  46 000e C4F20103 		movt	r3, 16385
  47 0012 9A42     		cmp	r2, r3
  48 0014 0CD1     		bne	.L2
 184:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable ADC1 reset state */
 185:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
  49              		.loc 1 185 0
  50 0016 4FF40070 		mov	r0, #512
  51 001a 4FF00101 		mov	r1, #1
  52 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Release ADC1 from reset state */
 187:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
  53              		.loc 1 187 0
  54 0022 4FF40070 		mov	r0, #512
  55 0026 4FF00001 		mov	r1, #0
  56 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  57 002e 26E0     		b	.L1
  58              	.L2:
 188:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else if (ADCx == ADC2 ) {
  59              		.loc 1 188 0
  60 0030 7A68     		ldr	r2, [r7, #4]
  61 0032 4FF42053 		mov	r3, #10240
  62 0036 C4F20103 		movt	r3, 16385
  63 003a 9A42     		cmp	r2, r3
  64 003c 0CD1     		bne	.L4
 189:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable ADC2 reset state */
 190:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
  65              		.loc 1 190 0
  66 003e 4FF48060 		mov	r0, #1024
  67 0042 4FF00101 		mov	r1, #1
  68 0046 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 191:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Release ADC2 from reset state */
 192:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
  69              		.loc 1 192 0
  70 004a 4FF48060 		mov	r0, #1024
  71 004e 4FF00001 		mov	r1, #0
  72 0052 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  73 0056 12E0     		b	.L1
  74              	.L4:
 193:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 194:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		if (ADCx == ADC3 ) {
  75              		.loc 1 194 0
  76 0058 7A68     		ldr	r2, [r7, #4]
  77 005a 4FF47053 		mov	r3, #15360
  78 005e C4F20103 		movt	r3, 16385
  79 0062 9A42     		cmp	r2, r3
  80 0064 0BD1     		bne	.L1
 195:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			/* Enable ADC3 reset state */
 196:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
  81              		.loc 1 196 0
  82 0066 4FF40040 		mov	r0, #32768
  83 006a 4FF00101 		mov	r1, #1
  84 006e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 197:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			/* Release ADC3 from reset state */
 198:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
  85              		.loc 1 198 0
  86 0072 4FF40040 		mov	r0, #32768
  87 0076 4FF00001 		mov	r1, #0
  88 007a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  89              	.L1:
 199:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		}
 200:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 201:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
  90              		.loc 1 201 0
  91 007e 07F10807 		add	r7, r7, #8
  92 0082 BD46     		mov	sp, r7
  93 0084 80BD     		pop	{r7, pc}
  94              		.cfi_endproc
  95              	.LFE29:
  97 0086 00BF     		.section	.text.ADC_Init,"ax",%progbits
  98              		.align	2
  99              		.global	ADC_Init
 100              		.thumb
 101              		.thumb_func
 103              	ADC_Init:
 104              	.LFB30:
 202:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 203:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 204:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Initializes the ADCx peripheral according to the specified parameters
 205:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         in the ADC_InitStruct.
 206:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 207:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 208:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         the configuration information for the specified ADC peripheral.
 209:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 210:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 211:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct) {
 105              		.loc 1 211 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 16
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110 0000 80B4     		push	{r7}
 111              	.LCFI3:
 112              		.cfi_def_cfa_offset 4
 113              		.cfi_offset 7, -4
 114 0002 85B0     		sub	sp, sp, #20
 115              	.LCFI4:
 116              		.cfi_def_cfa_offset 24
 117 0004 00AF     		add	r7, sp, #0
 118              	.LCFI5:
 119              		.cfi_def_cfa_register 7
 120 0006 7860     		str	r0, [r7, #4]
 121 0008 3960     		str	r1, [r7, #0]
 212:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg1 = 0;
 122              		.loc 1 212 0
 123 000a 4FF00003 		mov	r3, #0
 124 000e FB60     		str	r3, [r7, #12]
 213:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint8_t tmpreg2 = 0;
 125              		.loc 1 213 0
 126 0010 4FF00003 		mov	r3, #0
 127 0014 FB72     		strb	r3, [r7, #11]
 214:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 215:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_MODE(ADC_InitStruct->ADC_Mode)); assert
 216:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 217:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/*---------------------------- ADCx CR1 Configuration -----------------*/
 218:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the ADCx CR1 value */
 219:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 = ADCx->CR1;
 128              		.loc 1 219 0
 129 0016 7B68     		ldr	r3, [r7, #4]
 130 0018 5B68     		ldr	r3, [r3, #4]
 131 001a FB60     		str	r3, [r7, #12]
 220:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear DUALMOD and SCAN bits */
 221:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 &= CR1_CLEAR_Mask;
 132              		.loc 1 221 0
 133 001c FB68     		ldr	r3, [r7, #12]
 134 001e 23F47023 		bic	r3, r3, #983040
 135 0022 23F48073 		bic	r3, r3, #256
 136 0026 FB60     		str	r3, [r7, #12]
 222:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Configure ADCx: Dual mode and scan conversion mode */
 223:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set DUALMOD bits according to ADC_Mode value */
 224:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set SCAN bit according to ADC_ScanConvMode value */
 225:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_Mode
 137              		.loc 1 225 0
 138 0028 3B68     		ldr	r3, [r7, #0]
 139 002a 1A68     		ldr	r2, [r3, #0]
 226:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			| ((uint32_t) ADC_InitStruct->ADC_ScanConvMode << 8));
 140              		.loc 1 226 0
 141 002c 3B68     		ldr	r3, [r7, #0]
 142 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 143 0030 4FEA0323 		lsl	r3, r3, #8
 225:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_Mode
 144              		.loc 1 225 0
 145 0034 1343     		orrs	r3, r3, r2
 146 0036 FA68     		ldr	r2, [r7, #12]
 147 0038 1343     		orrs	r3, r3, r2
 148 003a FB60     		str	r3, [r7, #12]
 227:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Write to ADCx CR1 */
 228:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR1 = tmpreg1;
 149              		.loc 1 228 0
 150 003c 7B68     		ldr	r3, [r7, #4]
 151 003e FA68     		ldr	r2, [r7, #12]
 152 0040 5A60     		str	r2, [r3, #4]
 229:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 230:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/*---------------------------- ADCx CR2 Configuration -----------------*/
 231:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the ADCx CR2 value */
 232:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 = ADCx->CR2;
 153              		.loc 1 232 0
 154 0042 7B68     		ldr	r3, [r7, #4]
 155 0044 9B68     		ldr	r3, [r3, #8]
 156 0046 FB60     		str	r3, [r7, #12]
 233:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear CONT, ALIGN and EXTSEL bits */
 234:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 &= CR2_CLEAR_Mask;
 157              		.loc 1 234 0
 158 0048 FA68     		ldr	r2, [r7, #12]
 159 004a 4FF2FD73 		movw	r3, #63485
 160 004e CFF6F173 		movt	r3, 65521
 161 0052 1340     		ands	r3, r3, r2
 162 0054 FB60     		str	r3, [r7, #12]
 235:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Configure ADCx: external trigger event and continuous conversion mode */
 236:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set ALIGN bit according to ADC_DataAlign value */
 237:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 238:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set CONT bit according to ADC_ContinuousConvMode value */
 239:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_DataAlign
 163              		.loc 1 239 0
 164 0056 3B68     		ldr	r3, [r7, #0]
 165 0058 DA68     		ldr	r2, [r3, #12]
 240:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			| ADC_InitStruct->ADC_ExternalTrigConv
 166              		.loc 1 240 0
 167 005a 3B68     		ldr	r3, [r7, #0]
 168 005c 9B68     		ldr	r3, [r3, #8]
 169 005e 1A43     		orrs	r2, r2, r3
 241:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			| ((uint32_t) ADC_InitStruct->ADC_ContinuousConvMode << 1));
 170              		.loc 1 241 0
 171 0060 3B68     		ldr	r3, [r7, #0]
 172 0062 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 173 0064 4FEA4303 		lsl	r3, r3, #1
 239:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_DataAlign
 174              		.loc 1 239 0
 175 0068 1343     		orrs	r3, r3, r2
 176 006a FA68     		ldr	r2, [r7, #12]
 177 006c 1343     		orrs	r3, r3, r2
 178 006e FB60     		str	r3, [r7, #12]
 242:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Write to ADCx CR2 */
 243:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR2 = tmpreg1;
 179              		.loc 1 243 0
 180 0070 7B68     		ldr	r3, [r7, #4]
 181 0072 FA68     		ldr	r2, [r7, #12]
 182 0074 9A60     		str	r2, [r3, #8]
 244:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 245:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/*---------------------------- ADCx SQR1 Configuration -----------------*/
 246:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the ADCx SQR1 value */
 247:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 = ADCx->SQR1;
 183              		.loc 1 247 0
 184 0076 7B68     		ldr	r3, [r7, #4]
 185 0078 DB6A     		ldr	r3, [r3, #44]
 186 007a FB60     		str	r3, [r7, #12]
 248:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear L bits */
 249:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 &= SQR1_CLEAR_Mask;
 187              		.loc 1 249 0
 188 007c FB68     		ldr	r3, [r7, #12]
 189 007e 23F47003 		bic	r3, r3, #15728640
 190 0082 FB60     		str	r3, [r7, #12]
 250:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Configure ADCx: regular channel sequence length */
 251:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set L bits according to ADC_NbrOfChannel value */
 252:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t) 1);
 191              		.loc 1 252 0
 192 0084 3B68     		ldr	r3, [r7, #0]
 193 0086 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 194 0088 03F1FF33 		add	r3, r3, #-1
 195 008c DAB2     		uxtb	r2, r3
 196 008e FB7A     		ldrb	r3, [r7, #11]
 197 0090 1343     		orrs	r3, r3, r2
 198 0092 FB72     		strb	r3, [r7, #11]
 253:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= (uint32_t) tmpreg2 << 20;
 199              		.loc 1 253 0
 200 0094 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 201 0096 4FEA0353 		lsl	r3, r3, #20
 202 009a FA68     		ldr	r2, [r7, #12]
 203 009c 1343     		orrs	r3, r3, r2
 204 009e FB60     		str	r3, [r7, #12]
 254:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Write to ADCx SQR1 */
 255:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->SQR1 = tmpreg1;
 205              		.loc 1 255 0
 206 00a0 7B68     		ldr	r3, [r7, #4]
 207 00a2 FA68     		ldr	r2, [r7, #12]
 208 00a4 DA62     		str	r2, [r3, #44]
 256:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 209              		.loc 1 256 0
 210 00a6 07F11407 		add	r7, r7, #20
 211 00aa BD46     		mov	sp, r7
 212 00ac 80BC     		pop	{r7}
 213 00ae 7047     		bx	lr
 214              		.cfi_endproc
 215              	.LFE30:
 217              		.section	.text.ADC_StructInit,"ax",%progbits
 218              		.align	2
 219              		.global	ADC_StructInit
 220              		.thumb
 221              		.thumb_func
 223              	ADC_StructInit:
 224              	.LFB31:
 257:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 258:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 259:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Fills each ADC_InitStruct member with its default value.
 260:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
 261:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 262:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 263:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct) {
 225              		.loc 1 263 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 4
 233              		.cfi_offset 7, -4
 234 0002 83B0     		sub	sp, sp, #12
 235              	.LCFI7:
 236              		.cfi_def_cfa_offset 16
 237 0004 00AF     		add	r7, sp, #0
 238              	.LCFI8:
 239              		.cfi_def_cfa_register 7
 240 0006 7860     		str	r0, [r7, #4]
 264:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Reset ADC init structure parameters values */
 265:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Initialize the ADC_Mode member */
 266:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 241              		.loc 1 266 0
 242 0008 7B68     		ldr	r3, [r7, #4]
 243 000a 4FF00002 		mov	r2, #0
 244 000e 1A60     		str	r2, [r3, #0]
 267:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* initialize the ADC_ScanConvMode member */
 268:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 245              		.loc 1 268 0
 246 0010 7B68     		ldr	r3, [r7, #4]
 247 0012 4FF00002 		mov	r2, #0
 248 0016 1A71     		strb	r2, [r3, #4]
 269:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Initialize the ADC_ContinuousConvMode member */
 270:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 249              		.loc 1 270 0
 250 0018 7B68     		ldr	r3, [r7, #4]
 251 001a 4FF00002 		mov	r2, #0
 252 001e 5A71     		strb	r2, [r3, #5]
 271:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Initialize the ADC_ExternalTrigConv member */
 272:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 253              		.loc 1 272 0
 254 0020 7B68     		ldr	r3, [r7, #4]
 255 0022 4FF00002 		mov	r2, #0
 256 0026 9A60     		str	r2, [r3, #8]
 273:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Initialize the ADC_DataAlign member */
 274:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 257              		.loc 1 274 0
 258 0028 7B68     		ldr	r3, [r7, #4]
 259 002a 4FF00002 		mov	r2, #0
 260 002e DA60     		str	r2, [r3, #12]
 275:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Initialize the ADC_NbrOfChannel member */
 276:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADC_InitStruct->ADC_NbrOfChannel = 1;
 261              		.loc 1 276 0
 262 0030 7B68     		ldr	r3, [r7, #4]
 263 0032 4FF00102 		mov	r2, #1
 264 0036 1A74     		strb	r2, [r3, #16]
 277:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 265              		.loc 1 277 0
 266 0038 07F10C07 		add	r7, r7, #12
 267 003c BD46     		mov	sp, r7
 268 003e 80BC     		pop	{r7}
 269 0040 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE31:
 273 0042 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 274              		.align	2
 275              		.global	ADC_Cmd
 276              		.thumb
 277              		.thumb_func
 279              	ADC_Cmd:
 280              	.LFB32:
 278:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 279:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 280:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the specified ADC peripheral.
 281:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 282:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the ADCx peripheral.
 283:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 284:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 285:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 286:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState) {
 281              		.loc 1 286 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 8
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286 0000 80B4     		push	{r7}
 287              	.LCFI9:
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 7, -4
 290 0002 83B0     		sub	sp, sp, #12
 291              	.LCFI10:
 292              		.cfi_def_cfa_offset 16
 293 0004 00AF     		add	r7, sp, #0
 294              	.LCFI11:
 295              		.cfi_def_cfa_register 7
 296 0006 7860     		str	r0, [r7, #4]
 297 0008 0B46     		mov	r3, r1
 298 000a FB70     		strb	r3, [r7, #3]
 287:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 288:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 289:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 299              		.loc 1 289 0
 300 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 301 000e 002B     		cmp	r3, #0
 302 0010 06D0     		beq	.L8
 290:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the ADON bit to wake up the ADC from power down mode */
 291:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 |= CR2_ADON_Set;
 303              		.loc 1 291 0
 304 0012 7B68     		ldr	r3, [r7, #4]
 305 0014 9B68     		ldr	r3, [r3, #8]
 306 0016 43F00102 		orr	r2, r3, #1
 307 001a 7B68     		ldr	r3, [r7, #4]
 308 001c 9A60     		str	r2, [r3, #8]
 309 001e 05E0     		b	.L7
 310              	.L8:
 292:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 293:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC peripheral */
 294:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 &= CR2_ADON_Reset;
 311              		.loc 1 294 0
 312 0020 7B68     		ldr	r3, [r7, #4]
 313 0022 9B68     		ldr	r3, [r3, #8]
 314 0024 23F00102 		bic	r2, r3, #1
 315 0028 7B68     		ldr	r3, [r7, #4]
 316 002a 9A60     		str	r2, [r3, #8]
 317              	.L7:
 295:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 296:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 318              		.loc 1 296 0
 319 002c 07F10C07 		add	r7, r7, #12
 320 0030 BD46     		mov	sp, r7
 321 0032 80BC     		pop	{r7}
 322 0034 7047     		bx	lr
 323              		.cfi_endproc
 324              	.LFE32:
 326 0036 00BF     		.section	.text.ADC_DMACmd,"ax",%progbits
 327              		.align	2
 328              		.global	ADC_DMACmd
 329              		.thumb
 330              		.thumb_func
 332              	ADC_DMACmd:
 333              	.LFB33:
 297:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 298:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 299:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the specified ADC DMA request.
 300:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1 or 3 to select the ADC peripheral.
 301:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   Note: ADC2 hasn't a DMA capability.
 302:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC DMA transfer.
 303:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 304:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 305:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 306:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState) {
 334              		.loc 1 306 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0000 80B4     		push	{r7}
 340              	.LCFI12:
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0002 83B0     		sub	sp, sp, #12
 344              	.LCFI13:
 345              		.cfi_def_cfa_offset 16
 346 0004 00AF     		add	r7, sp, #0
 347              	.LCFI14:
 348              		.cfi_def_cfa_register 7
 349 0006 7860     		str	r0, [r7, #4]
 350 0008 0B46     		mov	r3, r1
 351 000a FB70     		strb	r3, [r7, #3]
 307:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 308:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_DMA_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 309:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 352              		.loc 1 309 0
 353 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 354 000e 002B     		cmp	r3, #0
 355 0010 06D0     		beq	.L11
 310:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC DMA request */
 311:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 |= CR2_DMA_Set;
 356              		.loc 1 311 0
 357 0012 7B68     		ldr	r3, [r7, #4]
 358 0014 9B68     		ldr	r3, [r3, #8]
 359 0016 43F48072 		orr	r2, r3, #256
 360 001a 7B68     		ldr	r3, [r7, #4]
 361 001c 9A60     		str	r2, [r3, #8]
 362 001e 05E0     		b	.L10
 363              	.L11:
 312:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 313:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC DMA request */
 314:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 &= CR2_DMA_Reset;
 364              		.loc 1 314 0
 365 0020 7B68     		ldr	r3, [r7, #4]
 366 0022 9B68     		ldr	r3, [r3, #8]
 367 0024 23F48072 		bic	r2, r3, #256
 368 0028 7B68     		ldr	r3, [r7, #4]
 369 002a 9A60     		str	r2, [r3, #8]
 370              	.L10:
 315:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 316:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 371              		.loc 1 316 0
 372 002c 07F10C07 		add	r7, r7, #12
 373 0030 BD46     		mov	sp, r7
 374 0032 80BC     		pop	{r7}
 375 0034 7047     		bx	lr
 376              		.cfi_endproc
 377              	.LFE33:
 379 0036 00BF     		.section	.text.ADC_ITConfig,"ax",%progbits
 380              		.align	2
 381              		.global	ADC_ITConfig
 382              		.thumb
 383              		.thumb_func
 385              	ADC_ITConfig:
 386              	.LFB34:
 317:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 318:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 319:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the specified ADC interrupts.
 320:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 321:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
 322:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be any combination of the following values:
 323:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_EOC: End of conversion interrupt mask
 324:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
 325:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
 326:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the specified ADC interrupts.
 327:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 328:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 329:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 330:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState) {
 387              		.loc 1 330 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 16
 390              		@ frame_needed = 1, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392 0000 80B4     		push	{r7}
 393              	.LCFI15:
 394              		.cfi_def_cfa_offset 4
 395              		.cfi_offset 7, -4
 396 0002 85B0     		sub	sp, sp, #20
 397              	.LCFI16:
 398              		.cfi_def_cfa_offset 24
 399 0004 00AF     		add	r7, sp, #0
 400              	.LCFI17:
 401              		.cfi_def_cfa_register 7
 402 0006 7860     		str	r0, [r7, #4]
 403 0008 1346     		mov	r3, r2
 404 000a 0A46     		mov	r2, r1	@ movhi
 405 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 406 000e 7B70     		strb	r3, [r7, #1]
 331:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint8_t itmask = 0;
 407              		.loc 1 331 0
 408 0010 4FF00003 		mov	r3, #0
 409 0014 FB73     		strb	r3, [r7, #15]
 332:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 333:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState)); assert_param(I
 334:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the ADC IT index */
 335:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	itmask = (uint8_t) ADC_IT;
 410              		.loc 1 335 0
 411 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 412 0018 FB73     		strb	r3, [r7, #15]
 336:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 413              		.loc 1 336 0
 414 001a 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 415 001c 002B     		cmp	r3, #0
 416 001e 06D0     		beq	.L14
 337:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC interrupts */
 338:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 |= itmask;
 417              		.loc 1 338 0
 418 0020 7B68     		ldr	r3, [r7, #4]
 419 0022 5A68     		ldr	r2, [r3, #4]
 420 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 421 0026 1A43     		orrs	r2, r2, r3
 422 0028 7B68     		ldr	r3, [r7, #4]
 423 002a 5A60     		str	r2, [r3, #4]
 424 002c 07E0     		b	.L13
 425              	.L14:
 339:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 340:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC interrupts */
 341:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 &= (~(uint32_t) itmask);
 426              		.loc 1 341 0
 427 002e 7B68     		ldr	r3, [r7, #4]
 428 0030 5A68     		ldr	r2, [r3, #4]
 429 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 430 0034 6FEA0303 		mvn	r3, r3
 431 0038 1A40     		ands	r2, r2, r3
 432 003a 7B68     		ldr	r3, [r7, #4]
 433 003c 5A60     		str	r2, [r3, #4]
 434              	.L13:
 342:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 343:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 435              		.loc 1 343 0
 436 003e 07F11407 		add	r7, r7, #20
 437 0042 BD46     		mov	sp, r7
 438 0044 80BC     		pop	{r7}
 439 0046 7047     		bx	lr
 440              		.cfi_endproc
 441              	.LFE34:
 443              		.section	.text.ADC_ResetCalibration,"ax",%progbits
 444              		.align	2
 445              		.global	ADC_ResetCalibration
 446              		.thumb
 447              		.thumb_func
 449              	ADC_ResetCalibration:
 450              	.LFB35:
 344:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 345:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 346:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Resets the selected ADC calibration registers.
 347:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 348:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 349:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 350:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ResetCalibration(ADC_TypeDef* ADCx) {
 451              		.loc 1 350 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 8
 454              		@ frame_needed = 1, uses_anonymous_args = 0
 455              		@ link register save eliminated.
 456 0000 80B4     		push	{r7}
 457              	.LCFI18:
 458              		.cfi_def_cfa_offset 4
 459              		.cfi_offset 7, -4
 460 0002 83B0     		sub	sp, sp, #12
 461              	.LCFI19:
 462              		.cfi_def_cfa_offset 16
 463 0004 00AF     		add	r7, sp, #0
 464              	.LCFI20:
 465              		.cfi_def_cfa_register 7
 466 0006 7860     		str	r0, [r7, #4]
 351:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 352:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 353:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Resets the selected ADC calibration registers */
 354:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR2 |= CR2_RSTCAL_Set;
 467              		.loc 1 354 0
 468 0008 7B68     		ldr	r3, [r7, #4]
 469 000a 9B68     		ldr	r3, [r3, #8]
 470 000c 43F00802 		orr	r2, r3, #8
 471 0010 7B68     		ldr	r3, [r7, #4]
 472 0012 9A60     		str	r2, [r3, #8]
 355:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 473              		.loc 1 355 0
 474 0014 07F10C07 		add	r7, r7, #12
 475 0018 BD46     		mov	sp, r7
 476 001a 80BC     		pop	{r7}
 477 001c 7047     		bx	lr
 478              		.cfi_endproc
 479              	.LFE35:
 481 001e 00BF     		.section	.text.ADC_GetResetCalibrationStatus,"ax",%progbits
 482              		.align	2
 483              		.global	ADC_GetResetCalibrationStatus
 484              		.thumb
 485              		.thumb_func
 487              	ADC_GetResetCalibrationStatus:
 488              	.LFB36:
 356:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 357:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 358:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Gets the selected ADC reset calibration registers status.
 359:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 360:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The new state of ADC reset calibration registers (SET or RESET).
 361:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 362:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx) {
 489              		.loc 1 362 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 16
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494 0000 80B4     		push	{r7}
 495              	.LCFI21:
 496              		.cfi_def_cfa_offset 4
 497              		.cfi_offset 7, -4
 498 0002 85B0     		sub	sp, sp, #20
 499              	.LCFI22:
 500              		.cfi_def_cfa_offset 24
 501 0004 00AF     		add	r7, sp, #0
 502              	.LCFI23:
 503              		.cfi_def_cfa_register 7
 504 0006 7860     		str	r0, [r7, #4]
 363:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	FlagStatus bitstatus = RESET;
 505              		.loc 1 363 0
 506 0008 4FF00003 		mov	r3, #0
 507 000c FB73     		strb	r3, [r7, #15]
 364:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 365:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 366:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the status of RSTCAL bit */
 367:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if ((ADCx->CR2 & CR2_RSTCAL_Set )!= (uint32_t)RESET){
 508              		.loc 1 367 0
 509 000e 7B68     		ldr	r3, [r7, #4]
 510 0010 9B68     		ldr	r3, [r3, #8]
 511 0012 03F00803 		and	r3, r3, #8
 512 0016 002B     		cmp	r3, #0
 513 0018 03D0     		beq	.L18
 368:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* RSTCAL bit is set */
 369:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = SET;
 514              		.loc 1 369 0
 515 001a 4FF00103 		mov	r3, #1
 516 001e FB73     		strb	r3, [r7, #15]
 517 0020 02E0     		b	.L19
 518              	.L18:
 370:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 371:../StdPeripheralDriver/src/stm32f10x_adc.c **** else
 372:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 373:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* RSTCAL bit is reset */
 374:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = RESET;
 519              		.loc 1 374 0
 520 0022 4FF00003 		mov	r3, #0
 521 0026 FB73     		strb	r3, [r7, #15]
 522              	.L19:
 375:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 376:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the RSTCAL bit status */
 377:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return bitstatus;
 523              		.loc 1 377 0
 524 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 378:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 525              		.loc 1 378 0
 526 002a 1846     		mov	r0, r3
 527 002c 07F11407 		add	r7, r7, #20
 528 0030 BD46     		mov	sp, r7
 529 0032 80BC     		pop	{r7}
 530 0034 7047     		bx	lr
 531              		.cfi_endproc
 532              	.LFE36:
 534 0036 00BF     		.section	.text.ADC_StartCalibration,"ax",%progbits
 535              		.align	2
 536              		.global	ADC_StartCalibration
 537              		.thumb
 538              		.thumb_func
 540              	ADC_StartCalibration:
 541              	.LFB37:
 379:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 380:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 381:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Starts the selected ADC calibration process.
 382:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 383:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 384:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 385:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StartCalibration(ADC_TypeDef* ADCx) {
 542              		.loc 1 385 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 547 0000 80B4     		push	{r7}
 548              	.LCFI24:
 549              		.cfi_def_cfa_offset 4
 550              		.cfi_offset 7, -4
 551 0002 83B0     		sub	sp, sp, #12
 552              	.LCFI25:
 553              		.cfi_def_cfa_offset 16
 554 0004 00AF     		add	r7, sp, #0
 555              	.LCFI26:
 556              		.cfi_def_cfa_register 7
 557 0006 7860     		str	r0, [r7, #4]
 386:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 387:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 388:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Enable the selected ADC calibration process */
 389:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR2 |= CR2_CAL_Set;
 558              		.loc 1 389 0
 559 0008 7B68     		ldr	r3, [r7, #4]
 560 000a 9B68     		ldr	r3, [r3, #8]
 561 000c 43F00402 		orr	r2, r3, #4
 562 0010 7B68     		ldr	r3, [r7, #4]
 563 0012 9A60     		str	r2, [r3, #8]
 390:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 564              		.loc 1 390 0
 565 0014 07F10C07 		add	r7, r7, #12
 566 0018 BD46     		mov	sp, r7
 567 001a 80BC     		pop	{r7}
 568 001c 7047     		bx	lr
 569              		.cfi_endproc
 570              	.LFE37:
 572 001e 00BF     		.section	.text.ADC_GetCalibrationStatus,"ax",%progbits
 573              		.align	2
 574              		.global	ADC_GetCalibrationStatus
 575              		.thumb
 576              		.thumb_func
 578              	ADC_GetCalibrationStatus:
 579              	.LFB38:
 391:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 392:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 393:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Gets the selected ADC calibration status.
 394:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 395:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The new state of ADC calibration (SET or RESET).
 396:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 397:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx) {
 580              		.loc 1 397 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 16
 583              		@ frame_needed = 1, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585 0000 80B4     		push	{r7}
 586              	.LCFI27:
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 0002 85B0     		sub	sp, sp, #20
 590              	.LCFI28:
 591              		.cfi_def_cfa_offset 24
 592 0004 00AF     		add	r7, sp, #0
 593              	.LCFI29:
 594              		.cfi_def_cfa_register 7
 595 0006 7860     		str	r0, [r7, #4]
 398:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	FlagStatus bitstatus = RESET;
 596              		.loc 1 398 0
 597 0008 4FF00003 		mov	r3, #0
 598 000c FB73     		strb	r3, [r7, #15]
 399:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 400:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 401:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the status of CAL bit */
 402:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if ((ADCx->CR2 & CR2_CAL_Set )!= (uint32_t)RESET){
 599              		.loc 1 402 0
 600 000e 7B68     		ldr	r3, [r7, #4]
 601 0010 9B68     		ldr	r3, [r3, #8]
 602 0012 03F00403 		and	r3, r3, #4
 603 0016 002B     		cmp	r3, #0
 604 0018 03D0     		beq	.L23
 403:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* CAL bit is set: calibration on going */
 404:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = SET;
 605              		.loc 1 404 0
 606 001a 4FF00103 		mov	r3, #1
 607 001e FB73     		strb	r3, [r7, #15]
 608 0020 02E0     		b	.L24
 609              	.L23:
 405:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 406:../StdPeripheralDriver/src/stm32f10x_adc.c **** else
 407:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 408:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* CAL bit is reset: end of calibration */
 409:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = RESET;
 610              		.loc 1 409 0
 611 0022 4FF00003 		mov	r3, #0
 612 0026 FB73     		strb	r3, [r7, #15]
 613              	.L24:
 410:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 411:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the CAL bit status */
 412:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return bitstatus;
 614              		.loc 1 412 0
 615 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 413:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 616              		.loc 1 413 0
 617 002a 1846     		mov	r0, r3
 618 002c 07F11407 		add	r7, r7, #20
 619 0030 BD46     		mov	sp, r7
 620 0032 80BC     		pop	{r7}
 621 0034 7047     		bx	lr
 622              		.cfi_endproc
 623              	.LFE38:
 625 0036 00BF     		.section	.text.ADC_SoftwareStartConvCmd,"ax",%progbits
 626              		.align	2
 627              		.global	ADC_SoftwareStartConvCmd
 628              		.thumb
 629              		.thumb_func
 631              	ADC_SoftwareStartConvCmd:
 632              	.LFB39:
 414:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 415:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 416:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the selected ADC software start conversion .
 417:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 418:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC software start conversion.
 419:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 420:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 421:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 422:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState) {
 633              		.loc 1 422 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638 0000 80B4     		push	{r7}
 639              	.LCFI30:
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 7, -4
 642 0002 83B0     		sub	sp, sp, #12
 643              	.LCFI31:
 644              		.cfi_def_cfa_offset 16
 645 0004 00AF     		add	r7, sp, #0
 646              	.LCFI32:
 647              		.cfi_def_cfa_register 7
 648 0006 7860     		str	r0, [r7, #4]
 649 0008 0B46     		mov	r3, r1
 650 000a FB70     		strb	r3, [r7, #3]
 423:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 424:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 425:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 651              		.loc 1 425 0
 652 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 653 000e 002B     		cmp	r3, #0
 654 0010 06D0     		beq	.L27
 426:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC conversion on external event and start the selected
 427:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		 ADC conversion */
 428:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 655              		.loc 1 428 0
 656 0012 7B68     		ldr	r3, [r7, #4]
 657 0014 9B68     		ldr	r3, [r3, #8]
 658 0016 43F4A002 		orr	r2, r3, #5242880
 659 001a 7B68     		ldr	r3, [r7, #4]
 660 001c 9A60     		str	r2, [r3, #8]
 661 001e 05E0     		b	.L26
 662              	.L27:
 429:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 430:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC conversion on external event and stop the selected
 431:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		 ADC conversion */
 432:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 663              		.loc 1 432 0
 664 0020 7B68     		ldr	r3, [r7, #4]
 665 0022 9B68     		ldr	r3, [r3, #8]
 666 0024 23F4A002 		bic	r2, r3, #5242880
 667 0028 7B68     		ldr	r3, [r7, #4]
 668 002a 9A60     		str	r2, [r3, #8]
 669              	.L26:
 433:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 434:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 670              		.loc 1 434 0
 671 002c 07F10C07 		add	r7, r7, #12
 672 0030 BD46     		mov	sp, r7
 673 0032 80BC     		pop	{r7}
 674 0034 7047     		bx	lr
 675              		.cfi_endproc
 676              	.LFE39:
 678 0036 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 679              		.align	2
 680              		.global	ADC_GetSoftwareStartConvStatus
 681              		.thumb
 682              		.thumb_func
 684              	ADC_GetSoftwareStartConvStatus:
 685              	.LFB40:
 435:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 436:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 437:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Gets the selected ADC Software start conversion Status.
 438:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The new state of ADC software start conversion (SET or RESET).
 440:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 441:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx) {
 686              		.loc 1 441 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 16
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691 0000 80B4     		push	{r7}
 692              	.LCFI33:
 693              		.cfi_def_cfa_offset 4
 694              		.cfi_offset 7, -4
 695 0002 85B0     		sub	sp, sp, #20
 696              	.LCFI34:
 697              		.cfi_def_cfa_offset 24
 698 0004 00AF     		add	r7, sp, #0
 699              	.LCFI35:
 700              		.cfi_def_cfa_register 7
 701 0006 7860     		str	r0, [r7, #4]
 442:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	FlagStatus bitstatus = RESET;
 702              		.loc 1 442 0
 703 0008 4FF00003 		mov	r3, #0
 704 000c FB73     		strb	r3, [r7, #15]
 443:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 444:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 445:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the status of SWSTART bit */
 446:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if ((ADCx->CR2 & CR2_SWSTART_Set )!= (uint32_t)RESET){
 705              		.loc 1 446 0
 706 000e 7B68     		ldr	r3, [r7, #4]
 707 0010 9B68     		ldr	r3, [r3, #8]
 708 0012 03F48003 		and	r3, r3, #4194304
 709 0016 002B     		cmp	r3, #0
 710 0018 03D0     		beq	.L30
 447:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* SWSTART bit is set */
 448:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = SET;
 711              		.loc 1 448 0
 712 001a 4FF00103 		mov	r3, #1
 713 001e FB73     		strb	r3, [r7, #15]
 714 0020 02E0     		b	.L31
 715              	.L30:
 449:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 450:../StdPeripheralDriver/src/stm32f10x_adc.c **** else
 451:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 452:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* SWSTART bit is reset */
 453:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = RESET;
 716              		.loc 1 453 0
 717 0022 4FF00003 		mov	r3, #0
 718 0026 FB73     		strb	r3, [r7, #15]
 719              	.L31:
 454:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 455:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the SWSTART bit status */
 456:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return bitstatus;
 720              		.loc 1 456 0
 721 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 457:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 722              		.loc 1 457 0
 723 002a 1846     		mov	r0, r3
 724 002c 07F11407 		add	r7, r7, #20
 725 0030 BD46     		mov	sp, r7
 726 0032 80BC     		pop	{r7}
 727 0034 7047     		bx	lr
 728              		.cfi_endproc
 729              	.LFE40:
 731 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 732              		.align	2
 733              		.global	ADC_DiscModeChannelCountConfig
 734              		.thumb
 735              		.thumb_func
 737              	ADC_DiscModeChannelCountConfig:
 738              	.LFB41:
 458:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 459:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 460:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Configures the discontinuous mode for the selected ADC regular
 461:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         group channel.
 462:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 463:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  Number: specifies the discontinuous mode regular channel
 464:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         count value. This number must be between 1 and 8.
 465:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 466:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 467:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number) {
 739              		.loc 1 467 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 16
 742              		@ frame_needed = 1, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744 0000 80B4     		push	{r7}
 745              	.LCFI36:
 746              		.cfi_def_cfa_offset 4
 747              		.cfi_offset 7, -4
 748 0002 85B0     		sub	sp, sp, #20
 749              	.LCFI37:
 750              		.cfi_def_cfa_offset 24
 751 0004 00AF     		add	r7, sp, #0
 752              	.LCFI38:
 753              		.cfi_def_cfa_register 7
 754 0006 7860     		str	r0, [r7, #4]
 755 0008 0B46     		mov	r3, r1
 756 000a FB70     		strb	r3, [r7, #3]
 468:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg1 = 0;
 757              		.loc 1 468 0
 758 000c 4FF00003 		mov	r3, #0
 759 0010 FB60     		str	r3, [r7, #12]
 469:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg2 = 0;
 760              		.loc 1 469 0
 761 0012 4FF00003 		mov	r3, #0
 762 0016 BB60     		str	r3, [r7, #8]
 470:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 471:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 472:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the old register value */
 473:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 = ADCx->CR1;
 763              		.loc 1 473 0
 764 0018 7B68     		ldr	r3, [r7, #4]
 765 001a 5B68     		ldr	r3, [r3, #4]
 766 001c FB60     		str	r3, [r7, #12]
 474:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear the old discontinuous mode channel count */
 475:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 &= CR1_DISCNUM_Reset;
 767              		.loc 1 475 0
 768 001e FB68     		ldr	r3, [r7, #12]
 769 0020 23F46043 		bic	r3, r3, #57344
 770 0024 FB60     		str	r3, [r7, #12]
 476:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the discontinuous mode channel count */
 477:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg2 = Number - 1;
 771              		.loc 1 477 0
 772 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 773 0028 03F1FF33 		add	r3, r3, #-1
 774 002c BB60     		str	r3, [r7, #8]
 478:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= tmpreg2 << 13;
 775              		.loc 1 478 0
 776 002e BB68     		ldr	r3, [r7, #8]
 777 0030 4FEA4333 		lsl	r3, r3, #13
 778 0034 FA68     		ldr	r2, [r7, #12]
 779 0036 1343     		orrs	r3, r3, r2
 780 0038 FB60     		str	r3, [r7, #12]
 479:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Store the new register value */
 480:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR1 = tmpreg1;
 781              		.loc 1 480 0
 782 003a 7B68     		ldr	r3, [r7, #4]
 783 003c FA68     		ldr	r2, [r7, #12]
 784 003e 5A60     		str	r2, [r3, #4]
 481:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 785              		.loc 1 481 0
 786 0040 07F11407 		add	r7, r7, #20
 787 0044 BD46     		mov	sp, r7
 788 0046 80BC     		pop	{r7}
 789 0048 7047     		bx	lr
 790              		.cfi_endproc
 791              	.LFE41:
 793 004a 00BF     		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 794              		.align	2
 795              		.global	ADC_DiscModeCmd
 796              		.thumb
 797              		.thumb_func
 799              	ADC_DiscModeCmd:
 800              	.LFB42:
 482:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 483:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 484:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the discontinuous mode on regular group
 485:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         channel for the specified ADC
 486:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 487:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC discontinuous mode
 488:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         on regular group channel.
 489:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         This parameter can be: ENABLE or DISABLE.
 490:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 491:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 492:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState) {
 801              		.loc 1 492 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 8
 804              		@ frame_needed = 1, uses_anonymous_args = 0
 805              		@ link register save eliminated.
 806 0000 80B4     		push	{r7}
 807              	.LCFI39:
 808              		.cfi_def_cfa_offset 4
 809              		.cfi_offset 7, -4
 810 0002 83B0     		sub	sp, sp, #12
 811              	.LCFI40:
 812              		.cfi_def_cfa_offset 16
 813 0004 00AF     		add	r7, sp, #0
 814              	.LCFI41:
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
 817 0008 0B46     		mov	r3, r1
 818 000a FB70     		strb	r3, [r7, #3]
 493:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 494:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 495:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 819              		.loc 1 495 0
 820 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 821 000e 002B     		cmp	r3, #0
 822 0010 06D0     		beq	.L35
 496:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC regular discontinuous mode */
 497:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 |= CR1_DISCEN_Set;
 823              		.loc 1 497 0
 824 0012 7B68     		ldr	r3, [r7, #4]
 825 0014 5B68     		ldr	r3, [r3, #4]
 826 0016 43F40062 		orr	r2, r3, #2048
 827 001a 7B68     		ldr	r3, [r7, #4]
 828 001c 5A60     		str	r2, [r3, #4]
 829 001e 05E0     		b	.L34
 830              	.L35:
 498:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 499:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC regular discontinuous mode */
 500:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 &= CR1_DISCEN_Reset;
 831              		.loc 1 500 0
 832 0020 7B68     		ldr	r3, [r7, #4]
 833 0022 5B68     		ldr	r3, [r3, #4]
 834 0024 23F40062 		bic	r2, r3, #2048
 835 0028 7B68     		ldr	r3, [r7, #4]
 836 002a 5A60     		str	r2, [r3, #4]
 837              	.L34:
 501:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 502:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 838              		.loc 1 502 0
 839 002c 07F10C07 		add	r7, r7, #12
 840 0030 BD46     		mov	sp, r7
 841 0032 80BC     		pop	{r7}
 842 0034 7047     		bx	lr
 843              		.cfi_endproc
 844              	.LFE42:
 846 0036 00BF     		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 847              		.align	2
 848              		.global	ADC_RegularChannelConfig
 849              		.thumb
 850              		.thumb_func
 852              	ADC_RegularChannelConfig:
 853              	.LFB43:
 503:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 504:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 505:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Configures for the selected ADC regular channel its corresponding
 506:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         rank in the sequencer and its sample time.
 507:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 508:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_Channel: the ADC channel to configure. 
 509:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 510:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_0: ADC Channel0 selected
 511:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_1: ADC Channel1 selected
 512:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_2: ADC Channel2 selected
 513:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_3: ADC Channel3 selected
 514:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_4: ADC Channel4 selected
 515:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_5: ADC Channel5 selected
 516:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_6: ADC Channel6 selected
 517:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_7: ADC Channel7 selected
 518:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_8: ADC Channel8 selected
 519:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_9: ADC Channel9 selected
 520:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_10: ADC Channel10 selected
 521:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_11: ADC Channel11 selected
 522:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_12: ADC Channel12 selected
 523:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_13: ADC Channel13 selected
 524:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_14: ADC Channel14 selected
 525:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_15: ADC Channel15 selected
 526:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_16: ADC Channel16 selected
 527:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_17: ADC Channel17 selected
 528:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  Rank: The rank in the regular group sequencer. This parameter must be between 1 to 16.
 529:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 530:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 531:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 532:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 533:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 534:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 535:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 536:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 537:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 538:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 539:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 540:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 541:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel,
 542:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		uint8_t Rank, uint8_t ADC_SampleTime) {
 854              		.loc 1 542 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 16
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859 0000 80B4     		push	{r7}
 860              	.LCFI42:
 861              		.cfi_def_cfa_offset 4
 862              		.cfi_offset 7, -4
 863 0002 85B0     		sub	sp, sp, #20
 864              	.LCFI43:
 865              		.cfi_def_cfa_offset 24
 866 0004 00AF     		add	r7, sp, #0
 867              	.LCFI44:
 868              		.cfi_def_cfa_register 7
 869 0006 7860     		str	r0, [r7, #4]
 870 0008 F970     		strb	r1, [r7, #3]
 871 000a BA70     		strb	r2, [r7, #2]
 872 000c 7B70     		strb	r3, [r7, #1]
 543:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg1 = 0, tmpreg2 = 0;
 873              		.loc 1 543 0
 874 000e 4FF00003 		mov	r3, #0
 875 0012 FB60     		str	r3, [r7, #12]
 876 0014 4FF00003 		mov	r3, #0
 877 0018 BB60     		str	r3, [r7, #8]
 544:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 545:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_CHANNEL(ADC_Channel)); assert_param(IS_
 546:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 547:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (ADC_Channel > ADC_Channel_9 ) {
 878              		.loc 1 547 0
 879 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 880 001c 092B     		cmp	r3, #9
 881 001e 27D9     		bls	.L38
 548:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Get the old register value */
 549:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 = ADCx->SMPR1;
 882              		.loc 1 549 0
 883 0020 7B68     		ldr	r3, [r7, #4]
 884 0022 DB68     		ldr	r3, [r3, #12]
 885 0024 FB60     		str	r3, [r7, #12]
 550:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to clear */
 551:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 886              		.loc 1 551 0
 887 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 888 0028 1346     		mov	r3, r2
 889 002a 4FEA4303 		lsl	r3, r3, #1
 890 002e 9B18     		adds	r3, r3, r2
 891 0030 A3F11E03 		sub	r3, r3, #30
 892 0034 4FF00702 		mov	r2, #7
 893 0038 02FA03F3 		lsl	r3, r2, r3
 894 003c BB60     		str	r3, [r7, #8]
 552:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Clear the old channel sample time */
 553:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 &= ~tmpreg2;
 895              		.loc 1 553 0
 896 003e BB68     		ldr	r3, [r7, #8]
 897 0040 6FEA0303 		mvn	r3, r3
 898 0044 FA68     		ldr	r2, [r7, #12]
 899 0046 1340     		ands	r3, r3, r2
 900 0048 FB60     		str	r3, [r7, #12]
 554:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to set */
 555:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = (uint32_t) ADC_SampleTime << (3 * (ADC_Channel - 10));
 901              		.loc 1 555 0
 902 004a 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 903 004c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 904 004e 1346     		mov	r3, r2
 905 0050 4FEA4303 		lsl	r3, r3, #1
 906 0054 9B18     		adds	r3, r3, r2
 907 0056 A3F11E03 		sub	r3, r3, #30
 908 005a 01FA03F3 		lsl	r3, r1, r3
 909 005e BB60     		str	r3, [r7, #8]
 556:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the new channel sample time */
 557:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 |= tmpreg2;
 910              		.loc 1 557 0
 911 0060 FA68     		ldr	r2, [r7, #12]
 912 0062 BB68     		ldr	r3, [r7, #8]
 913 0064 1343     		orrs	r3, r3, r2
 914 0066 FB60     		str	r3, [r7, #12]
 558:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Store the new register value */
 559:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->SMPR1 = tmpreg1;
 915              		.loc 1 559 0
 916 0068 7B68     		ldr	r3, [r7, #4]
 917 006a FA68     		ldr	r2, [r7, #12]
 918 006c DA60     		str	r2, [r3, #12]
 919 006e 22E0     		b	.L39
 920              	.L38:
 560:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else /* ADC_Channel include in ADC_Channel_[0..9] */
 561:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	{
 562:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Get the old register value */
 563:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 = ADCx->SMPR2;
 921              		.loc 1 563 0
 922 0070 7B68     		ldr	r3, [r7, #4]
 923 0072 1B69     		ldr	r3, [r3, #16]
 924 0074 FB60     		str	r3, [r7, #12]
 564:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to clear */
 565:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 925              		.loc 1 565 0
 926 0076 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 927 0078 1346     		mov	r3, r2
 928 007a 4FEA4303 		lsl	r3, r3, #1
 929 007e 9B18     		adds	r3, r3, r2
 930 0080 4FF00702 		mov	r2, #7
 931 0084 02FA03F3 		lsl	r3, r2, r3
 932 0088 BB60     		str	r3, [r7, #8]
 566:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Clear the old channel sample time */
 567:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 &= ~tmpreg2;
 933              		.loc 1 567 0
 934 008a BB68     		ldr	r3, [r7, #8]
 935 008c 6FEA0303 		mvn	r3, r3
 936 0090 FA68     		ldr	r2, [r7, #12]
 937 0092 1340     		ands	r3, r3, r2
 938 0094 FB60     		str	r3, [r7, #12]
 568:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to set */
 569:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = (uint32_t) ADC_SampleTime << (3 * ADC_Channel);
 939              		.loc 1 569 0
 940 0096 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 941 0098 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 942 009a 1346     		mov	r3, r2
 943 009c 4FEA4303 		lsl	r3, r3, #1
 944 00a0 9B18     		adds	r3, r3, r2
 945 00a2 01FA03F3 		lsl	r3, r1, r3
 946 00a6 BB60     		str	r3, [r7, #8]
 570:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the new channel sample time */
 571:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 |= tmpreg2;
 947              		.loc 1 571 0
 948 00a8 FA68     		ldr	r2, [r7, #12]
 949 00aa BB68     		ldr	r3, [r7, #8]
 950 00ac 1343     		orrs	r3, r3, r2
 951 00ae FB60     		str	r3, [r7, #12]
 572:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Store the new register value */
 573:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->SMPR2 = tmpreg1;
 952              		.loc 1 573 0
 953 00b0 7B68     		ldr	r3, [r7, #4]
 954 00b2 FA68     		ldr	r2, [r7, #12]
 955 00b4 1A61     		str	r2, [r3, #16]
 956              	.L39:
 574:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 575:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* For Rank 1 to 6 */
 576:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (Rank < 7) {
 957              		.loc 1 576 0
 958 00b6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 959 00b8 062B     		cmp	r3, #6
 960 00ba 27D8     		bhi	.L40
 577:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Get the old register value */
 578:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 = ADCx->SQR3;
 961              		.loc 1 578 0
 962 00bc 7B68     		ldr	r3, [r7, #4]
 963 00be 5B6B     		ldr	r3, [r3, #52]
 964 00c0 FB60     		str	r3, [r7, #12]
 579:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to clear */
 580:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 965              		.loc 1 580 0
 966 00c2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 967 00c4 03F1FF32 		add	r2, r3, #-1
 968 00c8 1346     		mov	r3, r2
 969 00ca 4FEA8303 		lsl	r3, r3, #2
 970 00ce 9B18     		adds	r3, r3, r2
 971 00d0 4FF01F02 		mov	r2, #31
 972 00d4 02FA03F3 		lsl	r3, r2, r3
 973 00d8 BB60     		str	r3, [r7, #8]
 581:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Clear the old SQx bits for the selected rank */
 582:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 &= ~tmpreg2;
 974              		.loc 1 582 0
 975 00da BB68     		ldr	r3, [r7, #8]
 976 00dc 6FEA0303 		mvn	r3, r3
 977 00e0 FA68     		ldr	r2, [r7, #12]
 978 00e2 1340     		ands	r3, r3, r2
 979 00e4 FB60     		str	r3, [r7, #12]
 583:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to set */
 584:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = (uint32_t) ADC_Channel << (5 * (Rank - 1));
 980              		.loc 1 584 0
 981 00e6 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 982 00e8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 983 00ea 03F1FF32 		add	r2, r3, #-1
 984 00ee 1346     		mov	r3, r2
 985 00f0 4FEA8303 		lsl	r3, r3, #2
 986 00f4 9B18     		adds	r3, r3, r2
 987 00f6 01FA03F3 		lsl	r3, r1, r3
 988 00fa BB60     		str	r3, [r7, #8]
 585:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the SQx bits for the selected rank */
 586:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 |= tmpreg2;
 989              		.loc 1 586 0
 990 00fc FA68     		ldr	r2, [r7, #12]
 991 00fe BB68     		ldr	r3, [r7, #8]
 992 0100 1343     		orrs	r3, r3, r2
 993 0102 FB60     		str	r3, [r7, #12]
 587:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Store the new register value */
 588:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->SQR3 = tmpreg1;
 994              		.loc 1 588 0
 995 0104 7B68     		ldr	r3, [r7, #4]
 996 0106 FA68     		ldr	r2, [r7, #12]
 997 0108 5A63     		str	r2, [r3, #52]
 998 010a 51E0     		b	.L37
 999              	.L40:
 589:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 590:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* For Rank 7 to 12 */
 591:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	else if (Rank < 13) {
 1000              		.loc 1 591 0
 1001 010c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1002 010e 0C2B     		cmp	r3, #12
 1003 0110 27D8     		bhi	.L42
 592:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Get the old register value */
 593:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 = ADCx->SQR2;
 1004              		.loc 1 593 0
 1005 0112 7B68     		ldr	r3, [r7, #4]
 1006 0114 1B6B     		ldr	r3, [r3, #48]
 1007 0116 FB60     		str	r3, [r7, #12]
 594:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to clear */
 595:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 1008              		.loc 1 595 0
 1009 0118 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1010 011a 1346     		mov	r3, r2
 1011 011c 4FEA8303 		lsl	r3, r3, #2
 1012 0120 9B18     		adds	r3, r3, r2
 1013 0122 A3F12303 		sub	r3, r3, #35
 1014 0126 4FF01F02 		mov	r2, #31
 1015 012a 02FA03F3 		lsl	r3, r2, r3
 1016 012e BB60     		str	r3, [r7, #8]
 596:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Clear the old SQx bits for the selected rank */
 597:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 &= ~tmpreg2;
 1017              		.loc 1 597 0
 1018 0130 BB68     		ldr	r3, [r7, #8]
 1019 0132 6FEA0303 		mvn	r3, r3
 1020 0136 FA68     		ldr	r2, [r7, #12]
 1021 0138 1340     		ands	r3, r3, r2
 1022 013a FB60     		str	r3, [r7, #12]
 598:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to set */
 599:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = (uint32_t) ADC_Channel << (5 * (Rank - 7));
 1023              		.loc 1 599 0
 1024 013c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1025 013e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1026 0140 1346     		mov	r3, r2
 1027 0142 4FEA8303 		lsl	r3, r3, #2
 1028 0146 9B18     		adds	r3, r3, r2
 1029 0148 A3F12303 		sub	r3, r3, #35
 1030 014c 01FA03F3 		lsl	r3, r1, r3
 1031 0150 BB60     		str	r3, [r7, #8]
 600:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the SQx bits for the selected rank */
 601:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 |= tmpreg2;
 1032              		.loc 1 601 0
 1033 0152 FA68     		ldr	r2, [r7, #12]
 1034 0154 BB68     		ldr	r3, [r7, #8]
 1035 0156 1343     		orrs	r3, r3, r2
 1036 0158 FB60     		str	r3, [r7, #12]
 602:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Store the new register value */
 603:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->SQR2 = tmpreg1;
 1037              		.loc 1 603 0
 1038 015a 7B68     		ldr	r3, [r7, #4]
 1039 015c FA68     		ldr	r2, [r7, #12]
 1040 015e 1A63     		str	r2, [r3, #48]
 1041 0160 26E0     		b	.L37
 1042              	.L42:
 604:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 605:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* For Rank 13 to 16 */
 606:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	else {
 607:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Get the old register value */
 608:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 = ADCx->SQR1;
 1043              		.loc 1 608 0
 1044 0162 7B68     		ldr	r3, [r7, #4]
 1045 0164 DB6A     		ldr	r3, [r3, #44]
 1046 0166 FB60     		str	r3, [r7, #12]
 609:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to clear */
 610:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 1047              		.loc 1 610 0
 1048 0168 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1049 016a 1346     		mov	r3, r2
 1050 016c 4FEA8303 		lsl	r3, r3, #2
 1051 0170 9B18     		adds	r3, r3, r2
 1052 0172 A3F14103 		sub	r3, r3, #65
 1053 0176 4FF01F02 		mov	r2, #31
 1054 017a 02FA03F3 		lsl	r3, r2, r3
 1055 017e BB60     		str	r3, [r7, #8]
 611:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Clear the old SQx bits for the selected rank */
 612:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 &= ~tmpreg2;
 1056              		.loc 1 612 0
 1057 0180 BB68     		ldr	r3, [r7, #8]
 1058 0182 6FEA0303 		mvn	r3, r3
 1059 0186 FA68     		ldr	r2, [r7, #12]
 1060 0188 1340     		ands	r3, r3, r2
 1061 018a FB60     		str	r3, [r7, #12]
 613:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to set */
 614:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = (uint32_t) ADC_Channel << (5 * (Rank - 13));
 1062              		.loc 1 614 0
 1063 018c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1064 018e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1065 0190 1346     		mov	r3, r2
 1066 0192 4FEA8303 		lsl	r3, r3, #2
 1067 0196 9B18     		adds	r3, r3, r2
 1068 0198 A3F14103 		sub	r3, r3, #65
 1069 019c 01FA03F3 		lsl	r3, r1, r3
 1070 01a0 BB60     		str	r3, [r7, #8]
 615:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the SQx bits for the selected rank */
 616:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 |= tmpreg2;
 1071              		.loc 1 616 0
 1072 01a2 FA68     		ldr	r2, [r7, #12]
 1073 01a4 BB68     		ldr	r3, [r7, #8]
 1074 01a6 1343     		orrs	r3, r3, r2
 1075 01a8 FB60     		str	r3, [r7, #12]
 617:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Store the new register value */
 618:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->SQR1 = tmpreg1;
 1076              		.loc 1 618 0
 1077 01aa 7B68     		ldr	r3, [r7, #4]
 1078 01ac FA68     		ldr	r2, [r7, #12]
 1079 01ae DA62     		str	r2, [r3, #44]
 1080              	.L37:
 619:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 620:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1081              		.loc 1 620 0
 1082 01b0 07F11407 		add	r7, r7, #20
 1083 01b4 BD46     		mov	sp, r7
 1084 01b6 80BC     		pop	{r7}
 1085 01b8 7047     		bx	lr
 1086              		.cfi_endproc
 1087              	.LFE43:
 1089 01ba 00BF     		.section	.text.ADC_ExternalTrigConvCmd,"ax",%progbits
 1090              		.align	2
 1091              		.global	ADC_ExternalTrigConvCmd
 1092              		.thumb
 1093              		.thumb_func
 1095              	ADC_ExternalTrigConvCmd:
 1096              	.LFB44:
 621:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 622:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 623:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the ADCx conversion through external trigger.
 624:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 625:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC external trigger start of conversion.
 626:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 627:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 628:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 629:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState) {
 1097              		.loc 1 629 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 8
 1100              		@ frame_needed = 1, uses_anonymous_args = 0
 1101              		@ link register save eliminated.
 1102 0000 80B4     		push	{r7}
 1103              	.LCFI45:
 1104              		.cfi_def_cfa_offset 4
 1105              		.cfi_offset 7, -4
 1106 0002 83B0     		sub	sp, sp, #12
 1107              	.LCFI46:
 1108              		.cfi_def_cfa_offset 16
 1109 0004 00AF     		add	r7, sp, #0
 1110              	.LCFI47:
 1111              		.cfi_def_cfa_register 7
 1112 0006 7860     		str	r0, [r7, #4]
 1113 0008 0B46     		mov	r3, r1
 1114 000a FB70     		strb	r3, [r7, #3]
 630:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 631:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 632:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 1115              		.loc 1 632 0
 1116 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1117 000e 002B     		cmp	r3, #0
 1118 0010 06D0     		beq	.L44
 633:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC conversion on external event */
 634:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 |= CR2_EXTTRIG_Set;
 1119              		.loc 1 634 0
 1120 0012 7B68     		ldr	r3, [r7, #4]
 1121 0014 9B68     		ldr	r3, [r3, #8]
 1122 0016 43F48012 		orr	r2, r3, #1048576
 1123 001a 7B68     		ldr	r3, [r7, #4]
 1124 001c 9A60     		str	r2, [r3, #8]
 1125 001e 05E0     		b	.L43
 1126              	.L44:
 635:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 636:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC conversion on external event */
 637:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 &= CR2_EXTTRIG_Reset;
 1127              		.loc 1 637 0
 1128 0020 7B68     		ldr	r3, [r7, #4]
 1129 0022 9B68     		ldr	r3, [r3, #8]
 1130 0024 23F48012 		bic	r2, r3, #1048576
 1131 0028 7B68     		ldr	r3, [r7, #4]
 1132 002a 9A60     		str	r2, [r3, #8]
 1133              	.L43:
 638:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 639:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1134              		.loc 1 639 0
 1135 002c 07F10C07 		add	r7, r7, #12
 1136 0030 BD46     		mov	sp, r7
 1137 0032 80BC     		pop	{r7}
 1138 0034 7047     		bx	lr
 1139              		.cfi_endproc
 1140              	.LFE44:
 1142 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 1143              		.align	2
 1144              		.global	ADC_GetConversionValue
 1145              		.thumb
 1146              		.thumb_func
 1148              	ADC_GetConversionValue:
 1149              	.LFB45:
 640:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 641:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 642:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Returns the last ADCx conversion result data for regular channel.
 643:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 644:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The Data conversion value.
 645:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 646:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx) {
 1150              		.loc 1 646 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 8
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154              		@ link register save eliminated.
 1155 0000 80B4     		push	{r7}
 1156              	.LCFI48:
 1157              		.cfi_def_cfa_offset 4
 1158              		.cfi_offset 7, -4
 1159 0002 83B0     		sub	sp, sp, #12
 1160              	.LCFI49:
 1161              		.cfi_def_cfa_offset 16
 1162 0004 00AF     		add	r7, sp, #0
 1163              	.LCFI50:
 1164              		.cfi_def_cfa_register 7
 1165 0006 7860     		str	r0, [r7, #4]
 647:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 648:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 649:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the selected ADC conversion value */
 650:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return (uint16_t) ADCx->DR;
 1166              		.loc 1 650 0
 1167 0008 7B68     		ldr	r3, [r7, #4]
 1168 000a DB6C     		ldr	r3, [r3, #76]
 1169 000c 9BB2     		uxth	r3, r3
 651:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1170              		.loc 1 651 0
 1171 000e 1846     		mov	r0, r3
 1172 0010 07F10C07 		add	r7, r7, #12
 1173 0014 BD46     		mov	sp, r7
 1174 0016 80BC     		pop	{r7}
 1175 0018 7047     		bx	lr
 1176              		.cfi_endproc
 1177              	.LFE45:
 1179 001a 00BF     		.section	.text.ADC_GetDualModeConversionValue,"ax",%progbits
 1180              		.align	2
 1181              		.global	ADC_GetDualModeConversionValue
 1182              		.thumb
 1183              		.thumb_func
 1185              	ADC_GetDualModeConversionValue:
 1186              	.LFB46:
 652:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 653:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 654:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
 655:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The Data conversion value.
 656:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 657:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint32_t ADC_GetDualModeConversionValue(void) {
 1187              		.loc 1 657 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191              		@ link register save eliminated.
 1192 0000 80B4     		push	{r7}
 1193              	.LCFI51:
 1194              		.cfi_def_cfa_offset 4
 1195              		.cfi_offset 7, -4
 1196 0002 00AF     		add	r7, sp, #0
 1197              	.LCFI52:
 1198              		.cfi_def_cfa_register 7
 658:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the dual mode conversion value */
 659:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return (*(__IO uint32_t *) DR_ADDRESS );
 1199              		.loc 1 659 0
 1200 0004 42F24C43 		movw	r3, #9292
 1201 0008 C4F20103 		movt	r3, 16385
 1202 000c 1B68     		ldr	r3, [r3, #0]
 660:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1203              		.loc 1 660 0
 1204 000e 1846     		mov	r0, r3
 1205 0010 BD46     		mov	sp, r7
 1206 0012 80BC     		pop	{r7}
 1207 0014 7047     		bx	lr
 1208              		.cfi_endproc
 1209              	.LFE46:
 1211 0016 00BF     		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1212              		.align	2
 1213              		.global	ADC_AutoInjectedConvCmd
 1214              		.thumb
 1215              		.thumb_func
 1217              	ADC_AutoInjectedConvCmd:
 1218              	.LFB47:
 661:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 662:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 663:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the selected ADC automatic injected group
 664:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         conversion after regular one.
 665:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 666:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC auto injected conversion
 667:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 668:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 669:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 670:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState) {
 1219              		.loc 1 670 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 8
 1222              		@ frame_needed = 1, uses_anonymous_args = 0
 1223              		@ link register save eliminated.
 1224 0000 80B4     		push	{r7}
 1225              	.LCFI53:
 1226              		.cfi_def_cfa_offset 4
 1227              		.cfi_offset 7, -4
 1228 0002 83B0     		sub	sp, sp, #12
 1229              	.LCFI54:
 1230              		.cfi_def_cfa_offset 16
 1231 0004 00AF     		add	r7, sp, #0
 1232              	.LCFI55:
 1233              		.cfi_def_cfa_register 7
 1234 0006 7860     		str	r0, [r7, #4]
 1235 0008 0B46     		mov	r3, r1
 1236 000a FB70     		strb	r3, [r7, #3]
 671:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 672:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 673:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 1237              		.loc 1 673 0
 1238 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1239 000e 002B     		cmp	r3, #0
 1240 0010 06D0     		beq	.L51
 674:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC automatic injected group conversion */
 675:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 |= CR1_JAUTO_Set;
 1241              		.loc 1 675 0
 1242 0012 7B68     		ldr	r3, [r7, #4]
 1243 0014 5B68     		ldr	r3, [r3, #4]
 1244 0016 43F48062 		orr	r2, r3, #1024
 1245 001a 7B68     		ldr	r3, [r7, #4]
 1246 001c 5A60     		str	r2, [r3, #4]
 1247 001e 05E0     		b	.L50
 1248              	.L51:
 676:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 677:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC automatic injected group conversion */
 678:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 &= CR1_JAUTO_Reset;
 1249              		.loc 1 678 0
 1250 0020 7B68     		ldr	r3, [r7, #4]
 1251 0022 5B68     		ldr	r3, [r3, #4]
 1252 0024 23F48062 		bic	r2, r3, #1024
 1253 0028 7B68     		ldr	r3, [r7, #4]
 1254 002a 5A60     		str	r2, [r3, #4]
 1255              	.L50:
 679:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 680:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1256              		.loc 1 680 0
 1257 002c 07F10C07 		add	r7, r7, #12
 1258 0030 BD46     		mov	sp, r7
 1259 0032 80BC     		pop	{r7}
 1260 0034 7047     		bx	lr
 1261              		.cfi_endproc
 1262              	.LFE47:
 1264 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1265              		.align	2
 1266              		.global	ADC_InjectedDiscModeCmd
 1267              		.thumb
 1268              		.thumb_func
 1270              	ADC_InjectedDiscModeCmd:
 1271              	.LFB48:
 681:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 682:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 683:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the discontinuous mode for injected group
 684:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         channel for the specified ADC
 685:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 686:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC discontinuous mode
 687:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         on injected group channel.
 688:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 689:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 690:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 691:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState) {
 1272              		.loc 1 691 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 8
 1275              		@ frame_needed = 1, uses_anonymous_args = 0
 1276              		@ link register save eliminated.
 1277 0000 80B4     		push	{r7}
 1278              	.LCFI56:
 1279              		.cfi_def_cfa_offset 4
 1280              		.cfi_offset 7, -4
 1281 0002 83B0     		sub	sp, sp, #12
 1282              	.LCFI57:
 1283              		.cfi_def_cfa_offset 16
 1284 0004 00AF     		add	r7, sp, #0
 1285              	.LCFI58:
 1286              		.cfi_def_cfa_register 7
 1287 0006 7860     		str	r0, [r7, #4]
 1288 0008 0B46     		mov	r3, r1
 1289 000a FB70     		strb	r3, [r7, #3]
 692:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 693:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 694:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 1290              		.loc 1 694 0
 1291 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1292 000e 002B     		cmp	r3, #0
 1293 0010 06D0     		beq	.L54
 695:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC injected discontinuous mode */
 696:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 |= CR1_JDISCEN_Set;
 1294              		.loc 1 696 0
 1295 0012 7B68     		ldr	r3, [r7, #4]
 1296 0014 5B68     		ldr	r3, [r3, #4]
 1297 0016 43F48052 		orr	r2, r3, #4096
 1298 001a 7B68     		ldr	r3, [r7, #4]
 1299 001c 5A60     		str	r2, [r3, #4]
 1300 001e 05E0     		b	.L53
 1301              	.L54:
 697:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 698:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC injected discontinuous mode */
 699:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR1 &= CR1_JDISCEN_Reset;
 1302              		.loc 1 699 0
 1303 0020 7B68     		ldr	r3, [r7, #4]
 1304 0022 5B68     		ldr	r3, [r3, #4]
 1305 0024 23F48052 		bic	r2, r3, #4096
 1306 0028 7B68     		ldr	r3, [r7, #4]
 1307 002a 5A60     		str	r2, [r3, #4]
 1308              	.L53:
 700:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 701:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1309              		.loc 1 701 0
 1310 002c 07F10C07 		add	r7, r7, #12
 1311 0030 BD46     		mov	sp, r7
 1312 0032 80BC     		pop	{r7}
 1313 0034 7047     		bx	lr
 1314              		.cfi_endproc
 1315              	.LFE48:
 1317 0036 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1318              		.align	2
 1319              		.global	ADC_ExternalTrigInjectedConvConfig
 1320              		.thumb
 1321              		.thumb_func
 1323              	ADC_ExternalTrigInjectedConvConfig:
 1324              	.LFB49:
 702:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 703:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 704:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Configures the ADCx external trigger for injected channels conversion.
 705:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 706:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion. 
 707:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 708:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected (for ADC1, ADC2 and ADC3)
 709:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected (for ADC1, ADC2 and 
 710:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected (for ADC1 and ADC2)
 711:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected (for ADC1 and ADC2)
 712:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected (for ADC1 and ADC2)
 713:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected (for ADC1 and ADC2)
 714:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4: External interrupt line 15 or Timer8
 715:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *                                                       capture compare4 event selected (for ADC1 
 716:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected (for ADC3 only)
 717:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected (for ADC3 only)     
 718:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected (for ADC3 only)
 719:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected (for ADC3 only)          
 720:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected (for ADC3 only)     
 721:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
 722:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *                                          by external trigger (for ADC1, ADC2 and ADC3)
 723:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 724:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 725:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx,
 726:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		uint32_t ADC_ExternalTrigInjecConv) {
 1325              		.loc 1 726 0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 16
 1328              		@ frame_needed = 1, uses_anonymous_args = 0
 1329              		@ link register save eliminated.
 1330 0000 80B4     		push	{r7}
 1331              	.LCFI59:
 1332              		.cfi_def_cfa_offset 4
 1333              		.cfi_offset 7, -4
 1334 0002 85B0     		sub	sp, sp, #20
 1335              	.LCFI60:
 1336              		.cfi_def_cfa_offset 24
 1337 0004 00AF     		add	r7, sp, #0
 1338              	.LCFI61:
 1339              		.cfi_def_cfa_register 7
 1340 0006 7860     		str	r0, [r7, #4]
 1341 0008 3960     		str	r1, [r7, #0]
 727:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg = 0;
 1342              		.loc 1 727 0
 1343 000a 4FF00003 		mov	r3, #0
 1344 000e FB60     		str	r3, [r7, #12]
 728:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 729:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecCon
 730:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the old register value */
 731:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg = ADCx->CR2;
 1345              		.loc 1 731 0
 1346 0010 7B68     		ldr	r3, [r7, #4]
 1347 0012 9B68     		ldr	r3, [r3, #8]
 1348 0014 FB60     		str	r3, [r7, #12]
 732:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear the old external event selection for injected group */
 733:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg &= CR2_JEXTSEL_Reset;
 1349              		.loc 1 733 0
 1350 0016 FB68     		ldr	r3, [r7, #12]
 1351 0018 23F4E043 		bic	r3, r3, #28672
 1352 001c FB60     		str	r3, [r7, #12]
 734:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the external event selection for injected group */
 735:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg |= ADC_ExternalTrigInjecConv;
 1353              		.loc 1 735 0
 1354 001e FA68     		ldr	r2, [r7, #12]
 1355 0020 3B68     		ldr	r3, [r7, #0]
 1356 0022 1343     		orrs	r3, r3, r2
 1357 0024 FB60     		str	r3, [r7, #12]
 736:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Store the new register value */
 737:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR2 = tmpreg;
 1358              		.loc 1 737 0
 1359 0026 7B68     		ldr	r3, [r7, #4]
 1360 0028 FA68     		ldr	r2, [r7, #12]
 1361 002a 9A60     		str	r2, [r3, #8]
 738:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1362              		.loc 1 738 0
 1363 002c 07F11407 		add	r7, r7, #20
 1364 0030 BD46     		mov	sp, r7
 1365 0032 80BC     		pop	{r7}
 1366 0034 7047     		bx	lr
 1367              		.cfi_endproc
 1368              	.LFE49:
 1370 0036 00BF     		.section	.text.ADC_ExternalTrigInjectedConvCmd,"ax",%progbits
 1371              		.align	2
 1372              		.global	ADC_ExternalTrigInjectedConvCmd
 1373              		.thumb
 1374              		.thumb_func
 1376              	ADC_ExternalTrigInjectedConvCmd:
 1377              	.LFB50:
 739:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 740:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 741:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the ADCx injected channels conversion through
 742:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         external trigger
 743:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 744:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC external trigger start of
 745:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         injected conversion.
 746:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 747:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 748:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 749:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx,
 750:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		FunctionalState NewState) {
 1378              		.loc 1 750 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 8
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383 0000 80B4     		push	{r7}
 1384              	.LCFI62:
 1385              		.cfi_def_cfa_offset 4
 1386              		.cfi_offset 7, -4
 1387 0002 83B0     		sub	sp, sp, #12
 1388              	.LCFI63:
 1389              		.cfi_def_cfa_offset 16
 1390 0004 00AF     		add	r7, sp, #0
 1391              	.LCFI64:
 1392              		.cfi_def_cfa_register 7
 1393 0006 7860     		str	r0, [r7, #4]
 1394 0008 0B46     		mov	r3, r1
 1395 000a FB70     		strb	r3, [r7, #3]
 751:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 752:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 753:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 1396              		.loc 1 753 0
 1397 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1398 000e 002B     		cmp	r3, #0
 1399 0010 06D0     		beq	.L58
 754:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC external event selection for injected group */
 755:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 |= CR2_JEXTTRIG_Set;
 1400              		.loc 1 755 0
 1401 0012 7B68     		ldr	r3, [r7, #4]
 1402 0014 9B68     		ldr	r3, [r3, #8]
 1403 0016 43F40042 		orr	r2, r3, #32768
 1404 001a 7B68     		ldr	r3, [r7, #4]
 1405 001c 9A60     		str	r2, [r3, #8]
 1406 001e 05E0     		b	.L57
 1407              	.L58:
 756:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 757:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC external event selection for injected group */
 758:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 1408              		.loc 1 758 0
 1409 0020 7B68     		ldr	r3, [r7, #4]
 1410 0022 9B68     		ldr	r3, [r3, #8]
 1411 0024 23F40042 		bic	r2, r3, #32768
 1412 0028 7B68     		ldr	r3, [r7, #4]
 1413 002a 9A60     		str	r2, [r3, #8]
 1414              	.L57:
 759:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 760:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1415              		.loc 1 760 0
 1416 002c 07F10C07 		add	r7, r7, #12
 1417 0030 BD46     		mov	sp, r7
 1418 0032 80BC     		pop	{r7}
 1419 0034 7047     		bx	lr
 1420              		.cfi_endproc
 1421              	.LFE50:
 1423 0036 00BF     		.section	.text.ADC_SoftwareStartInjectedConvCmd,"ax",%progbits
 1424              		.align	2
 1425              		.global	ADC_SoftwareStartInjectedConvCmd
 1426              		.thumb
 1427              		.thumb_func
 1429              	ADC_SoftwareStartInjectedConvCmd:
 1430              	.LFB51:
 761:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 762:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 763:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the selected ADC start of the injected 
 764:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         channels conversion.
 765:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 766:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the selected ADC software start injected conversion.
 767:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
 768:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 769:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 770:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx,
 771:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		FunctionalState NewState) {
 1431              		.loc 1 771 0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 8
 1434              		@ frame_needed = 1, uses_anonymous_args = 0
 1435              		@ link register save eliminated.
 1436 0000 80B4     		push	{r7}
 1437              	.LCFI65:
 1438              		.cfi_def_cfa_offset 4
 1439              		.cfi_offset 7, -4
 1440 0002 83B0     		sub	sp, sp, #12
 1441              	.LCFI66:
 1442              		.cfi_def_cfa_offset 16
 1443 0004 00AF     		add	r7, sp, #0
 1444              	.LCFI67:
 1445              		.cfi_def_cfa_register 7
 1446 0006 7860     		str	r0, [r7, #4]
 1447 0008 0B46     		mov	r3, r1
 1448 000a FB70     		strb	r3, [r7, #3]
 772:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 773:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 774:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 1449              		.loc 1 774 0
 1450 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1451 000e 002B     		cmp	r3, #0
 1452 0010 06D0     		beq	.L61
 775:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the selected ADC conversion for injected group on external event and start the selected
 776:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		 ADC injected conversion */
 777:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 1453              		.loc 1 777 0
 1454 0012 7B68     		ldr	r3, [r7, #4]
 1455 0014 9B68     		ldr	r3, [r3, #8]
 1456 0016 43F40212 		orr	r2, r3, #2129920
 1457 001a 7B68     		ldr	r3, [r7, #4]
 1458 001c 9A60     		str	r2, [r3, #8]
 1459 001e 05E0     		b	.L60
 1460              	.L61:
 778:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
 779:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the selected ADC conversion on external event for injected group and stop the selected
 780:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		 ADC injected conversion */
 781:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 1461              		.loc 1 781 0
 1462 0020 7B68     		ldr	r3, [r7, #4]
 1463 0022 9B68     		ldr	r3, [r3, #8]
 1464 0024 23F40212 		bic	r2, r3, #2129920
 1465 0028 7B68     		ldr	r3, [r7, #4]
 1466 002a 9A60     		str	r2, [r3, #8]
 1467              	.L60:
 782:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 783:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1468              		.loc 1 783 0
 1469 002c 07F10C07 		add	r7, r7, #12
 1470 0030 BD46     		mov	sp, r7
 1471 0032 80BC     		pop	{r7}
 1472 0034 7047     		bx	lr
 1473              		.cfi_endproc
 1474              	.LFE51:
 1476 0036 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1477              		.align	2
 1478              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1479              		.thumb
 1480              		.thumb_func
 1482              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1483              	.LFB52:
 784:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 785:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 786:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Gets the selected ADC Software start injected conversion Status.
 787:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 788:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The new state of ADC software start injected conversion (SET or RESET).
 789:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 790:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx) {
 1484              		.loc 1 790 0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 16
 1487              		@ frame_needed = 1, uses_anonymous_args = 0
 1488              		@ link register save eliminated.
 1489 0000 80B4     		push	{r7}
 1490              	.LCFI68:
 1491              		.cfi_def_cfa_offset 4
 1492              		.cfi_offset 7, -4
 1493 0002 85B0     		sub	sp, sp, #20
 1494              	.LCFI69:
 1495              		.cfi_def_cfa_offset 24
 1496 0004 00AF     		add	r7, sp, #0
 1497              	.LCFI70:
 1498              		.cfi_def_cfa_register 7
 1499 0006 7860     		str	r0, [r7, #4]
 791:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	FlagStatus bitstatus = RESET;
 1500              		.loc 1 791 0
 1501 0008 4FF00003 		mov	r3, #0
 1502 000c FB73     		strb	r3, [r7, #15]
 792:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 793:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx));
 794:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the status of JSWSTART bit */
 795:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if ((ADCx->CR2 & CR2_JSWSTART_Set )!= (uint32_t)RESET){
 1503              		.loc 1 795 0
 1504 000e 7B68     		ldr	r3, [r7, #4]
 1505 0010 9B68     		ldr	r3, [r3, #8]
 1506 0012 03F40013 		and	r3, r3, #2097152
 1507 0016 002B     		cmp	r3, #0
 1508 0018 03D0     		beq	.L64
 796:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* JSWSTART bit is set */
 797:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = SET;
 1509              		.loc 1 797 0
 1510 001a 4FF00103 		mov	r3, #1
 1511 001e FB73     		strb	r3, [r7, #15]
 1512 0020 02E0     		b	.L65
 1513              	.L64:
 798:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 799:../StdPeripheralDriver/src/stm32f10x_adc.c **** else
 800:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 801:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* JSWSTART bit is reset */
 802:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	bitstatus = RESET;
 1514              		.loc 1 802 0
 1515 0022 4FF00003 		mov	r3, #0
 1516 0026 FB73     		strb	r3, [r7, #15]
 1517              	.L65:
 803:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 804:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the JSWSTART bit status */
 805:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return bitstatus;
 1518              		.loc 1 805 0
 1519 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 806:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1520              		.loc 1 806 0
 1521 002a 1846     		mov	r0, r3
 1522 002c 07F11407 		add	r7, r7, #20
 1523 0030 BD46     		mov	sp, r7
 1524 0032 80BC     		pop	{r7}
 1525 0034 7047     		bx	lr
 1526              		.cfi_endproc
 1527              	.LFE52:
 1529 0036 00BF     		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1530              		.align	2
 1531              		.global	ADC_InjectedChannelConfig
 1532              		.thumb
 1533              		.thumb_func
 1535              	ADC_InjectedChannelConfig:
 1536              	.LFB53:
 807:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 808:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 809:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Configures for the selected ADC injected channel its corresponding
 810:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         rank in the sequencer and its sample time.
 811:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 812:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_Channel: the ADC channel to configure. 
 813:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 814:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_0: ADC Channel0 selected
 815:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_1: ADC Channel1 selected
 816:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_2: ADC Channel2 selected
 817:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_3: ADC Channel3 selected
 818:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_4: ADC Channel4 selected
 819:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_5: ADC Channel5 selected
 820:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_6: ADC Channel6 selected
 821:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_7: ADC Channel7 selected
 822:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_8: ADC Channel8 selected
 823:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_9: ADC Channel9 selected
 824:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_10: ADC Channel10 selected
 825:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_11: ADC Channel11 selected
 826:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_12: ADC Channel12 selected
 827:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_13: ADC Channel13 selected
 828:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_14: ADC Channel14 selected
 829:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_15: ADC Channel15 selected
 830:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_16: ADC Channel16 selected
 831:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_17: ADC Channel17 selected
 832:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  Rank: The rank in the injected group sequencer. This parameter must be between 1 and 4.
 833:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 834:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 835:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 836:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 837:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 838:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 839:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 840:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 841:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 842:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 843:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 844:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 845:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel,
 846:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		uint8_t Rank, uint8_t ADC_SampleTime) {
 1537              		.loc 1 846 0
 1538              		.cfi_startproc
 1539              		@ args = 0, pretend = 0, frame = 24
 1540              		@ frame_needed = 1, uses_anonymous_args = 0
 1541              		@ link register save eliminated.
 1542 0000 80B4     		push	{r7}
 1543              	.LCFI71:
 1544              		.cfi_def_cfa_offset 4
 1545              		.cfi_offset 7, -4
 1546 0002 87B0     		sub	sp, sp, #28
 1547              	.LCFI72:
 1548              		.cfi_def_cfa_offset 32
 1549 0004 00AF     		add	r7, sp, #0
 1550              	.LCFI73:
 1551              		.cfi_def_cfa_register 7
 1552 0006 7860     		str	r0, [r7, #4]
 1553 0008 F970     		strb	r1, [r7, #3]
 1554 000a BA70     		strb	r2, [r7, #2]
 1555 000c 7B70     		strb	r3, [r7, #1]
 847:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1556              		.loc 1 847 0
 1557 000e 4FF00003 		mov	r3, #0
 1558 0012 7B61     		str	r3, [r7, #20]
 1559 0014 4FF00003 		mov	r3, #0
 1560 0018 3B61     		str	r3, [r7, #16]
 1561 001a 4FF00003 		mov	r3, #0
 1562 001e FB60     		str	r3, [r7, #12]
 848:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 849:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_CHANNEL(ADC_Channel)); assert_param(IS_
 850:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 851:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (ADC_Channel > ADC_Channel_9 ) {
 1563              		.loc 1 851 0
 1564 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1565 0022 092B     		cmp	r3, #9
 1566 0024 27D9     		bls	.L68
 852:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Get the old register value */
 853:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 = ADCx->SMPR1;
 1567              		.loc 1 853 0
 1568 0026 7B68     		ldr	r3, [r7, #4]
 1569 0028 DB68     		ldr	r3, [r3, #12]
 1570 002a 7B61     		str	r3, [r7, #20]
 854:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to clear */
 855:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 1571              		.loc 1 855 0
 1572 002c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1573 002e 1346     		mov	r3, r2
 1574 0030 4FEA4303 		lsl	r3, r3, #1
 1575 0034 9B18     		adds	r3, r3, r2
 1576 0036 A3F11E03 		sub	r3, r3, #30
 1577 003a 4FF00702 		mov	r2, #7
 1578 003e 02FA03F3 		lsl	r3, r2, r3
 1579 0042 3B61     		str	r3, [r7, #16]
 856:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Clear the old channel sample time */
 857:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 &= ~tmpreg2;
 1580              		.loc 1 857 0
 1581 0044 3B69     		ldr	r3, [r7, #16]
 1582 0046 6FEA0303 		mvn	r3, r3
 1583 004a 7A69     		ldr	r2, [r7, #20]
 1584 004c 1340     		ands	r3, r3, r2
 1585 004e 7B61     		str	r3, [r7, #20]
 858:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to set */
 859:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = (uint32_t) ADC_SampleTime << (3 * (ADC_Channel - 10));
 1586              		.loc 1 859 0
 1587 0050 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1588 0052 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1589 0054 1346     		mov	r3, r2
 1590 0056 4FEA4303 		lsl	r3, r3, #1
 1591 005a 9B18     		adds	r3, r3, r2
 1592 005c A3F11E03 		sub	r3, r3, #30
 1593 0060 01FA03F3 		lsl	r3, r1, r3
 1594 0064 3B61     		str	r3, [r7, #16]
 860:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the new channel sample time */
 861:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 |= tmpreg2;
 1595              		.loc 1 861 0
 1596 0066 7A69     		ldr	r2, [r7, #20]
 1597 0068 3B69     		ldr	r3, [r7, #16]
 1598 006a 1343     		orrs	r3, r3, r2
 1599 006c 7B61     		str	r3, [r7, #20]
 862:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Store the new register value */
 863:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->SMPR1 = tmpreg1;
 1600              		.loc 1 863 0
 1601 006e 7B68     		ldr	r3, [r7, #4]
 1602 0070 7A69     		ldr	r2, [r7, #20]
 1603 0072 DA60     		str	r2, [r3, #12]
 1604 0074 22E0     		b	.L69
 1605              	.L68:
 864:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else /* ADC_Channel include in ADC_Channel_[0..9] */
 865:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	{
 866:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Get the old register value */
 867:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 = ADCx->SMPR2;
 1606              		.loc 1 867 0
 1607 0076 7B68     		ldr	r3, [r7, #4]
 1608 0078 1B69     		ldr	r3, [r3, #16]
 1609 007a 7B61     		str	r3, [r7, #20]
 868:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to clear */
 869:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 1610              		.loc 1 869 0
 1611 007c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1612 007e 1346     		mov	r3, r2
 1613 0080 4FEA4303 		lsl	r3, r3, #1
 1614 0084 9B18     		adds	r3, r3, r2
 1615 0086 4FF00702 		mov	r2, #7
 1616 008a 02FA03F3 		lsl	r3, r2, r3
 1617 008e 3B61     		str	r3, [r7, #16]
 870:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Clear the old channel sample time */
 871:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 &= ~tmpreg2;
 1618              		.loc 1 871 0
 1619 0090 3B69     		ldr	r3, [r7, #16]
 1620 0092 6FEA0303 		mvn	r3, r3
 1621 0096 7A69     		ldr	r2, [r7, #20]
 1622 0098 1340     		ands	r3, r3, r2
 1623 009a 7B61     		str	r3, [r7, #20]
 872:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Calculate the mask to set */
 873:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg2 = (uint32_t) ADC_SampleTime << (3 * ADC_Channel);
 1624              		.loc 1 873 0
 1625 009c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1626 009e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1627 00a0 1346     		mov	r3, r2
 1628 00a2 4FEA4303 		lsl	r3, r3, #1
 1629 00a6 9B18     		adds	r3, r3, r2
 1630 00a8 01FA03F3 		lsl	r3, r1, r3
 1631 00ac 3B61     		str	r3, [r7, #16]
 874:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Set the new channel sample time */
 875:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		tmpreg1 |= tmpreg2;
 1632              		.loc 1 875 0
 1633 00ae 7A69     		ldr	r2, [r7, #20]
 1634 00b0 3B69     		ldr	r3, [r7, #16]
 1635 00b2 1343     		orrs	r3, r3, r2
 1636 00b4 7B61     		str	r3, [r7, #20]
 876:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Store the new register value */
 877:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADCx->SMPR2 = tmpreg1;
 1637              		.loc 1 877 0
 1638 00b6 7B68     		ldr	r3, [r7, #4]
 1639 00b8 7A69     		ldr	r2, [r7, #20]
 1640 00ba 1A61     		str	r2, [r3, #16]
 1641              	.L69:
 878:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
 879:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Rank configuration */
 880:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the old register value */
 881:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 = ADCx->JSQR;
 1642              		.loc 1 881 0
 1643 00bc 7B68     		ldr	r3, [r7, #4]
 1644 00be 9B6B     		ldr	r3, [r3, #56]
 1645 00c0 7B61     		str	r3, [r7, #20]
 882:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get JL value: Number = JL+1 */
 883:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg3 = (tmpreg1 & JSQR_JL_Set ) >> 20;
 1646              		.loc 1 883 0
 1647 00c2 7B69     		ldr	r3, [r7, #20]
 1648 00c4 03F44013 		and	r3, r3, #3145728
 1649 00c8 4FEA1353 		lsr	r3, r3, #20
 1650 00cc FB60     		str	r3, [r7, #12]
 884:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
 885:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t) ((Rank + 3) - (tmpreg3 + 1)));
 1651              		.loc 1 885 0
 1652 00ce FB68     		ldr	r3, [r7, #12]
 1653 00d0 DBB2     		uxtb	r3, r3
 1654 00d2 6FEA0303 		mvn	r3, r3
 1655 00d6 DAB2     		uxtb	r2, r3
 1656 00d8 BB78     		ldrb	r3, [r7, #2]
 1657 00da D318     		adds	r3, r2, r3
 1658 00dc DBB2     		uxtb	r3, r3
 1659 00de 03F10303 		add	r3, r3, #3
 1660 00e2 DBB2     		uxtb	r3, r3
 1661 00e4 1A46     		mov	r2, r3
 1662 00e6 1346     		mov	r3, r2
 1663 00e8 4FEA8303 		lsl	r3, r3, #2
 1664 00ec 9B18     		adds	r3, r3, r2
 1665 00ee 4FF01F02 		mov	r2, #31
 1666 00f2 02FA03F3 		lsl	r3, r2, r3
 1667 00f6 3B61     		str	r3, [r7, #16]
 886:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear the old JSQx bits for the selected rank */
 887:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 &= ~tmpreg2;
 1668              		.loc 1 887 0
 1669 00f8 3B69     		ldr	r3, [r7, #16]
 1670 00fa 6FEA0303 		mvn	r3, r3
 1671 00fe 7A69     		ldr	r2, [r7, #20]
 1672 0100 1340     		ands	r3, r3, r2
 1673 0102 7B61     		str	r3, [r7, #20]
 888:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
 889:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg2 = (uint32_t) ADC_Channel
 1674              		.loc 1 889 0
 1675 0104 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 890:../StdPeripheralDriver/src/stm32f10x_adc.c **** 			<< (5 * (uint8_t) ((Rank + 3) - (tmpreg3 + 1)));
 1676              		.loc 1 890 0
 1677 0106 FB68     		ldr	r3, [r7, #12]
 1678 0108 DBB2     		uxtb	r3, r3
 1679 010a 6FEA0303 		mvn	r3, r3
 1680 010e DAB2     		uxtb	r2, r3
 1681 0110 BB78     		ldrb	r3, [r7, #2]
 1682 0112 D318     		adds	r3, r2, r3
 1683 0114 DBB2     		uxtb	r3, r3
 1684 0116 03F10303 		add	r3, r3, #3
 1685 011a DBB2     		uxtb	r3, r3
 1686 011c 1A46     		mov	r2, r3
 1687 011e 1346     		mov	r3, r2
 1688 0120 4FEA8303 		lsl	r3, r3, #2
 1689 0124 9B18     		adds	r3, r3, r2
 889:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg2 = (uint32_t) ADC_Channel
 1690              		.loc 1 889 0
 1691 0126 01FA03F3 		lsl	r3, r1, r3
 1692 012a 3B61     		str	r3, [r7, #16]
 891:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the JSQx bits for the selected rank */
 892:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= tmpreg2;
 1693              		.loc 1 892 0
 1694 012c 7A69     		ldr	r2, [r7, #20]
 1695 012e 3B69     		ldr	r3, [r7, #16]
 1696 0130 1343     		orrs	r3, r3, r2
 1697 0132 7B61     		str	r3, [r7, #20]
 893:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Store the new register value */
 894:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->JSQR = tmpreg1;
 1698              		.loc 1 894 0
 1699 0134 7B68     		ldr	r3, [r7, #4]
 1700 0136 7A69     		ldr	r2, [r7, #20]
 1701 0138 9A63     		str	r2, [r3, #56]
 895:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1702              		.loc 1 895 0
 1703 013a 07F11C07 		add	r7, r7, #28
 1704 013e BD46     		mov	sp, r7
 1705 0140 80BC     		pop	{r7}
 1706 0142 7047     		bx	lr
 1707              		.cfi_endproc
 1708              	.LFE53:
 1710              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1711              		.align	2
 1712              		.global	ADC_InjectedSequencerLengthConfig
 1713              		.thumb
 1714              		.thumb_func
 1716              	ADC_InjectedSequencerLengthConfig:
 1717              	.LFB54:
 896:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 897:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 898:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Configures the sequencer length for injected channels
 899:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 900:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  Length: The sequencer length. 
 901:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter must be a number between 1 to 4.
 902:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 903:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 904:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length) {
 1718              		.loc 1 904 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 16
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
 1723 0000 80B4     		push	{r7}
 1724              	.LCFI74:
 1725              		.cfi_def_cfa_offset 4
 1726              		.cfi_offset 7, -4
 1727 0002 85B0     		sub	sp, sp, #20
 1728              	.LCFI75:
 1729              		.cfi_def_cfa_offset 24
 1730 0004 00AF     		add	r7, sp, #0
 1731              	.LCFI76:
 1732              		.cfi_def_cfa_register 7
 1733 0006 7860     		str	r0, [r7, #4]
 1734 0008 0B46     		mov	r3, r1
 1735 000a FB70     		strb	r3, [r7, #3]
 905:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg1 = 0;
 1736              		.loc 1 905 0
 1737 000c 4FF00003 		mov	r3, #0
 1738 0010 FB60     		str	r3, [r7, #12]
 906:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg2 = 0;
 1739              		.loc 1 906 0
 1740 0012 4FF00003 		mov	r3, #0
 1741 0016 BB60     		str	r3, [r7, #8]
 907:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 908:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_INJECTED_LENGTH(Length));
 909:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 910:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the old register value */
 911:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 = ADCx->JSQR;
 1742              		.loc 1 911 0
 1743 0018 7B68     		ldr	r3, [r7, #4]
 1744 001a 9B6B     		ldr	r3, [r3, #56]
 1745 001c FB60     		str	r3, [r7, #12]
 912:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear the old injected sequnence lenght JL bits */
 913:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 &= JSQR_JL_Reset;
 1746              		.loc 1 913 0
 1747 001e FB68     		ldr	r3, [r7, #12]
 1748 0020 23F44013 		bic	r3, r3, #3145728
 1749 0024 FB60     		str	r3, [r7, #12]
 914:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the injected sequnence lenght JL bits */
 915:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg2 = Length - 1;
 1750              		.loc 1 915 0
 1751 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1752 0028 03F1FF33 		add	r3, r3, #-1
 1753 002c BB60     		str	r3, [r7, #8]
 916:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg1 |= tmpreg2 << 20;
 1754              		.loc 1 916 0
 1755 002e BB68     		ldr	r3, [r7, #8]
 1756 0030 4FEA0353 		lsl	r3, r3, #20
 1757 0034 FA68     		ldr	r2, [r7, #12]
 1758 0036 1343     		orrs	r3, r3, r2
 1759 0038 FB60     		str	r3, [r7, #12]
 917:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Store the new register value */
 918:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->JSQR = tmpreg1;
 1760              		.loc 1 918 0
 1761 003a 7B68     		ldr	r3, [r7, #4]
 1762 003c FA68     		ldr	r2, [r7, #12]
 1763 003e 9A63     		str	r2, [r3, #56]
 919:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1764              		.loc 1 919 0
 1765 0040 07F11407 		add	r7, r7, #20
 1766 0044 BD46     		mov	sp, r7
 1767 0046 80BC     		pop	{r7}
 1768 0048 7047     		bx	lr
 1769              		.cfi_endproc
 1770              	.LFE54:
 1772 004a 00BF     		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1773              		.align	2
 1774              		.global	ADC_SetInjectedOffset
 1775              		.thumb
 1776              		.thumb_func
 1778              	ADC_SetInjectedOffset:
 1779              	.LFB55:
 920:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 921:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 922:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Set the injected channels conversion value offset
 923:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 924:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
 925:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 926:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
 927:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
 928:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
 929:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
 930:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  Offset: the offset value for the selected ADC injected channel
 931:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter must be a 12bit value.
 932:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
 933:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 934:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel,
 935:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		uint16_t Offset) {
 1780              		.loc 1 935 0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 16
 1783              		@ frame_needed = 1, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
 1785 0000 80B4     		push	{r7}
 1786              	.LCFI77:
 1787              		.cfi_def_cfa_offset 4
 1788              		.cfi_offset 7, -4
 1789 0002 85B0     		sub	sp, sp, #20
 1790              	.LCFI78:
 1791              		.cfi_def_cfa_offset 24
 1792 0004 00AF     		add	r7, sp, #0
 1793              	.LCFI79:
 1794              		.cfi_def_cfa_register 7
 1795 0006 7860     		str	r0, [r7, #4]
 1796 0008 1346     		mov	r3, r2
 1797 000a 0A46     		mov	r2, r1
 1798 000c FA70     		strb	r2, [r7, #3]
 1799 000e 3B80     		strh	r3, [r7, #0]	@ movhi
 936:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	__IO uint32_t tmp = 0;
 1800              		.loc 1 936 0
 1801 0010 4FF00003 		mov	r3, #0
 1802 0014 FB60     		str	r3, [r7, #12]
 937:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 938:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 939:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
 940:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 941:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmp = (uint32_t) ADCx;
 1803              		.loc 1 941 0
 1804 0016 7B68     		ldr	r3, [r7, #4]
 1805 0018 FB60     		str	r3, [r7, #12]
 942:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmp += ADC_InjectedChannel;
 1806              		.loc 1 942 0
 1807 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1808 001c FB68     		ldr	r3, [r7, #12]
 1809 001e D318     		adds	r3, r2, r3
 1810 0020 FB60     		str	r3, [r7, #12]
 943:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 944:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the selected injected channel data offset */
 945:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	*(__IO uint32_t *) tmp = (uint32_t) Offset;
 1811              		.loc 1 945 0
 1812 0022 FB68     		ldr	r3, [r7, #12]
 1813 0024 3A88     		ldrh	r2, [r7, #0]
 1814 0026 1A60     		str	r2, [r3, #0]
 946:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1815              		.loc 1 946 0
 1816 0028 07F11407 		add	r7, r7, #20
 1817 002c BD46     		mov	sp, r7
 1818 002e 80BC     		pop	{r7}
 1819 0030 7047     		bx	lr
 1820              		.cfi_endproc
 1821              	.LFE55:
 1823 0032 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1824              		.align	2
 1825              		.global	ADC_GetInjectedConversionValue
 1826              		.thumb
 1827              		.thumb_func
 1829              	ADC_GetInjectedConversionValue:
 1830              	.LFB56:
 947:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 948:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 949:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Returns the ADC injected channel conversion result
 950:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 951:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_InjectedChannel: the converted ADC injected channel.
 952:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 953:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
 954:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
 955:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
 956:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
 957:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The Data conversion value.
 958:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 959:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx,
 960:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		uint8_t ADC_InjectedChannel) {
 1831              		.loc 1 960 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 16
 1834              		@ frame_needed = 1, uses_anonymous_args = 0
 1835              		@ link register save eliminated.
 1836 0000 80B4     		push	{r7}
 1837              	.LCFI80:
 1838              		.cfi_def_cfa_offset 4
 1839              		.cfi_offset 7, -4
 1840 0002 85B0     		sub	sp, sp, #20
 1841              	.LCFI81:
 1842              		.cfi_def_cfa_offset 24
 1843 0004 00AF     		add	r7, sp, #0
 1844              	.LCFI82:
 1845              		.cfi_def_cfa_register 7
 1846 0006 7860     		str	r0, [r7, #4]
 1847 0008 0B46     		mov	r3, r1
 1848 000a FB70     		strb	r3, [r7, #3]
 961:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	__IO uint32_t tmp = 0;
 1849              		.loc 1 961 0
 1850 000c 4FF00003 		mov	r3, #0
 1851 0010 FB60     		str	r3, [r7, #12]
 962:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 963:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 964:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
 965:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 966:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmp = (uint32_t) ADCx;
 1852              		.loc 1 966 0
 1853 0012 7B68     		ldr	r3, [r7, #4]
 1854 0014 FB60     		str	r3, [r7, #12]
 967:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmp += ADC_InjectedChannel + JDR_Offset;
 1855              		.loc 1 967 0
 1856 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1857 0018 FB68     		ldr	r3, [r7, #12]
 1858 001a D318     		adds	r3, r2, r3
 1859 001c 03F12803 		add	r3, r3, #40
 1860 0020 FB60     		str	r3, [r7, #12]
 968:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 969:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Returns the selected injected channel conversion data value */
 970:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return (uint16_t) (*(__IO uint32_t*) tmp);
 1861              		.loc 1 970 0
 1862 0022 FB68     		ldr	r3, [r7, #12]
 1863 0024 1B68     		ldr	r3, [r3, #0]
 1864 0026 9BB2     		uxth	r3, r3
 971:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1865              		.loc 1 971 0
 1866 0028 1846     		mov	r0, r3
 1867 002a 07F11407 		add	r7, r7, #20
 1868 002e BD46     		mov	sp, r7
 1869 0030 80BC     		pop	{r7}
 1870 0032 7047     		bx	lr
 1871              		.cfi_endproc
 1872              	.LFE56:
 1874              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 1875              		.align	2
 1876              		.global	ADC_AnalogWatchdogCmd
 1877              		.thumb
 1878              		.thumb_func
 1880              	ADC_AnalogWatchdogCmd:
 1881              	.LFB57:
 972:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 973:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 974:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the analog watchdog on single/all regular
 975:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *         or injected channels
 976:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 977:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 978:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
 979:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 980:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected channel
 981:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular or injec
 982:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on  all regular channel
 983:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on  all injected channel
 984:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected ch
 985:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 986:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None	  
 987:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
 988:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog) {
 1882              		.loc 1 988 0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 16
 1885              		@ frame_needed = 1, uses_anonymous_args = 0
 1886              		@ link register save eliminated.
 1887 0000 80B4     		push	{r7}
 1888              	.LCFI83:
 1889              		.cfi_def_cfa_offset 4
 1890              		.cfi_offset 7, -4
 1891 0002 85B0     		sub	sp, sp, #20
 1892              	.LCFI84:
 1893              		.cfi_def_cfa_offset 24
 1894 0004 00AF     		add	r7, sp, #0
 1895              	.LCFI85:
 1896              		.cfi_def_cfa_register 7
 1897 0006 7860     		str	r0, [r7, #4]
 1898 0008 3960     		str	r1, [r7, #0]
 989:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg = 0;
 1899              		.loc 1 989 0
 1900 000a 4FF00003 		mov	r3, #0
 1901 000e FB60     		str	r3, [r7, #12]
 990:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
 991:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 992:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the old register value */
 993:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg = ADCx->CR1;
 1902              		.loc 1 993 0
 1903 0010 7B68     		ldr	r3, [r7, #4]
 1904 0012 5B68     		ldr	r3, [r3, #4]
 1905 0014 FB60     		str	r3, [r7, #12]
 994:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear AWDEN, AWDENJ and AWDSGL bits */
 995:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg &= CR1_AWDMode_Reset;
 1906              		.loc 1 995 0
 1907 0016 FB68     		ldr	r3, [r7, #12]
 1908 0018 23F44003 		bic	r3, r3, #12582912
 1909 001c 23F40073 		bic	r3, r3, #512
 1910 0020 FB60     		str	r3, [r7, #12]
 996:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the analog watchdog enable mode */
 997:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg |= ADC_AnalogWatchdog;
 1911              		.loc 1 997 0
 1912 0022 FA68     		ldr	r2, [r7, #12]
 1913 0024 3B68     		ldr	r3, [r7, #0]
 1914 0026 1343     		orrs	r3, r3, r2
 1915 0028 FB60     		str	r3, [r7, #12]
 998:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Store the new register value */
 999:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR1 = tmpreg;
 1916              		.loc 1 999 0
 1917 002a 7B68     		ldr	r3, [r7, #4]
 1918 002c FA68     		ldr	r2, [r7, #12]
 1919 002e 5A60     		str	r2, [r3, #4]
1000:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1920              		.loc 1 1000 0
 1921 0030 07F11407 		add	r7, r7, #20
 1922 0034 BD46     		mov	sp, r7
 1923 0036 80BC     		pop	{r7}
 1924 0038 7047     		bx	lr
 1925              		.cfi_endproc
 1926              	.LFE57:
 1928 003a 00BF     		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 1929              		.align	2
 1930              		.global	ADC_AnalogWatchdogThresholdsConfig
 1931              		.thumb
 1932              		.thumb_func
 1934              	ADC_AnalogWatchdogThresholdsConfig:
 1935              	.LFB58:
1001:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1002:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1003:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Configures the high and low thresholds of the analog watchdog.
1004:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1005:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  HighThreshold: the ADC analog watchdog High threshold value.
1006:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter must be a 12bit value.
1007:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  LowThreshold: the ADC analog watchdog Low threshold value.
1008:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter must be a 12bit value.
1009:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
1010:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
1011:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx,
1012:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		uint16_t HighThreshold, uint16_t LowThreshold) {
 1936              		.loc 1 1012 0
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 8
 1939              		@ frame_needed = 1, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
 1941 0000 80B4     		push	{r7}
 1942              	.LCFI86:
 1943              		.cfi_def_cfa_offset 4
 1944              		.cfi_offset 7, -4
 1945 0002 83B0     		sub	sp, sp, #12
 1946              	.LCFI87:
 1947              		.cfi_def_cfa_offset 16
 1948 0004 00AF     		add	r7, sp, #0
 1949              	.LCFI88:
 1950              		.cfi_def_cfa_register 7
 1951 0006 7860     		str	r0, [r7, #4]
 1952 0008 1346     		mov	r3, r2
 1953 000a 0A46     		mov	r2, r1	@ movhi
 1954 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1955 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1013:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
1014:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_THRESHOLD(HighThreshold)); assert_param
1015:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the ADCx high threshold */
1016:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->HTR = HighThreshold;
 1956              		.loc 1 1016 0
 1957 0010 7A88     		ldrh	r2, [r7, #2]
 1958 0012 7B68     		ldr	r3, [r7, #4]
 1959 0014 5A62     		str	r2, [r3, #36]
1017:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the ADCx low threshold */
1018:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->LTR = LowThreshold;
 1960              		.loc 1 1018 0
 1961 0016 3A88     		ldrh	r2, [r7, #0]
 1962 0018 7B68     		ldr	r3, [r7, #4]
 1963 001a 9A62     		str	r2, [r3, #40]
1019:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 1964              		.loc 1 1019 0
 1965 001c 07F10C07 		add	r7, r7, #12
 1966 0020 BD46     		mov	sp, r7
 1967 0022 80BC     		pop	{r7}
 1968 0024 7047     		bx	lr
 1969              		.cfi_endproc
 1970              	.LFE58:
 1972 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 1973              		.align	2
 1974              		.global	ADC_AnalogWatchdogSingleChannelConfig
 1975              		.thumb
 1976              		.thumb_func
 1978              	ADC_AnalogWatchdogSingleChannelConfig:
 1979              	.LFB59:
1020:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1021:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1022:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Configures the analog watchdog guarded single channel
1023:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1024:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
1025:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
1026:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_0: ADC Channel0 selected
1027:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_1: ADC Channel1 selected
1028:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_2: ADC Channel2 selected
1029:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_3: ADC Channel3 selected
1030:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_4: ADC Channel4 selected
1031:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_5: ADC Channel5 selected
1032:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_6: ADC Channel6 selected
1033:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_7: ADC Channel7 selected
1034:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_8: ADC Channel8 selected
1035:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_9: ADC Channel9 selected
1036:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_10: ADC Channel10 selected
1037:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_11: ADC Channel11 selected
1038:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_12: ADC Channel12 selected
1039:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_13: ADC Channel13 selected
1040:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_14: ADC Channel14 selected
1041:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_15: ADC Channel15 selected
1042:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_16: ADC Channel16 selected
1043:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_Channel_17: ADC Channel17 selected
1044:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
1045:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
1046:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx,
1047:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		uint8_t ADC_Channel) {
 1980              		.loc 1 1047 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 16
 1983              		@ frame_needed = 1, uses_anonymous_args = 0
 1984              		@ link register save eliminated.
 1985 0000 80B4     		push	{r7}
 1986              	.LCFI89:
 1987              		.cfi_def_cfa_offset 4
 1988              		.cfi_offset 7, -4
 1989 0002 85B0     		sub	sp, sp, #20
 1990              	.LCFI90:
 1991              		.cfi_def_cfa_offset 24
 1992 0004 00AF     		add	r7, sp, #0
 1993              	.LCFI91:
 1994              		.cfi_def_cfa_register 7
 1995 0006 7860     		str	r0, [r7, #4]
 1996 0008 0B46     		mov	r3, r1
 1997 000a FB70     		strb	r3, [r7, #3]
1048:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t tmpreg = 0;
 1998              		.loc 1 1048 0
 1999 000c 4FF00003 		mov	r3, #0
 2000 0010 FB60     		str	r3, [r7, #12]
1049:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
1050:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_CHANNEL(ADC_Channel));
1051:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the old register value */
1052:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg = ADCx->CR1;
 2001              		.loc 1 1052 0
 2002 0012 7B68     		ldr	r3, [r7, #4]
 2003 0014 5B68     		ldr	r3, [r3, #4]
 2004 0016 FB60     		str	r3, [r7, #12]
1053:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear the Analog watchdog channel select bits */
1054:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg &= CR1_AWDCH_Reset;
 2005              		.loc 1 1054 0
 2006 0018 FB68     		ldr	r3, [r7, #12]
 2007 001a 23F01F03 		bic	r3, r3, #31
 2008 001e FB60     		str	r3, [r7, #12]
1055:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Set the Analog watchdog channel */
1056:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	tmpreg |= ADC_Channel;
 2009              		.loc 1 1056 0
 2010 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2011 0022 FA68     		ldr	r2, [r7, #12]
 2012 0024 1343     		orrs	r3, r3, r2
 2013 0026 FB60     		str	r3, [r7, #12]
1057:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Store the new register value */
1058:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->CR1 = tmpreg;
 2014              		.loc 1 1058 0
 2015 0028 7B68     		ldr	r3, [r7, #4]
 2016 002a FA68     		ldr	r2, [r7, #12]
 2017 002c 5A60     		str	r2, [r3, #4]
1059:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 2018              		.loc 1 1059 0
 2019 002e 07F11407 		add	r7, r7, #20
 2020 0032 BD46     		mov	sp, r7
 2021 0034 80BC     		pop	{r7}
 2022 0036 7047     		bx	lr
 2023              		.cfi_endproc
 2024              	.LFE59:
 2026              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 2027              		.align	2
 2028              		.global	ADC_TempSensorVrefintCmd
 2029              		.thumb
 2030              		.thumb_func
 2032              	ADC_TempSensorVrefintCmd:
 2033              	.LFB60:
1060:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1061:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1062:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Enables or disables the temperature sensor and Vrefint channel.
1063:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  NewState: new state of the temperature sensor.
1064:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be: ENABLE or DISABLE.
1065:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
1066:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
1067:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState) {
 2034              		.loc 1 1067 0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 8
 2037              		@ frame_needed = 1, uses_anonymous_args = 0
 2038              		@ link register save eliminated.
 2039 0000 80B4     		push	{r7}
 2040              	.LCFI92:
 2041              		.cfi_def_cfa_offset 4
 2042              		.cfi_offset 7, -4
 2043 0002 83B0     		sub	sp, sp, #12
 2044              	.LCFI93:
 2045              		.cfi_def_cfa_offset 16
 2046 0004 00AF     		add	r7, sp, #0
 2047              	.LCFI94:
 2048              		.cfi_def_cfa_register 7
 2049 0006 0346     		mov	r3, r0
 2050 0008 FB71     		strb	r3, [r7, #7]
1068:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
1069:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_FUNCTIONAL_STATE(NewState));
1070:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (NewState != DISABLE) {
 2051              		.loc 1 1070 0
 2052 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2053 000c 002B     		cmp	r3, #0
 2054 000e 0CD0     		beq	.L78
1071:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Enable the temperature sensor and Vrefint channel*/
1072:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADC1 ->CR2 |= CR2_TSVREFE_Set;
 2055              		.loc 1 1072 0
 2056 0010 4FF41053 		mov	r3, #9216
 2057 0014 C4F20103 		movt	r3, 16385
 2058 0018 4FF41052 		mov	r2, #9216
 2059 001c C4F20102 		movt	r2, 16385
 2060 0020 9268     		ldr	r2, [r2, #8]
 2061 0022 42F40002 		orr	r2, r2, #8388608
 2062 0026 9A60     		str	r2, [r3, #8]
 2063 0028 0BE0     		b	.L77
 2064              	.L78:
1073:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
1074:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* Disable the temperature sensor and Vrefint channel*/
1075:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		ADC1 ->CR2 &= CR2_TSVREFE_Reset;
 2065              		.loc 1 1075 0
 2066 002a 4FF41053 		mov	r3, #9216
 2067 002e C4F20103 		movt	r3, 16385
 2068 0032 4FF41052 		mov	r2, #9216
 2069 0036 C4F20102 		movt	r2, 16385
 2070 003a 9268     		ldr	r2, [r2, #8]
 2071 003c 22F40002 		bic	r2, r2, #8388608
 2072 0040 9A60     		str	r2, [r3, #8]
 2073              	.L77:
1076:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
1077:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 2074              		.loc 1 1077 0
 2075 0042 07F10C07 		add	r7, r7, #12
 2076 0046 BD46     		mov	sp, r7
 2077 0048 80BC     		pop	{r7}
 2078 004a 7047     		bx	lr
 2079              		.cfi_endproc
 2080              	.LFE60:
 2082              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 2083              		.align	2
 2084              		.global	ADC_GetFlagStatus
 2085              		.thumb
 2086              		.thumb_func
 2088              	ADC_GetFlagStatus:
 2089              	.LFB61:
1078:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1079:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1080:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Checks whether the specified ADC flag is set or not.
1081:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1082:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_FLAG: specifies the flag to check. 
1083:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
1084:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_AWD: Analog watchdog flag
1085:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_EOC: End of conversion flag
1086:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1087:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1088:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1089:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The new state of ADC_FLAG (SET or RESET).
1090:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
1091:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG) {
 2090              		.loc 1 1091 0
 2091              		.cfi_startproc
 2092              		@ args = 0, pretend = 0, frame = 16
 2093              		@ frame_needed = 1, uses_anonymous_args = 0
 2094              		@ link register save eliminated.
 2095 0000 80B4     		push	{r7}
 2096              	.LCFI95:
 2097              		.cfi_def_cfa_offset 4
 2098              		.cfi_offset 7, -4
 2099 0002 85B0     		sub	sp, sp, #20
 2100              	.LCFI96:
 2101              		.cfi_def_cfa_offset 24
 2102 0004 00AF     		add	r7, sp, #0
 2103              	.LCFI97:
 2104              		.cfi_def_cfa_register 7
 2105 0006 7860     		str	r0, [r7, #4]
 2106 0008 0B46     		mov	r3, r1
 2107 000a FB70     		strb	r3, [r7, #3]
1092:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	FlagStatus bitstatus = RESET;
 2108              		.loc 1 1092 0
 2109 000c 4FF00003 		mov	r3, #0
 2110 0010 FB73     		strb	r3, [r7, #15]
1093:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
1094:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1095:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the status of the specified ADC flag */
1096:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if ((ADCx->SR & ADC_FLAG) != (uint8_t) RESET) {
 2111              		.loc 1 1096 0
 2112 0012 7B68     		ldr	r3, [r7, #4]
 2113 0014 1A68     		ldr	r2, [r3, #0]
 2114 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2115 0018 1340     		ands	r3, r3, r2
 2116 001a 002B     		cmp	r3, #0
 2117 001c 03D0     		beq	.L81
1097:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* ADC_FLAG is set */
1098:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		bitstatus = SET;
 2118              		.loc 1 1098 0
 2119 001e 4FF00103 		mov	r3, #1
 2120 0022 FB73     		strb	r3, [r7, #15]
 2121 0024 02E0     		b	.L82
 2122              	.L81:
1099:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
1100:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* ADC_FLAG is reset */
1101:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		bitstatus = RESET;
 2123              		.loc 1 1101 0
 2124 0026 4FF00003 		mov	r3, #0
 2125 002a FB73     		strb	r3, [r7, #15]
 2126              	.L82:
1102:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
1103:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the ADC_FLAG status */
1104:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return bitstatus;
 2127              		.loc 1 1104 0
 2128 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1105:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 2129              		.loc 1 1105 0
 2130 002e 1846     		mov	r0, r3
 2131 0030 07F11407 		add	r7, r7, #20
 2132 0034 BD46     		mov	sp, r7
 2133 0036 80BC     		pop	{r7}
 2134 0038 7047     		bx	lr
 2135              		.cfi_endproc
 2136              	.LFE61:
 2138 003a 00BF     		.section	.text.ADC_ClearFlag,"ax",%progbits
 2139              		.align	2
 2140              		.global	ADC_ClearFlag
 2141              		.thumb
 2142              		.thumb_func
 2144              	ADC_ClearFlag:
 2145              	.LFB62:
1106:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1107:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1108:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Clears the ADCx's pending flags.
1109:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1110:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_FLAG: specifies the flag to clear. 
1111:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be any combination of the following values:
1112:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_AWD: Analog watchdog flag
1113:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_EOC: End of conversion flag
1114:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1115:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1116:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1117:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
1118:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
1119:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG) {
 2146              		.loc 1 1119 0
 2147              		.cfi_startproc
 2148              		@ args = 0, pretend = 0, frame = 8
 2149              		@ frame_needed = 1, uses_anonymous_args = 0
 2150              		@ link register save eliminated.
 2151 0000 80B4     		push	{r7}
 2152              	.LCFI98:
 2153              		.cfi_def_cfa_offset 4
 2154              		.cfi_offset 7, -4
 2155 0002 83B0     		sub	sp, sp, #12
 2156              	.LCFI99:
 2157              		.cfi_def_cfa_offset 16
 2158 0004 00AF     		add	r7, sp, #0
 2159              	.LCFI100:
 2160              		.cfi_def_cfa_register 7
 2161 0006 7860     		str	r0, [r7, #4]
 2162 0008 0B46     		mov	r3, r1
 2163 000a FB70     		strb	r3, [r7, #3]
1120:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
1121:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1122:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear the selected ADC flags */
1123:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->SR = ~(uint32_t) ADC_FLAG;
 2164              		.loc 1 1123 0
 2165 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2166 000e 6FEA0302 		mvn	r2, r3
 2167 0012 7B68     		ldr	r3, [r7, #4]
 2168 0014 1A60     		str	r2, [r3, #0]
1124:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 2169              		.loc 1 1124 0
 2170 0016 07F10C07 		add	r7, r7, #12
 2171 001a BD46     		mov	sp, r7
 2172 001c 80BC     		pop	{r7}
 2173 001e 7047     		bx	lr
 2174              		.cfi_endproc
 2175              	.LFE62:
 2177              		.section	.text.ADC_GetITStatus,"ax",%progbits
 2178              		.align	2
 2179              		.global	ADC_GetITStatus
 2180              		.thumb
 2181              		.thumb_func
 2183              	ADC_GetITStatus:
 2184              	.LFB63:
1125:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1126:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1127:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Checks whether the specified ADC interrupt has occurred or not.
1128:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1129:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_IT: specifies the ADC interrupt source to check. 
1130:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be one of the following values:
1131:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_EOC: End of conversion interrupt mask
1132:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1133:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1134:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval The new state of ADC_IT (SET or RESET).
1135:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
1136:../StdPeripheralDriver/src/stm32f10x_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT) {
 2185              		.loc 1 1136 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 24
 2188              		@ frame_needed = 1, uses_anonymous_args = 0
 2189              		@ link register save eliminated.
 2190 0000 80B4     		push	{r7}
 2191              	.LCFI101:
 2192              		.cfi_def_cfa_offset 4
 2193              		.cfi_offset 7, -4
 2194 0002 87B0     		sub	sp, sp, #28
 2195              	.LCFI102:
 2196              		.cfi_def_cfa_offset 32
 2197 0004 00AF     		add	r7, sp, #0
 2198              	.LCFI103:
 2199              		.cfi_def_cfa_register 7
 2200 0006 7860     		str	r0, [r7, #4]
 2201 0008 0B46     		mov	r3, r1
 2202 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1137:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ITStatus bitstatus = RESET;
 2203              		.loc 1 1137 0
 2204 000c 4FF00003 		mov	r3, #0
 2205 0010 FB75     		strb	r3, [r7, #23]
1138:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint32_t itmask = 0, enablestatus = 0;
 2206              		.loc 1 1138 0
 2207 0012 4FF00003 		mov	r3, #0
 2208 0016 3B61     		str	r3, [r7, #16]
 2209 0018 4FF00003 		mov	r3, #0
 2210 001c FB60     		str	r3, [r7, #12]
1139:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
1140:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_GET_IT(ADC_IT));
1141:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the ADC IT index */
1142:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	itmask = ADC_IT >> 8;
 2211              		.loc 1 1142 0
 2212 001e 7B88     		ldrh	r3, [r7, #2]
 2213 0020 4FEA1323 		lsr	r3, r3, #8
 2214 0024 9BB2     		uxth	r3, r3
 2215 0026 3B61     		str	r3, [r7, #16]
1143:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the ADC_IT enable bit status */
1144:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	enablestatus = (ADCx->CR1 & (uint8_t) ADC_IT);
 2216              		.loc 1 1144 0
 2217 0028 7B68     		ldr	r3, [r7, #4]
 2218 002a 5A68     		ldr	r2, [r3, #4]
 2219 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2220 002e DBB2     		uxtb	r3, r3
 2221 0030 1340     		ands	r3, r3, r2
 2222 0032 FB60     		str	r3, [r7, #12]
1145:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the status of the specified ADC interrupt */
1146:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	if (((ADCx->SR & itmask) != (uint32_t) RESET) && enablestatus) {
 2223              		.loc 1 1146 0
 2224 0034 7B68     		ldr	r3, [r7, #4]
 2225 0036 1A68     		ldr	r2, [r3, #0]
 2226 0038 3B69     		ldr	r3, [r7, #16]
 2227 003a 1340     		ands	r3, r3, r2
 2228 003c 002B     		cmp	r3, #0
 2229 003e 06D0     		beq	.L86
 2230              		.loc 1 1146 0 is_stmt 0 discriminator 1
 2231 0040 FB68     		ldr	r3, [r7, #12]
 2232 0042 002B     		cmp	r3, #0
 2233 0044 03D0     		beq	.L86
1147:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* ADC_IT is set */
1148:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		bitstatus = SET;
 2234              		.loc 1 1148 0 is_stmt 1
 2235 0046 4FF00103 		mov	r3, #1
 2236 004a FB75     		strb	r3, [r7, #23]
 2237 004c 02E0     		b	.L87
 2238              	.L86:
1149:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	} else {
1150:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		/* ADC_IT is reset */
1151:../StdPeripheralDriver/src/stm32f10x_adc.c **** 		bitstatus = RESET;
 2239              		.loc 1 1151 0
 2240 004e 4FF00003 		mov	r3, #0
 2241 0052 FB75     		strb	r3, [r7, #23]
 2242              	.L87:
1152:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	}
1153:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Return the ADC_IT status */
1154:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	return bitstatus;
 2243              		.loc 1 1154 0
 2244 0054 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1155:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 2245              		.loc 1 1155 0
 2246 0056 1846     		mov	r0, r3
 2247 0058 07F11C07 		add	r7, r7, #28
 2248 005c BD46     		mov	sp, r7
 2249 005e 80BC     		pop	{r7}
 2250 0060 7047     		bx	lr
 2251              		.cfi_endproc
 2252              	.LFE63:
 2254 0062 00BF     		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 2255              		.align	2
 2256              		.global	ADC_ClearITPendingBit
 2257              		.thumb
 2258              		.thumb_func
 2260              	ADC_ClearITPendingBit:
 2261              	.LFB64:
1156:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1157:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1158:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @brief  Clears the ADCx's interrupt pending bits.
1159:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1160:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1161:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *   This parameter can be any combination of the following values:
1162:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_EOC: End of conversion interrupt mask
1163:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1164:../StdPeripheralDriver/src/stm32f10x_adc.c ****  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1165:../StdPeripheralDriver/src/stm32f10x_adc.c ****  * @retval None
1166:../StdPeripheralDriver/src/stm32f10x_adc.c ****  */
1167:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT) {
 2262              		.loc 1 1167 0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 16
 2265              		@ frame_needed = 1, uses_anonymous_args = 0
 2266              		@ link register save eliminated.
 2267 0000 80B4     		push	{r7}
 2268              	.LCFI104:
 2269              		.cfi_def_cfa_offset 4
 2270              		.cfi_offset 7, -4
 2271 0002 85B0     		sub	sp, sp, #20
 2272              	.LCFI105:
 2273              		.cfi_def_cfa_offset 24
 2274 0004 00AF     		add	r7, sp, #0
 2275              	.LCFI106:
 2276              		.cfi_def_cfa_register 7
 2277 0006 7860     		str	r0, [r7, #4]
 2278 0008 0B46     		mov	r3, r1
 2279 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1168:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	uint8_t itmask = 0;
 2280              		.loc 1 1168 0
 2281 000c 4FF00003 		mov	r3, #0
 2282 0010 FB73     		strb	r3, [r7, #15]
1169:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Check the parameters */
1170:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	assert_param(IS_ADC_ALL_PERIPH(ADCx)); assert_param(IS_ADC_IT(ADC_IT));
1171:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Get the ADC IT index */
1172:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	itmask = (uint8_t) (ADC_IT >> 8);
 2283              		.loc 1 1172 0
 2284 0012 7B88     		ldrh	r3, [r7, #2]
 2285 0014 4FEA1323 		lsr	r3, r3, #8
 2286 0018 9BB2     		uxth	r3, r3
 2287 001a FB73     		strb	r3, [r7, #15]
1173:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	/* Clear the selected ADC interrupt pending bits */
1174:../StdPeripheralDriver/src/stm32f10x_adc.c **** 	ADCx->SR = ~(uint32_t) itmask;
 2288              		.loc 1 1174 0
 2289 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2290 001e 6FEA0302 		mvn	r2, r3
 2291 0022 7B68     		ldr	r3, [r7, #4]
 2292 0024 1A60     		str	r2, [r3, #0]
1175:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 2293              		.loc 1 1175 0
 2294 0026 07F11407 		add	r7, r7, #20
 2295 002a BD46     		mov	sp, r7
 2296 002c 80BC     		pop	{r7}
 2297 002e 7047     		bx	lr
 2298              		.cfi_endproc
 2299              	.LFE64:
 2301              		.text
 2302              	.Letext0:
 2303              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 2304              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/stm32f10x.h"
 2305              		.file 4 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 2306              		.file 5 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_adc.c
     /tmp/ccrnjbnH.s:19     .text.ADC_DeInit:00000000 $t
     /tmp/ccrnjbnH.s:24     .text.ADC_DeInit:00000000 ADC_DeInit
     /tmp/ccrnjbnH.s:98     .text.ADC_Init:00000000 $t
     /tmp/ccrnjbnH.s:103    .text.ADC_Init:00000000 ADC_Init
     /tmp/ccrnjbnH.s:218    .text.ADC_StructInit:00000000 $t
     /tmp/ccrnjbnH.s:223    .text.ADC_StructInit:00000000 ADC_StructInit
     /tmp/ccrnjbnH.s:274    .text.ADC_Cmd:00000000 $t
     /tmp/ccrnjbnH.s:279    .text.ADC_Cmd:00000000 ADC_Cmd
     /tmp/ccrnjbnH.s:327    .text.ADC_DMACmd:00000000 $t
     /tmp/ccrnjbnH.s:332    .text.ADC_DMACmd:00000000 ADC_DMACmd
     /tmp/ccrnjbnH.s:380    .text.ADC_ITConfig:00000000 $t
     /tmp/ccrnjbnH.s:385    .text.ADC_ITConfig:00000000 ADC_ITConfig
     /tmp/ccrnjbnH.s:444    .text.ADC_ResetCalibration:00000000 $t
     /tmp/ccrnjbnH.s:449    .text.ADC_ResetCalibration:00000000 ADC_ResetCalibration
     /tmp/ccrnjbnH.s:482    .text.ADC_GetResetCalibrationStatus:00000000 $t
     /tmp/ccrnjbnH.s:487    .text.ADC_GetResetCalibrationStatus:00000000 ADC_GetResetCalibrationStatus
     /tmp/ccrnjbnH.s:535    .text.ADC_StartCalibration:00000000 $t
     /tmp/ccrnjbnH.s:540    .text.ADC_StartCalibration:00000000 ADC_StartCalibration
     /tmp/ccrnjbnH.s:573    .text.ADC_GetCalibrationStatus:00000000 $t
     /tmp/ccrnjbnH.s:578    .text.ADC_GetCalibrationStatus:00000000 ADC_GetCalibrationStatus
     /tmp/ccrnjbnH.s:626    .text.ADC_SoftwareStartConvCmd:00000000 $t
     /tmp/ccrnjbnH.s:631    .text.ADC_SoftwareStartConvCmd:00000000 ADC_SoftwareStartConvCmd
     /tmp/ccrnjbnH.s:679    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
     /tmp/ccrnjbnH.s:684    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccrnjbnH.s:732    .text.ADC_DiscModeChannelCountConfig:00000000 $t
     /tmp/ccrnjbnH.s:737    .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
     /tmp/ccrnjbnH.s:794    .text.ADC_DiscModeCmd:00000000 $t
     /tmp/ccrnjbnH.s:799    .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
     /tmp/ccrnjbnH.s:847    .text.ADC_RegularChannelConfig:00000000 $t
     /tmp/ccrnjbnH.s:852    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
     /tmp/ccrnjbnH.s:1090   .text.ADC_ExternalTrigConvCmd:00000000 $t
     /tmp/ccrnjbnH.s:1095   .text.ADC_ExternalTrigConvCmd:00000000 ADC_ExternalTrigConvCmd
     /tmp/ccrnjbnH.s:1143   .text.ADC_GetConversionValue:00000000 $t
     /tmp/ccrnjbnH.s:1148   .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
     /tmp/ccrnjbnH.s:1180   .text.ADC_GetDualModeConversionValue:00000000 $t
     /tmp/ccrnjbnH.s:1185   .text.ADC_GetDualModeConversionValue:00000000 ADC_GetDualModeConversionValue
     /tmp/ccrnjbnH.s:1212   .text.ADC_AutoInjectedConvCmd:00000000 $t
     /tmp/ccrnjbnH.s:1217   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
     /tmp/ccrnjbnH.s:1265   .text.ADC_InjectedDiscModeCmd:00000000 $t
     /tmp/ccrnjbnH.s:1270   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
     /tmp/ccrnjbnH.s:1318   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
     /tmp/ccrnjbnH.s:1323   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccrnjbnH.s:1371   .text.ADC_ExternalTrigInjectedConvCmd:00000000 $t
     /tmp/ccrnjbnH.s:1376   .text.ADC_ExternalTrigInjectedConvCmd:00000000 ADC_ExternalTrigInjectedConvCmd
     /tmp/ccrnjbnH.s:1424   .text.ADC_SoftwareStartInjectedConvCmd:00000000 $t
     /tmp/ccrnjbnH.s:1429   .text.ADC_SoftwareStartInjectedConvCmd:00000000 ADC_SoftwareStartInjectedConvCmd
     /tmp/ccrnjbnH.s:1477   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
     /tmp/ccrnjbnH.s:1482   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccrnjbnH.s:1530   .text.ADC_InjectedChannelConfig:00000000 $t
     /tmp/ccrnjbnH.s:1535   .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
     /tmp/ccrnjbnH.s:1711   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
     /tmp/ccrnjbnH.s:1716   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccrnjbnH.s:1773   .text.ADC_SetInjectedOffset:00000000 $t
     /tmp/ccrnjbnH.s:1778   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
     /tmp/ccrnjbnH.s:1824   .text.ADC_GetInjectedConversionValue:00000000 $t
     /tmp/ccrnjbnH.s:1829   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
     /tmp/ccrnjbnH.s:1875   .text.ADC_AnalogWatchdogCmd:00000000 $t
     /tmp/ccrnjbnH.s:1880   .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
     /tmp/ccrnjbnH.s:1929   .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
     /tmp/ccrnjbnH.s:1934   .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccrnjbnH.s:1973   .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
     /tmp/ccrnjbnH.s:1978   .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccrnjbnH.s:2027   .text.ADC_TempSensorVrefintCmd:00000000 $t
     /tmp/ccrnjbnH.s:2032   .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
     /tmp/ccrnjbnH.s:2083   .text.ADC_GetFlagStatus:00000000 $t
     /tmp/ccrnjbnH.s:2088   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
     /tmp/ccrnjbnH.s:2139   .text.ADC_ClearFlag:00000000 $t
     /tmp/ccrnjbnH.s:2144   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
     /tmp/ccrnjbnH.s:2178   .text.ADC_GetITStatus:00000000 $t
     /tmp/ccrnjbnH.s:2183   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
     /tmp/ccrnjbnH.s:2255   .text.ADC_ClearITPendingBit:00000000 $t
     /tmp/ccrnjbnH.s:2260   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
