   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.data.APBAHBPrescTable,"aw",%progbits
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.section	.data.ADCPrescTable,"aw",%progbits
  40              		.align	2
  43              	ADCPrescTable:
  44 0000 02       		.byte	2
  45 0001 04       		.byte	4
  46 0002 06       		.byte	6
  47 0003 08       		.byte	8
  48              		.section	.text.RCC_DeInit,"ax",%progbits
  49              		.align	2
  50              		.global	RCC_DeInit
  51              		.thumb
  52              		.thumb_func
  54              	RCC_DeInit:
  55              	.LFB29:
  56              		.file 1 "../StdPeripheralDriver/src/stm32f10x_rcc.c"
   1:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @attention
  10:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  11:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  18:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  21:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  25:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  27:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  28:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  29:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  32:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
  33:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  34:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  36:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  37:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  38:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
  39:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
  40:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  41:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  42:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  44:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  45:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  46:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  49:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  51:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  56:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  60:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  70:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  74:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  76:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
  83:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  87:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  89:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  94:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  98:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 100:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 105:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 108:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 118:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 120:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 134:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 148:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 151:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 156:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 165:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 171:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 177:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 180:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 181:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 184:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 186:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 188:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 189:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 192:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 193:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 196:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 198:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 203:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 204:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 207:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 208:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 211:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 212:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 216:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
  57              		.loc 1 218 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62 0000 80B4     		push	{r7}
  63              	.LCFI0:
  64              		.cfi_def_cfa_offset 4
  65              		.cfi_offset 7, -4
  66 0002 00AF     		add	r7, sp, #0
  67              	.LCFI1:
  68              		.cfi_def_cfa_register 7
 219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  69              		.loc 1 220 0
  70 0004 4FF48053 		mov	r3, #4096
  71 0008 C4F20203 		movt	r3, 16386
  72 000c 4FF48052 		mov	r2, #4096
  73 0010 C4F20202 		movt	r2, 16386
  74 0014 1268     		ldr	r2, [r2, #0]
  75 0016 42F00102 		orr	r2, r2, #1
  76 001a 1A60     		str	r2, [r3, #0]
 221:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  77              		.loc 1 224 0
  78 001c 4FF48052 		mov	r2, #4096
  79 0020 C4F20202 		movt	r2, 16386
  80 0024 4FF48053 		mov	r3, #4096
  81 0028 C4F20203 		movt	r3, 16386
  82 002c 5968     		ldr	r1, [r3, #4]
  83 002e 4FF00003 		mov	r3, #0
  84 0032 CFF6FF03 		movt	r3, 63743
  85 0036 0B40     		ands	r3, r3, r1
  86 0038 5360     		str	r3, [r2, #4]
 225:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 229:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  87              		.loc 1 230 0
  88 003a 4FF48053 		mov	r3, #4096
  89 003e C4F20203 		movt	r3, 16386
  90 0042 4FF48052 		mov	r2, #4096
  91 0046 C4F20202 		movt	r2, 16386
  92 004a 1268     		ldr	r2, [r2, #0]
  93 004c 22F08472 		bic	r2, r2, #17301504
  94 0050 22F48032 		bic	r2, r2, #65536
  95 0054 1A60     		str	r2, [r3, #0]
 231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  96              		.loc 1 233 0
  97 0056 4FF48053 		mov	r3, #4096
  98 005a C4F20203 		movt	r3, 16386
  99 005e 4FF48052 		mov	r2, #4096
 100 0062 C4F20202 		movt	r2, 16386
 101 0066 1268     		ldr	r2, [r2, #0]
 102 0068 22F48022 		bic	r2, r2, #262144
 103 006c 1A60     		str	r2, [r3, #0]
 234:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 104              		.loc 1 236 0
 105 006e 4FF48053 		mov	r3, #4096
 106 0072 C4F20203 		movt	r3, 16386
 107 0076 4FF48052 		mov	r2, #4096
 108 007a C4F20202 		movt	r2, 16386
 109 007e 5268     		ldr	r2, [r2, #4]
 110 0080 22F4FE02 		bic	r2, r2, #8323072
 111 0084 5A60     		str	r2, [r3, #4]
 237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 242:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 112              		.loc 1 249 0
 113 0086 4FF48053 		mov	r3, #4096
 114 008a C4F20203 		movt	r3, 16386
 115 008e 4FF41F02 		mov	r2, #10420224
 116 0092 9A60     		str	r2, [r3, #8]
 250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 251:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 117              		.loc 1 252 0
 118 0094 4FF48053 		mov	r3, #4096
 119 0098 C4F20203 		movt	r3, 16386
 120 009c 4FF00002 		mov	r2, #0
 121 00a0 DA62     		str	r2, [r3, #44]
 253:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 258:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 122              		.loc 1 258 0
 123 00a2 BD46     		mov	sp, r7
 124 00a4 80BC     		pop	{r7}
 125 00a6 7047     		bx	lr
 126              		.cfi_endproc
 127              	.LFE29:
 129              		.section	.text.RCC_HSEConfig,"ax",%progbits
 130              		.align	2
 131              		.global	RCC_HSEConfig
 132              		.thumb
 133              		.thumb_func
 135              	RCC_HSEConfig:
 136              	.LFB30:
 259:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 260:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 270:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 137              		.loc 1 271 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 8
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 80B4     		push	{r7}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 0002 83B0     		sub	sp, sp, #12
 147              	.LCFI3:
 148              		.cfi_def_cfa_offset 16
 149 0004 00AF     		add	r7, sp, #0
 150              	.LCFI4:
 151              		.cfi_def_cfa_register 7
 152 0006 7860     		str	r0, [r7, #4]
 272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 153              		.loc 1 276 0
 154 0008 4FF48053 		mov	r3, #4096
 155 000c C4F20203 		movt	r3, 16386
 156 0010 4FF48052 		mov	r2, #4096
 157 0014 C4F20202 		movt	r2, 16386
 158 0018 1268     		ldr	r2, [r2, #0]
 159 001a 22F48032 		bic	r2, r2, #65536
 160 001e 1A60     		str	r2, [r3, #0]
 277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 161              		.loc 1 278 0
 162 0020 4FF48053 		mov	r3, #4096
 163 0024 C4F20203 		movt	r3, 16386
 164 0028 4FF48052 		mov	r2, #4096
 165 002c C4F20202 		movt	r2, 16386
 166 0030 1268     		ldr	r2, [r2, #0]
 167 0032 22F48022 		bic	r2, r2, #262144
 168 0036 1A60     		str	r2, [r3, #0]
 279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 169              		.loc 1 280 0
 170 0038 7B68     		ldr	r3, [r7, #4]
 171 003a B3F5803F 		cmp	r3, #65536
 172 003e 03D0     		beq	.L4
 173 0040 B3F5802F 		cmp	r3, #262144
 174 0044 0DD0     		beq	.L5
 175 0046 19E0     		b	.L7
 176              	.L4:
 281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 282:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 177              		.loc 1 284 0
 178 0048 4FF48053 		mov	r3, #4096
 179 004c C4F20203 		movt	r3, 16386
 180 0050 4FF48052 		mov	r2, #4096
 181 0054 C4F20202 		movt	r2, 16386
 182 0058 1268     		ldr	r2, [r2, #0]
 183 005a 42F48032 		orr	r2, r2, #65536
 184 005e 1A60     		str	r2, [r3, #0]
 285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 185              		.loc 1 285 0
 186 0060 0DE0     		b	.L2
 187              	.L5:
 286:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 188              		.loc 1 289 0
 189 0062 4FF48053 		mov	r3, #4096
 190 0066 C4F20203 		movt	r3, 16386
 191 006a 4FF48052 		mov	r2, #4096
 192 006e C4F20202 		movt	r2, 16386
 193 0072 1268     		ldr	r2, [r2, #0]
 194 0074 42F4A022 		orr	r2, r2, #327680
 195 0078 1A60     		str	r2, [r3, #0]
 290:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 196              		.loc 1 290 0
 197 007a 00E0     		b	.L2
 198              	.L7:
 291:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 199              		.loc 1 293 0
 200 007c 00BF     		nop
 201              	.L2:
 294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 295:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 202              		.loc 1 295 0
 203 007e 07F10C07 		add	r7, r7, #12
 204 0082 BD46     		mov	sp, r7
 205 0084 80BC     		pop	{r7}
 206 0086 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE30:
 210              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 211              		.align	2
 212              		.global	RCC_WaitForHSEStartUp
 213              		.thumb
 214              		.thumb_func
 216              	RCC_WaitForHSEStartUp:
 217              	.LFB31:
 296:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 297:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 304:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 218              		.loc 1 305 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 8
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222 0000 80B5     		push	{r7, lr}
 223              	.LCFI5:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 7, -8
 226              		.cfi_offset 14, -4
 227 0002 82B0     		sub	sp, sp, #8
 228              	.LCFI6:
 229              		.cfi_def_cfa_offset 16
 230 0004 00AF     		add	r7, sp, #0
 231              	.LCFI7:
 232              		.cfi_def_cfa_register 7
 306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 233              		.loc 1 306 0
 234 0006 4FF00003 		mov	r3, #0
 235 000a 3B60     		str	r3, [r7, #0]
 307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 236              		.loc 1 307 0
 237 000c 4FF00003 		mov	r3, #0
 238 0010 FB71     		strb	r3, [r7, #7]
 308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 239              		.loc 1 308 0
 240 0012 4FF00003 		mov	r3, #0
 241 0016 BB71     		strb	r3, [r7, #6]
 242              	.L10:
 309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   do
 312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 243              		.loc 1 313 0 discriminator 1
 244 0018 4FF03100 		mov	r0, #49
 245 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 246 0020 0346     		mov	r3, r0
 247 0022 BB71     		strb	r3, [r7, #6]
 314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 248              		.loc 1 314 0 discriminator 1
 249 0024 3B68     		ldr	r3, [r7, #0]
 250 0026 03F10103 		add	r3, r3, #1
 251 002a 3B60     		str	r3, [r7, #0]
 315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 252              		.loc 1 315 0 discriminator 1
 253 002c 3B68     		ldr	r3, [r7, #0]
 254 002e B3F5A06F 		cmp	r3, #1280
 255 0032 02D0     		beq	.L9
 256 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 257 0036 002B     		cmp	r3, #0
 258 0038 EED0     		beq	.L10
 259              	.L9:
 316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 260              		.loc 1 317 0
 261 003a 4FF03100 		mov	r0, #49
 262 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 263 0042 0346     		mov	r3, r0
 264 0044 002B     		cmp	r3, #0
 265 0046 03D0     		beq	.L11
 318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = SUCCESS;
 266              		.loc 1 319 0
 267 0048 4FF00103 		mov	r3, #1
 268 004c FB71     		strb	r3, [r7, #7]
 269 004e 02E0     		b	.L12
 270              	.L11:
 320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = ERROR;
 271              		.loc 1 323 0
 272 0050 4FF00003 		mov	r3, #0
 273 0054 FB71     		strb	r3, [r7, #7]
 274              	.L12:
 324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }  
 325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return (status);
 275              		.loc 1 325 0
 276 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 277              		.loc 1 326 0
 278 0058 1846     		mov	r0, r3
 279 005a 07F10807 		add	r7, r7, #8
 280 005e BD46     		mov	sp, r7
 281 0060 80BD     		pop	{r7, pc}
 282              		.cfi_endproc
 283              	.LFE31:
 285 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 286              		.align	2
 287              		.global	RCC_AdjustHSICalibrationValue
 288              		.thumb
 289              		.thumb_func
 291              	RCC_AdjustHSICalibrationValue:
 292              	.LFB32:
 327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 328:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 333:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 334:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 293              		.loc 1 335 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 16
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298 0000 80B4     		push	{r7}
 299              	.LCFI8:
 300              		.cfi_def_cfa_offset 4
 301              		.cfi_offset 7, -4
 302 0002 85B0     		sub	sp, sp, #20
 303              	.LCFI9:
 304              		.cfi_def_cfa_offset 24
 305 0004 00AF     		add	r7, sp, #0
 306              	.LCFI10:
 307              		.cfi_def_cfa_register 7
 308 0006 0346     		mov	r3, r0
 309 0008 FB71     		strb	r3, [r7, #7]
 336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 310              		.loc 1 336 0
 311 000a 4FF00003 		mov	r3, #0
 312 000e FB60     		str	r3, [r7, #12]
 337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 313              		.loc 1 339 0
 314 0010 4FF48053 		mov	r3, #4096
 315 0014 C4F20203 		movt	r3, 16386
 316 0018 1B68     		ldr	r3, [r3, #0]
 317 001a FB60     		str	r3, [r7, #12]
 340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 318              		.loc 1 341 0
 319 001c FB68     		ldr	r3, [r7, #12]
 320 001e 23F0F803 		bic	r3, r3, #248
 321 0022 FB60     		str	r3, [r7, #12]
 342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 322              		.loc 1 343 0
 323 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 324 0026 4FEAC303 		lsl	r3, r3, #3
 325 002a FA68     		ldr	r2, [r7, #12]
 326 002c 1343     		orrs	r3, r3, r2
 327 002e FB60     		str	r3, [r7, #12]
 344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 328              		.loc 1 345 0
 329 0030 4FF48053 		mov	r3, #4096
 330 0034 C4F20203 		movt	r3, 16386
 331 0038 FA68     		ldr	r2, [r7, #12]
 332 003a 1A60     		str	r2, [r3, #0]
 346:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 333              		.loc 1 346 0
 334 003c 07F11407 		add	r7, r7, #20
 335 0040 BD46     		mov	sp, r7
 336 0042 80BC     		pop	{r7}
 337 0044 7047     		bx	lr
 338              		.cfi_endproc
 339              	.LFE32:
 341 0046 00BF     		.section	.text.RCC_HSICmd,"ax",%progbits
 342              		.align	2
 343              		.global	RCC_HSICmd
 344              		.thumb
 345              		.thumb_func
 347              	RCC_HSICmd:
 348              	.LFB33:
 347:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 354:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 349              		.loc 1 355 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 8
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 0000 80B4     		push	{r7}
 355              	.LCFI11:
 356              		.cfi_def_cfa_offset 4
 357              		.cfi_offset 7, -4
 358 0002 83B0     		sub	sp, sp, #12
 359              	.LCFI12:
 360              		.cfi_def_cfa_offset 16
 361 0004 00AF     		add	r7, sp, #0
 362              	.LCFI13:
 363              		.cfi_def_cfa_register 7
 364 0006 0346     		mov	r3, r0
 365 0008 FB71     		strb	r3, [r7, #7]
 356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 366              		.loc 1 358 0
 367 000a 4FF00003 		mov	r3, #0
 368 000e C4F24223 		movt	r3, 16962
 369 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 370 0014 1A60     		str	r2, [r3, #0]
 359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 371              		.loc 1 359 0
 372 0016 07F10C07 		add	r7, r7, #12
 373 001a BD46     		mov	sp, r7
 374 001c 80BC     		pop	{r7}
 375 001e 7047     		bx	lr
 376              		.cfi_endproc
 377              	.LFE33:
 379              		.section	.text.RCC_PLLConfig,"ax",%progbits
 380              		.align	2
 381              		.global	RCC_PLLConfig
 382              		.thumb
 383              		.thumb_func
 385              	RCC_PLLConfig:
 386              	.LFB34:
 360:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 361:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 362:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 377:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 378:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 387              		.loc 1 379 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 16
 390              		@ frame_needed = 1, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392 0000 80B4     		push	{r7}
 393              	.LCFI14:
 394              		.cfi_def_cfa_offset 4
 395              		.cfi_offset 7, -4
 396 0002 85B0     		sub	sp, sp, #20
 397              	.LCFI15:
 398              		.cfi_def_cfa_offset 24
 399 0004 00AF     		add	r7, sp, #0
 400              	.LCFI16:
 401              		.cfi_def_cfa_register 7
 402 0006 7860     		str	r0, [r7, #4]
 403 0008 3960     		str	r1, [r7, #0]
 380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 404              		.loc 1 380 0
 405 000a 4FF00003 		mov	r3, #0
 406 000e FB60     		str	r3, [r7, #12]
 381:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 385:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 407              		.loc 1 386 0
 408 0010 4FF48053 		mov	r3, #4096
 409 0014 C4F20203 		movt	r3, 16386
 410 0018 5B68     		ldr	r3, [r3, #4]
 411 001a FB60     		str	r3, [r7, #12]
 387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 412              		.loc 1 388 0
 413 001c FB68     		ldr	r3, [r7, #12]
 414 001e 23F47413 		bic	r3, r3, #3997696
 415 0022 FB60     		str	r3, [r7, #12]
 389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 416              		.loc 1 390 0
 417 0024 7A68     		ldr	r2, [r7, #4]
 418 0026 3B68     		ldr	r3, [r7, #0]
 419 0028 1343     		orrs	r3, r3, r2
 420 002a FA68     		ldr	r2, [r7, #12]
 421 002c 1343     		orrs	r3, r3, r2
 422 002e FB60     		str	r3, [r7, #12]
 391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 423              		.loc 1 392 0
 424 0030 4FF48053 		mov	r3, #4096
 425 0034 C4F20203 		movt	r3, 16386
 426 0038 FA68     		ldr	r2, [r7, #12]
 427 003a 5A60     		str	r2, [r3, #4]
 393:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 428              		.loc 1 393 0
 429 003c 07F11407 		add	r7, r7, #20
 430 0040 BD46     		mov	sp, r7
 431 0042 80BC     		pop	{r7}
 432 0044 7047     		bx	lr
 433              		.cfi_endproc
 434              	.LFE34:
 436 0046 00BF     		.section	.text.RCC_PLLCmd,"ax",%progbits
 437              		.align	2
 438              		.global	RCC_PLLCmd
 439              		.thumb
 440              		.thumb_func
 442              	RCC_PLLCmd:
 443              	.LFB35:
 394:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 395:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 401:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 444              		.loc 1 402 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 8
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449 0000 80B4     		push	{r7}
 450              	.LCFI17:
 451              		.cfi_def_cfa_offset 4
 452              		.cfi_offset 7, -4
 453 0002 83B0     		sub	sp, sp, #12
 454              	.LCFI18:
 455              		.cfi_def_cfa_offset 16
 456 0004 00AF     		add	r7, sp, #0
 457              	.LCFI19:
 458              		.cfi_def_cfa_register 7
 459 0006 0346     		mov	r3, r0
 460 0008 FB71     		strb	r3, [r7, #7]
 403:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 461              		.loc 1 406 0
 462 000a 4FF06003 		mov	r3, #96
 463 000e C4F24223 		movt	r3, 16962
 464 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 465 0014 1A60     		str	r2, [r3, #0]
 407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 466              		.loc 1 407 0
 467 0016 07F10C07 		add	r7, r7, #12
 468 001a BD46     		mov	sp, r7
 469 001c 80BC     		pop	{r7}
 470 001e 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE35:
 474              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 475              		.align	2
 476              		.global	RCC_PREDIV1Config
 477              		.thumb
 478              		.thumb_func
 480              	RCC_PREDIV1Config:
 481              	.LFB36:
 408:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 409:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     devices.
 416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 421:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 426:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 482              		.loc 1 427 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 16
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 487 0000 80B4     		push	{r7}
 488              	.LCFI20:
 489              		.cfi_def_cfa_offset 4
 490              		.cfi_offset 7, -4
 491 0002 85B0     		sub	sp, sp, #20
 492              	.LCFI21:
 493              		.cfi_def_cfa_offset 24
 494 0004 00AF     		add	r7, sp, #0
 495              	.LCFI22:
 496              		.cfi_def_cfa_register 7
 497 0006 7860     		str	r0, [r7, #4]
 498 0008 3960     		str	r1, [r7, #0]
 428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 499              		.loc 1 428 0
 500 000a 4FF00003 		mov	r3, #0
 501 000e FB60     		str	r3, [r7, #12]
 429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 502              		.loc 1 434 0
 503 0010 4FF48053 		mov	r3, #4096
 504 0014 C4F20203 		movt	r3, 16386
 505 0018 DB6A     		ldr	r3, [r3, #44]
 506 001a FB60     		str	r3, [r7, #12]
 435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 507              		.loc 1 436 0
 508 001c FB68     		ldr	r3, [r7, #12]
 509 001e 23F48033 		bic	r3, r3, #65536
 510 0022 23F00F03 		bic	r3, r3, #15
 511 0026 FB60     		str	r3, [r7, #12]
 437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 512              		.loc 1 438 0
 513 0028 7A68     		ldr	r2, [r7, #4]
 514 002a 3B68     		ldr	r3, [r7, #0]
 515 002c 1343     		orrs	r3, r3, r2
 516 002e FA68     		ldr	r2, [r7, #12]
 517 0030 1343     		orrs	r3, r3, r2
 518 0032 FB60     		str	r3, [r7, #12]
 439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 519              		.loc 1 440 0
 520 0034 4FF48053 		mov	r3, #4096
 521 0038 C4F20203 		movt	r3, 16386
 522 003c FA68     		ldr	r2, [r7, #12]
 523 003e DA62     		str	r2, [r3, #44]
 441:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 524              		.loc 1 441 0
 525 0040 07F11407 		add	r7, r7, #20
 526 0044 BD46     		mov	sp, r7
 527 0046 80BC     		pop	{r7}
 528 0048 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE36:
 532 004a 00BF     		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 533              		.align	2
 534              		.global	RCC_SYSCLKConfig
 535              		.thumb
 536              		.thumb_func
 538              	RCC_SYSCLKConfig:
 539              	.LFB37:
 442:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 443:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 444:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 448:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 454:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 456:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 458:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 461:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 467:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 469:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 470:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 471:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 473:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 478:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 479:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 481:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 483:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 486:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 492:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 494:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 495:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 496:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 497:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 499:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 504:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 505:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 507:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 510:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 512:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 513:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 514:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 515:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 517:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 522:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 523:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 525:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 530:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 536:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 538:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 539:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 540:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 541:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 545:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 546:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 548:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 550:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 553:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 555:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 556:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 563:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 564:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 540              		.loc 1 565 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 16
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545 0000 80B4     		push	{r7}
 546              	.LCFI23:
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 7, -4
 549 0002 85B0     		sub	sp, sp, #20
 550              	.LCFI24:
 551              		.cfi_def_cfa_offset 24
 552 0004 00AF     		add	r7, sp, #0
 553              	.LCFI25:
 554              		.cfi_def_cfa_register 7
 555 0006 7860     		str	r0, [r7, #4]
 566:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 556              		.loc 1 566 0
 557 0008 4FF00003 		mov	r3, #0
 558 000c FB60     		str	r3, [r7, #12]
 567:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 569:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 559              		.loc 1 569 0
 560 000e 4FF48053 		mov	r3, #4096
 561 0012 C4F20203 		movt	r3, 16386
 562 0016 5B68     		ldr	r3, [r3, #4]
 563 0018 FB60     		str	r3, [r7, #12]
 570:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 564              		.loc 1 571 0
 565 001a FB68     		ldr	r3, [r7, #12]
 566 001c 23F00303 		bic	r3, r3, #3
 567 0020 FB60     		str	r3, [r7, #12]
 572:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 568              		.loc 1 573 0
 569 0022 FA68     		ldr	r2, [r7, #12]
 570 0024 7B68     		ldr	r3, [r7, #4]
 571 0026 1343     		orrs	r3, r3, r2
 572 0028 FB60     		str	r3, [r7, #12]
 574:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 575:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 573              		.loc 1 575 0
 574 002a 4FF48053 		mov	r3, #4096
 575 002e C4F20203 		movt	r3, 16386
 576 0032 FA68     		ldr	r2, [r7, #12]
 577 0034 5A60     		str	r2, [r3, #4]
 576:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 578              		.loc 1 576 0
 579 0036 07F11407 		add	r7, r7, #20
 580 003a BD46     		mov	sp, r7
 581 003c 80BC     		pop	{r7}
 582 003e 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE37:
 586              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 587              		.align	2
 588              		.global	RCC_GetSYSCLKSource
 589              		.thumb
 590              		.thumb_func
 592              	RCC_GetSYSCLKSource:
 593              	.LFB38:
 577:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 578:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 579:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 581:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   be one of the following:
 583:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 587:../StdPeripheralDriver/src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 594              		.loc 1 588 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 599 0000 80B4     		push	{r7}
 600              	.LCFI26:
 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 7, -4
 603 0002 00AF     		add	r7, sp, #0
 604              	.LCFI27:
 605              		.cfi_def_cfa_register 7
 589:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 606              		.loc 1 589 0
 607 0004 4FF48053 		mov	r3, #4096
 608 0008 C4F20203 		movt	r3, 16386
 609 000c 5B68     		ldr	r3, [r3, #4]
 610 000e DBB2     		uxtb	r3, r3
 611 0010 03F00C03 		and	r3, r3, #12
 612 0014 DBB2     		uxtb	r3, r3
 590:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 613              		.loc 1 590 0
 614 0016 1846     		mov	r0, r3
 615 0018 BD46     		mov	sp, r7
 616 001a 80BC     		pop	{r7}
 617 001c 7047     		bx	lr
 618              		.cfi_endproc
 619              	.LFE38:
 621 001e 00BF     		.section	.text.RCC_HCLKConfig,"ax",%progbits
 622              		.align	2
 623              		.global	RCC_HCLKConfig
 624              		.thumb
 625              		.thumb_func
 627              	RCC_HCLKConfig:
 628              	.LFB39:
 591:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 592:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 593:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 607:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 608:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 629              		.loc 1 609 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 16
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634 0000 80B4     		push	{r7}
 635              	.LCFI28:
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 7, -4
 638 0002 85B0     		sub	sp, sp, #20
 639              	.LCFI29:
 640              		.cfi_def_cfa_offset 24
 641 0004 00AF     		add	r7, sp, #0
 642              	.LCFI30:
 643              		.cfi_def_cfa_register 7
 644 0006 7860     		str	r0, [r7, #4]
 610:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 645              		.loc 1 610 0
 646 0008 4FF00003 		mov	r3, #0
 647 000c FB60     		str	r3, [r7, #12]
 611:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 613:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 648              		.loc 1 613 0
 649 000e 4FF48053 		mov	r3, #4096
 650 0012 C4F20203 		movt	r3, 16386
 651 0016 5B68     		ldr	r3, [r3, #4]
 652 0018 FB60     		str	r3, [r7, #12]
 614:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 653              		.loc 1 615 0
 654 001a FB68     		ldr	r3, [r7, #12]
 655 001c 23F0F003 		bic	r3, r3, #240
 656 0020 FB60     		str	r3, [r7, #12]
 616:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 657              		.loc 1 617 0
 658 0022 FA68     		ldr	r2, [r7, #12]
 659 0024 7B68     		ldr	r3, [r7, #4]
 660 0026 1343     		orrs	r3, r3, r2
 661 0028 FB60     		str	r3, [r7, #12]
 618:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 619:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 662              		.loc 1 619 0
 663 002a 4FF48053 		mov	r3, #4096
 664 002e C4F20203 		movt	r3, 16386
 665 0032 FA68     		ldr	r2, [r7, #12]
 666 0034 5A60     		str	r2, [r3, #4]
 620:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 667              		.loc 1 620 0
 668 0036 07F11407 		add	r7, r7, #20
 669 003a BD46     		mov	sp, r7
 670 003c 80BC     		pop	{r7}
 671 003e 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE39:
 675              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 676              		.align	2
 677              		.global	RCC_PCLK1Config
 678              		.thumb
 679              		.thumb_func
 681              	RCC_PCLK1Config:
 682              	.LFB40:
 621:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 622:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 623:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 633:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 634:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 683              		.loc 1 635 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 16
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 0000 80B4     		push	{r7}
 689              	.LCFI31:
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 0002 85B0     		sub	sp, sp, #20
 693              	.LCFI32:
 694              		.cfi_def_cfa_offset 24
 695 0004 00AF     		add	r7, sp, #0
 696              	.LCFI33:
 697              		.cfi_def_cfa_register 7
 698 0006 7860     		str	r0, [r7, #4]
 636:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 699              		.loc 1 636 0
 700 0008 4FF00003 		mov	r3, #0
 701 000c FB60     		str	r3, [r7, #12]
 637:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 639:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 702              		.loc 1 639 0
 703 000e 4FF48053 		mov	r3, #4096
 704 0012 C4F20203 		movt	r3, 16386
 705 0016 5B68     		ldr	r3, [r3, #4]
 706 0018 FB60     		str	r3, [r7, #12]
 640:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 707              		.loc 1 641 0
 708 001a FB68     		ldr	r3, [r7, #12]
 709 001c 23F4E063 		bic	r3, r3, #1792
 710 0020 FB60     		str	r3, [r7, #12]
 642:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 711              		.loc 1 643 0
 712 0022 FA68     		ldr	r2, [r7, #12]
 713 0024 7B68     		ldr	r3, [r7, #4]
 714 0026 1343     		orrs	r3, r3, r2
 715 0028 FB60     		str	r3, [r7, #12]
 644:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 645:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 716              		.loc 1 645 0
 717 002a 4FF48053 		mov	r3, #4096
 718 002e C4F20203 		movt	r3, 16386
 719 0032 FA68     		ldr	r2, [r7, #12]
 720 0034 5A60     		str	r2, [r3, #4]
 646:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 721              		.loc 1 646 0
 722 0036 07F11407 		add	r7, r7, #20
 723 003a BD46     		mov	sp, r7
 724 003c 80BC     		pop	{r7}
 725 003e 7047     		bx	lr
 726              		.cfi_endproc
 727              	.LFE40:
 729              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 730              		.align	2
 731              		.global	RCC_PCLK2Config
 732              		.thumb
 733              		.thumb_func
 735              	RCC_PCLK2Config:
 736              	.LFB41:
 647:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 648:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 649:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 659:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 660:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 737              		.loc 1 661 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 16
 740              		@ frame_needed = 1, uses_anonymous_args = 0
 741              		@ link register save eliminated.
 742 0000 80B4     		push	{r7}
 743              	.LCFI34:
 744              		.cfi_def_cfa_offset 4
 745              		.cfi_offset 7, -4
 746 0002 85B0     		sub	sp, sp, #20
 747              	.LCFI35:
 748              		.cfi_def_cfa_offset 24
 749 0004 00AF     		add	r7, sp, #0
 750              	.LCFI36:
 751              		.cfi_def_cfa_register 7
 752 0006 7860     		str	r0, [r7, #4]
 662:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 753              		.loc 1 662 0
 754 0008 4FF00003 		mov	r3, #0
 755 000c FB60     		str	r3, [r7, #12]
 663:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 665:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 756              		.loc 1 665 0
 757 000e 4FF48053 		mov	r3, #4096
 758 0012 C4F20203 		movt	r3, 16386
 759 0016 5B68     		ldr	r3, [r3, #4]
 760 0018 FB60     		str	r3, [r7, #12]
 666:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 761              		.loc 1 667 0
 762 001a FB68     		ldr	r3, [r7, #12]
 763 001c 23F46053 		bic	r3, r3, #14336
 764 0020 FB60     		str	r3, [r7, #12]
 668:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 765              		.loc 1 669 0
 766 0022 7B68     		ldr	r3, [r7, #4]
 767 0024 4FEAC303 		lsl	r3, r3, #3
 768 0028 FA68     		ldr	r2, [r7, #12]
 769 002a 1343     		orrs	r3, r3, r2
 770 002c FB60     		str	r3, [r7, #12]
 670:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 671:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 771              		.loc 1 671 0
 772 002e 4FF48053 		mov	r3, #4096
 773 0032 C4F20203 		movt	r3, 16386
 774 0036 FA68     		ldr	r2, [r7, #12]
 775 0038 5A60     		str	r2, [r3, #4]
 672:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 776              		.loc 1 672 0
 777 003a 07F11407 		add	r7, r7, #20
 778 003e BD46     		mov	sp, r7
 779 0040 80BC     		pop	{r7}
 780 0042 7047     		bx	lr
 781              		.cfi_endproc
 782              	.LFE41:
 784              		.section	.text.RCC_ITConfig,"ax",%progbits
 785              		.align	2
 786              		.global	RCC_ITConfig
 787              		.thumb
 788              		.thumb_func
 790              	RCC_ITConfig:
 791              	.LFB42:
 673:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 674:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 675:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 678:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values        
 680:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 688:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values        
 690:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *       
 696:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 699:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 700:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 792              		.loc 1 701 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 8
 795              		@ frame_needed = 1, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797 0000 80B4     		push	{r7}
 798              	.LCFI37:
 799              		.cfi_def_cfa_offset 4
 800              		.cfi_offset 7, -4
 801 0002 83B0     		sub	sp, sp, #12
 802              	.LCFI38:
 803              		.cfi_def_cfa_offset 16
 804 0004 00AF     		add	r7, sp, #0
 805              	.LCFI39:
 806              		.cfi_def_cfa_register 7
 807 0006 0246     		mov	r2, r0
 808 0008 0B46     		mov	r3, r1
 809 000a FA71     		strb	r2, [r7, #7]
 810 000c BB71     		strb	r3, [r7, #6]
 702:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 704:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 705:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 811              		.loc 1 705 0
 812 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 813 0010 002B     		cmp	r3, #0
 814 0012 0ED0     		beq	.L26
 706:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 707:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 815              		.loc 1 708 0
 816 0014 41F20903 		movw	r3, #4105
 817 0018 C4F20203 		movt	r3, 16386
 818 001c 41F20902 		movw	r2, #4105
 819 0020 C4F20202 		movt	r2, 16386
 820 0024 1278     		ldrb	r2, [r2, #0]
 821 0026 D1B2     		uxtb	r1, r2
 822 0028 FA79     		ldrb	r2, [r7, #7]
 823 002a 0A43     		orrs	r2, r2, r1
 824 002c D2B2     		uxtb	r2, r2
 825 002e 1A70     		strb	r2, [r3, #0]
 826 0030 10E0     		b	.L25
 827              	.L26:
 709:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 710:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 711:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 712:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 828              		.loc 1 713 0
 829 0032 41F20903 		movw	r3, #4105
 830 0036 C4F20203 		movt	r3, 16386
 831 003a 41F20902 		movw	r2, #4105
 832 003e C4F20202 		movt	r2, 16386
 833 0042 1278     		ldrb	r2, [r2, #0]
 834 0044 D1B2     		uxtb	r1, r2
 835 0046 FA79     		ldrb	r2, [r7, #7]
 836 0048 6FEA0202 		mvn	r2, r2
 837 004c D2B2     		uxtb	r2, r2
 838 004e 0A40     		ands	r2, r2, r1
 839 0050 D2B2     		uxtb	r2, r2
 840 0052 1A70     		strb	r2, [r3, #0]
 841              	.L25:
 714:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 715:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 842              		.loc 1 715 0
 843 0054 07F10C07 		add	r7, r7, #12
 844 0058 BD46     		mov	sp, r7
 845 005a 80BC     		pop	{r7}
 846 005c 7047     		bx	lr
 847              		.cfi_endproc
 848              	.LFE42:
 850 005e 00BF     		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 851              		.align	2
 852              		.global	RCC_USBCLKConfig
 853              		.thumb
 854              		.thumb_func
 856              	RCC_USBCLKConfig:
 857              	.LFB43:
 716:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 717:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 719:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *                                     clock source
 725:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 727:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 728:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 858              		.loc 1 729 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 8
 861              		@ frame_needed = 1, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 863 0000 80B4     		push	{r7}
 864              	.LCFI40:
 865              		.cfi_def_cfa_offset 4
 866              		.cfi_offset 7, -4
 867 0002 83B0     		sub	sp, sp, #12
 868              	.LCFI41:
 869              		.cfi_def_cfa_offset 16
 870 0004 00AF     		add	r7, sp, #0
 871              	.LCFI42:
 872              		.cfi_def_cfa_register 7
 873 0006 7860     		str	r0, [r7, #4]
 730:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 732:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 733:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 874              		.loc 1 733 0
 875 0008 4FF0D803 		mov	r3, #216
 876 000c C4F24223 		movt	r3, 16962
 877 0010 7A68     		ldr	r2, [r7, #4]
 878 0012 1A60     		str	r2, [r3, #0]
 734:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 879              		.loc 1 734 0
 880 0014 07F10C07 		add	r7, r7, #12
 881 0018 BD46     		mov	sp, r7
 882 001a 80BC     		pop	{r7}
 883 001c 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE43:
 887 001e 00BF     		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 888              		.align	2
 889              		.global	RCC_ADCCLKConfig
 890              		.thumb
 891              		.thumb_func
 893              	RCC_ADCCLKConfig:
 894              	.LFB44:
 735:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 736:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 737:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 745:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 746:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 748:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 753:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 755:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 756:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 765:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 766:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 895              		.loc 1 767 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 16
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899              		@ link register save eliminated.
 900 0000 80B4     		push	{r7}
 901              	.LCFI43:
 902              		.cfi_def_cfa_offset 4
 903              		.cfi_offset 7, -4
 904 0002 85B0     		sub	sp, sp, #20
 905              	.LCFI44:
 906              		.cfi_def_cfa_offset 24
 907 0004 00AF     		add	r7, sp, #0
 908              	.LCFI45:
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 768:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 911              		.loc 1 768 0
 912 0008 4FF00003 		mov	r3, #0
 913 000c FB60     		str	r3, [r7, #12]
 769:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 771:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 914              		.loc 1 771 0
 915 000e 4FF48053 		mov	r3, #4096
 916 0012 C4F20203 		movt	r3, 16386
 917 0016 5B68     		ldr	r3, [r3, #4]
 918 0018 FB60     		str	r3, [r7, #12]
 772:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 919              		.loc 1 773 0
 920 001a FB68     		ldr	r3, [r7, #12]
 921 001c 23F44043 		bic	r3, r3, #49152
 922 0020 FB60     		str	r3, [r7, #12]
 774:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 923              		.loc 1 775 0
 924 0022 FA68     		ldr	r2, [r7, #12]
 925 0024 7B68     		ldr	r3, [r7, #4]
 926 0026 1343     		orrs	r3, r3, r2
 927 0028 FB60     		str	r3, [r7, #12]
 776:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 777:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 928              		.loc 1 777 0
 929 002a 4FF48053 		mov	r3, #4096
 930 002e C4F20203 		movt	r3, 16386
 931 0032 FA68     		ldr	r2, [r7, #12]
 932 0034 5A60     		str	r2, [r3, #4]
 778:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 933              		.loc 1 778 0
 934 0036 07F11407 		add	r7, r7, #20
 935 003a BD46     		mov	sp, r7
 936 003c 80BC     		pop	{r7}
 937 003e 7047     		bx	lr
 938              		.cfi_endproc
 939              	.LFE44:
 941              		.section	.text.RCC_LSEConfig,"ax",%progbits
 942              		.align	2
 943              		.global	RCC_LSEConfig
 944              		.thumb
 945              		.thumb_func
 947              	RCC_LSEConfig:
 948              	.LFB45:
 779:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 780:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 782:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 784:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 791:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 792:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 794:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 797:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 799:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 800:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 801:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 803:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 810:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 811:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 813:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 816:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 818:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 820:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 821:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 828:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 829:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 949              		.loc 1 830 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 8
 952              		@ frame_needed = 1, uses_anonymous_args = 0
 953              		@ link register save eliminated.
 954 0000 80B4     		push	{r7}
 955              	.LCFI46:
 956              		.cfi_def_cfa_offset 4
 957              		.cfi_offset 7, -4
 958 0002 83B0     		sub	sp, sp, #12
 959              	.LCFI47:
 960              		.cfi_def_cfa_offset 16
 961 0004 00AF     		add	r7, sp, #0
 962              	.LCFI48:
 963              		.cfi_def_cfa_register 7
 964 0006 0346     		mov	r3, r0
 965 0008 FB71     		strb	r3, [r7, #7]
 831:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 833:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 966              		.loc 1 835 0
 967 000a 4FF48153 		mov	r3, #4128
 968 000e C4F20203 		movt	r3, 16386
 969 0012 4FF00002 		mov	r2, #0
 970 0016 1A70     		strb	r2, [r3, #0]
 836:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 971              		.loc 1 837 0
 972 0018 4FF48153 		mov	r3, #4128
 973 001c C4F20203 		movt	r3, 16386
 974 0020 4FF00002 		mov	r2, #0
 975 0024 1A70     		strb	r2, [r3, #0]
 838:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 976              		.loc 1 839 0
 977 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 978 0028 012B     		cmp	r3, #1
 979 002a 02D0     		beq	.L32
 980 002c 042B     		cmp	r3, #4
 981 002e 08D0     		beq	.L33
 982 0030 0FE0     		b	.L35
 983              	.L32:
 840:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 841:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 984              		.loc 1 843 0
 985 0032 4FF48153 		mov	r3, #4128
 986 0036 C4F20203 		movt	r3, 16386
 987 003a 4FF00102 		mov	r2, #1
 988 003e 1A70     		strb	r2, [r3, #0]
 844:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 989              		.loc 1 844 0
 990 0040 08E0     		b	.L30
 991              	.L33:
 845:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 846:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 992              		.loc 1 848 0
 993 0042 4FF48153 		mov	r3, #4128
 994 0046 C4F20203 		movt	r3, 16386
 995 004a 4FF00502 		mov	r2, #5
 996 004e 1A70     		strb	r2, [r3, #0]
 849:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;            
 997              		.loc 1 849 0
 998 0050 00E0     		b	.L30
 999              	.L35:
 850:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 851:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 852:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;      
 1000              		.loc 1 852 0
 1001 0052 00BF     		nop
 1002              	.L30:
 853:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 854:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1003              		.loc 1 854 0
 1004 0054 07F10C07 		add	r7, r7, #12
 1005 0058 BD46     		mov	sp, r7
 1006 005a 80BC     		pop	{r7}
 1007 005c 7047     		bx	lr
 1008              		.cfi_endproc
 1009              	.LFE45:
 1011 005e 00BF     		.section	.text.RCC_LSICmd,"ax",%progbits
 1012              		.align	2
 1013              		.global	RCC_LSICmd
 1014              		.thumb
 1015              		.thumb_func
 1017              	RCC_LSICmd:
 1018              	.LFB46:
 855:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 856:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 857:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 861:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 862:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1019              		.loc 1 863 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 8
 1022              		@ frame_needed = 1, uses_anonymous_args = 0
 1023              		@ link register save eliminated.
 1024 0000 80B4     		push	{r7}
 1025              	.LCFI49:
 1026              		.cfi_def_cfa_offset 4
 1027              		.cfi_offset 7, -4
 1028 0002 83B0     		sub	sp, sp, #12
 1029              	.LCFI50:
 1030              		.cfi_def_cfa_offset 16
 1031 0004 00AF     		add	r7, sp, #0
 1032              	.LCFI51:
 1033              		.cfi_def_cfa_register 7
 1034 0006 0346     		mov	r3, r0
 1035 0008 FB71     		strb	r3, [r7, #7]
 864:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 1036              		.loc 1 866 0
 1037 000a 4FF49063 		mov	r3, #1152
 1038 000e C4F24223 		movt	r3, 16962
 1039 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1040 0014 1A60     		str	r2, [r3, #0]
 867:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1041              		.loc 1 867 0
 1042 0016 07F10C07 		add	r7, r7, #12
 1043 001a BD46     		mov	sp, r7
 1044 001c 80BC     		pop	{r7}
 1045 001e 7047     		bx	lr
 1046              		.cfi_endproc
 1047              	.LFE46:
 1049              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1050              		.align	2
 1051              		.global	RCC_RTCCLKConfig
 1052              		.thumb
 1053              		.thumb_func
 1055              	RCC_RTCCLKConfig:
 1056              	.LFB47:
 868:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 869:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 870:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 878:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 879:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1057              		.loc 1 880 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 8
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061              		@ link register save eliminated.
 1062 0000 80B4     		push	{r7}
 1063              	.LCFI52:
 1064              		.cfi_def_cfa_offset 4
 1065              		.cfi_offset 7, -4
 1066 0002 83B0     		sub	sp, sp, #12
 1067              	.LCFI53:
 1068              		.cfi_def_cfa_offset 16
 1069 0004 00AF     		add	r7, sp, #0
 1070              	.LCFI54:
 1071              		.cfi_def_cfa_register 7
 1072 0006 7860     		str	r0, [r7, #4]
 881:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 883:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1073              		.loc 1 884 0
 1074 0008 4FF48053 		mov	r3, #4096
 1075 000c C4F20203 		movt	r3, 16386
 1076 0010 4FF48052 		mov	r2, #4096
 1077 0014 C4F20202 		movt	r2, 16386
 1078 0018 116A     		ldr	r1, [r2, #32]
 1079 001a 7A68     		ldr	r2, [r7, #4]
 1080 001c 0A43     		orrs	r2, r2, r1
 1081 001e 1A62     		str	r2, [r3, #32]
 885:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1082              		.loc 1 885 0
 1083 0020 07F10C07 		add	r7, r7, #12
 1084 0024 BD46     		mov	sp, r7
 1085 0026 80BC     		pop	{r7}
 1086 0028 7047     		bx	lr
 1087              		.cfi_endproc
 1088              	.LFE47:
 1090 002a 00BF     		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1091              		.align	2
 1092              		.global	RCC_RTCCLKCmd
 1093              		.thumb
 1094              		.thumb_func
 1096              	RCC_RTCCLKCmd:
 1097              	.LFB48:
 886:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 887:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 888:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 892:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 893:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1098              		.loc 1 894 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 8
 1101              		@ frame_needed = 1, uses_anonymous_args = 0
 1102              		@ link register save eliminated.
 1103 0000 80B4     		push	{r7}
 1104              	.LCFI55:
 1105              		.cfi_def_cfa_offset 4
 1106              		.cfi_offset 7, -4
 1107 0002 83B0     		sub	sp, sp, #12
 1108              	.LCFI56:
 1109              		.cfi_def_cfa_offset 16
 1110 0004 00AF     		add	r7, sp, #0
 1111              	.LCFI57:
 1112              		.cfi_def_cfa_register 7
 1113 0006 0346     		mov	r3, r0
 1114 0008 FB71     		strb	r3, [r7, #7]
 895:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 897:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1115              		.loc 1 897 0
 1116 000a 40F23C43 		movw	r3, #1084
 1117 000e C4F24223 		movt	r3, 16962
 1118 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1119 0014 1A60     		str	r2, [r3, #0]
 898:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1120              		.loc 1 898 0
 1121 0016 07F10C07 		add	r7, r7, #12
 1122 001a BD46     		mov	sp, r7
 1123 001c 80BC     		pop	{r7}
 1124 001e 7047     		bx	lr
 1125              		.cfi_endproc
 1126              	.LFE48:
 1128              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1129              		.align	2
 1130              		.global	RCC_GetClocksFreq
 1131              		.thumb
 1132              		.thumb_func
 1134              	RCC_GetClocksFreq:
 1135              	.LFB49:
 899:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 900:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 901:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 907:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 908:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1136              		.loc 1 909 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 32
 1139              		@ frame_needed = 1, uses_anonymous_args = 0
 1140              		@ link register save eliminated.
 1141 0000 80B4     		push	{r7}
 1142              	.LCFI58:
 1143              		.cfi_def_cfa_offset 4
 1144              		.cfi_offset 7, -4
 1145 0002 89B0     		sub	sp, sp, #36
 1146              	.LCFI59:
 1147              		.cfi_def_cfa_offset 40
 1148 0004 00AF     		add	r7, sp, #0
 1149              	.LCFI60:
 1150              		.cfi_def_cfa_register 7
 1151 0006 7860     		str	r0, [r7, #4]
 910:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 1152              		.loc 1 910 0
 1153 0008 4FF00003 		mov	r3, #0
 1154 000c FB61     		str	r3, [r7, #28]
 1155 000e 4FF00003 		mov	r3, #0
 1156 0012 BB61     		str	r3, [r7, #24]
 1157 0014 4FF00003 		mov	r3, #0
 1158 0018 7B61     		str	r3, [r7, #20]
 1159 001a 4FF00003 		mov	r3, #0
 1160 001e 3B61     		str	r3, [r7, #16]
 911:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 912:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 916:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 1161              		.loc 1 917 0
 1162 0020 4FF00003 		mov	r3, #0
 1163 0024 FB60     		str	r3, [r7, #12]
 918:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 919:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     
 920:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1164              		.loc 1 921 0
 1165 0026 4FF48053 		mov	r3, #4096
 1166 002a C4F20203 		movt	r3, 16386
 1167 002e 5B68     		ldr	r3, [r3, #4]
 1168 0030 03F00C03 		and	r3, r3, #12
 1169 0034 FB61     		str	r3, [r7, #28]
 922:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 923:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch (tmp)
 1170              		.loc 1 923 0
 1171 0036 FB69     		ldr	r3, [r7, #28]
 1172 0038 042B     		cmp	r3, #4
 1173 003a 0AD0     		beq	.L42
 1174 003c 082B     		cmp	r3, #8
 1175 003e 0FD0     		beq	.L43
 1176 0040 002B     		cmp	r3, #0
 1177 0042 47D1     		bne	.L47
 1178              	.L41:
 924:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 925:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1179              		.loc 1 926 0
 1180 0044 7A68     		ldr	r2, [r7, #4]
 1181 0046 4FF49053 		mov	r3, #4608
 1182 004a C0F27A03 		movt	r3, 122
 1183 004e 1360     		str	r3, [r2, #0]
 927:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 1184              		.loc 1 927 0
 1185 0050 47E0     		b	.L44
 1186              	.L42:
 928:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1187              		.loc 1 929 0
 1188 0052 7A68     		ldr	r2, [r7, #4]
 1189 0054 4FF49053 		mov	r3, #4608
 1190 0058 C0F27A03 		movt	r3, 122
 1191 005c 1360     		str	r3, [r2, #0]
 930:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 1192              		.loc 1 930 0
 1193 005e 40E0     		b	.L44
 1194              	.L43:
 931:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 933:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 1195              		.loc 1 934 0
 1196 0060 4FF48053 		mov	r3, #4096
 1197 0064 C4F20203 		movt	r3, 16386
 1198 0068 5B68     		ldr	r3, [r3, #4]
 1199 006a 03F47013 		and	r3, r3, #3932160
 1200 006e BB61     		str	r3, [r7, #24]
 935:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1201              		.loc 1 935 0
 1202 0070 4FF48053 		mov	r3, #4096
 1203 0074 C4F20203 		movt	r3, 16386
 1204 0078 5B68     		ldr	r3, [r3, #4]
 1205 007a 03F48033 		and	r3, r3, #65536
 1206 007e 7B61     		str	r3, [r7, #20]
 936:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 937:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1207              		.loc 1 938 0
 1208 0080 BB69     		ldr	r3, [r7, #24]
 1209 0082 4FEA9343 		lsr	r3, r3, #18
 1210 0086 03F10203 		add	r3, r3, #2
 1211 008a BB61     		str	r3, [r7, #24]
 939:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 940:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 1212              		.loc 1 940 0
 1213 008c 7B69     		ldr	r3, [r7, #20]
 1214 008e 002B     		cmp	r3, #0
 1215 0090 09D1     		bne	.L45
 941:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1216              		.loc 1 942 0
 1217 0092 BA69     		ldr	r2, [r7, #24]
 1218 0094 4FF41063 		mov	r3, #2304
 1219 0098 C0F23D03 		movt	r3, 61
 1220 009c 03FB02F2 		mul	r2, r3, r2
 1221 00a0 7B68     		ldr	r3, [r7, #4]
 1222 00a2 1A60     		str	r2, [r3, #0]
 943:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 944:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 945:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 946:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #else
 951:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 956:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 957:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {
 958:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 960:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #endif
 961:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 962:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 963:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 965:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 967:../StdPeripheralDriver/src/stm32f10x_rcc.c ****          pllmull += 2;
 968:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 969:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 970:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 973:../StdPeripheralDriver/src/stm32f10x_rcc.c ****             
 974:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 978:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 979:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 981:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 985:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 989:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 990:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           
 992:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 997:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 998:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 1223              		.loc 1 999 0
 1224 00a4 1DE0     		b	.L44
 1225              	.L45:
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 1226              		.loc 1 947 0
 1227 00a6 4FF48053 		mov	r3, #4096
 1228 00aa C4F20203 		movt	r3, 16386
 1229 00ae DB6A     		ldr	r3, [r3, #44]
 1230 00b0 03F00F03 		and	r3, r3, #15
 1231 00b4 03F10103 		add	r3, r3, #1
 1232 00b8 FB60     		str	r3, [r7, #12]
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 1233              		.loc 1 949 0
 1234 00ba 4FF49053 		mov	r3, #4608
 1235 00be C0F27A03 		movt	r3, 122
 1236 00c2 FA68     		ldr	r2, [r7, #12]
 1237 00c4 B3FBF2F3 		udiv	r3, r3, r2
 1238 00c8 BA69     		ldr	r2, [r7, #24]
 1239 00ca 02FB03F2 		mul	r2, r2, r3
 1240 00ce 7B68     		ldr	r3, [r7, #4]
 1241 00d0 1A60     		str	r2, [r3, #0]
 1242              		.loc 1 999 0
 1243 00d2 06E0     		b	.L44
 1244              	.L47:
1000:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1001:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
1002:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1245              		.loc 1 1002 0
 1246 00d4 7A68     		ldr	r2, [r7, #4]
 1247 00d6 4FF49053 		mov	r3, #4608
 1248 00da C0F27A03 		movt	r3, 122
 1249 00de 1360     		str	r3, [r2, #0]
1003:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 1250              		.loc 1 1003 0
 1251 00e0 00BF     		nop
 1252              	.L44:
1004:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1005:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1006:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1253              		.loc 1 1008 0
 1254 00e2 4FF48053 		mov	r3, #4096
 1255 00e6 C4F20203 		movt	r3, 16386
 1256 00ea 5B68     		ldr	r3, [r3, #4]
 1257 00ec 03F0F003 		and	r3, r3, #240
 1258 00f0 FB61     		str	r3, [r7, #28]
1009:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1259              		.loc 1 1009 0
 1260 00f2 FB69     		ldr	r3, [r7, #28]
 1261 00f4 4FEA1313 		lsr	r3, r3, #4
 1262 00f8 FB61     		str	r3, [r7, #28]
1010:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1263              		.loc 1 1010 0
 1264 00fa 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1265 00fe C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1266 0102 FA69     		ldr	r2, [r7, #28]
 1267 0104 9B18     		adds	r3, r3, r2
 1268 0106 1B78     		ldrb	r3, [r3, #0]
 1269 0108 DBB2     		uxtb	r3, r3
 1270 010a 3B61     		str	r3, [r7, #16]
1011:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1271              		.loc 1 1012 0
 1272 010c 7B68     		ldr	r3, [r7, #4]
 1273 010e 1A68     		ldr	r2, [r3, #0]
 1274 0110 3B69     		ldr	r3, [r7, #16]
 1275 0112 22FA03F2 		lsr	r2, r2, r3
 1276 0116 7B68     		ldr	r3, [r7, #4]
 1277 0118 5A60     		str	r2, [r3, #4]
1013:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1278              		.loc 1 1014 0
 1279 011a 4FF48053 		mov	r3, #4096
 1280 011e C4F20203 		movt	r3, 16386
 1281 0122 5B68     		ldr	r3, [r3, #4]
 1282 0124 03F4E063 		and	r3, r3, #1792
 1283 0128 FB61     		str	r3, [r7, #28]
1015:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1284              		.loc 1 1015 0
 1285 012a FB69     		ldr	r3, [r7, #28]
 1286 012c 4FEA1323 		lsr	r3, r3, #8
 1287 0130 FB61     		str	r3, [r7, #28]
1016:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1288              		.loc 1 1016 0
 1289 0132 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1290 0136 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1291 013a FA69     		ldr	r2, [r7, #28]
 1292 013c 9B18     		adds	r3, r3, r2
 1293 013e 1B78     		ldrb	r3, [r3, #0]
 1294 0140 DBB2     		uxtb	r3, r3
 1295 0142 3B61     		str	r3, [r7, #16]
1017:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1296              		.loc 1 1018 0
 1297 0144 7B68     		ldr	r3, [r7, #4]
 1298 0146 5A68     		ldr	r2, [r3, #4]
 1299 0148 3B69     		ldr	r3, [r7, #16]
 1300 014a 22FA03F2 		lsr	r2, r2, r3
 1301 014e 7B68     		ldr	r3, [r7, #4]
 1302 0150 9A60     		str	r2, [r3, #8]
1019:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1303              		.loc 1 1020 0
 1304 0152 4FF48053 		mov	r3, #4096
 1305 0156 C4F20203 		movt	r3, 16386
 1306 015a 5B68     		ldr	r3, [r3, #4]
 1307 015c 03F46053 		and	r3, r3, #14336
 1308 0160 FB61     		str	r3, [r7, #28]
1021:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1309              		.loc 1 1021 0
 1310 0162 FB69     		ldr	r3, [r7, #28]
 1311 0164 4FEAD323 		lsr	r3, r3, #11
 1312 0168 FB61     		str	r3, [r7, #28]
1022:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1313              		.loc 1 1022 0
 1314 016a 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1315 016e C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1316 0172 FA69     		ldr	r2, [r7, #28]
 1317 0174 9B18     		adds	r3, r3, r2
 1318 0176 1B78     		ldrb	r3, [r3, #0]
 1319 0178 DBB2     		uxtb	r3, r3
 1320 017a 3B61     		str	r3, [r7, #16]
1023:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1321              		.loc 1 1024 0
 1322 017c 7B68     		ldr	r3, [r7, #4]
 1323 017e 5A68     		ldr	r2, [r3, #4]
 1324 0180 3B69     		ldr	r3, [r7, #16]
 1325 0182 22FA03F2 		lsr	r2, r2, r3
 1326 0186 7B68     		ldr	r3, [r7, #4]
 1327 0188 DA60     		str	r2, [r3, #12]
1025:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1328              		.loc 1 1026 0
 1329 018a 4FF48053 		mov	r3, #4096
 1330 018e C4F20203 		movt	r3, 16386
 1331 0192 5B68     		ldr	r3, [r3, #4]
 1332 0194 03F44043 		and	r3, r3, #49152
 1333 0198 FB61     		str	r3, [r7, #28]
1027:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1334              		.loc 1 1027 0
 1335 019a FB69     		ldr	r3, [r7, #28]
 1336 019c 4FEA9333 		lsr	r3, r3, #14
 1337 01a0 FB61     		str	r3, [r7, #28]
1028:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1338              		.loc 1 1028 0
 1339 01a2 40F20003 		movw	r3, #:lower16:ADCPrescTable
 1340 01a6 C0F20003 		movt	r3, #:upper16:ADCPrescTable
 1341 01aa FA69     		ldr	r2, [r7, #28]
 1342 01ac 9B18     		adds	r3, r3, r2
 1343 01ae 1B78     		ldrb	r3, [r3, #0]
 1344 01b0 DBB2     		uxtb	r3, r3
 1345 01b2 3B61     		str	r3, [r7, #16]
1029:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1346              		.loc 1 1030 0
 1347 01b4 7B68     		ldr	r3, [r7, #4]
 1348 01b6 DA68     		ldr	r2, [r3, #12]
 1349 01b8 3B69     		ldr	r3, [r7, #16]
 1350 01ba B2FBF3F2 		udiv	r2, r2, r3
 1351 01be 7B68     		ldr	r3, [r7, #4]
 1352 01c0 1A61     		str	r2, [r3, #16]
1031:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1353              		.loc 1 1031 0
 1354 01c2 07F12407 		add	r7, r7, #36
 1355 01c6 BD46     		mov	sp, r7
 1356 01c8 80BC     		pop	{r7}
 1357 01ca 7047     		bx	lr
 1358              		.cfi_endproc
 1359              	.LFE49:
 1361              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 1362              		.align	2
 1363              		.global	RCC_AHBPeriphClockCmd
 1364              		.thumb
 1365              		.thumb_func
 1367              	RCC_AHBPeriphClockCmd:
 1368              	.LFB50:
1032:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1033:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1034:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1037:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:        
1039:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1049:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1051:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1059:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1063:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1064:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1369              		.loc 1 1065 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 8
 1372              		@ frame_needed = 1, uses_anonymous_args = 0
 1373              		@ link register save eliminated.
 1374 0000 80B4     		push	{r7}
 1375              	.LCFI61:
 1376              		.cfi_def_cfa_offset 4
 1377              		.cfi_offset 7, -4
 1378 0002 83B0     		sub	sp, sp, #12
 1379              	.LCFI62:
 1380              		.cfi_def_cfa_offset 16
 1381 0004 00AF     		add	r7, sp, #0
 1382              	.LCFI63:
 1383              		.cfi_def_cfa_register 7
 1384 0006 7860     		str	r0, [r7, #4]
 1385 0008 0B46     		mov	r3, r1
 1386 000a FB70     		strb	r3, [r7, #3]
1066:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1068:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1069:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1070:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1387              		.loc 1 1070 0
 1388 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1389 000e 002B     		cmp	r3, #0
 1390 0010 0CD0     		beq	.L49
1071:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1072:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1391              		.loc 1 1072 0
 1392 0012 4FF48053 		mov	r3, #4096
 1393 0016 C4F20203 		movt	r3, 16386
 1394 001a 4FF48052 		mov	r2, #4096
 1395 001e C4F20202 		movt	r2, 16386
 1396 0022 5169     		ldr	r1, [r2, #20]
 1397 0024 7A68     		ldr	r2, [r7, #4]
 1398 0026 0A43     		orrs	r2, r2, r1
 1399 0028 5A61     		str	r2, [r3, #20]
 1400 002a 0DE0     		b	.L48
 1401              	.L49:
1073:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1074:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1075:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1076:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1402              		.loc 1 1076 0
 1403 002c 4FF48053 		mov	r3, #4096
 1404 0030 C4F20203 		movt	r3, 16386
 1405 0034 4FF48052 		mov	r2, #4096
 1406 0038 C4F20202 		movt	r2, 16386
 1407 003c 5169     		ldr	r1, [r2, #20]
 1408 003e 7A68     		ldr	r2, [r7, #4]
 1409 0040 6FEA0202 		mvn	r2, r2
 1410 0044 0A40     		ands	r2, r2, r1
 1411 0046 5A61     		str	r2, [r3, #20]
 1412              	.L48:
1077:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1078:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1413              		.loc 1 1078 0
 1414 0048 07F10C07 		add	r7, r7, #12
 1415 004c BD46     		mov	sp, r7
 1416 004e 80BC     		pop	{r7}
 1417 0050 7047     		bx	lr
 1418              		.cfi_endproc
 1419              	.LFE50:
 1421 0052 00BF     		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1422              		.align	2
 1423              		.global	RCC_APB2PeriphClockCmd
 1424              		.thumb
 1425              		.thumb_func
 1427              	RCC_APB2PeriphClockCmd:
 1428              	.LFB51:
1079:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1080:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1081:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1094:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1095:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1429              		.loc 1 1096 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 8
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 1434 0000 80B4     		push	{r7}
 1435              	.LCFI64:
 1436              		.cfi_def_cfa_offset 4
 1437              		.cfi_offset 7, -4
 1438 0002 83B0     		sub	sp, sp, #12
 1439              	.LCFI65:
 1440              		.cfi_def_cfa_offset 16
 1441 0004 00AF     		add	r7, sp, #0
 1442              	.LCFI66:
 1443              		.cfi_def_cfa_register 7
 1444 0006 7860     		str	r0, [r7, #4]
 1445 0008 0B46     		mov	r3, r1
 1446 000a FB70     		strb	r3, [r7, #3]
1097:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1099:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1447              		.loc 1 1100 0
 1448 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1449 000e 002B     		cmp	r3, #0
 1450 0010 0CD0     		beq	.L52
1101:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1102:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1451              		.loc 1 1102 0
 1452 0012 4FF48053 		mov	r3, #4096
 1453 0016 C4F20203 		movt	r3, 16386
 1454 001a 4FF48052 		mov	r2, #4096
 1455 001e C4F20202 		movt	r2, 16386
 1456 0022 9169     		ldr	r1, [r2, #24]
 1457 0024 7A68     		ldr	r2, [r7, #4]
 1458 0026 0A43     		orrs	r2, r2, r1
 1459 0028 9A61     		str	r2, [r3, #24]
 1460 002a 0DE0     		b	.L51
 1461              	.L52:
1103:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1104:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1105:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1106:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1462              		.loc 1 1106 0
 1463 002c 4FF48053 		mov	r3, #4096
 1464 0030 C4F20203 		movt	r3, 16386
 1465 0034 4FF48052 		mov	r2, #4096
 1466 0038 C4F20202 		movt	r2, 16386
 1467 003c 9169     		ldr	r1, [r2, #24]
 1468 003e 7A68     		ldr	r2, [r7, #4]
 1469 0040 6FEA0202 		mvn	r2, r2
 1470 0044 0A40     		ands	r2, r2, r1
 1471 0046 9A61     		str	r2, [r3, #24]
 1472              	.L51:
1107:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1108:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1473              		.loc 1 1108 0
 1474 0048 07F10C07 		add	r7, r7, #12
 1475 004c BD46     		mov	sp, r7
 1476 004e 80BC     		pop	{r7}
 1477 0050 7047     		bx	lr
 1478              		.cfi_endproc
 1479              	.LFE51:
 1481 0052 00BF     		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1482              		.align	2
 1483              		.global	RCC_APB1PeriphClockCmd
 1484              		.thumb
 1485              		.thumb_func
 1487              	RCC_APB1PeriphClockCmd:
 1488              	.LFB52:
1109:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1110:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1125:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1489              		.loc 1 1127 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 1, uses_anonymous_args = 0
 1493              		@ link register save eliminated.
 1494 0000 80B4     		push	{r7}
 1495              	.LCFI67:
 1496              		.cfi_def_cfa_offset 4
 1497              		.cfi_offset 7, -4
 1498 0002 83B0     		sub	sp, sp, #12
 1499              	.LCFI68:
 1500              		.cfi_def_cfa_offset 16
 1501 0004 00AF     		add	r7, sp, #0
 1502              	.LCFI69:
 1503              		.cfi_def_cfa_register 7
 1504 0006 7860     		str	r0, [r7, #4]
 1505 0008 0B46     		mov	r3, r1
 1506 000a FB70     		strb	r3, [r7, #3]
1128:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1130:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1507              		.loc 1 1131 0
 1508 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1509 000e 002B     		cmp	r3, #0
 1510 0010 0CD0     		beq	.L55
1132:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1133:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1511              		.loc 1 1133 0
 1512 0012 4FF48053 		mov	r3, #4096
 1513 0016 C4F20203 		movt	r3, 16386
 1514 001a 4FF48052 		mov	r2, #4096
 1515 001e C4F20202 		movt	r2, 16386
 1516 0022 D169     		ldr	r1, [r2, #28]
 1517 0024 7A68     		ldr	r2, [r7, #4]
 1518 0026 0A43     		orrs	r2, r2, r1
 1519 0028 DA61     		str	r2, [r3, #28]
 1520 002a 0DE0     		b	.L54
 1521              	.L55:
1134:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1135:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1136:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1137:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1522              		.loc 1 1137 0
 1523 002c 4FF48053 		mov	r3, #4096
 1524 0030 C4F20203 		movt	r3, 16386
 1525 0034 4FF48052 		mov	r2, #4096
 1526 0038 C4F20202 		movt	r2, 16386
 1527 003c D169     		ldr	r1, [r2, #28]
 1528 003e 7A68     		ldr	r2, [r7, #4]
 1529 0040 6FEA0202 		mvn	r2, r2
 1530 0044 0A40     		ands	r2, r2, r1
 1531 0046 DA61     		str	r2, [r3, #28]
 1532              	.L54:
1138:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1533              		.loc 1 1139 0
 1534 0048 07F10C07 		add	r7, r7, #12
 1535 004c BD46     		mov	sp, r7
 1536 004e 80BC     		pop	{r7}
 1537 0050 7047     		bx	lr
 1538              		.cfi_endproc
 1539              	.LFE52:
 1541 0052 00BF     		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1542              		.align	2
 1543              		.global	RCC_APB2PeriphResetCmd
 1544              		.thumb
 1545              		.thumb_func
 1547              	RCC_APB2PeriphResetCmd:
 1548              	.LFB53:
1140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1143:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1152:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1153:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
1155:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1161:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1163:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1164:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1165:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
1168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1171:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1184:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1549              		.loc 1 1186 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 8
 1552              		@ frame_needed = 1, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554 0000 80B4     		push	{r7}
 1555              	.LCFI70:
 1556              		.cfi_def_cfa_offset 4
 1557              		.cfi_offset 7, -4
 1558 0002 83B0     		sub	sp, sp, #12
 1559              	.LCFI71:
 1560              		.cfi_def_cfa_offset 16
 1561 0004 00AF     		add	r7, sp, #0
 1562              	.LCFI72:
 1563              		.cfi_def_cfa_register 7
 1564 0006 7860     		str	r0, [r7, #4]
 1565 0008 0B46     		mov	r3, r1
 1566 000a FB70     		strb	r3, [r7, #3]
1187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1189:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1567              		.loc 1 1190 0
 1568 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1569 000e 002B     		cmp	r3, #0
 1570 0010 0CD0     		beq	.L58
1191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1192:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1571              		.loc 1 1192 0
 1572 0012 4FF48053 		mov	r3, #4096
 1573 0016 C4F20203 		movt	r3, 16386
 1574 001a 4FF48052 		mov	r2, #4096
 1575 001e C4F20202 		movt	r2, 16386
 1576 0022 D168     		ldr	r1, [r2, #12]
 1577 0024 7A68     		ldr	r2, [r7, #4]
 1578 0026 0A43     		orrs	r2, r2, r1
 1579 0028 DA60     		str	r2, [r3, #12]
 1580 002a 0DE0     		b	.L57
 1581              	.L58:
1193:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1194:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1195:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1196:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1582              		.loc 1 1196 0
 1583 002c 4FF48053 		mov	r3, #4096
 1584 0030 C4F20203 		movt	r3, 16386
 1585 0034 4FF48052 		mov	r2, #4096
 1586 0038 C4F20202 		movt	r2, 16386
 1587 003c D168     		ldr	r1, [r2, #12]
 1588 003e 7A68     		ldr	r2, [r7, #4]
 1589 0040 6FEA0202 		mvn	r2, r2
 1590 0044 0A40     		ands	r2, r2, r1
 1591 0046 DA60     		str	r2, [r3, #12]
 1592              	.L57:
1197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1198:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1593              		.loc 1 1198 0
 1594 0048 07F10C07 		add	r7, r7, #12
 1595 004c BD46     		mov	sp, r7
 1596 004e 80BC     		pop	{r7}
 1597 0050 7047     		bx	lr
 1598              		.cfi_endproc
 1599              	.LFE53:
 1601 0052 00BF     		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1602              		.align	2
 1603              		.global	RCC_APB1PeriphResetCmd
 1604              		.thumb
 1605              		.thumb_func
 1607              	RCC_APB1PeriphResetCmd:
 1608              	.LFB54:
1199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1216:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1609              		.loc 1 1217 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 8
 1612              		@ frame_needed = 1, uses_anonymous_args = 0
 1613              		@ link register save eliminated.
 1614 0000 80B4     		push	{r7}
 1615              	.LCFI73:
 1616              		.cfi_def_cfa_offset 4
 1617              		.cfi_offset 7, -4
 1618 0002 83B0     		sub	sp, sp, #12
 1619              	.LCFI74:
 1620              		.cfi_def_cfa_offset 16
 1621 0004 00AF     		add	r7, sp, #0
 1622              	.LCFI75:
 1623              		.cfi_def_cfa_register 7
 1624 0006 7860     		str	r0, [r7, #4]
 1625 0008 0B46     		mov	r3, r1
 1626 000a FB70     		strb	r3, [r7, #3]
1218:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1221:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1627              		.loc 1 1221 0
 1628 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1629 000e 002B     		cmp	r3, #0
 1630 0010 0CD0     		beq	.L61
1222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1223:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1631              		.loc 1 1223 0
 1632 0012 4FF48053 		mov	r3, #4096
 1633 0016 C4F20203 		movt	r3, 16386
 1634 001a 4FF48052 		mov	r2, #4096
 1635 001e C4F20202 		movt	r2, 16386
 1636 0022 1169     		ldr	r1, [r2, #16]
 1637 0024 7A68     		ldr	r2, [r7, #4]
 1638 0026 0A43     		orrs	r2, r2, r1
 1639 0028 1A61     		str	r2, [r3, #16]
 1640 002a 0DE0     		b	.L60
 1641              	.L61:
1224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1225:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1227:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1642              		.loc 1 1227 0
 1643 002c 4FF48053 		mov	r3, #4096
 1644 0030 C4F20203 		movt	r3, 16386
 1645 0034 4FF48052 		mov	r2, #4096
 1646 0038 C4F20202 		movt	r2, 16386
 1647 003c 1169     		ldr	r1, [r2, #16]
 1648 003e 7A68     		ldr	r2, [r7, #4]
 1649 0040 6FEA0202 		mvn	r2, r2
 1650 0044 0A40     		ands	r2, r2, r1
 1651 0046 1A61     		str	r2, [r3, #16]
 1652              	.L60:
1228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1229:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1653              		.loc 1 1229 0
 1654 0048 07F10C07 		add	r7, r7, #12
 1655 004c BD46     		mov	sp, r7
 1656 004e 80BC     		pop	{r7}
 1657 0050 7047     		bx	lr
 1658              		.cfi_endproc
 1659              	.LFE54:
 1661 0052 00BF     		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1662              		.align	2
 1663              		.global	RCC_BackupResetCmd
 1664              		.thumb
 1665              		.thumb_func
 1667              	RCC_BackupResetCmd:
 1668              	.LFB55:
1230:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1669              		.loc 1 1238 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 8
 1672              		@ frame_needed = 1, uses_anonymous_args = 0
 1673              		@ link register save eliminated.
 1674 0000 80B4     		push	{r7}
 1675              	.LCFI76:
 1676              		.cfi_def_cfa_offset 4
 1677              		.cfi_offset 7, -4
 1678 0002 83B0     		sub	sp, sp, #12
 1679              	.LCFI77:
 1680              		.cfi_def_cfa_offset 16
 1681 0004 00AF     		add	r7, sp, #0
 1682              	.LCFI78:
 1683              		.cfi_def_cfa_register 7
 1684 0006 0346     		mov	r3, r0
 1685 0008 FB71     		strb	r3, [r7, #7]
1239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1241:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1686              		.loc 1 1241 0
 1687 000a 4FF48863 		mov	r3, #1088
 1688 000e C4F24223 		movt	r3, 16962
 1689 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1690 0014 1A60     		str	r2, [r3, #0]
1242:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1691              		.loc 1 1242 0
 1692 0016 07F10C07 		add	r7, r7, #12
 1693 001a BD46     		mov	sp, r7
 1694 001c 80BC     		pop	{r7}
 1695 001e 7047     		bx	lr
 1696              		.cfi_endproc
 1697              	.LFE55:
 1699              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 1700              		.align	2
 1701              		.global	RCC_ClockSecuritySystemCmd
 1702              		.thumb
 1703              		.thumb_func
 1705              	RCC_ClockSecuritySystemCmd:
 1706              	.LFB56:
1243:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1707              		.loc 1 1251 0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 8
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
 1711              		@ link register save eliminated.
 1712 0000 80B4     		push	{r7}
 1713              	.LCFI79:
 1714              		.cfi_def_cfa_offset 4
 1715              		.cfi_offset 7, -4
 1716 0002 83B0     		sub	sp, sp, #12
 1717              	.LCFI80:
 1718              		.cfi_def_cfa_offset 16
 1719 0004 00AF     		add	r7, sp, #0
 1720              	.LCFI81:
 1721              		.cfi_def_cfa_register 7
 1722 0006 0346     		mov	r3, r0
 1723 0008 FB71     		strb	r3, [r7, #7]
1252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1724              		.loc 1 1254 0
 1725 000a 4FF04C03 		mov	r3, #76
 1726 000e C4F24223 		movt	r3, 16962
 1727 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1728 0014 1A60     		str	r2, [r3, #0]
1255:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1729              		.loc 1 1255 0
 1730 0016 07F10C07 		add	r7, r7, #12
 1731 001a BD46     		mov	sp, r7
 1732 001c 80BC     		pop	{r7}
 1733 001e 7047     		bx	lr
 1734              		.cfi_endproc
 1735              	.LFE56:
 1737              		.section	.text.RCC_MCOConfig,"ax",%progbits
 1738              		.align	2
 1739              		.global	RCC_MCOConfig
 1740              		.thumb
 1741              		.thumb_func
 1743              	RCC_MCOConfig:
 1744              	.LFB57:
1256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1258:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:       
1263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1282:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1745              		.loc 1 1283 0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 8
 1748              		@ frame_needed = 1, uses_anonymous_args = 0
 1749              		@ link register save eliminated.
 1750 0000 80B4     		push	{r7}
 1751              	.LCFI82:
 1752              		.cfi_def_cfa_offset 4
 1753              		.cfi_offset 7, -4
 1754 0002 83B0     		sub	sp, sp, #12
 1755              	.LCFI83:
 1756              		.cfi_def_cfa_offset 16
 1757 0004 00AF     		add	r7, sp, #0
 1758              	.LCFI84:
 1759              		.cfi_def_cfa_register 7
 1760 0006 0346     		mov	r3, r0
 1761 0008 FB71     		strb	r3, [r7, #7]
1284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1286:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1762              		.loc 1 1288 0
 1763 000a 41F20703 		movw	r3, #4103
 1764 000e C4F20203 		movt	r3, 16386
 1765 0012 FA79     		ldrb	r2, [r7, #7]
 1766 0014 1A70     		strb	r2, [r3, #0]
1289:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1767              		.loc 1 1289 0
 1768 0016 07F10C07 		add	r7, r7, #12
 1769 001a BD46     		mov	sp, r7
 1770 001c 80BC     		pop	{r7}
 1771 001e 7047     		bx	lr
 1772              		.cfi_endproc
 1773              	.LFE57:
 1775              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1776              		.align	2
 1777              		.global	RCC_GetFlagStatus
 1778              		.thumb
 1779              		.thumb_func
 1781              	RCC_GetFlagStatus:
 1782              	.LFB58:
1290:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1291:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1295:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1297:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1783              		.loc 1 1327 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 24
 1786              		@ frame_needed = 1, uses_anonymous_args = 0
 1787              		@ link register save eliminated.
 1788 0000 80B4     		push	{r7}
 1789              	.LCFI85:
 1790              		.cfi_def_cfa_offset 4
 1791              		.cfi_offset 7, -4
 1792 0002 87B0     		sub	sp, sp, #28
 1793              	.LCFI86:
 1794              		.cfi_def_cfa_offset 32
 1795 0004 00AF     		add	r7, sp, #0
 1796              	.LCFI87:
 1797              		.cfi_def_cfa_register 7
 1798 0006 0346     		mov	r3, r0
 1799 0008 FB71     		strb	r3, [r7, #7]
1328:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 1800              		.loc 1 1328 0
 1801 000a 4FF00003 		mov	r3, #0
 1802 000e FB60     		str	r3, [r7, #12]
1329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 1803              		.loc 1 1329 0
 1804 0010 4FF00003 		mov	r3, #0
 1805 0014 7B61     		str	r3, [r7, #20]
1330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 1806              		.loc 1 1330 0
 1807 0016 4FF00003 		mov	r3, #0
 1808 001a FB74     		strb	r3, [r7, #19]
1331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1333:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1334:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1809              		.loc 1 1335 0
 1810 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1811 001e 4FEA5313 		lsr	r3, r3, #5
 1812 0022 DBB2     		uxtb	r3, r3
 1813 0024 FB60     		str	r3, [r7, #12]
1336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1814              		.loc 1 1336 0
 1815 0026 FB68     		ldr	r3, [r7, #12]
 1816 0028 012B     		cmp	r3, #1
 1817 002a 06D1     		bne	.L67
1337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 1818              		.loc 1 1338 0
 1819 002c 4FF48053 		mov	r3, #4096
 1820 0030 C4F20203 		movt	r3, 16386
 1821 0034 1B68     		ldr	r3, [r3, #0]
 1822 0036 7B61     		str	r3, [r7, #20]
 1823 0038 0FE0     		b	.L68
 1824              	.L67:
1339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1825              		.loc 1 1340 0
 1826 003a FB68     		ldr	r3, [r7, #12]
 1827 003c 022B     		cmp	r3, #2
 1828 003e 06D1     		bne	.L69
1341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 1829              		.loc 1 1342 0
 1830 0040 4FF48053 		mov	r3, #4096
 1831 0044 C4F20203 		movt	r3, 16386
 1832 0048 1B6A     		ldr	r3, [r3, #32]
 1833 004a 7B61     		str	r3, [r7, #20]
 1834 004c 05E0     		b	.L68
 1835              	.L69:
1343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1346:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1836              		.loc 1 1346 0
 1837 004e 4FF48053 		mov	r3, #4096
 1838 0052 C4F20203 		movt	r3, 16386
 1839 0056 5B6A     		ldr	r3, [r3, #36]
 1840 0058 7B61     		str	r3, [r7, #20]
 1841              	.L68:
1347:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1842              		.loc 1 1350 0
 1843 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1844 005c 03F01F03 		and	r3, r3, #31
 1845 0060 FB60     		str	r3, [r7, #12]
1351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1846              		.loc 1 1351 0
 1847 0062 FB68     		ldr	r3, [r7, #12]
 1848 0064 7A69     		ldr	r2, [r7, #20]
 1849 0066 22FA03F3 		lsr	r3, r2, r3
 1850 006a 03F00103 		and	r3, r3, #1
 1851 006e 002B     		cmp	r3, #0
 1852 0070 03D0     		beq	.L70
1352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 1853              		.loc 1 1353 0
 1854 0072 4FF00103 		mov	r3, #1
 1855 0076 FB74     		strb	r3, [r7, #19]
 1856 0078 02E0     		b	.L71
 1857              	.L70:
1354:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1355:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1858              		.loc 1 1357 0
 1859 007a 4FF00003 		mov	r3, #0
 1860 007e FB74     		strb	r3, [r7, #19]
 1861              	.L71:
1358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1360:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return bitstatus;
 1862              		.loc 1 1361 0
 1863 0080 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1362:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1864              		.loc 1 1362 0
 1865 0082 1846     		mov	r0, r3
 1866 0084 07F11C07 		add	r7, r7, #28
 1867 0088 BD46     		mov	sp, r7
 1868 008a 80BC     		pop	{r7}
 1869 008c 7047     		bx	lr
 1870              		.cfi_endproc
 1871              	.LFE58:
 1873 008e 00BF     		.section	.text.RCC_ClearFlag,"ax",%progbits
 1874              		.align	2
 1875              		.global	RCC_ClearFlag
 1876              		.thumb
 1877              		.thumb_func
 1879              	RCC_ClearFlag:
 1880              	.LFB59:
1363:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1364:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
1369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1371:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1881              		.loc 1 1372 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 1, uses_anonymous_args = 0
 1885              		@ link register save eliminated.
 1886 0000 80B4     		push	{r7}
 1887              	.LCFI88:
 1888              		.cfi_def_cfa_offset 4
 1889              		.cfi_offset 7, -4
 1890 0002 00AF     		add	r7, sp, #0
 1891              	.LCFI89:
 1892              		.cfi_def_cfa_register 7
1373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 1893              		.loc 1 1374 0
 1894 0004 4FF48053 		mov	r3, #4096
 1895 0008 C4F20203 		movt	r3, 16386
 1896 000c 4FF48052 		mov	r2, #4096
 1897 0010 C4F20202 		movt	r2, 16386
 1898 0014 526A     		ldr	r2, [r2, #36]
 1899 0016 42F08072 		orr	r2, r2, #16777216
 1900 001a 5A62     		str	r2, [r3, #36]
1375:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1901              		.loc 1 1375 0
 1902 001c BD46     		mov	sp, r7
 1903 001e 80BC     		pop	{r7}
 1904 0020 7047     		bx	lr
 1905              		.cfi_endproc
 1906              	.LFE59:
 1908 0022 00BF     		.section	.text.RCC_GetITStatus,"ax",%progbits
 1909              		.align	2
 1910              		.global	RCC_GetITStatus
 1911              		.thumb
 1912              		.thumb_func
 1914              	RCC_GetITStatus:
 1915              	.LFB60:
1376:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1377:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1378:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1381:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1916              		.loc 1 1403 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 16
 1919              		@ frame_needed = 1, uses_anonymous_args = 0
 1920              		@ link register save eliminated.
 1921 0000 80B4     		push	{r7}
 1922              	.LCFI90:
 1923              		.cfi_def_cfa_offset 4
 1924              		.cfi_offset 7, -4
 1925 0002 85B0     		sub	sp, sp, #20
 1926              	.LCFI91:
 1927              		.cfi_def_cfa_offset 24
 1928 0004 00AF     		add	r7, sp, #0
 1929              	.LCFI92:
 1930              		.cfi_def_cfa_register 7
 1931 0006 0346     		mov	r3, r0
 1932 0008 FB71     		strb	r3, [r7, #7]
1404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 1933              		.loc 1 1404 0
 1934 000a 4FF00003 		mov	r3, #0
 1935 000e FB73     		strb	r3, [r7, #15]
1405:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1408:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1936              		.loc 1 1409 0
 1937 0010 4FF48053 		mov	r3, #4096
 1938 0014 C4F20203 		movt	r3, 16386
 1939 0018 9A68     		ldr	r2, [r3, #8]
 1940 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1941 001c 1340     		ands	r3, r3, r2
 1942 001e 002B     		cmp	r3, #0
 1943 0020 03D0     		beq	.L75
1410:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 1944              		.loc 1 1411 0
 1945 0022 4FF00103 		mov	r3, #1
 1946 0026 FB73     		strb	r3, [r7, #15]
 1947 0028 02E0     		b	.L76
 1948              	.L75:
1412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1949              		.loc 1 1415 0
 1950 002a 4FF00003 		mov	r3, #0
 1951 002e FB73     		strb	r3, [r7, #15]
 1952              	.L76:
1416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1417:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return  bitstatus;
 1953              		.loc 1 1419 0
 1954 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1420:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1955              		.loc 1 1420 0
 1956 0032 1846     		mov	r0, r3
 1957 0034 07F11407 		add	r7, r7, #20
 1958 0038 BD46     		mov	sp, r7
 1959 003a 80BC     		pop	{r7}
 1960 003c 7047     		bx	lr
 1961              		.cfi_endproc
 1962              	.LFE60:
 1964 003e 00BF     		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1965              		.align	2
 1966              		.global	RCC_ClearITPendingBit
 1967              		.thumb
 1968              		.thumb_func
 1970              	RCC_ClearITPendingBit:
 1971              	.LFB61:
1421:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1422:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1426:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:
1428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1445:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1448:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 1972              		.loc 1 1449 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 8
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
 1977 0000 80B4     		push	{r7}
 1978              	.LCFI93:
 1979              		.cfi_def_cfa_offset 4
 1980              		.cfi_offset 7, -4
 1981 0002 83B0     		sub	sp, sp, #12
 1982              	.LCFI94:
 1983              		.cfi_def_cfa_offset 16
 1984 0004 00AF     		add	r7, sp, #0
 1985              	.LCFI95:
 1986              		.cfi_def_cfa_register 7
 1987 0006 0346     		mov	r3, r0
 1988 0008 FB71     		strb	r3, [r7, #7]
1450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1452:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../StdPeripheralDriver/src/stm32f10x_rcc.c ****      pending bits */
1455:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1989              		.loc 1 1455 0
 1990 000a 41F20A03 		movw	r3, #4106
 1991 000e C4F20203 		movt	r3, 16386
 1992 0012 FA79     		ldrb	r2, [r7, #7]
 1993 0014 1A70     		strb	r2, [r3, #0]
1456:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 1994              		.loc 1 1456 0
 1995 0016 07F10C07 		add	r7, r7, #12
 1996 001a BD46     		mov	sp, r7
 1997 001c 80BC     		pop	{r7}
 1998 001e 7047     		bx	lr
 1999              		.cfi_endproc
 2000              	.LFE61:
 2002              		.text
 2003              	.Letext0:
 2004              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 2005              		.file 3 "/home/frolls/ARM/stm32vld_template/CMSIS/stm32f10x.h"
 2006              		.file 4 "/home/frolls/ARM/stm32vld_template/StdPeripheralDriver/inc/stm32f10x_rcc.h"
 2007              		.file 5 "/home/frolls/ARM/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
     /tmp/ccMxKpSH.s:19     .data.APBAHBPrescTable:00000000 $d
     /tmp/ccMxKpSH.s:22     .data.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/ccMxKpSH.s:40     .data.ADCPrescTable:00000000 $d
     /tmp/ccMxKpSH.s:43     .data.ADCPrescTable:00000000 ADCPrescTable
     /tmp/ccMxKpSH.s:49     .text.RCC_DeInit:00000000 $t
     /tmp/ccMxKpSH.s:54     .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/ccMxKpSH.s:130    .text.RCC_HSEConfig:00000000 $t
     /tmp/ccMxKpSH.s:135    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/ccMxKpSH.s:211    .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/ccMxKpSH.s:216    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/ccMxKpSH.s:1781   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/ccMxKpSH.s:286    .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/ccMxKpSH.s:291    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/ccMxKpSH.s:342    .text.RCC_HSICmd:00000000 $t
     /tmp/ccMxKpSH.s:347    .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/ccMxKpSH.s:380    .text.RCC_PLLConfig:00000000 $t
     /tmp/ccMxKpSH.s:385    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/ccMxKpSH.s:437    .text.RCC_PLLCmd:00000000 $t
     /tmp/ccMxKpSH.s:442    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/ccMxKpSH.s:475    .text.RCC_PREDIV1Config:00000000 $t
     /tmp/ccMxKpSH.s:480    .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
     /tmp/ccMxKpSH.s:533    .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/ccMxKpSH.s:538    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/ccMxKpSH.s:587    .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/ccMxKpSH.s:592    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/ccMxKpSH.s:622    .text.RCC_HCLKConfig:00000000 $t
     /tmp/ccMxKpSH.s:627    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/ccMxKpSH.s:676    .text.RCC_PCLK1Config:00000000 $t
     /tmp/ccMxKpSH.s:681    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/ccMxKpSH.s:730    .text.RCC_PCLK2Config:00000000 $t
     /tmp/ccMxKpSH.s:735    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/ccMxKpSH.s:785    .text.RCC_ITConfig:00000000 $t
     /tmp/ccMxKpSH.s:790    .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/ccMxKpSH.s:851    .text.RCC_USBCLKConfig:00000000 $t
     /tmp/ccMxKpSH.s:856    .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
     /tmp/ccMxKpSH.s:888    .text.RCC_ADCCLKConfig:00000000 $t
     /tmp/ccMxKpSH.s:893    .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
     /tmp/ccMxKpSH.s:942    .text.RCC_LSEConfig:00000000 $t
     /tmp/ccMxKpSH.s:947    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/ccMxKpSH.s:1012   .text.RCC_LSICmd:00000000 $t
     /tmp/ccMxKpSH.s:1017   .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/ccMxKpSH.s:1050   .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/ccMxKpSH.s:1055   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/ccMxKpSH.s:1091   .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/ccMxKpSH.s:1096   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/ccMxKpSH.s:1129   .text.RCC_GetClocksFreq:00000000 $t
     /tmp/ccMxKpSH.s:1134   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/ccMxKpSH.s:1362   .text.RCC_AHBPeriphClockCmd:00000000 $t
     /tmp/ccMxKpSH.s:1367   .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
     /tmp/ccMxKpSH.s:1422   .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/ccMxKpSH.s:1427   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/ccMxKpSH.s:1482   .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/ccMxKpSH.s:1487   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/ccMxKpSH.s:1542   .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/ccMxKpSH.s:1547   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/ccMxKpSH.s:1602   .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/ccMxKpSH.s:1607   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/ccMxKpSH.s:1662   .text.RCC_BackupResetCmd:00000000 $t
     /tmp/ccMxKpSH.s:1667   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/ccMxKpSH.s:1700   .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/ccMxKpSH.s:1705   .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/ccMxKpSH.s:1738   .text.RCC_MCOConfig:00000000 $t
     /tmp/ccMxKpSH.s:1743   .text.RCC_MCOConfig:00000000 RCC_MCOConfig
     /tmp/ccMxKpSH.s:1776   .text.RCC_GetFlagStatus:00000000 $t
     /tmp/ccMxKpSH.s:1874   .text.RCC_ClearFlag:00000000 $t
     /tmp/ccMxKpSH.s:1879   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/ccMxKpSH.s:1909   .text.RCC_GetITStatus:00000000 $t
     /tmp/ccMxKpSH.s:1914   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/ccMxKpSH.s:1965   .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/ccMxKpSH.s:1970   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f2d2167d278fc96c4a7439609634148
                           .group:00000000 wm4.stm32f10x.h.51.643d5396a325ce00fe75ea490db6ba44
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.524.bbf52ca28bdf7ef267115429e0387679
                           .group:00000000 wm4.stm32f10x_conf.h.9.3838e46d9de2be24c7ed73296c5ae8b5
                           .group:00000000 wm4.stm32f10x.h.8267.abe69e40cf43ea9673cb5d472d4b6964
                           .group:00000000 wm4.stm32f10x_rcc.h.66.7684c7e822659b814addf0d50b975514

NO UNDEFINED SYMBOLS
