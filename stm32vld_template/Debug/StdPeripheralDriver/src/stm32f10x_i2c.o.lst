   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_i2c.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.I2C_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	I2C_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	I2C_DeInit:
  25              	.LFB29:
  26              		.file 1 "../StdPeripheralDriver/src/stm32f10x_i2c.c"
   1:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @file    stm32f10x_i2c.c
   4:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief   This file provides all the I2C firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @attention
  10:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *
  11:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *
  18:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
  21:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #include "stm32f10x_i2c.h"
  24:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #include "stm32f10x_rcc.h"
  25:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  26:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
  28:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
  29:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  30:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @defgroup I2C 
  31:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief I2C driver modules
  32:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
  33:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
  34:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  35:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @defgroup I2C_Private_TypesDefinitions
  36:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
  37:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
  38:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  39:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
  40:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @}
  41:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
  42:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  43:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @defgroup I2C_Private_Defines
  44:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
  45:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
  46:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  47:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C SPE mask */
  48:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_PE_Set              ((uint16_t)0x0001)
  49:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_PE_Reset            ((uint16_t)0xFFFE)
  50:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  51:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C START mask */
  52:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_START_Set           ((uint16_t)0x0100)
  53:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_START_Reset         ((uint16_t)0xFEFF)
  54:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  55:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C STOP mask */
  56:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_STOP_Set            ((uint16_t)0x0200)
  57:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_STOP_Reset          ((uint16_t)0xFDFF)
  58:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  59:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C ACK mask */
  60:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ACK_Set             ((uint16_t)0x0400)
  61:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ACK_Reset           ((uint16_t)0xFBFF)
  62:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  63:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C ENGC mask */
  64:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ENGC_Set            ((uint16_t)0x0040)
  65:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ENGC_Reset          ((uint16_t)0xFFBF)
  66:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  67:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C SWRST mask */
  68:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_SWRST_Set           ((uint16_t)0x8000)
  69:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_SWRST_Reset         ((uint16_t)0x7FFF)
  70:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  71:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C PEC mask */
  72:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_PEC_Set             ((uint16_t)0x1000)
  73:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_PEC_Reset           ((uint16_t)0xEFFF)
  74:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  75:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C ENPEC mask */
  76:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ENPEC_Set           ((uint16_t)0x0020)
  77:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ENPEC_Reset         ((uint16_t)0xFFDF)
  78:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C ENARP mask */
  80:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ENARP_Set           ((uint16_t)0x0010)
  81:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_ENARP_Reset         ((uint16_t)0xFFEF)
  82:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  83:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C NOSTRETCH mask */
  84:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_NOSTRETCH_Set       ((uint16_t)0x0080)
  85:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_NOSTRETCH_Reset     ((uint16_t)0xFF7F)
  86:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  87:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C registers Masks */
  88:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR1_CLEAR_Mask          ((uint16_t)0xFBF5)
  89:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  90:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C DMAEN mask */
  91:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR2_DMAEN_Set           ((uint16_t)0x0800)
  92:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR2_DMAEN_Reset         ((uint16_t)0xF7FF)
  93:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  94:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C LAST mask */
  95:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR2_LAST_Set            ((uint16_t)0x1000)
  96:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR2_LAST_Reset          ((uint16_t)0xEFFF)
  97:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
  98:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C FREQ mask */
  99:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CR2_FREQ_Reset          ((uint16_t)0xFFC0)
 100:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 101:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C ADD0 mask */
 102:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define OAR1_ADD0_Set           ((uint16_t)0x0001)
 103:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define OAR1_ADD0_Reset         ((uint16_t)0xFFFE)
 104:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 105:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C ENDUAL mask */
 106:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define OAR2_ENDUAL_Set         ((uint16_t)0x0001)
 107:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define OAR2_ENDUAL_Reset       ((uint16_t)0xFFFE)
 108:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 109:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C ADD2 mask */
 110:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define OAR2_ADD2_Reset         ((uint16_t)0xFF01)
 111:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 112:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C F/S mask */
 113:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CCR_FS_Set              ((uint16_t)0x8000)
 114:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 115:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C CCR mask */
 116:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define CCR_CCR_Set             ((uint16_t)0x0FFF)
 117:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 118:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C FLAG mask */
 119:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define FLAG_Mask               ((uint32_t)0x00FFFFFF)
 120:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 121:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /* I2C Interrupt Enable mask */
 122:../StdPeripheralDriver/src/stm32f10x_i2c.c **** #define ITEN_Mask               ((uint32_t)0x07000000)
 123:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 124:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 125:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @}
 126:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 127:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 128:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @defgroup I2C_Private_Macros
 129:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
 130:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 131:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 132:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 133:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @}
 134:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 135:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 136:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @defgroup I2C_Private_Variables
 137:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
 138:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 139:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 140:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 141:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @}
 142:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 143:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 144:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @defgroup I2C_Private_FunctionPrototypes
 145:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
 146:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 147:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 148:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 149:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @}
 150:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 151:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 152:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /** @defgroup I2C_Private_Functions
 153:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @{
 154:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 155:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 156:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 157:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
 158:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 159:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 160:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 161:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx) {
  27              		.loc 1 161 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 162:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 163:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 164:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 165:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (I2Cx == I2C1 ) {
  43              		.loc 1 165 0
  44 0008 7A68     		ldr	r2, [r7, #4]
  45 000a 4FF4A843 		mov	r3, #21504
  46 000e C4F20003 		movt	r3, 16384
  47 0012 9A42     		cmp	r2, r3
  48 0014 0CD1     		bne	.L2
 166:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable I2C1 reset state */
 167:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  49              		.loc 1 167 0
  50 0016 4FF40010 		mov	r0, #2097152
  51 001a 4FF00101 		mov	r1, #1
  52 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 168:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Release I2C1 from reset state */
 169:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  53              		.loc 1 169 0
  54 0022 4FF40010 		mov	r0, #2097152
  55 0026 4FF00001 		mov	r1, #0
  56 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  57 002e 0BE0     		b	.L1
  58              	.L2:
 170:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 171:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable I2C2 reset state */
 172:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  59              		.loc 1 172 0
  60 0030 4FF48000 		mov	r0, #4194304
  61 0034 4FF00101 		mov	r1, #1
  62 0038 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 173:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Release I2C2 from reset state */
 174:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  63              		.loc 1 174 0
  64 003c 4FF48000 		mov	r0, #4194304
  65 0040 4FF00001 		mov	r1, #0
  66 0044 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              	.L1:
 175:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 176:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
  68              		.loc 1 176 0
  69 0048 07F10807 		add	r7, r7, #8
  70 004c BD46     		mov	sp, r7
  71 004e 80BD     		pop	{r7, pc}
  72              		.cfi_endproc
  73              	.LFE29:
  75              		.section	.text.I2C_Init,"ax",%progbits
  76              		.align	2
  77              		.global	I2C_Init
  78              		.thumb
  79              		.thumb_func
  81              	I2C_Init:
  82              	.LFB30:
 177:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 178:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 179:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Initializes the I2Cx peripheral according to the specified 
 180:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   parameters in the I2C_InitStruct.
 181:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 182:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
 183:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   contains the configuration information for the specified I2C peripheral.
 184:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 185:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 186:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct) {
  83              		.loc 1 186 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 40
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 80B5     		push	{r7, lr}
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 8AB0     		sub	sp, sp, #40
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 48
  95 0004 00AF     		add	r7, sp, #0
  96              	.LCFI5:
  97              		.cfi_def_cfa_register 7
  98 0006 7860     		str	r0, [r7, #4]
  99 0008 3960     		str	r1, [r7, #0]
 187:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint16_t tmpreg = 0, freqrange = 0;
 100              		.loc 1 187 0
 101 000a 4FF00003 		mov	r3, #0
 102 000e FB84     		strh	r3, [r7, #38]	@ movhi
 103 0010 4FF00003 		mov	r3, #0
 104 0014 7B84     		strh	r3, [r7, #34]	@ movhi
 188:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint16_t result = 0x04;
 105              		.loc 1 188 0
 106 0016 4FF00403 		mov	r3, #4
 107 001a BB84     		strh	r3, [r7, #36]	@ movhi
 189:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t pclk1 = 8000000;
 108              		.loc 1 189 0
 109 001c 4FF49053 		mov	r3, #4608
 110 0020 C0F27A03 		movt	r3, 122
 111 0024 FB61     		str	r3, [r7, #28]
 190:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	RCC_ClocksTypeDef rcc_clocks;
 191:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 192:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSp
 193:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 194:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/*---------------------------- I2Cx CR2 Configuration ------------------------*/
 195:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the I2Cx CR2 value */
 196:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg = I2Cx->CR2;
 112              		.loc 1 196 0
 113 0026 7B68     		ldr	r3, [r7, #4]
 114 0028 9B88     		ldrh	r3, [r3, #4]	@ movhi
 115 002a FB84     		strh	r3, [r7, #38]	@ movhi
 197:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Clear frequency FREQ[5:0] bits */
 198:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg &= CR2_FREQ_Reset;
 116              		.loc 1 198 0
 117 002c FB8C     		ldrh	r3, [r7, #38]	@ movhi
 118 002e 23F03F03 		bic	r3, r3, #63
 119 0032 FB84     		strh	r3, [r7, #38]	@ movhi
 199:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get pclk1 frequency value */
 200:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	RCC_GetClocksFreq(&rcc_clocks);
 120              		.loc 1 200 0
 121 0034 07F10803 		add	r3, r7, #8
 122 0038 1846     		mov	r0, r3
 123 003a FFF7FEFF 		bl	RCC_GetClocksFreq
 201:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	pclk1 = rcc_clocks.PCLK1_Frequency;
 124              		.loc 1 201 0
 125 003e 3B69     		ldr	r3, [r7, #16]
 126 0040 FB61     		str	r3, [r7, #28]
 202:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Set frequency bits depending on pclk1 value */
 203:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	freqrange = (uint16_t) (pclk1 / 1000000);
 127              		.loc 1 203 0
 128 0042 FA69     		ldr	r2, [r7, #28]
 129 0044 4DF68363 		movw	r3, #56963
 130 0048 C4F21B33 		movt	r3, 17179
 131 004c A3FB0213 		umull	r1, r3, r3, r2
 132 0050 4FEA9343 		lsr	r3, r3, #18
 133 0054 7B84     		strh	r3, [r7, #34]	@ movhi
 204:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg |= freqrange;
 134              		.loc 1 204 0
 135 0056 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 136 0058 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 137 005a 1343     		orrs	r3, r3, r2
 138 005c FB84     		strh	r3, [r7, #38]	@ movhi
 205:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Write to I2Cx CR2 */
 206:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->CR2 = tmpreg;
 139              		.loc 1 206 0
 140 005e 7B68     		ldr	r3, [r7, #4]
 141 0060 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 142 0062 9A80     		strh	r2, [r3, #4]	@ movhi
 207:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 208:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/*---------------------------- I2Cx CCR Configuration ------------------------*/
 209:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Disable the selected I2C peripheral to configure TRISE */
 210:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->CR1 &= CR1_PE_Reset;
 143              		.loc 1 210 0
 144 0064 7B68     		ldr	r3, [r7, #4]
 145 0066 1B88     		ldrh	r3, [r3, #0]	@ movhi
 146 0068 9BB2     		uxth	r3, r3
 147 006a 23F00103 		bic	r3, r3, #1
 148 006e 9AB2     		uxth	r2, r3
 149 0070 7B68     		ldr	r3, [r7, #4]
 150 0072 1A80     		strh	r2, [r3, #0]	@ movhi
 211:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Reset tmpreg value */
 212:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Clear F/S, DUTY and CCR[11:0] bits */
 213:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg = 0;
 151              		.loc 1 213 0
 152 0074 4FF00003 		mov	r3, #0
 153 0078 FB84     		strh	r3, [r7, #38]	@ movhi
 214:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 215:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Configure speed in standard mode */
 216:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (I2C_InitStruct->I2C_ClockSpeed <= 100000) {
 154              		.loc 1 216 0
 155 007a 3B68     		ldr	r3, [r7, #0]
 156 007c 1A68     		ldr	r2, [r3, #0]
 157 007e 48F2A063 		movw	r3, #34464
 158 0082 C0F20103 		movt	r3, 1
 159 0086 9A42     		cmp	r2, r3
 160 0088 18D8     		bhi	.L5
 217:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Standard mode speed calculate */
 218:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		result = (uint16_t) (pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 161              		.loc 1 218 0
 162 008a 3B68     		ldr	r3, [r7, #0]
 163 008c 1B68     		ldr	r3, [r3, #0]
 164 008e 4FEA4303 		lsl	r3, r3, #1
 165 0092 FA69     		ldr	r2, [r7, #28]
 166 0094 B2FBF3F3 		udiv	r3, r2, r3
 167 0098 BB84     		strh	r3, [r7, #36]	@ movhi
 219:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Test if CCR value is under 0x4*/
 220:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		if (result < 0x04) {
 168              		.loc 1 220 0
 169 009a BB8C     		ldrh	r3, [r7, #36]
 170 009c 032B     		cmp	r3, #3
 171 009e 02D8     		bhi	.L6
 221:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			/* Set minimum allowed value */
 222:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			result = 0x04;
 172              		.loc 1 222 0
 173 00a0 4FF00403 		mov	r3, #4
 174 00a4 BB84     		strh	r3, [r7, #36]	@ movhi
 175              	.L6:
 223:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		}
 224:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Set speed value for standard mode */
 225:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		tmpreg |= result;
 176              		.loc 1 225 0
 177 00a6 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 178 00a8 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 179 00aa 1343     		orrs	r3, r3, r2
 180 00ac FB84     		strh	r3, [r7, #38]	@ movhi
 226:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Set Maximum Rise Time for standard mode */
 227:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->TRISE = freqrange + 1;
 181              		.loc 1 227 0
 182 00ae 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 183 00b0 03F10103 		add	r3, r3, #1
 184 00b4 9AB2     		uxth	r2, r3
 185 00b6 7B68     		ldr	r3, [r7, #4]
 186 00b8 1A84     		strh	r2, [r3, #32]	@ movhi
 187 00ba 4BE0     		b	.L7
 188              	.L5:
 228:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 229:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Configure speed in fast mode */
 230:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	{
 232:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2 ) {
 189              		.loc 1 232 0
 190 00bc 3B68     		ldr	r3, [r7, #0]
 191 00be DA88     		ldrh	r2, [r3, #6]
 192 00c0 4BF6FF73 		movw	r3, #49151
 193 00c4 9A42     		cmp	r2, r3
 194 00c6 0AD1     		bne	.L8
 233:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			/* Fast mode speed calculate: Tlow/Thigh = 2 */
 234:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			result = (uint16_t) (pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 195              		.loc 1 234 0
 196 00c8 3B68     		ldr	r3, [r7, #0]
 197 00ca 1A68     		ldr	r2, [r3, #0]
 198 00cc 1346     		mov	r3, r2
 199 00ce 4FEA4303 		lsl	r3, r3, #1
 200 00d2 9B18     		adds	r3, r3, r2
 201 00d4 FA69     		ldr	r2, [r7, #28]
 202 00d6 B2FBF3F3 		udiv	r3, r2, r3
 203 00da BB84     		strh	r3, [r7, #36]	@ movhi
 204 00dc 10E0     		b	.L9
 205              	.L8:
 235:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		} else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 236:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		{
 237:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			/* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 238:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			result = (uint16_t) (pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 206              		.loc 1 238 0
 207 00de 3B68     		ldr	r3, [r7, #0]
 208 00e0 1A68     		ldr	r2, [r3, #0]
 209 00e2 1346     		mov	r3, r2
 210 00e4 4FEA8303 		lsl	r3, r3, #2
 211 00e8 9B18     		adds	r3, r3, r2
 212 00ea 4FEA8302 		lsl	r2, r3, #2
 213 00ee 9B18     		adds	r3, r3, r2
 214 00f0 FA69     		ldr	r2, [r7, #28]
 215 00f2 B2FBF3F3 		udiv	r3, r2, r3
 216 00f6 BB84     		strh	r3, [r7, #36]	@ movhi
 239:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			/* Set DUTY bit */
 240:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			result |= I2C_DutyCycle_16_9;
 217              		.loc 1 240 0
 218 00f8 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 219 00fa 43F48043 		orr	r3, r3, #16384
 220 00fe BB84     		strh	r3, [r7, #36]	@ movhi
 221              	.L9:
 241:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		}
 242:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 243:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Test if CCR value is under 0x1*/
 244:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		if ((result & CCR_CCR_Set )== 0){
 222              		.loc 1 244 0
 223 0100 BB8C     		ldrh	r3, [r7, #36]
 224 0102 4FEA0353 		lsl	r3, r3, #20
 225 0106 4FEA1353 		lsr	r3, r3, #20
 226 010a 002B     		cmp	r3, #0
 227 010c 03D1     		bne	.L10
 245:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			/* Set minimum allowed value */
 246:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			result |= (uint16_t) 0x0001;
 228              		.loc 1 246 0
 229 010e BB8C     		ldrh	r3, [r7, #36]	@ movhi
 230 0110 43F00103 		orr	r3, r3, #1
 231 0114 BB84     		strh	r3, [r7, #36]	@ movhi
 232              	.L10:
 247:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		}
 248:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Set speed value and set F/S bit for fast mode */
 249:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		tmpreg |= (uint16_t) (result | CCR_FS_Set );
 233              		.loc 1 249 0
 234 0116 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 235 0118 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 236 011a 1343     		orrs	r3, r3, r2
 237 011c 9BB2     		uxth	r3, r3
 238 011e 6FEA4343 		mvn	r3, r3, lsl #17
 239 0122 6FEA5343 		mvn	r3, r3, lsr #17
 240 0126 FB84     		strh	r3, [r7, #38]	@ movhi
 250:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Set Maximum Rise Time for fast mode */
 251:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->TRISE = (uint16_t) (((freqrange * (uint16_t) 300)
 241              		.loc 1 251 0
 242 0128 7B8C     		ldrh	r3, [r7, #34]
 243 012a 4FF49672 		mov	r2, #300
 244 012e 02FB03F2 		mul	r2, r2, r3
 252:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 				/ (uint16_t) 1000) + (uint16_t) 1);
 245              		.loc 1 252 0
 246 0132 44F6D353 		movw	r3, #19923
 247 0136 C1F26203 		movt	r3, 4194
 248 013a 83FB0213 		smull	r1, r3, r3, r2
 249 013e 4FEAA311 		asr	r1, r3, #6
 250 0142 4FEAE273 		asr	r3, r2, #31
 251 0146 CB1A     		subs	r3, r1, r3
 251:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->TRISE = (uint16_t) (((freqrange * (uint16_t) 300)
 252              		.loc 1 251 0
 253 0148 9BB2     		uxth	r3, r3
 254 014a 03F10103 		add	r3, r3, #1
 255 014e 9AB2     		uxth	r2, r3
 256 0150 7B68     		ldr	r3, [r7, #4]
 257 0152 1A84     		strh	r2, [r3, #32]	@ movhi
 258              	.L7:
 253:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 254:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 255:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Write to I2Cx CCR */
 256:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->CCR = tmpreg;
 259              		.loc 1 256 0
 260 0154 7B68     		ldr	r3, [r7, #4]
 261 0156 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 262 0158 9A83     		strh	r2, [r3, #28]	@ movhi
 257:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Enable the selected I2C peripheral */
 258:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->CR1 |= CR1_PE_Set;
 263              		.loc 1 258 0
 264 015a 7B68     		ldr	r3, [r7, #4]
 265 015c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 266 015e 9BB2     		uxth	r3, r3
 267 0160 43F00103 		orr	r3, r3, #1
 268 0164 9AB2     		uxth	r2, r3
 269 0166 7B68     		ldr	r3, [r7, #4]
 270 0168 1A80     		strh	r2, [r3, #0]	@ movhi
 259:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 260:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/*---------------------------- I2Cx CR1 Configuration ------------------------*/
 261:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the I2Cx CR1 value */
 262:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg = I2Cx->CR1;
 271              		.loc 1 262 0
 272 016a 7B68     		ldr	r3, [r7, #4]
 273 016c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 274 016e FB84     		strh	r3, [r7, #38]	@ movhi
 263:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Clear ACK, SMBTYPE and  SMBUS bits */
 264:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg &= CR1_CLEAR_Mask;
 275              		.loc 1 264 0
 276 0170 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 277 0172 23F48163 		bic	r3, r3, #1032
 278 0176 23F00203 		bic	r3, r3, #2
 279 017a FB84     		strh	r3, [r7, #38]	@ movhi
 265:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Configure I2Cx: mode and acknowledgement */
 266:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 267:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Set ACK bit according to I2C_Ack value */
 268:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg |= (uint16_t) ((uint32_t) I2C_InitStruct->I2C_Mode
 280              		.loc 1 268 0
 281 017c 3B68     		ldr	r3, [r7, #0]
 282 017e 9A88     		ldrh	r2, [r3, #4]
 269:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			| I2C_InitStruct->I2C_Ack);
 283              		.loc 1 269 0
 284 0180 3B68     		ldr	r3, [r7, #0]
 285 0182 5B89     		ldrh	r3, [r3, #10]
 268:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg |= (uint16_t) ((uint32_t) I2C_InitStruct->I2C_Mode
 286              		.loc 1 268 0
 287 0184 1343     		orrs	r3, r3, r2
 288 0186 9AB2     		uxth	r2, r3
 289 0188 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 290 018a 1343     		orrs	r3, r3, r2
 291 018c FB84     		strh	r3, [r7, #38]	@ movhi
 270:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Write to I2Cx CR1 */
 271:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->CR1 = tmpreg;
 292              		.loc 1 271 0
 293 018e 7B68     		ldr	r3, [r7, #4]
 294 0190 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 295 0192 1A80     		strh	r2, [r3, #0]	@ movhi
 272:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 273:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 274:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Set I2Cx Own Address1 and acknowledged address */
 275:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress
 296              		.loc 1 275 0
 297 0194 3B68     		ldr	r3, [r7, #0]
 298 0196 9A89     		ldrh	r2, [r3, #12]
 276:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 			| I2C_InitStruct->I2C_OwnAddress1);
 299              		.loc 1 276 0
 300 0198 3B68     		ldr	r3, [r7, #0]
 301 019a 1B89     		ldrh	r3, [r3, #8]
 275:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress
 302              		.loc 1 275 0
 303 019c 1343     		orrs	r3, r3, r2
 304 019e 9AB2     		uxth	r2, r3
 305 01a0 7B68     		ldr	r3, [r7, #4]
 306 01a2 1A81     		strh	r2, [r3, #8]	@ movhi
 277:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 307              		.loc 1 277 0
 308 01a4 07F12807 		add	r7, r7, #40
 309 01a8 BD46     		mov	sp, r7
 310 01aa 80BD     		pop	{r7, pc}
 311              		.cfi_endproc
 312              	.LFE30:
 314              		.section	.text.I2C_StructInit,"ax",%progbits
 315              		.align	2
 316              		.global	I2C_StructInit
 317              		.thumb
 318              		.thumb_func
 320              	I2C_StructInit:
 321              	.LFB31:
 278:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 279:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 280:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Fills each I2C_InitStruct member with its default value.
 281:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 283:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 284:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct) {
 322              		.loc 1 284 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 8
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 0000 80B4     		push	{r7}
 328              	.LCFI6:
 329              		.cfi_def_cfa_offset 4
 330              		.cfi_offset 7, -4
 331 0002 83B0     		sub	sp, sp, #12
 332              	.LCFI7:
 333              		.cfi_def_cfa_offset 16
 334 0004 00AF     		add	r7, sp, #0
 335              	.LCFI8:
 336              		.cfi_def_cfa_register 7
 337 0006 7860     		str	r0, [r7, #4]
 285:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/*---------------- Reset I2C init structure parameters values ----------------*/
 286:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* initialize the I2C_ClockSpeed member */
 287:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_InitStruct->I2C_ClockSpeed = 5000;
 338              		.loc 1 287 0
 339 0008 7B68     		ldr	r3, [r7, #4]
 340 000a 41F28832 		movw	r2, #5000
 341 000e 1A60     		str	r2, [r3, #0]
 288:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Initialize the I2C_Mode member */
 289:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 342              		.loc 1 289 0
 343 0010 7B68     		ldr	r3, [r7, #4]
 344 0012 4FF00002 		mov	r2, #0
 345 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 290:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Initialize the I2C_DutyCycle member */
 291:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 346              		.loc 1 291 0
 347 0018 7B68     		ldr	r3, [r7, #4]
 348 001a 4BF6FF72 		movw	r2, #49151
 349 001e DA80     		strh	r2, [r3, #6]	@ movhi
 292:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Initialize the I2C_OwnAddress1 member */
 293:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_InitStruct->I2C_OwnAddress1 = 0;
 350              		.loc 1 293 0
 351 0020 7B68     		ldr	r3, [r7, #4]
 352 0022 4FF00002 		mov	r2, #0
 353 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 294:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Initialize the I2C_Ack member */
 295:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 354              		.loc 1 295 0
 355 0028 7B68     		ldr	r3, [r7, #4]
 356 002a 4FF00002 		mov	r2, #0
 357 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 296:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Initialize the I2C_AcknowledgedAddress member */
 297:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 358              		.loc 1 297 0
 359 0030 7B68     		ldr	r3, [r7, #4]
 360 0032 4FF48042 		mov	r2, #16384
 361 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 298:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 362              		.loc 1 298 0
 363 0038 07F10C07 		add	r7, r7, #12
 364 003c BD46     		mov	sp, r7
 365 003e 80BC     		pop	{r7}
 366 0040 7047     		bx	lr
 367              		.cfi_endproc
 368              	.LFE31:
 370 0042 00BF     		.section	.text.I2C_Cmd,"ax",%progbits
 371              		.align	2
 372              		.global	I2C_Cmd
 373              		.thumb
 374              		.thumb_func
 376              	I2C_Cmd:
 377              	.LFB32:
 299:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 300:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 301:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C peripheral.
 302:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 303:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2Cx peripheral. 
 304:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 305:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 306:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 307:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 378              		.loc 1 307 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 8
 381              		@ frame_needed = 1, uses_anonymous_args = 0
 382              		@ link register save eliminated.
 383 0000 80B4     		push	{r7}
 384              	.LCFI9:
 385              		.cfi_def_cfa_offset 4
 386              		.cfi_offset 7, -4
 387 0002 83B0     		sub	sp, sp, #12
 388              	.LCFI10:
 389              		.cfi_def_cfa_offset 16
 390 0004 00AF     		add	r7, sp, #0
 391              	.LCFI11:
 392              		.cfi_def_cfa_register 7
 393 0006 7860     		str	r0, [r7, #4]
 394 0008 0B46     		mov	r3, r1
 395 000a FB70     		strb	r3, [r7, #3]
 308:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 309:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 310:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 396              		.loc 1 310 0
 397 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 398 000e 002B     		cmp	r3, #0
 399 0010 08D0     		beq	.L13
 311:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the selected I2C peripheral */
 312:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_PE_Set;
 400              		.loc 1 312 0
 401 0012 7B68     		ldr	r3, [r7, #4]
 402 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 403 0016 9BB2     		uxth	r3, r3
 404 0018 43F00103 		orr	r3, r3, #1
 405 001c 9AB2     		uxth	r2, r3
 406 001e 7B68     		ldr	r3, [r7, #4]
 407 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 408 0022 07E0     		b	.L12
 409              	.L13:
 313:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 314:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the selected I2C peripheral */
 315:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_PE_Reset;
 410              		.loc 1 315 0
 411 0024 7B68     		ldr	r3, [r7, #4]
 412 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 413 0028 9BB2     		uxth	r3, r3
 414 002a 23F00103 		bic	r3, r3, #1
 415 002e 9AB2     		uxth	r2, r3
 416 0030 7B68     		ldr	r3, [r7, #4]
 417 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 418              	.L12:
 316:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 317:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 419              		.loc 1 317 0
 420 0034 07F10C07 		add	r7, r7, #12
 421 0038 BD46     		mov	sp, r7
 422 003a 80BC     		pop	{r7}
 423 003c 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE32:
 427 003e 00BF     		.section	.text.I2C_DMACmd,"ax",%progbits
 428              		.align	2
 429              		.global	I2C_DMACmd
 430              		.thumb
 431              		.thumb_func
 433              	I2C_DMACmd:
 434              	.LFB33:
 318:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 319:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 320:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C DMA requests.
 321:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 322:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C DMA transfer.
 323:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 324:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 325:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 326:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 435              		.loc 1 326 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 8
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440 0000 80B4     		push	{r7}
 441              	.LCFI12:
 442              		.cfi_def_cfa_offset 4
 443              		.cfi_offset 7, -4
 444 0002 83B0     		sub	sp, sp, #12
 445              	.LCFI13:
 446              		.cfi_def_cfa_offset 16
 447 0004 00AF     		add	r7, sp, #0
 448              	.LCFI14:
 449              		.cfi_def_cfa_register 7
 450 0006 7860     		str	r0, [r7, #4]
 451 0008 0B46     		mov	r3, r1
 452 000a FB70     		strb	r3, [r7, #3]
 327:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 328:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 329:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 453              		.loc 1 329 0
 454 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 455 000e 002B     		cmp	r3, #0
 456 0010 08D0     		beq	.L16
 330:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the selected I2C DMA requests */
 331:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR2 |= CR2_DMAEN_Set;
 457              		.loc 1 331 0
 458 0012 7B68     		ldr	r3, [r7, #4]
 459 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 460 0016 9BB2     		uxth	r3, r3
 461 0018 43F40063 		orr	r3, r3, #2048
 462 001c 9AB2     		uxth	r2, r3
 463 001e 7B68     		ldr	r3, [r7, #4]
 464 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 465 0022 07E0     		b	.L15
 466              	.L16:
 332:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 333:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the selected I2C DMA requests */
 334:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR2 &= CR2_DMAEN_Reset;
 467              		.loc 1 334 0
 468 0024 7B68     		ldr	r3, [r7, #4]
 469 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 470 0028 9BB2     		uxth	r3, r3
 471 002a 23F40063 		bic	r3, r3, #2048
 472 002e 9AB2     		uxth	r2, r3
 473 0030 7B68     		ldr	r3, [r7, #4]
 474 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 475              	.L15:
 335:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 336:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 476              		.loc 1 336 0
 477 0034 07F10C07 		add	r7, r7, #12
 478 0038 BD46     		mov	sp, r7
 479 003a 80BC     		pop	{r7}
 480 003c 7047     		bx	lr
 481              		.cfi_endproc
 482              	.LFE33:
 484 003e 00BF     		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 485              		.align	2
 486              		.global	I2C_DMALastTransferCmd
 487              		.thumb
 488              		.thumb_func
 490              	I2C_DMALastTransferCmd:
 491              	.LFB34:
 337:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 338:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 339:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Specifies if the next DMA transfer will be the last one.
 340:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 341:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C DMA last transfer.
 342:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 343:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 344:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 345:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 492              		.loc 1 345 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 8
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496              		@ link register save eliminated.
 497 0000 80B4     		push	{r7}
 498              	.LCFI15:
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 7, -4
 501 0002 83B0     		sub	sp, sp, #12
 502              	.LCFI16:
 503              		.cfi_def_cfa_offset 16
 504 0004 00AF     		add	r7, sp, #0
 505              	.LCFI17:
 506              		.cfi_def_cfa_register 7
 507 0006 7860     		str	r0, [r7, #4]
 508 0008 0B46     		mov	r3, r1
 509 000a FB70     		strb	r3, [r7, #3]
 346:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 347:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 348:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 510              		.loc 1 348 0
 511 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 512 000e 002B     		cmp	r3, #0
 513 0010 08D0     		beq	.L19
 349:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Next DMA transfer is the last transfer */
 350:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR2 |= CR2_LAST_Set;
 514              		.loc 1 350 0
 515 0012 7B68     		ldr	r3, [r7, #4]
 516 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 517 0016 9BB2     		uxth	r3, r3
 518 0018 43F48053 		orr	r3, r3, #4096
 519 001c 9AB2     		uxth	r2, r3
 520 001e 7B68     		ldr	r3, [r7, #4]
 521 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 522 0022 07E0     		b	.L18
 523              	.L19:
 351:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 352:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Next DMA transfer is not the last transfer */
 353:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR2 &= CR2_LAST_Reset;
 524              		.loc 1 353 0
 525 0024 7B68     		ldr	r3, [r7, #4]
 526 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 527 0028 9BB2     		uxth	r3, r3
 528 002a 23F48053 		bic	r3, r3, #4096
 529 002e 9AB2     		uxth	r2, r3
 530 0030 7B68     		ldr	r3, [r7, #4]
 531 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 532              	.L18:
 354:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 355:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 533              		.loc 1 355 0
 534 0034 07F10C07 		add	r7, r7, #12
 535 0038 BD46     		mov	sp, r7
 536 003a 80BC     		pop	{r7}
 537 003c 7047     		bx	lr
 538              		.cfi_endproc
 539              	.LFE34:
 541 003e 00BF     		.section	.text.I2C_GenerateSTART,"ax",%progbits
 542              		.align	2
 543              		.global	I2C_GenerateSTART
 544              		.thumb
 545              		.thumb_func
 547              	I2C_GenerateSTART:
 548              	.LFB35:
 356:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 357:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 358:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Generates I2Cx communication START condition.
 359:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 360:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C START condition generation.
 361:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 362:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None.
 363:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 364:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 549              		.loc 1 364 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 8
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 554 0000 80B4     		push	{r7}
 555              	.LCFI18:
 556              		.cfi_def_cfa_offset 4
 557              		.cfi_offset 7, -4
 558 0002 83B0     		sub	sp, sp, #12
 559              	.LCFI19:
 560              		.cfi_def_cfa_offset 16
 561 0004 00AF     		add	r7, sp, #0
 562              	.LCFI20:
 563              		.cfi_def_cfa_register 7
 564 0006 7860     		str	r0, [r7, #4]
 565 0008 0B46     		mov	r3, r1
 566 000a FB70     		strb	r3, [r7, #3]
 365:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 366:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 367:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 567              		.loc 1 367 0
 568 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 569 000e 002B     		cmp	r3, #0
 570 0010 08D0     		beq	.L22
 368:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Generate a START condition */
 369:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_START_Set;
 571              		.loc 1 369 0
 572 0012 7B68     		ldr	r3, [r7, #4]
 573 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 574 0016 9BB2     		uxth	r3, r3
 575 0018 43F48073 		orr	r3, r3, #256
 576 001c 9AB2     		uxth	r2, r3
 577 001e 7B68     		ldr	r3, [r7, #4]
 578 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 579 0022 07E0     		b	.L21
 580              	.L22:
 370:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 371:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the START condition generation */
 372:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_START_Reset;
 581              		.loc 1 372 0
 582 0024 7B68     		ldr	r3, [r7, #4]
 583 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 584 0028 9BB2     		uxth	r3, r3
 585 002a 23F48073 		bic	r3, r3, #256
 586 002e 9AB2     		uxth	r2, r3
 587 0030 7B68     		ldr	r3, [r7, #4]
 588 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 589              	.L21:
 373:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 374:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 590              		.loc 1 374 0
 591 0034 07F10C07 		add	r7, r7, #12
 592 0038 BD46     		mov	sp, r7
 593 003a 80BC     		pop	{r7}
 594 003c 7047     		bx	lr
 595              		.cfi_endproc
 596              	.LFE35:
 598 003e 00BF     		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 599              		.align	2
 600              		.global	I2C_GenerateSTOP
 601              		.thumb
 602              		.thumb_func
 604              	I2C_GenerateSTOP:
 605              	.LFB36:
 375:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 376:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 377:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Generates I2Cx communication STOP condition.
 378:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 379:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C STOP condition generation.
 380:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 381:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None.
 382:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 383:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 606              		.loc 1 383 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 8
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610              		@ link register save eliminated.
 611 0000 80B4     		push	{r7}
 612              	.LCFI21:
 613              		.cfi_def_cfa_offset 4
 614              		.cfi_offset 7, -4
 615 0002 83B0     		sub	sp, sp, #12
 616              	.LCFI22:
 617              		.cfi_def_cfa_offset 16
 618 0004 00AF     		add	r7, sp, #0
 619              	.LCFI23:
 620              		.cfi_def_cfa_register 7
 621 0006 7860     		str	r0, [r7, #4]
 622 0008 0B46     		mov	r3, r1
 623 000a FB70     		strb	r3, [r7, #3]
 384:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 385:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 386:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 624              		.loc 1 386 0
 625 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 626 000e 002B     		cmp	r3, #0
 627 0010 08D0     		beq	.L25
 387:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Generate a STOP condition */
 388:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_STOP_Set;
 628              		.loc 1 388 0
 629 0012 7B68     		ldr	r3, [r7, #4]
 630 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 631 0016 9BB2     		uxth	r3, r3
 632 0018 43F40073 		orr	r3, r3, #512
 633 001c 9AB2     		uxth	r2, r3
 634 001e 7B68     		ldr	r3, [r7, #4]
 635 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 636 0022 07E0     		b	.L24
 637              	.L25:
 389:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 390:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the STOP condition generation */
 391:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_STOP_Reset;
 638              		.loc 1 391 0
 639 0024 7B68     		ldr	r3, [r7, #4]
 640 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 641 0028 9BB2     		uxth	r3, r3
 642 002a 23F40073 		bic	r3, r3, #512
 643 002e 9AB2     		uxth	r2, r3
 644 0030 7B68     		ldr	r3, [r7, #4]
 645 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 646              	.L24:
 392:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 393:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 647              		.loc 1 393 0
 648 0034 07F10C07 		add	r7, r7, #12
 649 0038 BD46     		mov	sp, r7
 650 003a 80BC     		pop	{r7}
 651 003c 7047     		bx	lr
 652              		.cfi_endproc
 653              	.LFE36:
 655 003e 00BF     		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 656              		.align	2
 657              		.global	I2C_AcknowledgeConfig
 658              		.thumb
 659              		.thumb_func
 661              	I2C_AcknowledgeConfig:
 662              	.LFB37:
 394:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 395:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 396:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C acknowledge feature.
 397:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 398:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C Acknowledgement.
 399:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 400:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None.
 401:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 402:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 663              		.loc 1 402 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 8
 666              		@ frame_needed = 1, uses_anonymous_args = 0
 667              		@ link register save eliminated.
 668 0000 80B4     		push	{r7}
 669              	.LCFI24:
 670              		.cfi_def_cfa_offset 4
 671              		.cfi_offset 7, -4
 672 0002 83B0     		sub	sp, sp, #12
 673              	.LCFI25:
 674              		.cfi_def_cfa_offset 16
 675 0004 00AF     		add	r7, sp, #0
 676              	.LCFI26:
 677              		.cfi_def_cfa_register 7
 678 0006 7860     		str	r0, [r7, #4]
 679 0008 0B46     		mov	r3, r1
 680 000a FB70     		strb	r3, [r7, #3]
 403:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 404:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 681              		.loc 1 405 0
 682 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 683 000e 002B     		cmp	r3, #0
 684 0010 08D0     		beq	.L28
 406:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the acknowledgement */
 407:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_ACK_Set;
 685              		.loc 1 407 0
 686 0012 7B68     		ldr	r3, [r7, #4]
 687 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 688 0016 9BB2     		uxth	r3, r3
 689 0018 43F48063 		orr	r3, r3, #1024
 690 001c 9AB2     		uxth	r2, r3
 691 001e 7B68     		ldr	r3, [r7, #4]
 692 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 693 0022 07E0     		b	.L27
 694              	.L28:
 408:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 409:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the acknowledgement */
 410:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_ACK_Reset;
 695              		.loc 1 410 0
 696 0024 7B68     		ldr	r3, [r7, #4]
 697 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 698 0028 9BB2     		uxth	r3, r3
 699 002a 23F48063 		bic	r3, r3, #1024
 700 002e 9AB2     		uxth	r2, r3
 701 0030 7B68     		ldr	r3, [r7, #4]
 702 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 703              	.L27:
 411:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 412:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 704              		.loc 1 412 0
 705 0034 07F10C07 		add	r7, r7, #12
 706 0038 BD46     		mov	sp, r7
 707 003a 80BC     		pop	{r7}
 708 003c 7047     		bx	lr
 709              		.cfi_endproc
 710              	.LFE37:
 712 003e 00BF     		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 713              		.align	2
 714              		.global	I2C_OwnAddress2Config
 715              		.thumb
 716              		.thumb_func
 718              	I2C_OwnAddress2Config:
 719              	.LFB38:
 413:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 414:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 415:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Configures the specified I2C own address2.
 416:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 417:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  Address: specifies the 7bit I2C own address2.
 418:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None.
 419:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 420:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address) {
 720              		.loc 1 420 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 16
 723              		@ frame_needed = 1, uses_anonymous_args = 0
 724              		@ link register save eliminated.
 725 0000 80B4     		push	{r7}
 726              	.LCFI27:
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 7, -4
 729 0002 85B0     		sub	sp, sp, #20
 730              	.LCFI28:
 731              		.cfi_def_cfa_offset 24
 732 0004 00AF     		add	r7, sp, #0
 733              	.LCFI29:
 734              		.cfi_def_cfa_register 7
 735 0006 7860     		str	r0, [r7, #4]
 736 0008 0B46     		mov	r3, r1
 737 000a FB70     		strb	r3, [r7, #3]
 421:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint16_t tmpreg = 0;
 738              		.loc 1 421 0
 739 000c 4FF00003 		mov	r3, #0
 740 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 422:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 423:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 424:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 425:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 426:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the old register value */
 427:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg = I2Cx->OAR2;
 741              		.loc 1 427 0
 742 0012 7B68     		ldr	r3, [r7, #4]
 743 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 744 0016 FB81     		strh	r3, [r7, #14]	@ movhi
 428:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 429:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Reset I2Cx Own address2 bit [7:1] */
 430:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg &= OAR2_ADD2_Reset;
 745              		.loc 1 430 0
 746 0018 FB89     		ldrh	r3, [r7, #14]	@ movhi
 747 001a 23F0FE03 		bic	r3, r3, #254
 748 001e FB81     		strh	r3, [r7, #14]	@ movhi
 431:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 432:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Set I2Cx Own address2 */
 433:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmpreg |= (uint16_t) ((uint16_t) Address & (uint16_t) 0x00FE);
 749              		.loc 1 433 0
 750 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 751 0022 9BB2     		uxth	r3, r3
 752 0024 03F0FE03 		and	r3, r3, #254
 753 0028 9AB2     		uxth	r2, r3
 754 002a FB89     		ldrh	r3, [r7, #14]
 755 002c 1343     		orrs	r3, r3, r2
 756 002e 9BB2     		uxth	r3, r3
 757 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 434:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 435:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Store the new register value */
 436:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->OAR2 = tmpreg;
 758              		.loc 1 436 0
 759 0032 7B68     		ldr	r3, [r7, #4]
 760 0034 FA89     		ldrh	r2, [r7, #14]	@ movhi
 761 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 437:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 762              		.loc 1 437 0
 763 0038 07F11407 		add	r7, r7, #20
 764 003c BD46     		mov	sp, r7
 765 003e 80BC     		pop	{r7}
 766 0040 7047     		bx	lr
 767              		.cfi_endproc
 768              	.LFE38:
 770 0042 00BF     		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 771              		.align	2
 772              		.global	I2C_DualAddressCmd
 773              		.thumb
 774              		.thumb_func
 776              	I2C_DualAddressCmd:
 777              	.LFB39:
 438:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 439:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 440:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C dual addressing mode.
 441:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 442:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C dual addressing mode.
 443:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 444:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 445:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 446:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 778              		.loc 1 446 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 8
 781              		@ frame_needed = 1, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 783 0000 80B4     		push	{r7}
 784              	.LCFI30:
 785              		.cfi_def_cfa_offset 4
 786              		.cfi_offset 7, -4
 787 0002 83B0     		sub	sp, sp, #12
 788              	.LCFI31:
 789              		.cfi_def_cfa_offset 16
 790 0004 00AF     		add	r7, sp, #0
 791              	.LCFI32:
 792              		.cfi_def_cfa_register 7
 793 0006 7860     		str	r0, [r7, #4]
 794 0008 0B46     		mov	r3, r1
 795 000a FB70     		strb	r3, [r7, #3]
 447:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 448:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 449:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 796              		.loc 1 449 0
 797 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 798 000e 002B     		cmp	r3, #0
 799 0010 08D0     		beq	.L32
 450:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable dual addressing mode */
 451:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 800              		.loc 1 451 0
 801 0012 7B68     		ldr	r3, [r7, #4]
 802 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 803 0016 9BB2     		uxth	r3, r3
 804 0018 43F00103 		orr	r3, r3, #1
 805 001c 9AB2     		uxth	r2, r3
 806 001e 7B68     		ldr	r3, [r7, #4]
 807 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 808 0022 07E0     		b	.L31
 809              	.L32:
 452:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 453:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable dual addressing mode */
 454:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
 810              		.loc 1 454 0
 811 0024 7B68     		ldr	r3, [r7, #4]
 812 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 813 0028 9BB2     		uxth	r3, r3
 814 002a 23F00103 		bic	r3, r3, #1
 815 002e 9AB2     		uxth	r2, r3
 816 0030 7B68     		ldr	r3, [r7, #4]
 817 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 818              	.L31:
 455:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 456:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 819              		.loc 1 456 0
 820 0034 07F10C07 		add	r7, r7, #12
 821 0038 BD46     		mov	sp, r7
 822 003a 80BC     		pop	{r7}
 823 003c 7047     		bx	lr
 824              		.cfi_endproc
 825              	.LFE39:
 827 003e 00BF     		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 828              		.align	2
 829              		.global	I2C_GeneralCallCmd
 830              		.thumb
 831              		.thumb_func
 833              	I2C_GeneralCallCmd:
 834              	.LFB40:
 457:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 458:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 459:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C general call feature.
 460:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 461:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C General call.
 462:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 463:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 464:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 465:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 835              		.loc 1 465 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 8
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840 0000 80B4     		push	{r7}
 841              	.LCFI33:
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 7, -4
 844 0002 83B0     		sub	sp, sp, #12
 845              	.LCFI34:
 846              		.cfi_def_cfa_offset 16
 847 0004 00AF     		add	r7, sp, #0
 848              	.LCFI35:
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 851 0008 0B46     		mov	r3, r1
 852 000a FB70     		strb	r3, [r7, #3]
 466:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 467:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 468:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 853              		.loc 1 468 0
 854 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 855 000e 002B     		cmp	r3, #0
 856 0010 08D0     		beq	.L35
 469:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable generall call */
 470:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_ENGC_Set;
 857              		.loc 1 470 0
 858 0012 7B68     		ldr	r3, [r7, #4]
 859 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 860 0016 9BB2     		uxth	r3, r3
 861 0018 43F04003 		orr	r3, r3, #64
 862 001c 9AB2     		uxth	r2, r3
 863 001e 7B68     		ldr	r3, [r7, #4]
 864 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 865 0022 07E0     		b	.L34
 866              	.L35:
 471:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 472:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable generall call */
 473:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_ENGC_Reset;
 867              		.loc 1 473 0
 868 0024 7B68     		ldr	r3, [r7, #4]
 869 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 870 0028 9BB2     		uxth	r3, r3
 871 002a 23F04003 		bic	r3, r3, #64
 872 002e 9AB2     		uxth	r2, r3
 873 0030 7B68     		ldr	r3, [r7, #4]
 874 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 875              	.L34:
 474:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 475:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 876              		.loc 1 475 0
 877 0034 07F10C07 		add	r7, r7, #12
 878 0038 BD46     		mov	sp, r7
 879 003a 80BC     		pop	{r7}
 880 003c 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE40:
 884 003e 00BF     		.section	.text.I2C_ITConfig,"ax",%progbits
 885              		.align	2
 886              		.global	I2C_ITConfig
 887              		.thumb
 888              		.thumb_func
 890              	I2C_ITConfig:
 891              	.LFB41:
 476:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 477:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 478:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C interrupts.
 479:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 480:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
 481:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be any combination of the following values:
 482:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_BUF: Buffer interrupt mask
 483:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_EVT: Event interrupt mask
 484:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_ERR: Error interrupt mask
 485:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the specified I2C interrupts.
 486:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 487:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 488:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 489:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState) {
 892              		.loc 1 489 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 8
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 897 0000 80B4     		push	{r7}
 898              	.LCFI36:
 899              		.cfi_def_cfa_offset 4
 900              		.cfi_offset 7, -4
 901 0002 83B0     		sub	sp, sp, #12
 902              	.LCFI37:
 903              		.cfi_def_cfa_offset 16
 904 0004 00AF     		add	r7, sp, #0
 905              	.LCFI38:
 906              		.cfi_def_cfa_register 7
 907 0006 7860     		str	r0, [r7, #4]
 908 0008 1346     		mov	r3, r2
 909 000a 0A46     		mov	r2, r1	@ movhi
 910 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 911 000e 7B70     		strb	r3, [r7, #1]
 490:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 491:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState)); assert_param(I
 492:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 493:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 912              		.loc 1 493 0
 913 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 914 0012 002B     		cmp	r3, #0
 915 0014 08D0     		beq	.L38
 494:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the selected I2C interrupts */
 495:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR2 |= I2C_IT;
 916              		.loc 1 495 0
 917 0016 7B68     		ldr	r3, [r7, #4]
 918 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 919 001a 9AB2     		uxth	r2, r3
 920 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 921 001e 1343     		orrs	r3, r3, r2
 922 0020 9AB2     		uxth	r2, r3
 923 0022 7B68     		ldr	r3, [r7, #4]
 924 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 925 0026 0AE0     		b	.L37
 926              	.L38:
 496:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 497:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the selected I2C interrupts */
 498:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR2 &= (uint16_t) ~I2C_IT;
 927              		.loc 1 498 0
 928 0028 7B68     		ldr	r3, [r7, #4]
 929 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 930 002c 9AB2     		uxth	r2, r3
 931 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 932 0030 6FEA0303 		mvn	r3, r3
 933 0034 9BB2     		uxth	r3, r3
 934 0036 1340     		ands	r3, r3, r2
 935 0038 9AB2     		uxth	r2, r3
 936 003a 7B68     		ldr	r3, [r7, #4]
 937 003c 9A80     		strh	r2, [r3, #4]	@ movhi
 938              	.L37:
 499:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 500:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 939              		.loc 1 500 0
 940 003e 07F10C07 		add	r7, r7, #12
 941 0042 BD46     		mov	sp, r7
 942 0044 80BC     		pop	{r7}
 943 0046 7047     		bx	lr
 944              		.cfi_endproc
 945              	.LFE41:
 947              		.section	.text.I2C_SendData,"ax",%progbits
 948              		.align	2
 949              		.global	I2C_SendData
 950              		.thumb
 951              		.thumb_func
 953              	I2C_SendData:
 954              	.LFB42:
 501:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 502:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 503:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Sends a data byte through the I2Cx peripheral.
 504:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 505:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  Data: Byte to be transmitted..
 506:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 507:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 508:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data) {
 955              		.loc 1 508 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 8
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 960 0000 80B4     		push	{r7}
 961              	.LCFI39:
 962              		.cfi_def_cfa_offset 4
 963              		.cfi_offset 7, -4
 964 0002 83B0     		sub	sp, sp, #12
 965              	.LCFI40:
 966              		.cfi_def_cfa_offset 16
 967 0004 00AF     		add	r7, sp, #0
 968              	.LCFI41:
 969              		.cfi_def_cfa_register 7
 970 0006 7860     		str	r0, [r7, #4]
 971 0008 0B46     		mov	r3, r1
 972 000a FB70     		strb	r3, [r7, #3]
 509:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 510:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 511:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Write in the DR register the data to be sent */
 512:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->DR = Data;
 973              		.loc 1 512 0
 974 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 975 000e 9AB2     		uxth	r2, r3
 976 0010 7B68     		ldr	r3, [r7, #4]
 977 0012 1A82     		strh	r2, [r3, #16]	@ movhi
 513:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 978              		.loc 1 513 0
 979 0014 07F10C07 		add	r7, r7, #12
 980 0018 BD46     		mov	sp, r7
 981 001a 80BC     		pop	{r7}
 982 001c 7047     		bx	lr
 983              		.cfi_endproc
 984              	.LFE42:
 986 001e 00BF     		.section	.text.I2C_ReceiveData,"ax",%progbits
 987              		.align	2
 988              		.global	I2C_ReceiveData
 989              		.thumb
 990              		.thumb_func
 992              	I2C_ReceiveData:
 993              	.LFB43:
 514:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 515:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 516:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Returns the most recent received data by the I2Cx peripheral.
 517:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 518:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval The value of the received data.
 519:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 520:../StdPeripheralDriver/src/stm32f10x_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx) {
 994              		.loc 1 520 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 8
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 999 0000 80B4     		push	{r7}
 1000              	.LCFI42:
 1001              		.cfi_def_cfa_offset 4
 1002              		.cfi_offset 7, -4
 1003 0002 83B0     		sub	sp, sp, #12
 1004              	.LCFI43:
 1005              		.cfi_def_cfa_offset 16
 1006 0004 00AF     		add	r7, sp, #0
 1007              	.LCFI44:
 1008              		.cfi_def_cfa_register 7
 1009 0006 7860     		str	r0, [r7, #4]
 521:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 522:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 523:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Return the data in the DR register */
 524:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	return (uint8_t) I2Cx->DR;
 1010              		.loc 1 524 0
 1011 0008 7B68     		ldr	r3, [r7, #4]
 1012 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1013 000c 9BB2     		uxth	r3, r3
 1014 000e DBB2     		uxtb	r3, r3
 525:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1015              		.loc 1 525 0
 1016 0010 1846     		mov	r0, r3
 1017 0012 07F10C07 		add	r7, r7, #12
 1018 0016 BD46     		mov	sp, r7
 1019 0018 80BC     		pop	{r7}
 1020 001a 7047     		bx	lr
 1021              		.cfi_endproc
 1022              	.LFE43:
 1024              		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 1025              		.align	2
 1026              		.global	I2C_Send7bitAddress
 1027              		.thumb
 1028              		.thumb_func
 1030              	I2C_Send7bitAddress:
 1031              	.LFB44:
 526:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 528:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Transmits the address byte to select the slave device.
 529:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 530:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  Address: specifies the slave address which will be transmitted
 531:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_Direction: specifies whether the I2C device will be a
 532:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   Transmitter or a Receiver. This parameter can be one of the following values
 533:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Direction_Transmitter: Transmitter mode
 534:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Direction_Receiver: Receiver mode
 535:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None.
 536:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 537:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address,
 538:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		uint8_t I2C_Direction) {
 1032              		.loc 1 538 0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 8
 1035              		@ frame_needed = 1, uses_anonymous_args = 0
 1036              		@ link register save eliminated.
 1037 0000 80B4     		push	{r7}
 1038              	.LCFI45:
 1039              		.cfi_def_cfa_offset 4
 1040              		.cfi_offset 7, -4
 1041 0002 83B0     		sub	sp, sp, #12
 1042              	.LCFI46:
 1043              		.cfi_def_cfa_offset 16
 1044 0004 00AF     		add	r7, sp, #0
 1045              	.LCFI47:
 1046              		.cfi_def_cfa_register 7
 1047 0006 7860     		str	r0, [r7, #4]
 1048 0008 1346     		mov	r3, r2
 1049 000a 0A46     		mov	r2, r1
 1050 000c FA70     		strb	r2, [r7, #3]
 1051 000e BB70     		strb	r3, [r7, #2]
 539:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 540:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_DIRECTION(I2C_Direction));
 541:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Test on the direction to set/reset the read/write bit */
 542:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (I2C_Direction != I2C_Direction_Transmitter ) {
 1052              		.loc 1 542 0
 1053 0010 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1054 0012 002B     		cmp	r3, #0
 1055 0014 04D0     		beq	.L44
 543:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Set the address bit0 for read */
 544:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		Address |= OAR1_ADD0_Set;
 1056              		.loc 1 544 0
 1057 0016 FB78     		ldrb	r3, [r7, #3]
 1058 0018 43F00103 		orr	r3, r3, #1
 1059 001c FB70     		strb	r3, [r7, #3]
 1060 001e 03E0     		b	.L45
 1061              	.L44:
 545:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 546:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Reset the address bit0 for write */
 547:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		Address &= OAR1_ADD0_Reset;
 1062              		.loc 1 547 0
 1063 0020 FB78     		ldrb	r3, [r7, #3]
 1064 0022 23F00103 		bic	r3, r3, #1
 1065 0026 FB70     		strb	r3, [r7, #3]
 1066              	.L45:
 548:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 549:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Send the address */
 550:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->DR = Address;
 1067              		.loc 1 550 0
 1068 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1069 002a 9AB2     		uxth	r2, r3
 1070 002c 7B68     		ldr	r3, [r7, #4]
 1071 002e 1A82     		strh	r2, [r3, #16]	@ movhi
 551:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1072              		.loc 1 551 0
 1073 0030 07F10C07 		add	r7, r7, #12
 1074 0034 BD46     		mov	sp, r7
 1075 0036 80BC     		pop	{r7}
 1076 0038 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE44:
 1080 003a 00BF     		.section	.text.I2C_ReadRegister,"ax",%progbits
 1081              		.align	2
 1082              		.global	I2C_ReadRegister
 1083              		.thumb
 1084              		.thumb_func
 1086              	I2C_ReadRegister:
 1087              	.LFB45:
 552:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 553:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 554:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Reads the specified I2C register and returns its value.
 555:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_Register: specifies the register to read.
 556:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
 557:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_CR1:  CR1 register.
 558:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_CR2:   CR2 register.
 559:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_OAR1:  OAR1 register.
 560:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_OAR2:  OAR2 register.
 561:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_DR:    DR register.
 562:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_SR1:   SR1 register.
 563:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_SR2:   SR2 register.
 564:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_CCR:   CCR register.
 565:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_Register_TRISE: TRISE register.
 566:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval The value of the read register.
 567:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 568:../StdPeripheralDriver/src/stm32f10x_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register) {
 1088              		.loc 1 568 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 16
 1091              		@ frame_needed = 1, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 1093 0000 80B4     		push	{r7}
 1094              	.LCFI48:
 1095              		.cfi_def_cfa_offset 4
 1096              		.cfi_offset 7, -4
 1097 0002 85B0     		sub	sp, sp, #20
 1098              	.LCFI49:
 1099              		.cfi_def_cfa_offset 24
 1100 0004 00AF     		add	r7, sp, #0
 1101              	.LCFI50:
 1102              		.cfi_def_cfa_register 7
 1103 0006 7860     		str	r0, [r7, #4]
 1104 0008 0B46     		mov	r3, r1
 1105 000a FB70     		strb	r3, [r7, #3]
 569:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	__IO uint32_t tmp = 0;
 1106              		.loc 1 569 0
 1107 000c 4FF00003 		mov	r3, #0
 1108 0010 FB60     		str	r3, [r7, #12]
 570:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 571:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 572:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_REGISTER(I2C_Register));
 573:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 574:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmp = (uint32_t) I2Cx;
 1109              		.loc 1 574 0
 1110 0012 7B68     		ldr	r3, [r7, #4]
 1111 0014 FB60     		str	r3, [r7, #12]
 575:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	tmp += I2C_Register;
 1112              		.loc 1 575 0
 1113 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1114 0018 FB68     		ldr	r3, [r7, #12]
 1115 001a D318     		adds	r3, r2, r3
 1116 001c FB60     		str	r3, [r7, #12]
 576:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 577:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Return the selected register value */
 578:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	return (*(__IO uint16_t *) tmp);
 1117              		.loc 1 578 0
 1118 001e FB68     		ldr	r3, [r7, #12]
 1119 0020 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1120 0022 9BB2     		uxth	r3, r3
 579:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1121              		.loc 1 579 0
 1122 0024 1846     		mov	r0, r3
 1123 0026 07F11407 		add	r7, r7, #20
 1124 002a BD46     		mov	sp, r7
 1125 002c 80BC     		pop	{r7}
 1126 002e 7047     		bx	lr
 1127              		.cfi_endproc
 1128              	.LFE45:
 1130              		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 1131              		.align	2
 1132              		.global	I2C_SoftwareResetCmd
 1133              		.thumb
 1134              		.thumb_func
 1136              	I2C_SoftwareResetCmd:
 1137              	.LFB46:
 580:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 581:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 582:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C software reset.
 583:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 584:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C software reset.
 585:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 586:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 587:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 588:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 1138              		.loc 1 588 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 8
 1141              		@ frame_needed = 1, uses_anonymous_args = 0
 1142              		@ link register save eliminated.
 1143 0000 80B4     		push	{r7}
 1144              	.LCFI51:
 1145              		.cfi_def_cfa_offset 4
 1146              		.cfi_offset 7, -4
 1147 0002 83B0     		sub	sp, sp, #12
 1148              	.LCFI52:
 1149              		.cfi_def_cfa_offset 16
 1150 0004 00AF     		add	r7, sp, #0
 1151              	.LCFI53:
 1152              		.cfi_def_cfa_register 7
 1153 0006 7860     		str	r0, [r7, #4]
 1154 0008 0B46     		mov	r3, r1
 1155 000a FB70     		strb	r3, [r7, #3]
 589:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 590:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 591:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 1156              		.loc 1 591 0
 1157 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1158 000e 002B     		cmp	r3, #0
 1159 0010 0AD0     		beq	.L49
 592:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Peripheral under reset */
 593:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_SWRST_Set;
 1160              		.loc 1 593 0
 1161 0012 7B68     		ldr	r3, [r7, #4]
 1162 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1163 0016 9BB2     		uxth	r3, r3
 1164 0018 6FEA4343 		mvn	r3, r3, lsl #17
 1165 001c 6FEA5343 		mvn	r3, r3, lsr #17
 1166 0020 9AB2     		uxth	r2, r3
 1167 0022 7B68     		ldr	r3, [r7, #4]
 1168 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 1169 0026 09E0     		b	.L48
 1170              	.L49:
 594:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 595:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Peripheral not under reset */
 596:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_SWRST_Reset;
 1171              		.loc 1 596 0
 1172 0028 7B68     		ldr	r3, [r7, #4]
 1173 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1174 002c 9BB2     		uxth	r3, r3
 1175 002e 4FEA4343 		lsl	r3, r3, #17
 1176 0032 4FEA5343 		lsr	r3, r3, #17
 1177 0036 9AB2     		uxth	r2, r3
 1178 0038 7B68     		ldr	r3, [r7, #4]
 1179 003a 1A80     		strh	r2, [r3, #0]	@ movhi
 1180              	.L48:
 597:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 598:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1181              		.loc 1 598 0
 1182 003c 07F10C07 		add	r7, r7, #12
 1183 0040 BD46     		mov	sp, r7
 1184 0042 80BC     		pop	{r7}
 1185 0044 7047     		bx	lr
 1186              		.cfi_endproc
 1187              	.LFE46:
 1189 0046 00BF     		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 1190              		.align	2
 1191              		.global	I2C_NACKPositionConfig
 1192              		.thumb
 1193              		.thumb_func
 1195              	I2C_NACKPositionConfig:
 1196              	.LFB47:
 599:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 600:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 601:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Selects the specified I2C NACK position in master receiver mode.
 602:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         This function is useful in I2C Master Receiver mode when the number
 603:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         of data to be received is equal to 2. In this case, this function 
 604:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         should be called (with parameter I2C_NACKPosition_Next) before data 
 605:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         reception starts,as described in the 2-byte reception procedure 
 606:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         recommended in Reference Manual in Section: Master receiver.                
 607:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 608:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_NACKPosition: specifies the NACK position. 
 609:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
 610:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 611:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          received byte.  
 612:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 613:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          received byte.
 614:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *            
 615:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 616:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 617:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          is intended to used in SMBUS mode. 
 618:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *            
 619:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 620:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 621:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition) {
 1197              		.loc 1 621 0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 8
 1200              		@ frame_needed = 1, uses_anonymous_args = 0
 1201              		@ link register save eliminated.
 1202 0000 80B4     		push	{r7}
 1203              	.LCFI54:
 1204              		.cfi_def_cfa_offset 4
 1205              		.cfi_offset 7, -4
 1206 0002 83B0     		sub	sp, sp, #12
 1207              	.LCFI55:
 1208              		.cfi_def_cfa_offset 16
 1209 0004 00AF     		add	r7, sp, #0
 1210              	.LCFI56:
 1211              		.cfi_def_cfa_register 7
 1212 0006 7860     		str	r0, [r7, #4]
 1213 0008 0B46     		mov	r3, r1
 1214 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 622:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 623:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 624:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 625:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the input parameter */
 626:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (I2C_NACKPosition == I2C_NACKPosition_Next ) {
 1215              		.loc 1 626 0
 1216 000c 7B88     		ldrh	r3, [r7, #2]
 1217 000e B3F5006F 		cmp	r3, #2048
 1218 0012 08D1     		bne	.L52
 627:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Next byte in shift register is the last received byte */
 628:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= I2C_NACKPosition_Next;
 1219              		.loc 1 628 0
 1220 0014 7B68     		ldr	r3, [r7, #4]
 1221 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1222 0018 9BB2     		uxth	r3, r3
 1223 001a 43F40063 		orr	r3, r3, #2048
 1224 001e 9AB2     		uxth	r2, r3
 1225 0020 7B68     		ldr	r3, [r7, #4]
 1226 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1227 0024 07E0     		b	.L51
 1228              	.L52:
 629:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 630:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Current byte in shift register is the last received byte */
 631:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= I2C_NACKPosition_Current;
 1229              		.loc 1 631 0
 1230 0026 7B68     		ldr	r3, [r7, #4]
 1231 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1232 002a 9BB2     		uxth	r3, r3
 1233 002c 23F40063 		bic	r3, r3, #2048
 1234 0030 9AB2     		uxth	r2, r3
 1235 0032 7B68     		ldr	r3, [r7, #4]
 1236 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1237              	.L51:
 632:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 633:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1238              		.loc 1 633 0
 1239 0036 07F10C07 		add	r7, r7, #12
 1240 003a BD46     		mov	sp, r7
 1241 003c 80BC     		pop	{r7}
 1242 003e 7047     		bx	lr
 1243              		.cfi_endproc
 1244              	.LFE47:
 1246              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 1247              		.align	2
 1248              		.global	I2C_SMBusAlertConfig
 1249              		.thumb
 1250              		.thumb_func
 1252              	I2C_SMBusAlertConfig:
 1253              	.LFB48:
 634:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 635:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 636:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 637:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 638:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 639:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
 640:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 641:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 642:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 643:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 644:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert) {
 1254              		.loc 1 644 0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 8
 1257              		@ frame_needed = 1, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 1259 0000 80B4     		push	{r7}
 1260              	.LCFI57:
 1261              		.cfi_def_cfa_offset 4
 1262              		.cfi_offset 7, -4
 1263 0002 83B0     		sub	sp, sp, #12
 1264              	.LCFI58:
 1265              		.cfi_def_cfa_offset 16
 1266 0004 00AF     		add	r7, sp, #0
 1267              	.LCFI59:
 1268              		.cfi_def_cfa_register 7
 1269 0006 7860     		str	r0, [r7, #4]
 1270 0008 0B46     		mov	r3, r1
 1271 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 645:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 646:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 647:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (I2C_SMBusAlert == I2C_SMBusAlert_Low ) {
 1272              		.loc 1 647 0
 1273 000c 7B88     		ldrh	r3, [r7, #2]
 1274 000e B3F5005F 		cmp	r3, #8192
 1275 0012 08D1     		bne	.L55
 648:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Drive the SMBusAlert pin Low */
 649:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1276              		.loc 1 649 0
 1277 0014 7B68     		ldr	r3, [r7, #4]
 1278 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1279 0018 9BB2     		uxth	r3, r3
 1280 001a 43F40053 		orr	r3, r3, #8192
 1281 001e 9AB2     		uxth	r2, r3
 1282 0020 7B68     		ldr	r3, [r7, #4]
 1283 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1284 0024 07E0     		b	.L54
 1285              	.L55:
 650:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 651:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Drive the SMBusAlert pin High  */
 652:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= I2C_SMBusAlert_High;
 1286              		.loc 1 652 0
 1287 0026 7B68     		ldr	r3, [r7, #4]
 1288 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1289 002a 9BB2     		uxth	r3, r3
 1290 002c 23F40053 		bic	r3, r3, #8192
 1291 0030 9AB2     		uxth	r2, r3
 1292 0032 7B68     		ldr	r3, [r7, #4]
 1293 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1294              	.L54:
 653:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 654:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1295              		.loc 1 654 0
 1296 0036 07F10C07 		add	r7, r7, #12
 1297 003a BD46     		mov	sp, r7
 1298 003c 80BC     		pop	{r7}
 1299 003e 7047     		bx	lr
 1300              		.cfi_endproc
 1301              	.LFE48:
 1303              		.section	.text.I2C_TransmitPEC,"ax",%progbits
 1304              		.align	2
 1305              		.global	I2C_TransmitPEC
 1306              		.thumb
 1307              		.thumb_func
 1309              	I2C_TransmitPEC:
 1310              	.LFB49:
 655:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 656:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 657:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C PEC transfer.
 658:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 659:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2C PEC transmission.
 660:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 661:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 662:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 663:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 1311              		.loc 1 663 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 8
 1314              		@ frame_needed = 1, uses_anonymous_args = 0
 1315              		@ link register save eliminated.
 1316 0000 80B4     		push	{r7}
 1317              	.LCFI60:
 1318              		.cfi_def_cfa_offset 4
 1319              		.cfi_offset 7, -4
 1320 0002 83B0     		sub	sp, sp, #12
 1321              	.LCFI61:
 1322              		.cfi_def_cfa_offset 16
 1323 0004 00AF     		add	r7, sp, #0
 1324              	.LCFI62:
 1325              		.cfi_def_cfa_register 7
 1326 0006 7860     		str	r0, [r7, #4]
 1327 0008 0B46     		mov	r3, r1
 1328 000a FB70     		strb	r3, [r7, #3]
 664:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 665:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 666:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 1329              		.loc 1 666 0
 1330 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1331 000e 002B     		cmp	r3, #0
 1332 0010 08D0     		beq	.L58
 667:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the selected I2C PEC transmission */
 668:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_PEC_Set;
 1333              		.loc 1 668 0
 1334 0012 7B68     		ldr	r3, [r7, #4]
 1335 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1336 0016 9BB2     		uxth	r3, r3
 1337 0018 43F48053 		orr	r3, r3, #4096
 1338 001c 9AB2     		uxth	r2, r3
 1339 001e 7B68     		ldr	r3, [r7, #4]
 1340 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1341 0022 07E0     		b	.L57
 1342              	.L58:
 669:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 670:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the selected I2C PEC transmission */
 671:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_PEC_Reset;
 1343              		.loc 1 671 0
 1344 0024 7B68     		ldr	r3, [r7, #4]
 1345 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1346 0028 9BB2     		uxth	r3, r3
 1347 002a 23F48053 		bic	r3, r3, #4096
 1348 002e 9AB2     		uxth	r2, r3
 1349 0030 7B68     		ldr	r3, [r7, #4]
 1350 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1351              	.L57:
 672:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 673:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1352              		.loc 1 673 0
 1353 0034 07F10C07 		add	r7, r7, #12
 1354 0038 BD46     		mov	sp, r7
 1355 003a 80BC     		pop	{r7}
 1356 003c 7047     		bx	lr
 1357              		.cfi_endproc
 1358              	.LFE49:
 1360 003e 00BF     		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 1361              		.align	2
 1362              		.global	I2C_PECPositionConfig
 1363              		.thumb
 1364              		.thumb_func
 1366              	I2C_PECPositionConfig:
 1367              	.LFB50:
 674:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 675:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 676:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Selects the specified I2C PEC position.
 677:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 678:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_PECPosition: specifies the PEC position. 
 679:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
 680:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 681:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_PECPosition_Current: indicates that current byte is PEC
 682:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *       
 683:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 684:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 685:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          is intended to used in I2C mode.
 686:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *               
 687:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 688:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 689:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition) {
 1368              		.loc 1 689 0
 1369              		.cfi_startproc
 1370              		@ args = 0, pretend = 0, frame = 8
 1371              		@ frame_needed = 1, uses_anonymous_args = 0
 1372              		@ link register save eliminated.
 1373 0000 80B4     		push	{r7}
 1374              	.LCFI63:
 1375              		.cfi_def_cfa_offset 4
 1376              		.cfi_offset 7, -4
 1377 0002 83B0     		sub	sp, sp, #12
 1378              	.LCFI64:
 1379              		.cfi_def_cfa_offset 16
 1380 0004 00AF     		add	r7, sp, #0
 1381              	.LCFI65:
 1382              		.cfi_def_cfa_register 7
 1383 0006 7860     		str	r0, [r7, #4]
 1384 0008 0B46     		mov	r3, r1
 1385 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 690:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 691:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 692:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (I2C_PECPosition == I2C_PECPosition_Next ) {
 1386              		.loc 1 692 0
 1387 000c 7B88     		ldrh	r3, [r7, #2]
 1388 000e B3F5006F 		cmp	r3, #2048
 1389 0012 08D1     		bne	.L61
 693:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Next byte in shift register is PEC */
 694:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= I2C_PECPosition_Next;
 1390              		.loc 1 694 0
 1391 0014 7B68     		ldr	r3, [r7, #4]
 1392 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1393 0018 9BB2     		uxth	r3, r3
 1394 001a 43F40063 		orr	r3, r3, #2048
 1395 001e 9AB2     		uxth	r2, r3
 1396 0020 7B68     		ldr	r3, [r7, #4]
 1397 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1398 0024 07E0     		b	.L60
 1399              	.L61:
 695:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 696:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Current byte in shift register is PEC */
 697:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= I2C_PECPosition_Current;
 1400              		.loc 1 697 0
 1401 0026 7B68     		ldr	r3, [r7, #4]
 1402 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1403 002a 9BB2     		uxth	r3, r3
 1404 002c 23F40063 		bic	r3, r3, #2048
 1405 0030 9AB2     		uxth	r2, r3
 1406 0032 7B68     		ldr	r3, [r7, #4]
 1407 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1408              	.L60:
 698:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 699:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1409              		.loc 1 699 0
 1410 0036 07F10C07 		add	r7, r7, #12
 1411 003a BD46     		mov	sp, r7
 1412 003c 80BC     		pop	{r7}
 1413 003e 7047     		bx	lr
 1414              		.cfi_endproc
 1415              	.LFE50:
 1417              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 1418              		.align	2
 1419              		.global	I2C_CalculatePEC
 1420              		.thumb
 1421              		.thumb_func
 1423              	I2C_CalculatePEC:
 1424              	.LFB51:
 700:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 701:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 702:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 703:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 704:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2Cx PEC value calculation.
 705:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 706:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 707:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 708:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 1425              		.loc 1 708 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 8
 1428              		@ frame_needed = 1, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 1430 0000 80B4     		push	{r7}
 1431              	.LCFI66:
 1432              		.cfi_def_cfa_offset 4
 1433              		.cfi_offset 7, -4
 1434 0002 83B0     		sub	sp, sp, #12
 1435              	.LCFI67:
 1436              		.cfi_def_cfa_offset 16
 1437 0004 00AF     		add	r7, sp, #0
 1438              	.LCFI68:
 1439              		.cfi_def_cfa_register 7
 1440 0006 7860     		str	r0, [r7, #4]
 1441 0008 0B46     		mov	r3, r1
 1442 000a FB70     		strb	r3, [r7, #3]
 709:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 710:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 711:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 1443              		.loc 1 711 0
 1444 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1445 000e 002B     		cmp	r3, #0
 1446 0010 08D0     		beq	.L64
 712:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the selected I2C PEC calculation */
 713:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_ENPEC_Set;
 1447              		.loc 1 713 0
 1448 0012 7B68     		ldr	r3, [r7, #4]
 1449 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1450 0016 9BB2     		uxth	r3, r3
 1451 0018 43F02003 		orr	r3, r3, #32
 1452 001c 9AB2     		uxth	r2, r3
 1453 001e 7B68     		ldr	r3, [r7, #4]
 1454 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1455 0022 07E0     		b	.L63
 1456              	.L64:
 714:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 715:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the selected I2C PEC calculation */
 716:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_ENPEC_Reset;
 1457              		.loc 1 716 0
 1458 0024 7B68     		ldr	r3, [r7, #4]
 1459 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1460 0028 9BB2     		uxth	r3, r3
 1461 002a 23F02003 		bic	r3, r3, #32
 1462 002e 9AB2     		uxth	r2, r3
 1463 0030 7B68     		ldr	r3, [r7, #4]
 1464 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1465              	.L63:
 717:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 718:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1466              		.loc 1 718 0
 1467 0034 07F10C07 		add	r7, r7, #12
 1468 0038 BD46     		mov	sp, r7
 1469 003a 80BC     		pop	{r7}
 1470 003c 7047     		bx	lr
 1471              		.cfi_endproc
 1472              	.LFE51:
 1474 003e 00BF     		.section	.text.I2C_GetPEC,"ax",%progbits
 1475              		.align	2
 1476              		.global	I2C_GetPEC
 1477              		.thumb
 1478              		.thumb_func
 1480              	I2C_GetPEC:
 1481              	.LFB52:
 719:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 720:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 721:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Returns the PEC value for the specified I2C.
 722:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 723:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval The PEC value.
 724:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 725:../StdPeripheralDriver/src/stm32f10x_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx) {
 1482              		.loc 1 725 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 8
 1485              		@ frame_needed = 1, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 1487 0000 80B4     		push	{r7}
 1488              	.LCFI69:
 1489              		.cfi_def_cfa_offset 4
 1490              		.cfi_offset 7, -4
 1491 0002 83B0     		sub	sp, sp, #12
 1492              	.LCFI70:
 1493              		.cfi_def_cfa_offset 16
 1494 0004 00AF     		add	r7, sp, #0
 1495              	.LCFI71:
 1496              		.cfi_def_cfa_register 7
 1497 0006 7860     		str	r0, [r7, #4]
 726:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 727:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 728:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Return the selected I2C PEC value */
 729:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	return ((I2Cx->SR2) >> 8);
 1498              		.loc 1 729 0
 1499 0008 7B68     		ldr	r3, [r7, #4]
 1500 000a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1501 000c 9BB2     		uxth	r3, r3
 1502 000e 4FEA1323 		lsr	r3, r3, #8
 1503 0012 9BB2     		uxth	r3, r3
 1504 0014 DBB2     		uxtb	r3, r3
 730:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1505              		.loc 1 730 0
 1506 0016 1846     		mov	r0, r3
 1507 0018 07F10C07 		add	r7, r7, #12
 1508 001c BD46     		mov	sp, r7
 1509 001e 80BC     		pop	{r7}
 1510 0020 7047     		bx	lr
 1511              		.cfi_endproc
 1512              	.LFE52:
 1514 0022 00BF     		.section	.text.I2C_ARPCmd,"ax",%progbits
 1515              		.align	2
 1516              		.global	I2C_ARPCmd
 1517              		.thumb
 1518              		.thumb_func
 1520              	I2C_ARPCmd:
 1521              	.LFB53:
 731:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 732:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 733:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C ARP.
 734:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 735:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2Cx ARP. 
 736:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 737:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 738:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 739:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 1522              		.loc 1 739 0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 8
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526              		@ link register save eliminated.
 1527 0000 80B4     		push	{r7}
 1528              	.LCFI72:
 1529              		.cfi_def_cfa_offset 4
 1530              		.cfi_offset 7, -4
 1531 0002 83B0     		sub	sp, sp, #12
 1532              	.LCFI73:
 1533              		.cfi_def_cfa_offset 16
 1534 0004 00AF     		add	r7, sp, #0
 1535              	.LCFI74:
 1536              		.cfi_def_cfa_register 7
 1537 0006 7860     		str	r0, [r7, #4]
 1538 0008 0B46     		mov	r3, r1
 1539 000a FB70     		strb	r3, [r7, #3]
 740:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 741:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 742:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState != DISABLE) {
 1540              		.loc 1 742 0
 1541 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1542 000e 002B     		cmp	r3, #0
 1543 0010 08D0     		beq	.L69
 743:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the selected I2C ARP */
 744:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_ENARP_Set;
 1544              		.loc 1 744 0
 1545 0012 7B68     		ldr	r3, [r7, #4]
 1546 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1547 0016 9BB2     		uxth	r3, r3
 1548 0018 43F01003 		orr	r3, r3, #16
 1549 001c 9AB2     		uxth	r2, r3
 1550 001e 7B68     		ldr	r3, [r7, #4]
 1551 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1552 0022 07E0     		b	.L68
 1553              	.L69:
 745:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 746:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the selected I2C ARP */
 747:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_ENARP_Reset;
 1554              		.loc 1 747 0
 1555 0024 7B68     		ldr	r3, [r7, #4]
 1556 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1557 0028 9BB2     		uxth	r3, r3
 1558 002a 23F01003 		bic	r3, r3, #16
 1559 002e 9AB2     		uxth	r2, r3
 1560 0030 7B68     		ldr	r3, [r7, #4]
 1561 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1562              	.L68:
 748:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 749:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1563              		.loc 1 749 0
 1564 0034 07F10C07 		add	r7, r7, #12
 1565 0038 BD46     		mov	sp, r7
 1566 003a 80BC     		pop	{r7}
 1567 003c 7047     		bx	lr
 1568              		.cfi_endproc
 1569              	.LFE53:
 1571 003e 00BF     		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 1572              		.align	2
 1573              		.global	I2C_StretchClockCmd
 1574              		.thumb
 1575              		.thumb_func
 1577              	I2C_StretchClockCmd:
 1578              	.LFB54:
 750:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 752:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Enables or disables the specified I2C Clock stretching.
 753:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 754:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  NewState: new state of the I2Cx Clock stretching.
 755:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be: ENABLE or DISABLE.
 756:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 757:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 758:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState) {
 1579              		.loc 1 758 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 8
 1582              		@ frame_needed = 1, uses_anonymous_args = 0
 1583              		@ link register save eliminated.
 1584 0000 80B4     		push	{r7}
 1585              	.LCFI75:
 1586              		.cfi_def_cfa_offset 4
 1587              		.cfi_offset 7, -4
 1588 0002 83B0     		sub	sp, sp, #12
 1589              	.LCFI76:
 1590              		.cfi_def_cfa_offset 16
 1591 0004 00AF     		add	r7, sp, #0
 1592              	.LCFI77:
 1593              		.cfi_def_cfa_register 7
 1594 0006 7860     		str	r0, [r7, #4]
 1595 0008 0B46     		mov	r3, r1
 1596 000a FB70     		strb	r3, [r7, #3]
 759:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 760:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_FUNCTIONAL_STATE(NewState));
 761:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (NewState == DISABLE) {
 1597              		.loc 1 761 0
 1598 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1599 000e 002B     		cmp	r3, #0
 1600 0010 08D1     		bne	.L72
 762:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Enable the selected I2C Clock stretching */
 763:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 1601              		.loc 1 763 0
 1602 0012 7B68     		ldr	r3, [r7, #4]
 1603 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1604 0016 9BB2     		uxth	r3, r3
 1605 0018 43F08003 		orr	r3, r3, #128
 1606 001c 9AB2     		uxth	r2, r3
 1607 001e 7B68     		ldr	r3, [r7, #4]
 1608 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1609 0022 07E0     		b	.L71
 1610              	.L72:
 764:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 765:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Disable the selected I2C Clock stretching */
 766:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 1611              		.loc 1 766 0
 1612 0024 7B68     		ldr	r3, [r7, #4]
 1613 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1614 0028 9BB2     		uxth	r3, r3
 1615 002a 23F08003 		bic	r3, r3, #128
 1616 002e 9AB2     		uxth	r2, r3
 1617 0030 7B68     		ldr	r3, [r7, #4]
 1618 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1619              	.L71:
 767:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 768:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1620              		.loc 1 768 0
 1621 0034 07F10C07 		add	r7, r7, #12
 1622 0038 BD46     		mov	sp, r7
 1623 003a 80BC     		pop	{r7}
 1624 003c 7047     		bx	lr
 1625              		.cfi_endproc
 1626              	.LFE54:
 1628 003e 00BF     		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 1629              		.align	2
 1630              		.global	I2C_FastModeDutyCycleConfig
 1631              		.thumb
 1632              		.thumb_func
 1634              	I2C_FastModeDutyCycleConfig:
 1635              	.LFB55:
 769:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 770:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 771:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Selects the specified I2C fast mode duty cycle.
 772:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 773:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 774:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
 775:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 776:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 777:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
 778:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 779:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle) {
 1636              		.loc 1 779 0
 1637              		.cfi_startproc
 1638              		@ args = 0, pretend = 0, frame = 8
 1639              		@ frame_needed = 1, uses_anonymous_args = 0
 1640              		@ link register save eliminated.
 1641 0000 80B4     		push	{r7}
 1642              	.LCFI78:
 1643              		.cfi_def_cfa_offset 4
 1644              		.cfi_offset 7, -4
 1645 0002 83B0     		sub	sp, sp, #12
 1646              	.LCFI79:
 1647              		.cfi_def_cfa_offset 16
 1648 0004 00AF     		add	r7, sp, #0
 1649              	.LCFI80:
 1650              		.cfi_def_cfa_register 7
 1651 0006 7860     		str	r0, [r7, #4]
 1652 0008 0B46     		mov	r3, r1
 1653 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 780:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 781:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 782:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (I2C_DutyCycle != I2C_DutyCycle_16_9 ) {
 1654              		.loc 1 782 0
 1655 000c 7B88     		ldrh	r3, [r7, #2]
 1656 000e B3F5804F 		cmp	r3, #16384
 1657 0012 08D0     		beq	.L75
 783:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* I2C fast mode Tlow/Thigh=2 */
 784:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CCR &= I2C_DutyCycle_2;
 1658              		.loc 1 784 0
 1659 0014 7B68     		ldr	r3, [r7, #4]
 1660 0016 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1661 0018 9BB2     		uxth	r3, r3
 1662 001a 23F48043 		bic	r3, r3, #16384
 1663 001e 9AB2     		uxth	r2, r3
 1664 0020 7B68     		ldr	r3, [r7, #4]
 1665 0022 9A83     		strh	r2, [r3, #28]	@ movhi
 1666 0024 07E0     		b	.L74
 1667              	.L75:
 785:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 786:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* I2C fast mode Tlow/Thigh=16/9 */
 787:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2Cx->CCR |= I2C_DutyCycle_16_9;
 1668              		.loc 1 787 0
 1669 0026 7B68     		ldr	r3, [r7, #4]
 1670 0028 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1671 002a 9BB2     		uxth	r3, r3
 1672 002c 43F48043 		orr	r3, r3, #16384
 1673 0030 9AB2     		uxth	r2, r3
 1674 0032 7B68     		ldr	r3, [r7, #4]
 1675 0034 9A83     		strh	r2, [r3, #28]	@ movhi
 1676              	.L74:
 788:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 789:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1677              		.loc 1 789 0
 1678 0036 07F10C07 		add	r7, r7, #12
 1679 003a BD46     		mov	sp, r7
 1680 003c 80BC     		pop	{r7}
 1681 003e 7047     		bx	lr
 1682              		.cfi_endproc
 1683              	.LFE55:
 1685              		.section	.text.I2C_CheckEvent,"ax",%progbits
 1686              		.align	2
 1687              		.global	I2C_CheckEvent
 1688              		.thumb
 1689              		.thumb_func
 1691              	I2C_CheckEvent:
 1692              	.LFB56:
 790:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 791:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 792:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief
 793:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  ****************************************************************************************
 794:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *
 795:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *                         I2C State Monitoring Functions
 796:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *                       
 797:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  ****************************************************************************************   
 798:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * This I2C driver provides three different ways for I2C state monitoring
 799:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  depending on the application requirements and constraints:
 800:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        
 801:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  
 802:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * 1) Basic state monitoring:
 803:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    Using I2C_CheckEvent() function:
 804:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    It compares the status registers (SR1 and SR2) content to a given event
 805:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    (can be the combination of one or more flags).
 806:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    It returns SUCCESS if the current status includes the given flags 
 807:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    and returns ERROR if one or more flags are missing in the current status.
 808:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    - When to use:
 809:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *      - This function is suitable for most applications as well as for startup 
 810:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *      activity since the events are fully described in the product reference manual 
 811:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *      (RM0008).
 812:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *      - It is also suitable for users who need to define their own events.
 813:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    - Limitations:
 814:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *      - If an error occurs (ie. error flags are set besides to the monitored flags),
 815:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        the I2C_CheckEvent() function may return SUCCESS despite the communication
 816:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        hold or corrupted real state. 
 817:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        In this case, it is advised to use error interrupts to monitor the error
 818:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        events and handle them in the interrupt IRQ handler.
 819:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        
 820:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        @note 
 821:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        For error management, it is advised to use the following functions:
 822:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 823:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 824:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *            Where x is the peripheral instance (I2C1, I2C2 ...)
 825:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          - I2C_GetFlagStatus() or I2C_GetITStatus() to be called into I2Cx_ER_IRQHandler() 
 826:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *            in order to determine which error occured.
 827:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd()
 828:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *            and/or I2C_GenerateStop() in order to clear the error flag and source,
 829:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *            and return to correct communication status.
 830:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *            
 831:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *
 832:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  2) Advanced state monitoring:
 833:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     Using the function I2C_GetLastEvent() which returns the image of both status 
 834:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 835:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     by 16 bits and concatenated to Status Register 1).
 836:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     - When to use:
 837:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *       - This function is suitable for the same applications above but it allows to
 838:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         overcome the mentioned limitation of I2C_GetFlagStatus() function.
 839:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         The returned value could be compared to events already defined in the 
 840:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         library (stm32f10x_i2c.h) or to custom values defined by user.
 841:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *       - This function is suitable when multiple flags are monitored at the same time.
 842:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *       - At the opposite of I2C_CheckEvent() function, this function allows user to
 843:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         choose when an event is accepted (when all events flags are set and no 
 844:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         other flags are set or just when the needed flags are set like 
 845:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         I2C_CheckEvent() function).
 846:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     - Limitations:
 847:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *       - User may need to define his own events.
 848:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *       - Same remark concerning the error management is applicable for this 
 849:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         function if user decides to check only regular communication flags (and 
 850:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *         ignores error flags).
 851:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     
 852:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *
 853:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  3) Flag-based state monitoring:
 854:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     Using the function I2C_GetFlagStatus() which simply returns the status of 
 855:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     one single flag (ie. I2C_FLAG_RXNE ...). 
 856:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     - When to use:
 857:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        - This function could be used for specific applications or in debug phase.
 858:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        - It is suitable when only one flag checking is needed (most I2C events 
 859:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          are monitored through multiple flags).
 860:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     - Limitations: 
 861:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        - When calling this function, the Status register is accessed. Some flags are
 862:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          cleared when the status register is accessed. So checking the status
 863:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          of one Flag, may clear other ones.
 864:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *        - Function may need to be called twice or more in order to monitor one 
 865:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *          single event.
 866:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *
 867:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  For detailed description of Events, please refer to section I2C_Events in 
 868:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  stm32f10x_i2c.h file.
 869:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  
 870:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 871:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 872:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 873:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * 
 874:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  1) Basic state monitoring
 875:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *******************************************************************************
 876:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 877:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 878:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 879:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Checks whether the last I2Cx Event is equal to the one passed
 880:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   as parameter.
 881:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 882:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_EVENT: specifies the event to be checked. 
 883:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
 884:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED           : EV1
 885:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED              : EV1
 886:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED     : EV1
 887:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED        : EV1
 888:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED            : EV1
 889:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_BYTE_RECEIVED                         : EV2
 890:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF)      : EV2
 891:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL)    : EV2
 892:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED                      : EV3
 893:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF)   : EV3
 894:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL) : EV3
 895:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_ACK_FAILURE                           : EV3_2
 896:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_SLAVE_STOP_DETECTED                         : EV4
 897:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_MASTER_MODE_SELECT                          : EV5
 898:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED            : EV6     
 899:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED               : EV6
 900:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_MASTER_BYTE_RECEIVED                        : EV7
 901:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING                    : EV8
 902:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED                     : EV8_2
 903:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_EVENT_MASTER_MODE_ADDRESS10                       : EV9
 904:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     
 905:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @note: For detailed description of Events, please refer to section 
 906:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    I2C_Events in stm32f10x_i2c.h file.
 907:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    
 908:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval An ErrorStatus enumeration value:
 909:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * - SUCCESS: Last event is equal to the I2C_EVENT
 910:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * - ERROR: Last event is different from the I2C_EVENT
 911:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 912:../StdPeripheralDriver/src/stm32f10x_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT) {
 1693              		.loc 1 912 0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 24
 1696              		@ frame_needed = 1, uses_anonymous_args = 0
 1697              		@ link register save eliminated.
 1698 0000 80B4     		push	{r7}
 1699              	.LCFI81:
 1700              		.cfi_def_cfa_offset 4
 1701              		.cfi_offset 7, -4
 1702 0002 87B0     		sub	sp, sp, #28
 1703              	.LCFI82:
 1704              		.cfi_def_cfa_offset 32
 1705 0004 00AF     		add	r7, sp, #0
 1706              	.LCFI83:
 1707              		.cfi_def_cfa_register 7
 1708 0006 7860     		str	r0, [r7, #4]
 1709 0008 3960     		str	r1, [r7, #0]
 913:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t lastevent = 0;
 1710              		.loc 1 913 0
 1711 000a 4FF00003 		mov	r3, #0
 1712 000e 3B61     		str	r3, [r7, #16]
 914:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t flag1 = 0, flag2 = 0;
 1713              		.loc 1 914 0
 1714 0010 4FF00003 		mov	r3, #0
 1715 0014 FB60     		str	r3, [r7, #12]
 1716 0016 4FF00003 		mov	r3, #0
 1717 001a BB60     		str	r3, [r7, #8]
 915:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	ErrorStatus status = ERROR;
 1718              		.loc 1 915 0
 1719 001c 4FF00003 		mov	r3, #0
 1720 0020 FB75     		strb	r3, [r7, #23]
 916:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 917:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 918:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_EVENT(I2C_EVENT));
 919:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 920:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Read the I2Cx status register */
 921:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flag1 = I2Cx->SR1;
 1721              		.loc 1 921 0
 1722 0022 7B68     		ldr	r3, [r7, #4]
 1723 0024 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1724 0026 9BB2     		uxth	r3, r3
 1725 0028 FB60     		str	r3, [r7, #12]
 922:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flag2 = I2Cx->SR2;
 1726              		.loc 1 922 0
 1727 002a 7B68     		ldr	r3, [r7, #4]
 1728 002c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1729 002e 9BB2     		uxth	r3, r3
 1730 0030 BB60     		str	r3, [r7, #8]
 923:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flag2 = flag2 << 16;
 1731              		.loc 1 923 0
 1732 0032 BB68     		ldr	r3, [r7, #8]
 1733 0034 4FEA0343 		lsl	r3, r3, #16
 1734 0038 BB60     		str	r3, [r7, #8]
 924:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 925:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the last event value from I2C status register */
 926:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	lastevent = (flag1 | flag2) & FLAG_Mask;
 1735              		.loc 1 926 0
 1736 003a FA68     		ldr	r2, [r7, #12]
 1737 003c BB68     		ldr	r3, [r7, #8]
 1738 003e 1343     		orrs	r3, r3, r2
 1739 0040 23F07F43 		bic	r3, r3, #-16777216
 1740 0044 3B61     		str	r3, [r7, #16]
 927:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 928:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check whether the last event contains the I2C_EVENT */
 929:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if ((lastevent & I2C_EVENT) == I2C_EVENT) {
 1741              		.loc 1 929 0
 1742 0046 3A69     		ldr	r2, [r7, #16]
 1743 0048 3B68     		ldr	r3, [r7, #0]
 1744 004a 1A40     		ands	r2, r2, r3
 1745 004c 3B68     		ldr	r3, [r7, #0]
 1746 004e 9A42     		cmp	r2, r3
 1747 0050 03D1     		bne	.L78
 930:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* SUCCESS: last event is equal to I2C_EVENT */
 931:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		status = SUCCESS;
 1748              		.loc 1 931 0
 1749 0052 4FF00103 		mov	r3, #1
 1750 0056 FB75     		strb	r3, [r7, #23]
 1751 0058 02E0     		b	.L79
 1752              	.L78:
 932:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
 933:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* ERROR: last event is different from I2C_EVENT */
 934:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		status = ERROR;
 1753              		.loc 1 934 0
 1754 005a 4FF00003 		mov	r3, #0
 1755 005e FB75     		strb	r3, [r7, #23]
 1756              	.L79:
 935:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
 936:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Return status */
 937:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	return status;
 1757              		.loc 1 937 0
 1758 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 938:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1759              		.loc 1 938 0
 1760 0062 1846     		mov	r0, r3
 1761 0064 07F11C07 		add	r7, r7, #28
 1762 0068 BD46     		mov	sp, r7
 1763 006a 80BC     		pop	{r7}
 1764 006c 7047     		bx	lr
 1765              		.cfi_endproc
 1766              	.LFE56:
 1768 006e 00BF     		.section	.text.I2C_GetLastEvent,"ax",%progbits
 1769              		.align	2
 1770              		.global	I2C_GetLastEvent
 1771              		.thumb
 1772              		.thumb_func
 1774              	I2C_GetLastEvent:
 1775              	.LFB57:
 939:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 940:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 941:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * 
 942:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  2) Advanced state monitoring
 943:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *******************************************************************************
 944:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 945:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 946:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 947:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Returns the last I2Cx Event.
 948:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 949:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     
 950:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @note: For detailed description of Events, please refer to section 
 951:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    I2C_Events in stm32f10x_i2c.h file.
 952:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *    
 953:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval The last event
 954:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 955:../StdPeripheralDriver/src/stm32f10x_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx) {
 1776              		.loc 1 955 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 24
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780              		@ link register save eliminated.
 1781 0000 80B4     		push	{r7}
 1782              	.LCFI84:
 1783              		.cfi_def_cfa_offset 4
 1784              		.cfi_offset 7, -4
 1785 0002 87B0     		sub	sp, sp, #28
 1786              	.LCFI85:
 1787              		.cfi_def_cfa_offset 32
 1788 0004 00AF     		add	r7, sp, #0
 1789              	.LCFI86:
 1790              		.cfi_def_cfa_register 7
 1791 0006 7860     		str	r0, [r7, #4]
 956:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t lastevent = 0;
 1792              		.loc 1 956 0
 1793 0008 4FF00003 		mov	r3, #0
 1794 000c 7B61     		str	r3, [r7, #20]
 957:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t flag1 = 0, flag2 = 0;
 1795              		.loc 1 957 0
 1796 000e 4FF00003 		mov	r3, #0
 1797 0012 3B61     		str	r3, [r7, #16]
 1798 0014 4FF00003 		mov	r3, #0
 1799 0018 FB60     		str	r3, [r7, #12]
 958:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 959:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
 960:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 961:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 962:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Read the I2Cx status register */
 963:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flag1 = I2Cx->SR1;
 1800              		.loc 1 963 0
 1801 001a 7B68     		ldr	r3, [r7, #4]
 1802 001c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1803 001e 9BB2     		uxth	r3, r3
 1804 0020 3B61     		str	r3, [r7, #16]
 964:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flag2 = I2Cx->SR2;
 1805              		.loc 1 964 0
 1806 0022 7B68     		ldr	r3, [r7, #4]
 1807 0024 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1808 0026 9BB2     		uxth	r3, r3
 1809 0028 FB60     		str	r3, [r7, #12]
 965:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flag2 = flag2 << 16;
 1810              		.loc 1 965 0
 1811 002a FB68     		ldr	r3, [r7, #12]
 1812 002c 4FEA0343 		lsl	r3, r3, #16
 1813 0030 FB60     		str	r3, [r7, #12]
 966:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 967:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the last event value from I2C status register */
 968:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	lastevent = (flag1 | flag2) & FLAG_Mask;
 1814              		.loc 1 968 0
 1815 0032 3A69     		ldr	r2, [r7, #16]
 1816 0034 FB68     		ldr	r3, [r7, #12]
 1817 0036 1343     		orrs	r3, r3, r2
 1818 0038 23F07F43 		bic	r3, r3, #-16777216
 1819 003c 7B61     		str	r3, [r7, #20]
 969:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 970:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Return status */
 971:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	return lastevent;
 1820              		.loc 1 971 0
 1821 003e 7B69     		ldr	r3, [r7, #20]
 972:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1822              		.loc 1 972 0
 1823 0040 1846     		mov	r0, r3
 1824 0042 07F11C07 		add	r7, r7, #28
 1825 0046 BD46     		mov	sp, r7
 1826 0048 80BC     		pop	{r7}
 1827 004a 7047     		bx	lr
 1828              		.cfi_endproc
 1829              	.LFE57:
 1831              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1832              		.align	2
 1833              		.global	I2C_GetFlagStatus
 1834              		.thumb
 1835              		.thumb_func
 1837              	I2C_GetFlagStatus:
 1838              	.LFB58:
 973:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 974:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 975:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * 
 976:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *  3) Flag-based state monitoring
 977:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *******************************************************************************
 978:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
 979:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
 980:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
 981:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Checks whether the specified I2C flag is set or not.
 982:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 983:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_FLAG: specifies the flag to check. 
 984:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
 985:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
 986:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
 987:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
 988:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
 989:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_TRA: Transmitter/Receiver flag
 990:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_BUSY: Bus busy flag
 991:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_MSL: Master/Slave flag
 992:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_SMBALERT: SMBus Alert flag
 993:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
 994:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_PECERR: PEC error in reception flag
 995:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
 996:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_AF: Acknowledge failure flag
 997:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
 998:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_BERR: Bus error flag
 999:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1000:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1001:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1002:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1003:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_BTF: Byte transfer finished flag
1004:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1005:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   Address matched flag (Slave mode)"ENDA"
1006:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
1007:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval The new state of I2C_FLAG (SET or RESET).
1008:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
1009:../StdPeripheralDriver/src/stm32f10x_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG) {
 1839              		.loc 1 1009 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 24
 1842              		@ frame_needed = 1, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 1844 0000 80B4     		push	{r7}
 1845              	.LCFI87:
 1846              		.cfi_def_cfa_offset 4
 1847              		.cfi_offset 7, -4
 1848 0002 87B0     		sub	sp, sp, #28
 1849              	.LCFI88:
 1850              		.cfi_def_cfa_offset 32
 1851 0004 00AF     		add	r7, sp, #0
 1852              	.LCFI89:
 1853              		.cfi_def_cfa_register 7
 1854 0006 7860     		str	r0, [r7, #4]
 1855 0008 3960     		str	r1, [r7, #0]
1010:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	FlagStatus bitstatus = RESET;
 1856              		.loc 1 1010 0
 1857 000a 4FF00003 		mov	r3, #0
 1858 000e FB75     		strb	r3, [r7, #23]
1011:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	__IO uint32_t i2creg = 0, i2cxbase = 0;
 1859              		.loc 1 1011 0
 1860 0010 4FF00003 		mov	r3, #0
 1861 0014 3B61     		str	r3, [r7, #16]
 1862 0016 4FF00003 		mov	r3, #0
 1863 001a FB60     		str	r3, [r7, #12]
1012:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1013:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
1014:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1015:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1016:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the I2Cx peripheral base address */
1017:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	i2cxbase = (uint32_t) I2Cx;
 1864              		.loc 1 1017 0
 1865 001c 7B68     		ldr	r3, [r7, #4]
 1866 001e FB60     		str	r3, [r7, #12]
1018:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1019:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Read flag register index */
1020:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	i2creg = I2C_FLAG >> 28;
 1867              		.loc 1 1020 0
 1868 0020 3B68     		ldr	r3, [r7, #0]
 1869 0022 4FEA1373 		lsr	r3, r3, #28
 1870 0026 3B61     		str	r3, [r7, #16]
1021:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1022:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get bit[23:0] of the flag */
1023:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_FLAG &= FLAG_Mask;
 1871              		.loc 1 1023 0
 1872 0028 3B68     		ldr	r3, [r7, #0]
 1873 002a 23F07F43 		bic	r3, r3, #-16777216
 1874 002e 3B60     		str	r3, [r7, #0]
1024:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1025:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (i2creg != 0) {
 1875              		.loc 1 1025 0
 1876 0030 3B69     		ldr	r3, [r7, #16]
 1877 0032 002B     		cmp	r3, #0
 1878 0034 04D0     		beq	.L84
1026:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Get the I2Cx SR1 register address */
1027:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		i2cxbase += 0x14;
 1879              		.loc 1 1027 0
 1880 0036 FB68     		ldr	r3, [r7, #12]
 1881 0038 03F11403 		add	r3, r3, #20
 1882 003c FB60     		str	r3, [r7, #12]
 1883 003e 07E0     		b	.L85
 1884              	.L84:
1028:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
1029:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Flag in I2Cx SR2 Register */
1030:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		I2C_FLAG = (uint32_t) (I2C_FLAG >> 16);
 1885              		.loc 1 1030 0
 1886 0040 3B68     		ldr	r3, [r7, #0]
 1887 0042 4FEA1343 		lsr	r3, r3, #16
 1888 0046 3B60     		str	r3, [r7, #0]
1031:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* Get the I2Cx SR2 register address */
1032:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		i2cxbase += 0x18;
 1889              		.loc 1 1032 0
 1890 0048 FB68     		ldr	r3, [r7, #12]
 1891 004a 03F11803 		add	r3, r3, #24
 1892 004e FB60     		str	r3, [r7, #12]
 1893              	.L85:
1033:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
1034:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1035:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (((*(__IO uint32_t *) i2cxbase) & I2C_FLAG) != (uint32_t) RESET) {
 1894              		.loc 1 1035 0
 1895 0050 FB68     		ldr	r3, [r7, #12]
 1896 0052 1A68     		ldr	r2, [r3, #0]
 1897 0054 3B68     		ldr	r3, [r7, #0]
 1898 0056 1340     		ands	r3, r3, r2
 1899 0058 002B     		cmp	r3, #0
 1900 005a 03D0     		beq	.L86
1036:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* I2C_FLAG is set */
1037:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		bitstatus = SET;
 1901              		.loc 1 1037 0
 1902 005c 4FF00103 		mov	r3, #1
 1903 0060 FB75     		strb	r3, [r7, #23]
 1904 0062 02E0     		b	.L87
 1905              	.L86:
1038:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
1039:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* I2C_FLAG is reset */
1040:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		bitstatus = RESET;
 1906              		.loc 1 1040 0
 1907 0064 4FF00003 		mov	r3, #0
 1908 0068 FB75     		strb	r3, [r7, #23]
 1909              	.L87:
1041:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
1042:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1043:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Return the I2C_FLAG status */
1044:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	return bitstatus;
 1910              		.loc 1 1044 0
 1911 006a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1045:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1912              		.loc 1 1045 0
 1913 006c 1846     		mov	r0, r3
 1914 006e 07F11C07 		add	r7, r7, #28
 1915 0072 BD46     		mov	sp, r7
 1916 0074 80BC     		pop	{r7}
 1917 0076 7047     		bx	lr
 1918              		.cfi_endproc
 1919              	.LFE58:
 1921              		.section	.text.I2C_ClearFlag,"ax",%progbits
 1922              		.align	2
 1923              		.global	I2C_ClearFlag
 1924              		.thumb
 1925              		.thumb_func
 1927              	I2C_ClearFlag:
 1928              	.LFB59:
1046:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1047:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
1048:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Clears the I2Cx's pending flags.
1049:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1050:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_FLAG: specifies the flag to clear. 
1051:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be any combination of the following values:
1052:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1053:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1054:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_PECERR: PEC error in reception flag
1055:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1056:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_AF: Acknowledge failure flag
1057:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1058:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_FLAG_BERR: Bus error flag
1059:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   
1060:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @note
1061:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - STOPF (STOP detection) is cleared by software sequence: a read operation 
1062:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1063:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1064:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - ADD10 (10-bit header sent) is cleared by software sequence: a read 
1065:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1066:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     second byte of the address in DR register.
1067:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1068:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1069:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     read/write to I2C_DR register (I2C_SendData()).
1070:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - ADDR (Address sent) is cleared by software sequence: a read operation to 
1071:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1072:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     I2C_SR2 register ((void)(I2Cx->SR2)).
1073:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1074:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1075:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     register  (I2C_SendData()).
1076:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
1077:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
1078:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG) {
 1929              		.loc 1 1078 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 16
 1932              		@ frame_needed = 1, uses_anonymous_args = 0
 1933              		@ link register save eliminated.
 1934 0000 80B4     		push	{r7}
 1935              	.LCFI90:
 1936              		.cfi_def_cfa_offset 4
 1937              		.cfi_offset 7, -4
 1938 0002 85B0     		sub	sp, sp, #20
 1939              	.LCFI91:
 1940              		.cfi_def_cfa_offset 24
 1941 0004 00AF     		add	r7, sp, #0
 1942              	.LCFI92:
 1943              		.cfi_def_cfa_register 7
 1944 0006 7860     		str	r0, [r7, #4]
 1945 0008 3960     		str	r1, [r7, #0]
1079:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t flagpos = 0;
 1946              		.loc 1 1079 0
 1947 000a 4FF00003 		mov	r3, #0
 1948 000e FB60     		str	r3, [r7, #12]
1080:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
1081:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1082:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the I2C flag position */
1083:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flagpos = I2C_FLAG & FLAG_Mask;
 1949              		.loc 1 1083 0
 1950 0010 3B68     		ldr	r3, [r7, #0]
 1951 0012 23F07F43 		bic	r3, r3, #-16777216
 1952 0016 FB60     		str	r3, [r7, #12]
1084:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Clear the selected I2C flag */
1085:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->SR1 = (uint16_t) ~flagpos;
 1953              		.loc 1 1085 0
 1954 0018 FB68     		ldr	r3, [r7, #12]
 1955 001a 9BB2     		uxth	r3, r3
 1956 001c 6FEA0303 		mvn	r3, r3
 1957 0020 9AB2     		uxth	r2, r3
 1958 0022 7B68     		ldr	r3, [r7, #4]
 1959 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1086:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 1960              		.loc 1 1086 0
 1961 0026 07F11407 		add	r7, r7, #20
 1962 002a BD46     		mov	sp, r7
 1963 002c 80BC     		pop	{r7}
 1964 002e 7047     		bx	lr
 1965              		.cfi_endproc
 1966              	.LFE59:
 1968              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1969              		.align	2
 1970              		.global	I2C_GetITStatus
 1971              		.thumb
 1972              		.thumb_func
 1974              	I2C_GetITStatus:
 1975              	.LFB60:
1087:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1088:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
1089:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Checks whether the specified I2C interrupt has occurred or not.
1090:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1091:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_IT: specifies the interrupt source to check. 
1092:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be one of the following values:
1093:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_SMBALERT: SMBus Alert flag
1094:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1095:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_PECERR: PEC error in reception flag
1096:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1097:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_AF: Acknowledge failure flag
1098:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1099:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_BERR: Bus error flag
1100:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1101:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1102:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1103:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1104:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_BTF: Byte transfer finished flag
1105:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1106:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *                       Address matched flag (Slave mode)"ENDAD"
1107:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_SB: Start bit flag (Master mode)
1108:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval The new state of I2C_IT (SET or RESET).
1109:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
1110:../StdPeripheralDriver/src/stm32f10x_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT) {
 1976              		.loc 1 1110 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 16
 1979              		@ frame_needed = 1, uses_anonymous_args = 0
 1980              		@ link register save eliminated.
 1981 0000 80B4     		push	{r7}
 1982              	.LCFI93:
 1983              		.cfi_def_cfa_offset 4
 1984              		.cfi_offset 7, -4
 1985 0002 85B0     		sub	sp, sp, #20
 1986              	.LCFI94:
 1987              		.cfi_def_cfa_offset 24
 1988 0004 00AF     		add	r7, sp, #0
 1989              	.LCFI95:
 1990              		.cfi_def_cfa_register 7
 1991 0006 7860     		str	r0, [r7, #4]
 1992 0008 3960     		str	r1, [r7, #0]
1111:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	ITStatus bitstatus = RESET;
 1993              		.loc 1 1111 0
 1994 000a 4FF00003 		mov	r3, #0
 1995 000e FB73     		strb	r3, [r7, #15]
1112:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t enablestatus = 0;
 1996              		.loc 1 1112 0
 1997 0010 4FF00003 		mov	r3, #0
 1998 0014 BB60     		str	r3, [r7, #8]
1113:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1114:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
1115:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_GET_IT(I2C_IT));
1116:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1117:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check if the interrupt source is enabled or not */
1118:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	enablestatus = (uint32_t) (((I2C_IT & ITEN_Mask )>> 16)&(I2Cx->CR2));
 1999              		.loc 1 1118 0
 2000 0016 3B68     		ldr	r3, [r7, #0]
 2001 0018 03F0E063 		and	r3, r3, #117440512
 2002 001c 4FEA1342 		lsr	r2, r3, #16
 2003 0020 7B68     		ldr	r3, [r7, #4]
 2004 0022 9B88     		ldrh	r3, [r3, #4]	@ movhi
 2005 0024 9BB2     		uxth	r3, r3
 2006 0026 1340     		ands	r3, r3, r2
 2007 0028 BB60     		str	r3, [r7, #8]
1119:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1120:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get bit[23:0] of the flag */
1121:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2C_IT &= FLAG_Mask;
 2008              		.loc 1 1121 0
 2009 002a 3B68     		ldr	r3, [r7, #0]
 2010 002c 23F07F43 		bic	r3, r3, #-16777216
 2011 0030 3B60     		str	r3, [r7, #0]
1122:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1123:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the status of the specified I2C flag */
1124:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	if (((I2Cx->SR1 & I2C_IT) != (uint32_t) RESET) && enablestatus) {
 2012              		.loc 1 1124 0
 2013 0032 7B68     		ldr	r3, [r7, #4]
 2014 0034 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2015 0036 9BB2     		uxth	r3, r3
 2016 0038 1A46     		mov	r2, r3
 2017 003a 3B68     		ldr	r3, [r7, #0]
 2018 003c 1340     		ands	r3, r3, r2
 2019 003e 002B     		cmp	r3, #0
 2020 0040 06D0     		beq	.L91
 2021              		.loc 1 1124 0 is_stmt 0 discriminator 1
 2022 0042 BB68     		ldr	r3, [r7, #8]
 2023 0044 002B     		cmp	r3, #0
 2024 0046 03D0     		beq	.L91
1125:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* I2C_IT is set */
1126:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		bitstatus = SET;
 2025              		.loc 1 1126 0 is_stmt 1
 2026 0048 4FF00103 		mov	r3, #1
 2027 004c FB73     		strb	r3, [r7, #15]
 2028 004e 02E0     		b	.L92
 2029              	.L91:
1127:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	} else {
1128:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		/* I2C_IT is reset */
1129:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 		bitstatus = RESET;
 2030              		.loc 1 1129 0
 2031 0050 4FF00003 		mov	r3, #0
 2032 0054 FB73     		strb	r3, [r7, #15]
 2033              	.L92:
1130:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	}
1131:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Return the I2C_IT status */
1132:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	return bitstatus;
 2034              		.loc 1 1132 0
 2035 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1133:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 2036              		.loc 1 1133 0
 2037 0058 1846     		mov	r0, r3
 2038 005a 07F11407 		add	r7, r7, #20
 2039 005e BD46     		mov	sp, r7
 2040 0060 80BC     		pop	{r7}
 2041 0062 7047     		bx	lr
 2042              		.cfi_endproc
 2043              	.LFE60:
 2045              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 2046              		.align	2
 2047              		.global	I2C_ClearITPendingBit
 2048              		.thumb
 2049              		.thumb_func
 2051              	I2C_ClearITPendingBit:
 2052              	.LFB61:
1134:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 
1135:../StdPeripheralDriver/src/stm32f10x_i2c.c **** /**
1136:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @brief  Clears the I2Cx�s interrupt pending bits.
1137:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1138:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1139:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   This parameter can be any combination of the following values:
1140:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1141:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1142:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_PECERR: PEC error in reception  interrupt
1143:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1144:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_AF: Acknowledge failure interrupt
1145:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1146:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     @arg I2C_IT_BERR: Bus error interrupt
1147:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   
1148:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @note
1149:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - STOPF (STOP detection) is cleared by software sequence: a read operation 
1150:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1151:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1152:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - ADD10 (10-bit header sent) is cleared by software sequence: a read 
1153:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1154:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     byte of the address in I2C_DR register.
1155:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1156:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1157:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     read/write to I2C_DR register (I2C_SendData()).
1158:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - ADDR (Address sent) is cleared by software sequence: a read operation to 
1159:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1160:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     I2C_SR2 register ((void)(I2Cx->SR2)).
1161:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *   - SB (Start Bit) is cleared by software sequence: a read operation to 
1162:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1163:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  *     I2C_DR register (I2C_SendData()).
1164:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  * @retval None
1165:../StdPeripheralDriver/src/stm32f10x_i2c.c ****  */
1166:../StdPeripheralDriver/src/stm32f10x_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT) {
 2053              		.loc 1 1166 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 16
 2056              		@ frame_needed = 1, uses_anonymous_args = 0
 2057              		@ link register save eliminated.
 2058 0000 80B4     		push	{r7}
 2059              	.LCFI96:
 2060              		.cfi_def_cfa_offset 4
 2061              		.cfi_offset 7, -4
 2062 0002 85B0     		sub	sp, sp, #20
 2063              	.LCFI97:
 2064              		.cfi_def_cfa_offset 24
 2065 0004 00AF     		add	r7, sp, #0
 2066              	.LCFI98:
 2067              		.cfi_def_cfa_register 7
 2068 0006 7860     		str	r0, [r7, #4]
 2069 0008 3960     		str	r1, [r7, #0]
1167:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	uint32_t flagpos = 0;
 2070              		.loc 1 1167 0
 2071 000a 4FF00003 		mov	r3, #0
 2072 000e FB60     		str	r3, [r7, #12]
1168:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Check the parameters */
1169:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	assert_param(IS_I2C_ALL_PERIPH(I2Cx)); assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1170:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Get the I2C flag position */
1171:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	flagpos = I2C_IT & FLAG_Mask;
 2073              		.loc 1 1171 0
 2074 0010 3B68     		ldr	r3, [r7, #0]
 2075 0012 23F07F43 		bic	r3, r3, #-16777216
 2076 0016 FB60     		str	r3, [r7, #12]
1172:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	/* Clear the selected I2C flag */
1173:../StdPeripheralDriver/src/stm32f10x_i2c.c **** 	I2Cx->SR1 = (uint16_t) ~flagpos;
 2077              		.loc 1 1173 0
 2078 0018 FB68     		ldr	r3, [r7, #12]
 2079 001a 9BB2     		uxth	r3, r3
 2080 001c 6FEA0303 		mvn	r3, r3
 2081 0020 9AB2     		uxth	r2, r3
 2082 0022 7B68     		ldr	r3, [r7, #4]
 2083 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1174:../StdPeripheralDriver/src/stm32f10x_i2c.c **** }
 2084              		.loc 1 1174 0
 2085 0026 07F11407 		add	r7, r7, #20
 2086 002a BD46     		mov	sp, r7
 2087 002c 80BC     		pop	{r7}
 2088 002e 7047     		bx	lr
 2089              		.cfi_endproc
 2090              	.LFE61:
 2092              		.text
 2093              	.Letext0:
 2094              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 2095              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/stm32f10x.h"
 2096              		.file 4 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 2097              		.file 5 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 2098              		.file 6 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_i2c.c
     /tmp/ccaA4qyo.s:19     .text.I2C_DeInit:00000000 $t
     /tmp/ccaA4qyo.s:24     .text.I2C_DeInit:00000000 I2C_DeInit
     /tmp/ccaA4qyo.s:76     .text.I2C_Init:00000000 $t
     /tmp/ccaA4qyo.s:81     .text.I2C_Init:00000000 I2C_Init
     /tmp/ccaA4qyo.s:315    .text.I2C_StructInit:00000000 $t
     /tmp/ccaA4qyo.s:320    .text.I2C_StructInit:00000000 I2C_StructInit
     /tmp/ccaA4qyo.s:371    .text.I2C_Cmd:00000000 $t
     /tmp/ccaA4qyo.s:376    .text.I2C_Cmd:00000000 I2C_Cmd
     /tmp/ccaA4qyo.s:428    .text.I2C_DMACmd:00000000 $t
     /tmp/ccaA4qyo.s:433    .text.I2C_DMACmd:00000000 I2C_DMACmd
     /tmp/ccaA4qyo.s:485    .text.I2C_DMALastTransferCmd:00000000 $t
     /tmp/ccaA4qyo.s:490    .text.I2C_DMALastTransferCmd:00000000 I2C_DMALastTransferCmd
     /tmp/ccaA4qyo.s:542    .text.I2C_GenerateSTART:00000000 $t
     /tmp/ccaA4qyo.s:547    .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
     /tmp/ccaA4qyo.s:599    .text.I2C_GenerateSTOP:00000000 $t
     /tmp/ccaA4qyo.s:604    .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
     /tmp/ccaA4qyo.s:656    .text.I2C_AcknowledgeConfig:00000000 $t
     /tmp/ccaA4qyo.s:661    .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
     /tmp/ccaA4qyo.s:713    .text.I2C_OwnAddress2Config:00000000 $t
     /tmp/ccaA4qyo.s:718    .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
     /tmp/ccaA4qyo.s:771    .text.I2C_DualAddressCmd:00000000 $t
     /tmp/ccaA4qyo.s:776    .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
     /tmp/ccaA4qyo.s:828    .text.I2C_GeneralCallCmd:00000000 $t
     /tmp/ccaA4qyo.s:833    .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
     /tmp/ccaA4qyo.s:885    .text.I2C_ITConfig:00000000 $t
     /tmp/ccaA4qyo.s:890    .text.I2C_ITConfig:00000000 I2C_ITConfig
     /tmp/ccaA4qyo.s:948    .text.I2C_SendData:00000000 $t
     /tmp/ccaA4qyo.s:953    .text.I2C_SendData:00000000 I2C_SendData
     /tmp/ccaA4qyo.s:987    .text.I2C_ReceiveData:00000000 $t
     /tmp/ccaA4qyo.s:992    .text.I2C_ReceiveData:00000000 I2C_ReceiveData
     /tmp/ccaA4qyo.s:1025   .text.I2C_Send7bitAddress:00000000 $t
     /tmp/ccaA4qyo.s:1030   .text.I2C_Send7bitAddress:00000000 I2C_Send7bitAddress
     /tmp/ccaA4qyo.s:1081   .text.I2C_ReadRegister:00000000 $t
     /tmp/ccaA4qyo.s:1086   .text.I2C_ReadRegister:00000000 I2C_ReadRegister
     /tmp/ccaA4qyo.s:1131   .text.I2C_SoftwareResetCmd:00000000 $t
     /tmp/ccaA4qyo.s:1136   .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
     /tmp/ccaA4qyo.s:1190   .text.I2C_NACKPositionConfig:00000000 $t
     /tmp/ccaA4qyo.s:1195   .text.I2C_NACKPositionConfig:00000000 I2C_NACKPositionConfig
     /tmp/ccaA4qyo.s:1247   .text.I2C_SMBusAlertConfig:00000000 $t
     /tmp/ccaA4qyo.s:1252   .text.I2C_SMBusAlertConfig:00000000 I2C_SMBusAlertConfig
     /tmp/ccaA4qyo.s:1304   .text.I2C_TransmitPEC:00000000 $t
     /tmp/ccaA4qyo.s:1309   .text.I2C_TransmitPEC:00000000 I2C_TransmitPEC
     /tmp/ccaA4qyo.s:1361   .text.I2C_PECPositionConfig:00000000 $t
     /tmp/ccaA4qyo.s:1366   .text.I2C_PECPositionConfig:00000000 I2C_PECPositionConfig
     /tmp/ccaA4qyo.s:1418   .text.I2C_CalculatePEC:00000000 $t
     /tmp/ccaA4qyo.s:1423   .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
     /tmp/ccaA4qyo.s:1475   .text.I2C_GetPEC:00000000 $t
     /tmp/ccaA4qyo.s:1480   .text.I2C_GetPEC:00000000 I2C_GetPEC
     /tmp/ccaA4qyo.s:1515   .text.I2C_ARPCmd:00000000 $t
     /tmp/ccaA4qyo.s:1520   .text.I2C_ARPCmd:00000000 I2C_ARPCmd
     /tmp/ccaA4qyo.s:1572   .text.I2C_StretchClockCmd:00000000 $t
     /tmp/ccaA4qyo.s:1577   .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
     /tmp/ccaA4qyo.s:1629   .text.I2C_FastModeDutyCycleConfig:00000000 $t
     /tmp/ccaA4qyo.s:1634   .text.I2C_FastModeDutyCycleConfig:00000000 I2C_FastModeDutyCycleConfig
     /tmp/ccaA4qyo.s:1686   .text.I2C_CheckEvent:00000000 $t
     /tmp/ccaA4qyo.s:1691   .text.I2C_CheckEvent:00000000 I2C_CheckEvent
     /tmp/ccaA4qyo.s:1769   .text.I2C_GetLastEvent:00000000 $t
     /tmp/ccaA4qyo.s:1774   .text.I2C_GetLastEvent:00000000 I2C_GetLastEvent
     /tmp/ccaA4qyo.s:1832   .text.I2C_GetFlagStatus:00000000 $t
     /tmp/ccaA4qyo.s:1837   .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
     /tmp/ccaA4qyo.s:1922   .text.I2C_ClearFlag:00000000 $t
     /tmp/ccaA4qyo.s:1927   .text.I2C_ClearFlag:00000000 I2C_ClearFlag
     /tmp/ccaA4qyo.s:1969   .text.I2C_GetITStatus:00000000 $t
     /tmp/ccaA4qyo.s:1974   .text.I2C_GetITStatus:00000000 I2C_GetITStatus
     /tmp/ccaA4qyo.s:2046   .text.I2C_ClearITPendingBit:00000000 $t
     /tmp/ccaA4qyo.s:2051   .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
