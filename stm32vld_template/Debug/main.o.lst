   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	counter
  19              		.section	.bss.counter,"aw",%nobits
  20              		.align	1
  23              	counter:
  24 0000 0000     		.space	2
  25              		.section	.text.SetupClock,"ax",%progbits
  26              		.align	2
  27              		.global	SetupClock
  28              		.thumb
  29              		.thumb_func
  31              	SetupClock:
  32              	.LFB29:
  33              		.file 1 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 12.03.2013
   5:../main.c     ****  *      Author: Frolls
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** /* Kernel includes. */
   9:../main.c     **** #include "FreeRTOS.h"
  10:../main.c     **** #include "task.h"
  11:../main.c     **** //#include "queue.h"
  12:../main.c     **** //#include "timers.h"
  13:../main.c     **** 
  14:../main.c     **** // Modbus
  15:../main.c     **** #include "mb.h"
  16:../main.c     **** #include "mbport.h"
  17:../main.c     **** 
  18:../main.c     **** /* STM32 Library includes. */
  19:../main.c     **** #include <stm32f10x.h>
  20:../main.c     **** #include <stm32f10x_gpio.h>
  21:../main.c     **** #include <stm32f10x_rcc.h>
  22:../main.c     **** #include <stm32f10x_usart.h>
  23:../main.c     **** #include <stm32f10x_exti.h>
  24:../main.c     **** #include <misc.h>
  25:../main.c     **** 
  26:../main.c     **** #include "timer6.h"
  27:../main.c     **** #include "ds1821.h"
  28:../main.c     **** 
  29:../main.c     **** 
  30:../main.c     **** #define LED_PORT GPIOC
  31:../main.c     **** #define LED_GREEN GPIO_Pin_9
  32:../main.c     **** #define LED_BLUE GPIO_Pin_8
  33:../main.c     **** 
  34:../main.c     **** #define One_Wire_Pin 		GPIOC, GPIO_Pin_7
  35:../main.c     **** 
  36:../main.c     **** #define BAUDRATE 115200
  37:../main.c     **** 
  38:../main.c     **** volatile uint16_t counter = 0;
  39:../main.c     **** 
  40:../main.c     **** unsigned char error_handle (unsigned char err);
  41:../main.c     **** 
  42:../main.c     **** void SetupClock()
  43:../main.c     **** {
  34              		.loc 1 43 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 00AF     		add	r7, sp, #0
  44              	.LCFI1:
  45              		.cfi_def_cfa_register 7
  44:../main.c     **** 	RCC_DeInit ();                    /* RCC system reset(for debug purpose)*/
  46              		.loc 1 44 0
  47 0004 FFF7FEFF 		bl	RCC_DeInit
  45:../main.c     **** 	      RCC_HSEConfig (RCC_HSE_ON);       /* Enable HSE                         */
  48              		.loc 1 45 0
  49 0008 4FF48030 		mov	r0, #65536
  50 000c FFF7FEFF 		bl	RCC_HSEConfig
  46:../main.c     **** 
  47:../main.c     **** 	      /* Wait till HSE is ready                                               */
  48:../main.c     **** 	      while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
  51              		.loc 1 48 0
  52 0010 00BF     		nop
  53              	.L2:
  54              		.loc 1 48 0 is_stmt 0 discriminator 1
  55 0012 4FF03100 		mov	r0, #49
  56 0016 FFF7FEFF 		bl	RCC_GetFlagStatus
  57 001a 0346     		mov	r3, r0
  58 001c 002B     		cmp	r3, #0
  59 001e F8D0     		beq	.L2
  49:../main.c     **** 
  50:../main.c     **** 	      RCC_HCLKConfig   (RCC_SYSCLK_Div1);   /* HCLK   = SYSCLK                */
  60              		.loc 1 50 0 is_stmt 1
  61 0020 4FF00000 		mov	r0, #0
  62 0024 FFF7FEFF 		bl	RCC_HCLKConfig
  51:../main.c     **** 	      RCC_PCLK2Config  (RCC_HCLK_Div1);     /* PCLK2  = HCLK                  */
  63              		.loc 1 51 0
  64 0028 4FF00000 		mov	r0, #0
  65 002c FFF7FEFF 		bl	RCC_PCLK2Config
  52:../main.c     **** 	      RCC_PCLK1Config  (RCC_HCLK_Div1);     /* PCLK1  = HCLK1                */
  66              		.loc 1 52 0
  67 0030 4FF00000 		mov	r0, #0
  68 0034 FFF7FEFF 		bl	RCC_PCLK1Config
  53:../main.c     **** 	      //RCC_ADCCLKConfig (RCC_PCLK2_Div4);    /* ADCCLK = PCLK2/4               */
  54:../main.c     **** 
  55:../main.c     **** 	      /* PLLCLK = 8MHz * 6 = 48 MHz                                           */
  56:../main.c     **** 	      RCC_PLLConfig (RCC_PLLSource_PREDIV1, RCC_PLLMul_6);
  69              		.loc 1 56 0
  70 0038 4FF48030 		mov	r0, #65536
  71 003c 4FF48011 		mov	r1, #1048576
  72 0040 FFF7FEFF 		bl	RCC_PLLConfig
  57:../main.c     **** 
  58:../main.c     **** 	      RCC_PLLCmd (ENABLE);                  /* Enable PLL                     */
  73              		.loc 1 58 0
  74 0044 4FF00100 		mov	r0, #1
  75 0048 FFF7FEFF 		bl	RCC_PLLCmd
  59:../main.c     **** 
  60:../main.c     **** 	      /* Wait till PLL is ready                                               */
  61:../main.c     **** 	      while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
  76              		.loc 1 61 0
  77 004c 00BF     		nop
  78              	.L3:
  79              		.loc 1 61 0 is_stmt 0 discriminator 1
  80 004e 4FF03900 		mov	r0, #57
  81 0052 FFF7FEFF 		bl	RCC_GetFlagStatus
  82 0056 0346     		mov	r3, r0
  83 0058 002B     		cmp	r3, #0
  84 005a F8D0     		beq	.L3
  62:../main.c     **** 
  63:../main.c     **** 	      /* Select PLL as system clock source                                    */
  64:../main.c     **** 	      RCC_SYSCLKConfig (RCC_SYSCLKSource_PLLCLK);
  85              		.loc 1 64 0 is_stmt 1
  86 005c 4FF00200 		mov	r0, #2
  87 0060 FFF7FEFF 		bl	RCC_SYSCLKConfig
  65:../main.c     **** 
  66:../main.c     **** 	      /* Wait till PLL is used as system clock source                         */
  67:../main.c     **** 	      while (RCC_GetSYSCLKSource() != 0x08);
  88              		.loc 1 67 0
  89 0064 00BF     		nop
  90              	.L4:
  91              		.loc 1 67 0 is_stmt 0 discriminator 1
  92 0066 FFF7FEFF 		bl	RCC_GetSYSCLKSource
  93 006a 0346     		mov	r3, r0
  94 006c 082B     		cmp	r3, #8
  95 006e FAD1     		bne	.L4
  68:../main.c     **** 
  69:../main.c     **** }
  96              		.loc 1 69 0 is_stmt 1
  97 0070 80BD     		pop	{r7, pc}
  98              		.cfi_endproc
  99              	.LFE29:
 101 0072 00BF     		.section	.text.LEDsInit,"ax",%progbits
 102              		.align	2
 103              		.global	LEDsInit
 104              		.thumb
 105              		.thumb_func
 107              	LEDsInit:
 108              	.LFB30:
  70:../main.c     **** 
  71:../main.c     **** void LEDsInit()
  72:../main.c     **** {
 109              		.loc 1 72 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 8
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0000 80B5     		push	{r7, lr}
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 82B0     		sub	sp, sp, #8
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 16
 121 0004 00AF     		add	r7, sp, #0
 122              	.LCFI4:
 123              		.cfi_def_cfa_register 7
  73:../main.c     ****    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 124              		.loc 1 73 0
 125 0006 4FF01000 		mov	r0, #16
 126 000a 4FF00101 		mov	r1, #1
 127 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  74:../main.c     ****    GPIO_InitTypeDef GPIO_InitStructure;
  75:../main.c     ****    /* Ñâåòîäèîäû íà PC8, PC9          */
  76:../main.c     ****    GPIO_InitStructure.GPIO_Pin   = LED_GREEN | LED_BLUE;
 128              		.loc 1 76 0
 129 0012 4FF44073 		mov	r3, #768
 130 0016 BB80     		strh	r3, [r7, #4]	@ movhi
  77:../main.c     ****    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 131              		.loc 1 77 0
 132 0018 4FF00303 		mov	r3, #3
 133 001c BB71     		strb	r3, [r7, #6]
  78:../main.c     ****    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 134              		.loc 1 78 0
 135 001e 4FF01003 		mov	r3, #16
 136 0022 FB71     		strb	r3, [r7, #7]
  79:../main.c     ****    GPIO_Init(LED_PORT, &GPIO_InitStructure);
 137              		.loc 1 79 0
 138 0024 07F10403 		add	r3, r7, #4
 139 0028 4FF48050 		mov	r0, #4096
 140 002c C4F20100 		movt	r0, 16385
 141 0030 1946     		mov	r1, r3
 142 0032 FFF7FEFF 		bl	GPIO_Init
  80:../main.c     **** }
 143              		.loc 1 80 0
 144 0036 07F10807 		add	r7, r7, #8
 145 003a BD46     		mov	sp, r7
 146 003c 80BD     		pop	{r7, pc}
 147              		.cfi_endproc
 148              	.LFE30:
 150 003e 00BF     		.section	.text.BtnInit,"ax",%progbits
 151              		.align	2
 152              		.global	BtnInit
 153              		.thumb
 154              		.thumb_func
 156              	BtnInit:
 157              	.LFB31:
  81:../main.c     **** 
  82:../main.c     **** void BtnInit()
  83:../main.c     **** {
 158              		.loc 1 83 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 8
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              	.LCFI5:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 82B0     		sub	sp, sp, #8
 168              	.LCFI6:
 169              		.cfi_def_cfa_offset 16
 170 0004 00AF     		add	r7, sp, #0
 171              	.LCFI7:
 172              		.cfi_def_cfa_register 7
  84:../main.c     **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 173              		.loc 1 84 0
 174 0006 4FF00400 		mov	r0, #4
 175 000a 4FF00101 		mov	r1, #1
 176 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  85:../main.c     ****     GPIO_InitTypeDef GPIO_InitStructure;
  86:../main.c     **** 
  87:../main.c     ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 177              		.loc 1 87 0
 178 0012 4FF00103 		mov	r3, #1
 179 0016 BB80     		strh	r3, [r7, #4]	@ movhi
  88:../main.c     ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 180              		.loc 1 88 0
 181 0018 4FF00403 		mov	r3, #4
 182 001c FB71     		strb	r3, [r7, #7]
  89:../main.c     ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
 183              		.loc 1 89 0
 184 001e 07F10403 		add	r3, r7, #4
 185 0022 4FF40060 		mov	r0, #2048
 186 0026 C4F20100 		movt	r0, 16385
 187 002a 1946     		mov	r1, r3
 188 002c FFF7FEFF 		bl	GPIO_Init
  90:../main.c     ****     GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 189              		.loc 1 90 0
 190 0030 4FF00000 		mov	r0, #0
 191 0034 4FF00001 		mov	r1, #0
 192 0038 FFF7FEFF 		bl	GPIO_EXTILineConfig
  91:../main.c     **** }
 193              		.loc 1 91 0
 194 003c 07F10807 		add	r7, r7, #8
 195 0040 BD46     		mov	sp, r7
 196 0042 80BD     		pop	{r7, pc}
 197              		.cfi_endproc
 198              	.LFE31:
 200              		.section	.text.USART_GPIO_Configuration,"ax",%progbits
 201              		.align	2
 202              		.global	USART_GPIO_Configuration
 203              		.thumb
 204              		.thumb_func
 206              	USART_GPIO_Configuration:
 207              	.LFB32:
  92:../main.c     **** 
  93:../main.c     **** /*******************************************************************************
  94:../main.c     **** * Function Name  : USART_GPIO_Configuration
  95:../main.c     **** * Description    : Configures the different GPIO ports.
  96:../main.c     **** * Input          : None
  97:../main.c     **** * Output         : None
  98:../main.c     **** * Return         : None
  99:../main.c     **** *******************************************************************************/
 100:../main.c     **** void USART_GPIO_Configuration(void)
 101:../main.c     **** {
 208              		.loc 1 101 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              	.LCFI8:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 0002 82B0     		sub	sp, sp, #8
 218              	.LCFI9:
 219              		.cfi_def_cfa_offset 16
 220 0004 00AF     		add	r7, sp, #0
 221              	.LCFI10:
 222              		.cfi_def_cfa_register 7
 102:../main.c     ****   /* Enable GPIOA clock */
 103:../main.c     ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 223              		.loc 1 103 0
 224 0006 4FF00400 		mov	r0, #4
 225 000a 4FF00101 		mov	r1, #1
 226 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 104:../main.c     **** 
 105:../main.c     ****   GPIO_InitTypeDef GPIO_InitStructure;
 106:../main.c     **** 
 107:../main.c     ****   /* Configure USART1 Tx (PA.09) as alternate function push-pull */
 108:../main.c     ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 227              		.loc 1 108 0
 228 0012 4FF40073 		mov	r3, #512
 229 0016 BB80     		strh	r3, [r7, #4]	@ movhi
 109:../main.c     ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 230              		.loc 1 109 0
 231 0018 4FF01803 		mov	r3, #24
 232 001c FB71     		strb	r3, [r7, #7]
 110:../main.c     ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 233              		.loc 1 110 0
 234 001e 4FF00303 		mov	r3, #3
 235 0022 BB71     		strb	r3, [r7, #6]
 111:../main.c     ****   GPIO_Init(GPIOA, &GPIO_InitStructure);
 236              		.loc 1 111 0
 237 0024 07F10403 		add	r3, r7, #4
 238 0028 4FF40060 		mov	r0, #2048
 239 002c C4F20100 		movt	r0, 16385
 240 0030 1946     		mov	r1, r3
 241 0032 FFF7FEFF 		bl	GPIO_Init
 112:../main.c     **** 
 113:../main.c     ****   /* Configure USART1 Rx (PA.10) as input floating */
 114:../main.c     ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 242              		.loc 1 114 0
 243 0036 4FF48063 		mov	r3, #1024
 244 003a BB80     		strh	r3, [r7, #4]	@ movhi
 115:../main.c     ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 245              		.loc 1 115 0
 246 003c 4FF00403 		mov	r3, #4
 247 0040 FB71     		strb	r3, [r7, #7]
 116:../main.c     ****   GPIO_Init(GPIOA, &GPIO_InitStructure);
 248              		.loc 1 116 0
 249 0042 07F10403 		add	r3, r7, #4
 250 0046 4FF40060 		mov	r0, #2048
 251 004a C4F20100 		movt	r0, 16385
 252 004e 1946     		mov	r1, r3
 253 0050 FFF7FEFF 		bl	GPIO_Init
 117:../main.c     **** }
 254              		.loc 1 117 0
 255 0054 07F10807 		add	r7, r7, #8
 256 0058 BD46     		mov	sp, r7
 257 005a 80BD     		pop	{r7, pc}
 258              		.cfi_endproc
 259              	.LFE32:
 261              		.section	.rodata
 262              		.align	2
 263              	.LC0:
 264 0000 0A3D3D3D 		.ascii	"\012===== UART1 \320\270\320\275\320\270\321\206\320"
 264      3D3D2055 
 264      41525431 
 264      20D0B8D0 
 264      BDD0B8D1 
 265 0016 B8D0B0D0 		.ascii	"\270\320\260\320\273\320\270\320\267\320\270\321\200"
 265      BBD0B8D0 
 265      B7D0B8D1 
 265      80
 266 0023 D0BED0B2 		.ascii	"\320\276\320\262\320\260\320\275 =====\000"
 266      D0B0D0BD 
 266      203D3D3D 
 266      3D3D00
 267              		.section	.text.USART_Configuration,"ax",%progbits
 268              		.align	2
 269              		.global	USART_Configuration
 270              		.thumb
 271              		.thumb_func
 273              	USART_Configuration:
 274              	.LFB33:
 118:../main.c     **** 
 119:../main.c     **** /*******************************************************************************
 120:../main.c     **** * Function Name  : USART_Configuration
 121:../main.c     **** * Description    : Configures the USART1.
 122:../main.c     **** * Input          : None
 123:../main.c     **** * Output         : None
 124:../main.c     **** * Return         : None
 125:../main.c     **** *******************************************************************************/
 126:../main.c     **** void USART_Configuration(void)
 127:../main.c     **** {
 275              		.loc 1 127 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 16
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279 0000 80B5     		push	{r7, lr}
 280              	.LCFI11:
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 284 0002 84B0     		sub	sp, sp, #16
 285              	.LCFI12:
 286              		.cfi_def_cfa_offset 24
 287 0004 00AF     		add	r7, sp, #0
 288              	.LCFI13:
 289              		.cfi_def_cfa_register 7
 128:../main.c     ****   /* Enable USART1 */
 129:../main.c     ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 290              		.loc 1 129 0
 291 0006 4FF48040 		mov	r0, #16384
 292 000a 4FF00101 		mov	r1, #1
 293 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 130:../main.c     **** 
 131:../main.c     ****   USART_InitTypeDef USART_InitStructure;
 132:../main.c     **** 
 133:../main.c     **** /* USART1 configuration ------------------------------------------------------*/
 134:../main.c     ****   /* USART1 configured as follow:
 135:../main.c     ****         - BaudRate = 115200 baud
 136:../main.c     ****         - Word Length = 8 Bits
 137:../main.c     ****         - One Stop Bit
 138:../main.c     ****         - No parity
 139:../main.c     ****         - Hardware flow control disabled (RTS and CTS signals)
 140:../main.c     ****         - Receive and transmit enabled
 141:../main.c     ****         - USART Clock disabled
 142:../main.c     ****         - USART CPOL: Clock is active low
 143:../main.c     ****         - USART CPHA: Data is captured on the middle
 144:../main.c     ****         - USART LastBit: The clock pulse of the last data bit is not output to
 145:../main.c     ****                          the SCLK pin
 146:../main.c     ****   */
 147:../main.c     ****   USART_InitStructure.USART_BaudRate = BAUDRATE;
 294              		.loc 1 147 0
 295 0012 4FF4E133 		mov	r3, #115200
 296 0016 3B60     		str	r3, [r7, #0]
 148:../main.c     ****   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 297              		.loc 1 148 0
 298 0018 4FF00003 		mov	r3, #0
 299 001c BB80     		strh	r3, [r7, #4]	@ movhi
 149:../main.c     ****   USART_InitStructure.USART_StopBits = USART_StopBits_1;
 300              		.loc 1 149 0
 301 001e 4FF00003 		mov	r3, #0
 302 0022 FB80     		strh	r3, [r7, #6]	@ movhi
 150:../main.c     ****   USART_InitStructure.USART_Parity = USART_Parity_No;
 303              		.loc 1 150 0
 304 0024 4FF00003 		mov	r3, #0
 305 0028 3B81     		strh	r3, [r7, #8]	@ movhi
 151:../main.c     ****   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 306              		.loc 1 151 0
 307 002a 4FF00003 		mov	r3, #0
 308 002e BB81     		strh	r3, [r7, #12]	@ movhi
 152:../main.c     ****   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 309              		.loc 1 152 0
 310 0030 4FF00C03 		mov	r3, #12
 311 0034 7B81     		strh	r3, [r7, #10]	@ movhi
 153:../main.c     **** 
 154:../main.c     ****   USART_Init(USART1, &USART_InitStructure);
 312              		.loc 1 154 0
 313 0036 3B46     		mov	r3, r7
 314 0038 4FF46050 		mov	r0, #14336
 315 003c C4F20100 		movt	r0, 16385
 316 0040 1946     		mov	r1, r3
 317 0042 FFF7FEFF 		bl	USART_Init
 155:../main.c     **** 
 156:../main.c     ****   /* Enable USART1 */
 157:../main.c     ****   USART_Cmd(USART1, ENABLE);
 318              		.loc 1 157 0
 319 0046 4FF46050 		mov	r0, #14336
 320 004a C4F20100 		movt	r0, 16385
 321 004e 4FF00101 		mov	r1, #1
 322 0052 FFF7FEFF 		bl	USART_Cmd
 158:../main.c     **** 
 159:../main.c     ****   uart_print_string(USART1, "\n===== UART1 инициализирован =====",1);
 323              		.loc 1 159 0
 324 0056 4FF46050 		mov	r0, #14336
 325 005a C4F20100 		movt	r0, 16385
 326 005e 40F20001 		movw	r1, #:lower16:.LC0
 327 0062 C0F20001 		movt	r1, #:upper16:.LC0
 328 0066 4FF00102 		mov	r2, #1
 329 006a FFF7FEFF 		bl	uart_print_string
 160:../main.c     **** }
 330              		.loc 1 160 0
 331 006e 07F11007 		add	r7, r7, #16
 332 0072 BD46     		mov	sp, r7
 333 0074 80BD     		pop	{r7, pc}
 334              		.cfi_endproc
 335              	.LFE33:
 337              		.section	.text.EXTI_Configuration,"ax",%progbits
 338              		.align	2
 339              		.global	EXTI_Configuration
 340              		.thumb
 341              		.thumb_func
 343              	EXTI_Configuration:
 344              	.LFB34:
 161:../main.c     **** 
 162:../main.c     **** void EXTI_Configuration(void)
 163:../main.c     **** {
 345              		.loc 1 163 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI14:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 82B0     		sub	sp, sp, #8
 355              	.LCFI15:
 356              		.cfi_def_cfa_offset 16
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI16:
 359              		.cfi_def_cfa_register 7
 164:../main.c     ****   EXTI_InitTypeDef EXTI_InitStructure;
 165:../main.c     ****   EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 360              		.loc 1 165 0
 361 0006 4FF00103 		mov	r3, #1
 362 000a 3B60     		str	r3, [r7, #0]
 166:../main.c     ****   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 363              		.loc 1 166 0
 364 000c 4FF00003 		mov	r3, #0
 365 0010 3B71     		strb	r3, [r7, #4]
 167:../main.c     ****   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 366              		.loc 1 167 0
 367 0012 4FF00803 		mov	r3, #8
 368 0016 7B71     		strb	r3, [r7, #5]
 168:../main.c     ****   EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 369              		.loc 1 168 0
 370 0018 4FF00103 		mov	r3, #1
 371 001c BB71     		strb	r3, [r7, #6]
 169:../main.c     ****   EXTI_Init(&EXTI_InitStructure);
 372              		.loc 1 169 0
 373 001e 3B46     		mov	r3, r7
 374 0020 1846     		mov	r0, r3
 375 0022 FFF7FEFF 		bl	EXTI_Init
 170:../main.c     **** }
 376              		.loc 1 170 0
 377 0026 07F10807 		add	r7, r7, #8
 378 002a BD46     		mov	sp, r7
 379 002c 80BD     		pop	{r7, pc}
 380              		.cfi_endproc
 381              	.LFE34:
 383 002e 00BF     		.section	.text.NVIC_Configuration_USART1,"ax",%progbits
 384              		.align	2
 385              		.global	NVIC_Configuration_USART1
 386              		.thumb
 387              		.thumb_func
 389              	NVIC_Configuration_USART1:
 390              	.LFB35:
 171:../main.c     **** 
 172:../main.c     **** void NVIC_Configuration_USART1(void)
 173:../main.c     **** {
 391              		.loc 1 173 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395 0000 80B5     		push	{r7, lr}
 396              	.LCFI17:
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 7, -8
 399              		.cfi_offset 14, -4
 400 0002 82B0     		sub	sp, sp, #8
 401              	.LCFI18:
 402              		.cfi_def_cfa_offset 16
 403 0004 00AF     		add	r7, sp, #0
 404              	.LCFI19:
 405              		.cfi_def_cfa_register 7
 174:../main.c     **** 	//configure NVIC
 175:../main.c     **** 	NVIC_InitTypeDef NVIC_InitStructure;
 176:../main.c     **** 
 177:../main.c     **** 	/* Place the vector table into FLASH */
 178:../main.c     **** 	//NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
 179:../main.c     **** 
 180:../main.c     **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 406              		.loc 1 180 0
 407 0006 4FF44070 		mov	r0, #768
 408 000a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 181:../main.c     **** 
 182:../main.c     **** 	//select NVIC channel to configure
 183:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 409              		.loc 1 183 0
 410 000e 4FF02503 		mov	r3, #37
 411 0012 3B71     		strb	r3, [r7, #4]
 184:../main.c     **** 	//set priority to lowest
 185:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 412              		.loc 1 185 0
 413 0014 4FF00F03 		mov	r3, #15
 414 0018 7B71     		strb	r3, [r7, #5]
 186:../main.c     **** 	//set subpriority to lowest
 187:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 415              		.loc 1 187 0
 416 001a 4FF00F03 		mov	r3, #15
 417 001e BB71     		strb	r3, [r7, #6]
 188:../main.c     **** 	//enable IRQ channel
 189:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 418              		.loc 1 189 0
 419 0020 4FF00103 		mov	r3, #1
 420 0024 FB71     		strb	r3, [r7, #7]
 190:../main.c     **** 	//update NVIC registers
 191:../main.c     **** 	NVIC_Init(&NVIC_InitStructure);
 421              		.loc 1 191 0
 422 0026 07F10403 		add	r3, r7, #4
 423 002a 1846     		mov	r0, r3
 424 002c FFF7FEFF 		bl	NVIC_Init
 192:../main.c     **** 
 193:../main.c     **** 	//disable Transmit Data Register empty interrupt
 194:../main.c     **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 425              		.loc 1 194 0
 426 0030 4FF46050 		mov	r0, #14336
 427 0034 C4F20100 		movt	r0, 16385
 428 0038 40F22771 		movw	r1, #1831
 429 003c 4FF00002 		mov	r2, #0
 430 0040 FFF7FEFF 		bl	USART_ITConfig
 195:../main.c     **** 	//enable Receive Data register not empty interrupt
 196:../main.c     **** 	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 431              		.loc 1 196 0
 432 0044 4FF46050 		mov	r0, #14336
 433 0048 C4F20100 		movt	r0, 16385
 434 004c 40F22551 		movw	r1, #1317
 435 0050 4FF00102 		mov	r2, #1
 436 0054 FFF7FEFF 		bl	USART_ITConfig
 197:../main.c     **** 
 198:../main.c     **** 
 199:../main.c     **** }
 437              		.loc 1 199 0
 438 0058 07F10807 		add	r7, r7, #8
 439 005c BD46     		mov	sp, r7
 440 005e 80BD     		pop	{r7, pc}
 441              		.cfi_endproc
 442              	.LFE35:
 444              		.section	.text.NVIC_Configuration_USER_BUTTON,"ax",%progbits
 445              		.align	2
 446              		.global	NVIC_Configuration_USER_BUTTON
 447              		.thumb
 448              		.thumb_func
 450              	NVIC_Configuration_USER_BUTTON:
 451              	.LFB36:
 200:../main.c     **** 
 201:../main.c     **** void NVIC_Configuration_USER_BUTTON(void)
 202:../main.c     **** {
 452              		.loc 1 202 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              	.LCFI20:
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 82B0     		sub	sp, sp, #8
 462              	.LCFI21:
 463              		.cfi_def_cfa_offset 16
 464 0004 00AF     		add	r7, sp, #0
 465              	.LCFI22:
 466              		.cfi_def_cfa_register 7
 203:../main.c     **** 	NVIC_InitTypeDef NVIC_InitStructure;
 204:../main.c     **** 
 205:../main.c     **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 467              		.loc 1 205 0
 468 0006 4FF44070 		mov	r0, #768
 469 000a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 206:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 470              		.loc 1 206 0
 471 000e 4FF00603 		mov	r3, #6
 472 0012 3B71     		strb	r3, [r7, #4]
 207:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 473              		.loc 1 207 0
 474 0014 4FF00F03 		mov	r3, #15
 475 0018 7B71     		strb	r3, [r7, #5]
 208:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 476              		.loc 1 208 0
 477 001a 4FF00F03 		mov	r3, #15
 478 001e BB71     		strb	r3, [r7, #6]
 209:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 479              		.loc 1 209 0
 480 0020 4FF00103 		mov	r3, #1
 481 0024 FB71     		strb	r3, [r7, #7]
 210:../main.c     **** 	NVIC_Init(&NVIC_InitStructure);
 482              		.loc 1 210 0
 483 0026 07F10403 		add	r3, r7, #4
 484 002a 1846     		mov	r0, r3
 485 002c FFF7FEFF 		bl	NVIC_Init
 211:../main.c     **** }
 486              		.loc 1 211 0
 487 0030 07F10807 		add	r7, r7, #8
 488 0034 BD46     		mov	sp, r7
 489 0036 80BD     		pop	{r7, pc}
 490              		.cfi_endproc
 491              	.LFE36:
 493              		.section	.rodata
 494 0032 0000     		.align	2
 495              	.LC1:
 496 0034 D0A2D18B 		.ascii	"\320\242\321\213\320\275\321\206\000"
 496      D0BDD186 
 496      00
 497              		.section	.text.EXTI0_IRQHandler,"ax",%progbits
 498              		.align	2
 499              		.global	EXTI0_IRQHandler
 500              		.thumb
 501              		.thumb_func
 503              	EXTI0_IRQHandler:
 504              	.LFB37:
 212:../main.c     **** 
 213:../main.c     **** void EXTI0_IRQHandler(void)
 214:../main.c     **** {
 505              		.loc 1 214 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              	.LCFI23:
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 7, -8
 513              		.cfi_offset 14, -4
 514 0002 00AF     		add	r7, sp, #0
 515              	.LCFI24:
 516              		.cfi_def_cfa_register 7
 215:../main.c     ****         EXTI_ClearITPendingBit(EXTI_Line0);
 517              		.loc 1 215 0
 518 0004 4FF00100 		mov	r0, #1
 519 0008 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 216:../main.c     **** 
 217:../main.c     ****         uart_print_string(USART1, "Тынц",1);
 520              		.loc 1 217 0
 521 000c 4FF46050 		mov	r0, #14336
 522 0010 C4F20100 		movt	r0, 16385
 523 0014 40F20001 		movw	r1, #:lower16:.LC1
 524 0018 C0F20001 		movt	r1, #:upper16:.LC1
 525 001c 4FF00102 		mov	r2, #1
 526 0020 FFF7FEFF 		bl	uart_print_string
 218:../main.c     **** 		{
 219:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 527              		.loc 1 219 0
 528 0024 4FF48053 		mov	r3, #4096
 529 0028 C4F20103 		movt	r3, 16385
 530 002c 4FF48052 		mov	r2, #4096
 531 0030 C4F20102 		movt	r2, 16385
 532 0034 D268     		ldr	r2, [r2, #12]
 533 0036 42F40072 		orr	r2, r2, #512
 534 003a DA60     		str	r2, [r3, #12]
 220:../main.c     **** 			//vTaskDelay(10);
 221:../main.c     **** 			delay_ms(10);
 535              		.loc 1 221 0
 536 003c 4FF00A00 		mov	r0, #10
 537 0040 FFF7FEFF 		bl	delay_ms
 222:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 538              		.loc 1 222 0
 539 0044 4FF48053 		mov	r3, #4096
 540 0048 C4F20103 		movt	r3, 16385
 541 004c 4FF48052 		mov	r2, #4096
 542 0050 C4F20102 		movt	r2, 16385
 543 0054 D268     		ldr	r2, [r2, #12]
 544 0056 82F40072 		eor	r2, r2, #512
 545 005a DA60     		str	r2, [r3, #12]
 223:../main.c     **** 		}
 224:../main.c     **** }
 546              		.loc 1 224 0
 547 005c 80BD     		pop	{r7, pc}
 548              		.cfi_endproc
 549              	.LFE37:
 551 005e 00BF     		.section	.text.vFreeRTOSInitAll,"ax",%progbits
 552              		.align	2
 553              		.global	vFreeRTOSInitAll
 554              		.thumb
 555              		.thumb_func
 557              	vFreeRTOSInitAll:
 558              	.LFB38:
 225:../main.c     **** 
 226:../main.c     **** void vFreeRTOSInitAll()
 227:../main.c     **** {
 559              		.loc 1 227 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 0000 80B5     		push	{r7, lr}
 564              	.LCFI25:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 14, -4
 568 0002 00AF     		add	r7, sp, #0
 569              	.LCFI26:
 570              		.cfi_def_cfa_register 7
 228:../main.c     **** 	SetupClock();
 571              		.loc 1 228 0
 572 0004 FFF7FEFF 		bl	SetupClock
 229:../main.c     **** 
 230:../main.c     **** 	LEDsInit();
 573              		.loc 1 230 0
 574 0008 FFF7FEFF 		bl	LEDsInit
 231:../main.c     **** 	BtnInit();
 575              		.loc 1 231 0
 576 000c FFF7FEFF 		bl	BtnInit
 232:../main.c     **** 
 233:../main.c     **** 	EXTI_Configuration();
 577              		.loc 1 233 0
 578 0010 FFF7FEFF 		bl	EXTI_Configuration
 234:../main.c     **** 
 235:../main.c     **** 	USART_GPIO_Configuration();
 579              		.loc 1 235 0
 580 0014 FFF7FEFF 		bl	USART_GPIO_Configuration
 236:../main.c     **** 	USART_Configuration();
 581              		.loc 1 236 0
 582 0018 FFF7FEFF 		bl	USART_Configuration
 237:../main.c     **** 
 238:../main.c     **** 	NVIC_Configuration_USER_BUTTON();
 583              		.loc 1 238 0
 584 001c FFF7FEFF 		bl	NVIC_Configuration_USER_BUTTON
 239:../main.c     **** 	NVIC_Configuration_USART1();
 585              		.loc 1 239 0
 586 0020 FFF7FEFF 		bl	NVIC_Configuration_USART1
 240:../main.c     **** 
 241:../main.c     **** 	TIM6Init();
 587              		.loc 1 241 0
 588 0024 FFF7FEFF 		bl	TIM6Init
 242:../main.c     **** 
 243:../main.c     **** }
 589              		.loc 1 243 0
 590 0028 80BD     		pop	{r7, pc}
 591              		.cfi_endproc
 592              	.LFE38:
 594 002a 00BF     		.section	.text.vTaskLED,"ax",%progbits
 595              		.align	2
 596              		.global	vTaskLED
 597              		.thumb
 598              		.thumb_func
 600              	vTaskLED:
 601              	.LFB39:
 244:../main.c     **** 
 245:../main.c     **** void vTaskLED(void *pvParameters)
 246:../main.c     **** {
 602              		.loc 1 246 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 8
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0000 80B5     		push	{r7, lr}
 607              	.LCFI27:
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 82B0     		sub	sp, sp, #8
 612              	.LCFI28:
 613              		.cfi_def_cfa_offset 16
 614 0004 00AF     		add	r7, sp, #0
 615              	.LCFI29:
 616              		.cfi_def_cfa_register 7
 617 0006 7860     		str	r0, [r7, #4]
 618              	.L15:
 247:../main.c     **** 
 248:../main.c     ****         for (;;) {
 249:../main.c     ****         	//delay_ms(500);
 250:../main.c     ****         	LED_PORT->ODR ^= LED_BLUE;
 619              		.loc 1 250 0 discriminator 1
 620 0008 4FF48053 		mov	r3, #4096
 621 000c C4F20103 		movt	r3, 16385
 622 0010 4FF48052 		mov	r2, #4096
 623 0014 C4F20102 		movt	r2, 16385
 624 0018 D268     		ldr	r2, [r2, #12]
 625 001a 82F48072 		eor	r2, r2, #256
 626 001e DA60     		str	r2, [r3, #12]
 251:../main.c     ****             vTaskDelay(500);
 627              		.loc 1 251 0 discriminator 1
 628 0020 4FF4FA70 		mov	r0, #500
 629 0024 FFF7FEFF 		bl	vTaskDelay
 252:../main.c     **** 
 253:../main.c     ****         }
 630              		.loc 1 253 0 discriminator 1
 631 0028 EEE7     		b	.L15
 632              		.cfi_endproc
 633              	.LFE39:
 635 002a 00BF     		.section	.text.USART1_IRQHandler,"ax",%progbits
 636              		.align	2
 637              		.global	USART1_IRQHandler
 638              		.thumb
 639              		.thumb_func
 641              	USART1_IRQHandler:
 642              	.LFB40:
 254:../main.c     ****         vTaskDelete(NULL);
 255:../main.c     **** 
 256:../main.c     **** }
 257:../main.c     **** 
 258:../main.c     **** void USART1_IRQHandler(void)
 259:../main.c     **** {
 643              		.loc 1 259 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 8
 646              		@ frame_needed = 1, uses_anonymous_args = 0
 647 0000 80B5     		push	{r7, lr}
 648              	.LCFI30:
 649              		.cfi_def_cfa_offset 8
 650              		.cfi_offset 7, -8
 651              		.cfi_offset 14, -4
 652 0002 82B0     		sub	sp, sp, #8
 653              	.LCFI31:
 654              		.cfi_def_cfa_offset 16
 655 0004 00AF     		add	r7, sp, #0
 656              	.LCFI32:
 657              		.cfi_def_cfa_register 7
 260:../main.c     **** 
 261:../main.c     **** 	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 658              		.loc 1 261 0
 659 0006 4FF46050 		mov	r0, #14336
 660 000a C4F20100 		movt	r0, 16385
 661 000e 40F22551 		movw	r1, #1317
 662 0012 FFF7FEFF 		bl	USART_GetITStatus
 663 0016 0346     		mov	r3, r0
 664 0018 002B     		cmp	r3, #0
 665 001a 0ED0     		beq	.L16
 666              	.LBB2:
 262:../main.c     **** 	    {
 263:../main.c     **** 		   // перемырг
 264:../main.c     **** 		   //LED_PORT->ODR |= LED_BLUE;
 265:../main.c     **** 		   //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 266:../main.c     **** 		   uint16_t i = USART_ReceiveData(USART1);
 667              		.loc 1 266 0
 668 001c 4FF46050 		mov	r0, #14336
 669 0020 C4F20100 		movt	r0, 16385
 670 0024 FFF7FEFF 		bl	USART_ReceiveData
 671 0028 0346     		mov	r3, r0
 672 002a FB80     		strh	r3, [r7, #6]	@ movhi
 267:../main.c     **** 		   UARTSend(&i, 1);
 673              		.loc 1 267 0
 674 002c 07F10603 		add	r3, r7, #6
 675 0030 1846     		mov	r0, r3
 676 0032 4FF00101 		mov	r1, #1
 677 0036 FFF7FEFF 		bl	UARTSend
 678              	.L16:
 679              	.LBE2:
 268:../main.c     **** 		   //LED_PORT->ODR ^= LED_BLUE;
 269:../main.c     **** 		   //UARTSend(&i, 1);
 270:../main.c     ****           // UARTSend(" <-- data\r\n", 10);
 271:../main.c     ****         }
 272:../main.c     **** }
 680              		.loc 1 272 0
 681 003a 07F10807 		add	r7, r7, #8
 682 003e BD46     		mov	sp, r7
 683 0040 80BD     		pop	{r7, pc}
 684              		.cfi_endproc
 685              	.LFE40:
 687 0042 00BF     		.section	.rodata
 688 003d 000000   		.align	2
 689              	.LC2:
 690 0040 D0A1D186 		.ascii	"\320\241\321\206\321\203\320\272\320\276, \320\276\321"
 690      D183D0BA 
 690      D0BE2C20 
 690      D0BED1
 691 004f 82D0BBD0 		.ascii	"\202\320\273\320\260\320\264\321\214 \320\274\320\265"
 691      B0D0B4D1 
 691      8C20D0BC 
 691      D0B5
 692 005d D0BDD18F 		.ascii	"\320\275\321\217..\000"
 692      2E2E00
 693              		.section	.text.vTaskUSART_TX,"ax",%progbits
 694              		.align	2
 695              		.global	vTaskUSART_TX
 696              		.thumb
 697              		.thumb_func
 699              	vTaskUSART_TX:
 700              	.LFB41:
 273:../main.c     **** 
 274:../main.c     **** void vTaskUSART_TX(void *pvParameters)
 275:../main.c     **** {
 701              		.loc 1 275 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 8
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 0000 80B5     		push	{r7, lr}
 706              	.LCFI33:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 7, -8
 709              		.cfi_offset 14, -4
 710 0002 82B0     		sub	sp, sp, #8
 711              	.LCFI34:
 712              		.cfi_def_cfa_offset 16
 713 0004 00AF     		add	r7, sp, #0
 714              	.LCFI35:
 715              		.cfi_def_cfa_register 7
 716 0006 7860     		str	r0, [r7, #4]
 717              	.L19:
 718              	.LBB3:
 276:../main.c     **** 	for (;;) {
 277:../main.c     **** 
 278:../main.c     **** 		uart_print_string(USART1, "Сцуко, отладь меня..",1);
 719              		.loc 1 278 0 discriminator 1
 720 0008 4FF46050 		mov	r0, #14336
 721 000c C4F20100 		movt	r0, 16385
 722 0010 40F20001 		movw	r1, #:lower16:.LC2
 723 0014 C0F20001 		movt	r1, #:upper16:.LC2
 724 0018 4FF00102 		mov	r2, #1
 725 001c FFF7FEFF 		bl	uart_print_string
 279:../main.c     **** 		// перемырг
 280:../main.c     **** 		{
 281:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 726              		.loc 1 281 0 discriminator 1
 727 0020 4FF48053 		mov	r3, #4096
 728 0024 C4F20103 		movt	r3, 16385
 729 0028 4FF48052 		mov	r2, #4096
 730 002c C4F20102 		movt	r2, 16385
 731 0030 D268     		ldr	r2, [r2, #12]
 732 0032 42F40072 		orr	r2, r2, #512
 733 0036 DA60     		str	r2, [r3, #12]
 282:../main.c     **** 			vTaskDelay(10);
 734              		.loc 1 282 0 discriminator 1
 735 0038 4FF00A00 		mov	r0, #10
 736 003c FFF7FEFF 		bl	vTaskDelay
 283:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 737              		.loc 1 283 0 discriminator 1
 738 0040 4FF48053 		mov	r3, #4096
 739 0044 C4F20103 		movt	r3, 16385
 740 0048 4FF48052 		mov	r2, #4096
 741 004c C4F20102 		movt	r2, 16385
 742 0050 D268     		ldr	r2, [r2, #12]
 743 0052 82F40072 		eor	r2, r2, #512
 744 0056 DA60     		str	r2, [r3, #12]
 284:../main.c     **** 		}
 285:../main.c     **** 		vTaskDelay(1000);
 745              		.loc 1 285 0 discriminator 1
 746 0058 4FF47A70 		mov	r0, #1000
 747 005c FFF7FEFF 		bl	vTaskDelay
 748              	.LBE3:
 286:../main.c     **** 	}
 749              		.loc 1 286 0 discriminator 1
 750 0060 D2E7     		b	.L19
 751              		.cfi_endproc
 752              	.LFE41:
 754 0062 00BF     		.section	.rodata
 755              		.align	2
 756              	.LC3:
 757 0064 D0A2D0B5 		.ascii	"\320\242\320\265\320\274\320\277\320\265\321\200\320"
 757      D0BCD0BF 
 757      D0B5D180 
 757      D0
 758 0071 B0D182D1 		.ascii	"\260\321\202\321\203\321\200\320\260:   \000"
 758      83D180D0 
 758      B03A2020 
 758      2000
 759              		.section	.text.vTaskDS1821,"ax",%progbits
 760              		.align	2
 761              		.global	vTaskDS1821
 762              		.thumb
 763              		.thumb_func
 765              	vTaskDS1821:
 766              	.LFB42:
 287:../main.c     **** 
 288:../main.c     ****     vTaskDelete(NULL);
 289:../main.c     **** }
 290:../main.c     **** 
 291:../main.c     **** void vTaskDS1821(void *pvParameters)
 292:../main.c     **** {
 767              		.loc 1 292 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 16
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771 0000 80B5     		push	{r7, lr}
 772              	.LCFI36:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 84B0     		sub	sp, sp, #16
 777              	.LCFI37:
 778              		.cfi_def_cfa_offset 24
 779 0004 00AF     		add	r7, sp, #0
 780              	.LCFI38:
 781              		.cfi_def_cfa_register 7
 782 0006 7860     		str	r0, [r7, #4]
 293:../main.c     **** 	uart_print_string(USART1,"Температура:   ",0);
 783              		.loc 1 293 0
 784 0008 4FF46050 		mov	r0, #14336
 785 000c C4F20100 		movt	r0, 16385
 786 0010 40F20001 		movw	r1, #:lower16:.LC3
 787 0014 C0F20001 		movt	r1, #:upper16:.LC3
 788 0018 4FF00002 		mov	r2, #0
 789 001c FFF7FEFF 		bl	uart_print_string
 790              	.L21:
 791              	.LBB4:
 294:../main.c     **** 	for(;;)
 295:../main.c     **** 	{
 296:../main.c     **** 		///// 1-wire /////
 297:../main.c     **** 			signed int t;
 298:../main.c     **** 
 299:../main.c     **** 			//uart_print_string(USART1, "Сбрасываем..",1);
 300:../main.c     **** 
 301:../main.c     **** 			//error_handle(One_Wire_Reset(One_Wire_Pin));
 302:../main.c     **** 
 303:../main.c     **** 			//error_handle(DS1821_Write_Status(One_Wire_Pin));
 304:../main.c     **** 
 305:../main.c     **** 			//error_handle(DS1821_Start_Conversion(One_Wire_Pin));
 306:../main.c     **** 			DS1821_Start_Conversion(One_Wire_Pin);
 792              		.loc 1 306 0 discriminator 1
 793 0020 4FF48050 		mov	r0, #4096
 794 0024 C4F20100 		movt	r0, 16385
 795 0028 4FF08001 		mov	r1, #128
 796 002c FFF7FEFF 		bl	DS1821_Start_Conversion
 307:../main.c     **** 			//delay_ms(750);
 308:../main.c     **** 
 309:../main.c     **** 			//error_handle(DS1821_Stop_Conversion(One_Wire_Pin));
 310:../main.c     **** 			//error_handle(DS1821_Read_Temp(&t, One_Wire_Pin));
 311:../main.c     **** 			DS1821_Read_Temp(&t, One_Wire_Pin);
 797              		.loc 1 311 0 discriminator 1
 798 0030 07F10C03 		add	r3, r7, #12
 799 0034 1846     		mov	r0, r3
 800 0036 4FF48051 		mov	r1, #4096
 801 003a C4F20101 		movt	r1, 16385
 802 003e 4FF08002 		mov	r2, #128
 803 0042 FFF7FEFF 		bl	DS1821_Read_Temp
 312:../main.c     **** 			uart_send_char(USART1, 8);
 804              		.loc 1 312 0 discriminator 1
 805 0046 4FF46050 		mov	r0, #14336
 806 004a C4F20100 		movt	r0, 16385
 807 004e 4FF00801 		mov	r1, #8
 808 0052 FFF7FEFF 		bl	uart_send_char
 313:../main.c     **** 			uart_send_char(USART1, 8);
 809              		.loc 1 313 0 discriminator 1
 810 0056 4FF46050 		mov	r0, #14336
 811 005a C4F20100 		movt	r0, 16385
 812 005e 4FF00801 		mov	r1, #8
 813 0062 FFF7FEFF 		bl	uart_send_char
 314:../main.c     **** 			uart_print_value(USART1, t);
 814              		.loc 1 314 0 discriminator 1
 815 0066 FB68     		ldr	r3, [r7, #12]
 816 0068 4FF46050 		mov	r0, #14336
 817 006c C4F20100 		movt	r0, 16385
 818 0070 1946     		mov	r1, r3
 819 0072 FFF7FEFF 		bl	uart_print_value
 315:../main.c     **** 			//uart_print_string(USART1,"",1);
 316:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 820              		.loc 1 316 0 discriminator 1
 821 0076 4FF48053 		mov	r3, #4096
 822 007a C4F20103 		movt	r3, 16385
 823 007e 4FF48052 		mov	r2, #4096
 824 0082 C4F20102 		movt	r2, 16385
 825 0086 D268     		ldr	r2, [r2, #12]
 826 0088 42F40072 		orr	r2, r2, #512
 827 008c DA60     		str	r2, [r3, #12]
 317:../main.c     **** 						//vTaskDelay(10);
 318:../main.c     **** 			delay_ms(10);
 828              		.loc 1 318 0 discriminator 1
 829 008e 4FF00A00 		mov	r0, #10
 830 0092 FFF7FEFF 		bl	delay_ms
 319:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 831              		.loc 1 319 0 discriminator 1
 832 0096 4FF48053 		mov	r3, #4096
 833 009a C4F20103 		movt	r3, 16385
 834 009e 4FF48052 		mov	r2, #4096
 835 00a2 C4F20102 		movt	r2, 16385
 836 00a6 D268     		ldr	r2, [r2, #12]
 837 00a8 82F40072 		eor	r2, r2, #512
 838 00ac DA60     		str	r2, [r3, #12]
 320:../main.c     **** 			//////////////////
 321:../main.c     **** 			vTaskDelay(1000);
 839              		.loc 1 321 0 discriminator 1
 840 00ae 4FF47A70 		mov	r0, #1000
 841 00b2 FFF7FEFF 		bl	vTaskDelay
 842              	.LBE4:
 322:../main.c     **** 	}
 843              		.loc 1 322 0 discriminator 1
 844 00b6 B3E7     		b	.L21
 845              		.cfi_endproc
 846              	.LFE42:
 848              		.section	.rodata
 849 007f 00       		.align	2
 850              	.LC4:
 851 0080 4C454400 		.ascii	"LED\000"
 852              		.align	2
 853              	.LC5:
 854 0084 44533138 		.ascii	"DS1821\000"
 854      323100
 855              		.section	.text.main,"ax",%progbits
 856              		.align	2
 857              		.global	main
 858              		.thumb
 859              		.thumb_func
 861              	main:
 862              	.LFB43:
 323:../main.c     **** 	vTaskDelete(NULL);
 324:../main.c     **** }
 325:../main.c     **** 
 326:../main.c     **** 
 327:../main.c     **** 
 328:../main.c     **** int main()
 329:../main.c     **** {
 863              		.loc 1 329 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              	.LCFI39:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 7, -8
 871              		.cfi_offset 14, -4
 872 0002 84B0     		sub	sp, sp, #16
 873              	.LCFI40:
 874              		.cfi_def_cfa_offset 24
 875 0004 04AF     		add	r7, sp, #16
 876              	.LCFI41:
 877              		.cfi_def_cfa 7, 8
 330:../main.c     **** 	vFreeRTOSInitAll();
 878              		.loc 1 330 0
 879 0006 FFF7FEFF 		bl	vFreeRTOSInitAll
 331:../main.c     **** 
 332:../main.c     **** 	xTaskCreate( vTaskLED, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, NULL, 2,
 880              		.loc 1 332 0
 881 000a 4FF00203 		mov	r3, #2
 882 000e 0093     		str	r3, [sp, #0]
 883 0010 4FF00003 		mov	r3, #0
 884 0014 0193     		str	r3, [sp, #4]
 885 0016 4FF00003 		mov	r3, #0
 886 001a 0293     		str	r3, [sp, #8]
 887 001c 4FF00003 		mov	r3, #0
 888 0020 0393     		str	r3, [sp, #12]
 889 0022 40F20000 		movw	r0, #:lower16:vTaskLED
 890 0026 C0F20000 		movt	r0, #:upper16:vTaskLED
 891 002a 40F20001 		movw	r1, #:lower16:.LC4
 892 002e C0F20001 		movt	r1, #:upper16:.LC4
 893 0032 4FF04602 		mov	r2, #70
 894 0036 4FF00003 		mov	r3, #0
 895 003a FFF7FEFF 		bl	xTaskGenericCreate
 333:../main.c     **** 	                        ( xTaskHandle * ) NULL);
 334:../main.c     **** 	//xTaskCreate(vTaskUSART_TX, (signed char*)"USART_TX", configMINIMAL_STACK_SIZE, NULL, 2,
 335:../main.c     ****       //      				( xTaskHandle * ) NULL);
 336:../main.c     **** 	xTaskCreate( vTaskDS1821, ( signed char * ) "DS1821", configMINIMAL_STACK_SIZE, NULL, 2,
 896              		.loc 1 336 0
 897 003e 4FF00203 		mov	r3, #2
 898 0042 0093     		str	r3, [sp, #0]
 899 0044 4FF00003 		mov	r3, #0
 900 0048 0193     		str	r3, [sp, #4]
 901 004a 4FF00003 		mov	r3, #0
 902 004e 0293     		str	r3, [sp, #8]
 903 0050 4FF00003 		mov	r3, #0
 904 0054 0393     		str	r3, [sp, #12]
 905 0056 40F20000 		movw	r0, #:lower16:vTaskDS1821
 906 005a C0F20000 		movt	r0, #:upper16:vTaskDS1821
 907 005e 40F20001 		movw	r1, #:lower16:.LC5
 908 0062 C0F20001 		movt	r1, #:upper16:.LC5
 909 0066 4FF04602 		mov	r2, #70
 910 006a 4FF00003 		mov	r3, #0
 911 006e FFF7FEFF 		bl	xTaskGenericCreate
 337:../main.c     **** 		                        ( xTaskHandle * ) NULL);
 338:../main.c     **** 	vTaskStartScheduler();
 912              		.loc 1 338 0
 913 0072 FFF7FEFF 		bl	vTaskStartScheduler
 914              	.L23:
 339:../main.c     **** 
 340:../main.c     **** 	for(;;)
 341:../main.c     **** 	{
 342:../main.c     **** //
 343:../main.c     **** 	}
 915              		.loc 1 343 0 discriminator 1
 916 0076 FEE7     		b	.L23
 917              		.cfi_endproc
 918              	.LFE43:
 920              		.section	.rodata
 921 008b 00       		.align	2
 922              	.LC6:
 923 008c 53756363 		.ascii	"Success! GoodLuck!\000"
 923      65737321 
 923      20476F6F 
 923      644C7563 
 923      6B2100
 924 009f 00       		.align	2
 925              	.LC7:
 926 00a0 4E6F2065 		.ascii	"No echo from device!\000"
 926      63686F20 
 926      66726F6D 
 926      20646576 
 926      69636521 
 927 00b5 000000   		.align	2
 928              	.LC8:
 929 00b8 50696E20 		.ascii	"Pin LOW error!\000"
 929      4C4F5720 
 929      6572726F 
 929      722100
 930 00c7 00       		.align	2
 931              	.LC9:
 932 00c8 43524320 		.ascii	"CRC not match!\000"
 932      6E6F7420 
 932      6D617463 
 932      682100
 933 00d7 00       		.section	.text.error_handle,"ax",%progbits
 934              		.align	2
 935              		.global	error_handle
 936              		.thumb
 937              		.thumb_func
 939              	error_handle:
 940              	.LFB44:
 344:../main.c     **** 	return 0;
 345:../main.c     **** }
 346:../main.c     **** 
 347:../main.c     **** unsigned char error_handle (unsigned char err)
 348:../main.c     **** {
 941              		.loc 1 348 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 8
 944              		@ frame_needed = 1, uses_anonymous_args = 0
 945 0000 80B5     		push	{r7, lr}
 946              	.LCFI42:
 947              		.cfi_def_cfa_offset 8
 948              		.cfi_offset 7, -8
 949              		.cfi_offset 14, -4
 950 0002 82B0     		sub	sp, sp, #8
 951              	.LCFI43:
 952              		.cfi_def_cfa_offset 16
 953 0004 00AF     		add	r7, sp, #0
 954              	.LCFI44:
 955              		.cfi_def_cfa_register 7
 956 0006 0346     		mov	r3, r0
 957 0008 FB71     		strb	r3, [r7, #7]
 349:../main.c     **** 	switch (err)
 958              		.loc 1 349 0
 959 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 960 000c 042B     		cmp	r3, #4
 961 000e 41D8     		bhi	.L25
 962 0010 01A2     		adr	r2, .L30
 963 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 964 0016 00BF     		.align	2
 965              	.L30:
 966 0018 2D000000 		.word	.L26+1
 967 001c 47000000 		.word	.L27+1
 968 0020 61000000 		.word	.L28+1
 969 0024 95000000 		.word	.L25+1
 970 0028 7B000000 		.word	.L29+1
 971              	.L26:
 972              	.LBB5:
 350:../main.c     **** 		{
 351:../main.c     **** 		 	case One_Wire_Success: 					uart_print_string(USART1, "Success! GoodLuck!",1); break;
 973              		.loc 1 351 0
 974 002c 4FF46050 		mov	r0, #14336
 975 0030 C4F20100 		movt	r0, 16385
 976 0034 40F20001 		movw	r1, #:lower16:.LC6
 977 0038 C0F20001 		movt	r1, #:upper16:.LC6
 978 003c 4FF00102 		mov	r2, #1
 979 0040 FFF7FEFF 		bl	uart_print_string
 980 0044 26E0     		b	.L25
 981              	.L27:
 352:../main.c     **** 		 	case One_Wire_Error_No_Echo: 			uart_print_string(USART1, "No echo from device!",1); break;
 982              		.loc 1 352 0
 983 0046 4FF46050 		mov	r0, #14336
 984 004a C4F20100 		movt	r0, 16385
 985 004e 40F20001 		movw	r1, #:lower16:.LC7
 986 0052 C0F20001 		movt	r1, #:upper16:.LC7
 987 0056 4FF00102 		mov	r2, #1
 988 005a FFF7FEFF 		bl	uart_print_string
 989 005e 19E0     		b	.L25
 990              	.L28:
 353:../main.c     **** 		 	case One_Wire_Bus_Low_Error: 			uart_print_string(USART1, "Pin LOW error!",1); break;
 991              		.loc 1 353 0
 992 0060 4FF46050 		mov	r0, #14336
 993 0064 C4F20100 		movt	r0, 16385
 994 0068 40F20001 		movw	r1, #:lower16:.LC8
 995 006c C0F20001 		movt	r1, #:upper16:.LC8
 996 0070 4FF00102 		mov	r2, #1
 997 0074 FFF7FEFF 		bl	uart_print_string
 998 0078 0CE0     		b	.L25
 999              	.L29:
 354:../main.c     **** 		 	case One_Wire_CRC_Error: 				uart_print_string(USART1, "CRC not match!",1); break;
 1000              		.loc 1 354 0
 1001 007a 4FF46050 		mov	r0, #14336
 1002 007e C4F20100 		movt	r0, 16385
 1003 0082 40F20001 		movw	r1, #:lower16:.LC9
 1004 0086 C0F20001 		movt	r1, #:upper16:.LC9
 1005 008a 4FF00102 		mov	r2, #1
 1006 008e FFF7FEFF 		bl	uart_print_string
 1007 0092 00BF     		nop
 1008              	.L25:
 1009              	.LBE5:
 355:../main.c     **** 		}
 356:../main.c     **** 		if (err==One_Wire_Success) return 0; else return 1;//uart_print_string(USART1, "GoodLuck!",1);
 1010              		.loc 1 356 0
 1011 0094 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1012 0096 002B     		cmp	r3, #0
 1013 0098 02D1     		bne	.L31
 1014              		.loc 1 356 0 is_stmt 0 discriminator 1
 1015 009a 4FF00003 		mov	r3, #0
 1016 009e 01E0     		b	.L32
 1017              	.L31:
 1018              		.loc 1 356 0 discriminator 2
 1019 00a0 4FF00103 		mov	r3, #1
 1020              	.L32:
 357:../main.c     **** }
 1021              		.loc 1 357 0 is_stmt 1
 1022 00a4 1846     		mov	r0, r3
 1023 00a6 07F10807 		add	r7, r7, #8
 1024 00aa BD46     		mov	sp, r7
 1025 00ac 80BD     		pop	{r7, pc}
 1026              		.cfi_endproc
 1027              	.LFE44:
 1029 00ae 00BF     		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 1030              		.align	2
 1031              		.global	vApplicationMallocFailedHook
 1032              		.thumb
 1033              		.thumb_func
 1035              	vApplicationMallocFailedHook:
 1036              	.LFB45:
 358:../main.c     **** 
 359:../main.c     **** void vApplicationMallocFailedHook( void )
 360:../main.c     **** {
 1037              		.loc 1 360 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 1, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 1042 0000 80B4     		push	{r7}
 1043              	.LCFI45:
 1044              		.cfi_def_cfa_offset 4
 1045              		.cfi_offset 7, -4
 1046 0002 00AF     		add	r7, sp, #0
 1047              	.LCFI46:
 1048              		.cfi_def_cfa_register 7
 1049              	.L34:
 361:../main.c     **** 	/* Called if a call to pvPortMalloc() fails because there is insufficient
 362:../main.c     **** 	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
 363:../main.c     **** 	internally by FreeRTOS API functions that create tasks, queues, software
 364:../main.c     **** 	timers, and semaphores.  The size of the FreeRTOS heap is set by the
 365:../main.c     **** 	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
 366:../main.c     **** 	for( ;; );
 1050              		.loc 1 366 0 discriminator 1
 1051 0004 FEE7     		b	.L34
 1052              		.cfi_endproc
 1053              	.LFE45:
 1055 0006 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 1056              		.align	2
 1057              		.global	vApplicationStackOverflowHook
 1058              		.thumb
 1059              		.thumb_func
 1061              	vApplicationStackOverflowHook:
 1062              	.LFB46:
 367:../main.c     **** }
 368:../main.c     **** /*-----------------------------------------------------------*/
 369:../main.c     **** 
 370:../main.c     **** void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
 371:../main.c     **** {
 1063              		.loc 1 371 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 8
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067              		@ link register save eliminated.
 1068 0000 80B4     		push	{r7}
 1069              	.LCFI47:
 1070              		.cfi_def_cfa_offset 4
 1071              		.cfi_offset 7, -4
 1072 0002 83B0     		sub	sp, sp, #12
 1073              	.LCFI48:
 1074              		.cfi_def_cfa_offset 16
 1075 0004 00AF     		add	r7, sp, #0
 1076              	.LCFI49:
 1077              		.cfi_def_cfa_register 7
 1078 0006 7860     		str	r0, [r7, #4]
 1079 0008 3960     		str	r1, [r7, #0]
 1080              	.L36:
 372:../main.c     **** 	( void ) pcTaskName;
 373:../main.c     **** 	( void ) pxTask;
 374:../main.c     **** 
 375:../main.c     **** 	/* Run time stack overflow checking is performed if
 376:../main.c     **** 	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 377:../main.c     **** 	function is called if a stack overflow is detected. */
 378:../main.c     **** 	for( ;; );
 1081              		.loc 1 378 0 discriminator 1
 1082 000a FEE7     		b	.L36
 1083              		.cfi_endproc
 1084              	.LFE46:
 1086              		.section	.text.vApplicationIdleHook,"ax",%progbits
 1087              		.align	2
 1088              		.global	vApplicationIdleHook
 1089              		.thumb
 1090              		.thumb_func
 1092              	vApplicationIdleHook:
 1093              	.LFB47:
 379:../main.c     **** }
 380:../main.c     **** /*-----------------------------------------------------------*/
 381:../main.c     **** 
 382:../main.c     **** void vApplicationIdleHook( void )
 383:../main.c     **** {
 1094              		.loc 1 383 0
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 8
 1097              		@ frame_needed = 1, uses_anonymous_args = 0
 1098 0000 80B5     		push	{r7, lr}
 1099              	.LCFI50:
 1100              		.cfi_def_cfa_offset 8
 1101              		.cfi_offset 7, -8
 1102              		.cfi_offset 14, -4
 1103 0002 82B0     		sub	sp, sp, #8
 1104              	.LCFI51:
 1105              		.cfi_def_cfa_offset 16
 1106 0004 00AF     		add	r7, sp, #0
 1107              	.LCFI52:
 1108              		.cfi_def_cfa_register 7
 384:../main.c     **** volatile size_t xFreeStackSpace;
 385:../main.c     **** 
 386:../main.c     **** 	/* This function is called on each cycle of the idle task.  In this case it
 387:../main.c     **** 	does nothing useful, other than report the amout of FreeRTOS heap that
 388:../main.c     **** 	remains unallocated. */
 389:../main.c     **** 	xFreeStackSpace = xPortGetFreeHeapSize();
 1109              		.loc 1 389 0
 1110 0006 FFF7FEFF 		bl	xPortGetFreeHeapSize
 1111 000a 0346     		mov	r3, r0
 1112 000c 7B60     		str	r3, [r7, #4]
 390:../main.c     **** 
 391:../main.c     **** 	if( xFreeStackSpace > 100 )
 1113              		.loc 1 391 0
 1114 000e 7B68     		ldr	r3, [r7, #4]
 392:../main.c     **** 	{
 393:../main.c     **** 		/* By now, the kernel has allocated everything it is going to, so
 394:../main.c     **** 		if there is a lot of heap remaining unallocated then
 395:../main.c     **** 		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
 396:../main.c     **** 		reduced accordingly. */
 397:../main.c     **** 	}
 398:../main.c     **** }
 1115              		.loc 1 398 0
 1116 0010 07F10807 		add	r7, r7, #8
 1117 0014 BD46     		mov	sp, r7
 1118 0016 80BD     		pop	{r7, pc}
 1119              		.cfi_endproc
 1120              	.LFE47:
 1122              		.section	.text.UARTSend,"ax",%progbits
 1123              		.align	2
 1124              		.global	UARTSend
 1125              		.thumb
 1126              		.thumb_func
 1128              	UARTSend:
 1129              	.LFB48:
 399:../main.c     **** 
 400:../main.c     **** /*******************************************************************************
 401:../main.c     **** * Function Name  : UARTSend
 402:../main.c     **** * Description    : Send a string to the UART.
 403:../main.c     **** * Input          : - pucBuffer: buffers to be printed.
 404:../main.c     **** *                : - ulCount  : buffer's length
 405:../main.c     **** * Output         : None
 406:../main.c     **** * Return         : None
 407:../main.c     **** *******************************************************************************/
 408:../main.c     **** void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
 409:../main.c     **** {
 1130              		.loc 1 409 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 8
 1133              		@ frame_needed = 1, uses_anonymous_args = 0
 1134 0000 80B5     		push	{r7, lr}
 1135              	.LCFI53:
 1136              		.cfi_def_cfa_offset 8
 1137              		.cfi_offset 7, -8
 1138              		.cfi_offset 14, -4
 1139 0002 82B0     		sub	sp, sp, #8
 1140              	.LCFI54:
 1141              		.cfi_def_cfa_offset 16
 1142 0004 00AF     		add	r7, sp, #0
 1143              	.LCFI55:
 1144              		.cfi_def_cfa_register 7
 1145 0006 7860     		str	r0, [r7, #4]
 1146 0008 3960     		str	r1, [r7, #0]
 410:../main.c     ****     //
 411:../main.c     ****     // Loop while there are more characters to send.
 412:../main.c     ****     //
 413:../main.c     ****     while(ulCount--)
 1147              		.loc 1 413 0
 1148 000a 18E0     		b	.L39
 1149              	.L41:
 414:../main.c     ****     {
 415:../main.c     ****         USART_SendData(USART1, (uint16_t) *pucBuffer++);
 1150              		.loc 1 415 0
 1151 000c 7B68     		ldr	r3, [r7, #4]
 1152 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1153 0010 7A68     		ldr	r2, [r7, #4]
 1154 0012 02F10102 		add	r2, r2, #1
 1155 0016 7A60     		str	r2, [r7, #4]
 1156 0018 4FF46050 		mov	r0, #14336
 1157 001c C4F20100 		movt	r0, 16385
 1158 0020 1946     		mov	r1, r3
 1159 0022 FFF7FEFF 		bl	USART_SendData
 416:../main.c     ****         /* Loop until the end of transmission */
 417:../main.c     ****         while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 1160              		.loc 1 417 0
 1161 0026 00BF     		nop
 1162              	.L40:
 1163              		.loc 1 417 0 is_stmt 0 discriminator 1
 1164 0028 4FF46050 		mov	r0, #14336
 1165 002c C4F20100 		movt	r0, 16385
 1166 0030 4FF04001 		mov	r1, #64
 1167 0034 FFF7FEFF 		bl	USART_GetFlagStatus
 1168 0038 0346     		mov	r3, r0
 1169 003a 002B     		cmp	r3, #0
 1170 003c F4D0     		beq	.L40
 1171              	.L39:
 413:../main.c     ****     while(ulCount--)
 1172              		.loc 1 413 0 is_stmt 1 discriminator 1
 1173 003e 3B68     		ldr	r3, [r7, #0]
 1174 0040 002B     		cmp	r3, #0
 1175 0042 0CBF     		ite	eq
 1176 0044 0023     		moveq	r3, #0
 1177 0046 0123     		movne	r3, #1
 1178 0048 DBB2     		uxtb	r3, r3
 1179 004a 3A68     		ldr	r2, [r7, #0]
 1180 004c 02F1FF32 		add	r2, r2, #-1
 1181 0050 3A60     		str	r2, [r7, #0]
 1182 0052 002B     		cmp	r3, #0
 1183 0054 DAD1     		bne	.L41
 418:../main.c     ****         {
 419:../main.c     ****         }
 420:../main.c     ****     }
 421:../main.c     **** }
 1184              		.loc 1 421 0
 1185 0056 07F10807 		add	r7, r7, #8
 1186 005a BD46     		mov	sp, r7
 1187 005c 80BD     		pop	{r7, pc}
 1188              		.cfi_endproc
 1189              	.LFE48:
 1191 005e 00BF     		.text
 1192              	.Letext0:
 1193              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/include/
 1194              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeRTOS/Headers/task.h"
 1195              		.file 4 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 1196              		.file 5 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/stm32f10x.h"
 1197              		.file 6 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/misc
 1198              		.file 7 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1199              		.file 8 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1200              		.file 9 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1201              		.file 10 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cchBR9Xw.s:23     .bss.counter:00000000 counter
     /tmp/cchBR9Xw.s:20     .bss.counter:00000000 $d
     /tmp/cchBR9Xw.s:26     .text.SetupClock:00000000 $t
     /tmp/cchBR9Xw.s:31     .text.SetupClock:00000000 SetupClock
     /tmp/cchBR9Xw.s:102    .text.LEDsInit:00000000 $t
     /tmp/cchBR9Xw.s:107    .text.LEDsInit:00000000 LEDsInit
     /tmp/cchBR9Xw.s:151    .text.BtnInit:00000000 $t
     /tmp/cchBR9Xw.s:156    .text.BtnInit:00000000 BtnInit
     /tmp/cchBR9Xw.s:201    .text.USART_GPIO_Configuration:00000000 $t
     /tmp/cchBR9Xw.s:206    .text.USART_GPIO_Configuration:00000000 USART_GPIO_Configuration
     /tmp/cchBR9Xw.s:262    .rodata:00000000 $d
     /tmp/cchBR9Xw.s:263    .rodata:00000000 .LC0
     /tmp/cchBR9Xw.s:268    .text.USART_Configuration:00000000 $t
     /tmp/cchBR9Xw.s:273    .text.USART_Configuration:00000000 USART_Configuration
     /tmp/cchBR9Xw.s:338    .text.EXTI_Configuration:00000000 $t
     /tmp/cchBR9Xw.s:343    .text.EXTI_Configuration:00000000 EXTI_Configuration
     /tmp/cchBR9Xw.s:384    .text.NVIC_Configuration_USART1:00000000 $t
     /tmp/cchBR9Xw.s:389    .text.NVIC_Configuration_USART1:00000000 NVIC_Configuration_USART1
     /tmp/cchBR9Xw.s:445    .text.NVIC_Configuration_USER_BUTTON:00000000 $t
     /tmp/cchBR9Xw.s:450    .text.NVIC_Configuration_USER_BUTTON:00000000 NVIC_Configuration_USER_BUTTON
     /tmp/cchBR9Xw.s:495    .rodata:00000034 .LC1
     /tmp/cchBR9Xw.s:498    .text.EXTI0_IRQHandler:00000000 $t
     /tmp/cchBR9Xw.s:503    .text.EXTI0_IRQHandler:00000000 EXTI0_IRQHandler
     /tmp/cchBR9Xw.s:552    .text.vFreeRTOSInitAll:00000000 $t
     /tmp/cchBR9Xw.s:557    .text.vFreeRTOSInitAll:00000000 vFreeRTOSInitAll
     /tmp/cchBR9Xw.s:595    .text.vTaskLED:00000000 $t
     /tmp/cchBR9Xw.s:600    .text.vTaskLED:00000000 vTaskLED
     /tmp/cchBR9Xw.s:636    .text.USART1_IRQHandler:00000000 $t
     /tmp/cchBR9Xw.s:641    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/cchBR9Xw.s:1128   .text.UARTSend:00000000 UARTSend
     /tmp/cchBR9Xw.s:689    .rodata:00000040 .LC2
     /tmp/cchBR9Xw.s:694    .text.vTaskUSART_TX:00000000 $t
     /tmp/cchBR9Xw.s:699    .text.vTaskUSART_TX:00000000 vTaskUSART_TX
     /tmp/cchBR9Xw.s:756    .rodata:00000064 .LC3
     /tmp/cchBR9Xw.s:760    .text.vTaskDS1821:00000000 $t
     /tmp/cchBR9Xw.s:765    .text.vTaskDS1821:00000000 vTaskDS1821
     /tmp/cchBR9Xw.s:850    .rodata:00000080 .LC4
     /tmp/cchBR9Xw.s:853    .rodata:00000084 .LC5
     /tmp/cchBR9Xw.s:856    .text.main:00000000 $t
     /tmp/cchBR9Xw.s:861    .text.main:00000000 main
     /tmp/cchBR9Xw.s:922    .rodata:0000008c .LC6
     /tmp/cchBR9Xw.s:925    .rodata:000000a0 .LC7
     /tmp/cchBR9Xw.s:928    .rodata:000000b8 .LC8
     /tmp/cchBR9Xw.s:931    .rodata:000000c8 .LC9
     /tmp/cchBR9Xw.s:934    .text.error_handle:00000000 $t
     /tmp/cchBR9Xw.s:939    .text.error_handle:00000000 error_handle
     /tmp/cchBR9Xw.s:966    .text.error_handle:00000018 $d
     /tmp/cchBR9Xw.s:974    .text.error_handle:0000002c $t
     /tmp/cchBR9Xw.s:1030   .text.vApplicationMallocFailedHook:00000000 $t
     /tmp/cchBR9Xw.s:1035   .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
     /tmp/cchBR9Xw.s:1056   .text.vApplicationStackOverflowHook:00000000 $t
     /tmp/cchBR9Xw.s:1061   .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
     /tmp/cchBR9Xw.s:1087   .text.vApplicationIdleHook:00000000 $t
     /tmp/cchBR9Xw.s:1092   .text.vApplicationIdleHook:00000000 vApplicationIdleHook
     /tmp/cchBR9Xw.s:1123   .text.UARTSend:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f2d2167d278fc96c4a7439609634148
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.projdefs.h.76.214f319a5937dae232f0ee2912b07e1d
                           .group:00000000 wm4.FreeRTOSConfig.h.86.73ce2c6afaf7535ca053cc9af81f6119
                           .group:00000000 wm4.portmacro.h.77.8d562aa278cb516c96f7646e8f3849cb
                           .group:00000000 wm4.portable.h.332.e25bf3f97ebf50a0f90736144cb8c3f8
                           .group:00000000 wm4.mpu_wrappers.h.76.3abcfc7ebb6d78909ee0b4ad2f20f282
                           .group:00000000 wm4.FreeRTOS.h.159.741cbf33489b2c951994722716e9692e
                           .group:00000000 wm4.list.h.105.6a6307ce3396638a078c02ff83387dc6
                           .group:00000000 wm4.task.h.94.33ec4de8c3f825901c54e6cf58507761
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.assert.h.11.f9b6feb3ce5083ec030f5895cd9c4353
                           .group:00000000 wm4.stm32f10x.h.51.643d5396a325ce00fe75ea490db6ba44
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.524.bbf52ca28bdf7ef267115429e0387679
                           .group:00000000 wm4.stm32f10x_conf.h.9.3838e46d9de2be24c7ed73296c5ae8b5
                           .group:00000000 wm4.stm32f10x.h.8267.abe69e40cf43ea9673cb5d472d4b6964
                           .group:00000000 wm4.stm32f10x_tim.h.25.039a15552706aae650954590356e6d7a
                           .group:00000000 wm4.stm32f10x_rcc.h.25.ce2a81c1048696f722ee0c144eb62674
                           .group:00000000 wm4.misc.h.25.424b617a460d2f3de12ba0450a07cec2
                           .group:00000000 wm4.port.h.32.2852faaa22d6eb1bafbc0c1d982e4177
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_exti.h.25.d345a82aeadfd242f388606e48935354
                           .group:00000000 wm4.timer6.h.9.3db7dcb350563af9e32ef609858e4592
                           .group:00000000 wm4.oneWire.h.14.188ac6fc0985dc623b8f181759f0e155
                           .group:00000000 wm4.ds1821.h.14.68693e8168dc8fdc9849075b4c0da9f1

UNDEFINED SYMBOLS
RCC_DeInit
RCC_HSEConfig
RCC_GetFlagStatus
RCC_HCLKConfig
RCC_PCLK2Config
RCC_PCLK1Config
RCC_PLLConfig
RCC_PLLCmd
RCC_SYSCLKConfig
RCC_GetSYSCLKSource
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_EXTILineConfig
USART_Init
USART_Cmd
uart_print_string
EXTI_Init
NVIC_PriorityGroupConfig
NVIC_Init
USART_ITConfig
EXTI_ClearITPendingBit
delay_ms
TIM6Init
vTaskDelay
USART_GetITStatus
USART_ReceiveData
DS1821_Start_Conversion
DS1821_Read_Temp
uart_send_char
uart_print_value
xTaskGenericCreate
vTaskStartScheduler
xPortGetFreeHeapSize
USART_SendData
USART_GetFlagStatus
