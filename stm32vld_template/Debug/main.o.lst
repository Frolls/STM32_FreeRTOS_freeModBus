   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	counter
  19              		.section	.bss.counter,"aw",%nobits
  20              		.align	1
  23              	counter:
  24 0000 0000     		.space	2
  25              		.section	.text.SetupClock,"ax",%progbits
  26              		.align	2
  27              		.global	SetupClock
  28              		.thumb
  29              		.thumb_func
  31              	SetupClock:
  32              	.LFB29:
  33              		.file 1 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 12.03.2013
   5:../main.c     ****  *      Author: Frolls
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** /* Kernel includes. */
   9:../main.c     **** #include "FreeRTOS.h"
  10:../main.c     **** #include "task.h"
  11:../main.c     **** //#include "queue.h"
  12:../main.c     **** //#include "timers.h"
  13:../main.c     **** 
  14:../main.c     **** // Modbus
  15:../main.c     **** //#include "mb.h"
  16:../main.c     **** //#include "mbport.h"
  17:../main.c     **** 
  18:../main.c     **** /* STM32 Library includes. */
  19:../main.c     **** #include <stm32f10x.h>
  20:../main.c     **** #include <stm32f10x_gpio.h>
  21:../main.c     **** #include <stm32f10x_rcc.h>
  22:../main.c     **** #include <stm32f10x_usart.h>
  23:../main.c     **** #include <stm32f10x_exti.h>
  24:../main.c     **** #include <misc.h>
  25:../main.c     **** 
  26:../main.c     **** #include "timer6.h"
  27:../main.c     **** #include "ds1821.h"
  28:../main.c     **** #include "rtc.h"
  29:../main.c     **** 
  30:../main.c     **** #include "smallLEDPanel.h"
  31:../main.c     **** 
  32:../main.c     **** 
  33:../main.c     **** #define LED_PORT GPIOC
  34:../main.c     **** #define LED_GREEN GPIO_Pin_9
  35:../main.c     **** #define LED_BLUE GPIO_Pin_8
  36:../main.c     **** 
  37:../main.c     **** #define One_Wire_Pin 			GPIOC, GPIO_Pin_7
  38:../main.c     **** 
  39:../main.c     **** #define BAUDRATE 115200
  40:../main.c     **** 
  41:../main.c     **** volatile uint16_t counter = 0;
  42:../main.c     **** 
  43:../main.c     **** unsigned char error_handle (unsigned char err);
  44:../main.c     **** 
  45:../main.c     **** void SetupClock()
  46:../main.c     **** {
  34              		.loc 1 46 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 00AF     		add	r7, sp, #0
  44              	.LCFI1:
  45              		.cfi_def_cfa_register 7
  47:../main.c     **** 	RCC_DeInit ();                    /* RCC system reset(for debug purpose)*/
  46              		.loc 1 47 0
  47 0004 FFF7FEFF 		bl	RCC_DeInit
  48:../main.c     **** 	RCC_HSEConfig (RCC_HSE_ON);       /* Enable HSE                         */
  48              		.loc 1 48 0
  49 0008 4FF48030 		mov	r0, #65536
  50 000c FFF7FEFF 		bl	RCC_HSEConfig
  49:../main.c     **** 
  50:../main.c     **** 	/* Wait till HSE is ready                                               */
  51:../main.c     **** 	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
  51              		.loc 1 51 0
  52 0010 00BF     		nop
  53              	.L2:
  54              		.loc 1 51 0 is_stmt 0 discriminator 1
  55 0012 4FF03100 		mov	r0, #49
  56 0016 FFF7FEFF 		bl	RCC_GetFlagStatus
  57 001a 0346     		mov	r3, r0
  58 001c 002B     		cmp	r3, #0
  59 001e F8D0     		beq	.L2
  52:../main.c     **** 
  53:../main.c     **** 	RCC_HCLKConfig   (RCC_SYSCLK_Div1);   /* HCLK   = SYSCLK                */
  60              		.loc 1 53 0 is_stmt 1
  61 0020 4FF00000 		mov	r0, #0
  62 0024 FFF7FEFF 		bl	RCC_HCLKConfig
  54:../main.c     **** 	RCC_PCLK2Config  (RCC_HCLK_Div1);     /* PCLK2  = HCLK                  */
  63              		.loc 1 54 0
  64 0028 4FF00000 		mov	r0, #0
  65 002c FFF7FEFF 		bl	RCC_PCLK2Config
  55:../main.c     **** 	RCC_PCLK1Config  (RCC_HCLK_Div1);     /* PCLK1  = HCLK1                */
  66              		.loc 1 55 0
  67 0030 4FF00000 		mov	r0, #0
  68 0034 FFF7FEFF 		bl	RCC_PCLK1Config
  56:../main.c     **** 	//RCC_ADCCLKConfig (RCC_PCLK2_Div4);    /* ADCCLK = PCLK2/4               */
  57:../main.c     **** 
  58:../main.c     **** 	/* PLLCLK = 8MHz * 6 = 48 MHz                                           */
  59:../main.c     **** 	RCC_PLLConfig (RCC_PLLSource_PREDIV1, RCC_PLLMul_6);
  69              		.loc 1 59 0
  70 0038 4FF48030 		mov	r0, #65536
  71 003c 4FF48011 		mov	r1, #1048576
  72 0040 FFF7FEFF 		bl	RCC_PLLConfig
  60:../main.c     **** 
  61:../main.c     **** 	RCC_PLLCmd (ENABLE);                  /* Enable PLL                     */
  73              		.loc 1 61 0
  74 0044 4FF00100 		mov	r0, #1
  75 0048 FFF7FEFF 		bl	RCC_PLLCmd
  62:../main.c     **** 
  63:../main.c     **** 	/* Wait till PLL is ready                                               */
  64:../main.c     **** 	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
  76              		.loc 1 64 0
  77 004c 00BF     		nop
  78              	.L3:
  79              		.loc 1 64 0 is_stmt 0 discriminator 1
  80 004e 4FF03900 		mov	r0, #57
  81 0052 FFF7FEFF 		bl	RCC_GetFlagStatus
  82 0056 0346     		mov	r3, r0
  83 0058 002B     		cmp	r3, #0
  84 005a F8D0     		beq	.L3
  65:../main.c     **** 
  66:../main.c     **** 	/* Select PLL as system clock source                                    */
  67:../main.c     **** 	RCC_SYSCLKConfig (RCC_SYSCLKSource_PLLCLK);
  85              		.loc 1 67 0 is_stmt 1
  86 005c 4FF00200 		mov	r0, #2
  87 0060 FFF7FEFF 		bl	RCC_SYSCLKConfig
  68:../main.c     **** 
  69:../main.c     **** 	/* Wait till PLL is used as system clock source                         */
  70:../main.c     **** 	while (RCC_GetSYSCLKSource() != 0x08);
  88              		.loc 1 70 0
  89 0064 00BF     		nop
  90              	.L4:
  91              		.loc 1 70 0 is_stmt 0 discriminator 1
  92 0066 FFF7FEFF 		bl	RCC_GetSYSCLKSource
  93 006a 0346     		mov	r3, r0
  94 006c 082B     		cmp	r3, #8
  95 006e FAD1     		bne	.L4
  71:../main.c     **** }
  96              		.loc 1 71 0 is_stmt 1
  97 0070 80BD     		pop	{r7, pc}
  98              		.cfi_endproc
  99              	.LFE29:
 101 0072 00BF     		.section	.text.LEDsInit,"ax",%progbits
 102              		.align	2
 103              		.global	LEDsInit
 104              		.thumb
 105              		.thumb_func
 107              	LEDsInit:
 108              	.LFB30:
  72:../main.c     **** 
  73:../main.c     **** void LEDsInit()
  74:../main.c     **** {
 109              		.loc 1 74 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0000 80B5     		push	{r7, lr}
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 00AF     		add	r7, sp, #0
 119              	.LCFI3:
 120              		.cfi_def_cfa_register 7
  75:../main.c     ****    PIN_OUT_PP(LED_PORT, LED_BLUE);
 121              		.loc 1 75 0
 122 0004 4FF48050 		mov	r0, #4096
 123 0008 C4F20100 		movt	r0, 16385
 124 000c 4FF48071 		mov	r1, #256
 125 0010 FFF7FEFF 		bl	PIN_OUT_PP
  76:../main.c     ****    PIN_OUT_PP(LED_PORT, LED_GREEN);
 126              		.loc 1 76 0
 127 0014 4FF48050 		mov	r0, #4096
 128 0018 C4F20100 		movt	r0, 16385
 129 001c 4FF40071 		mov	r1, #512
 130 0020 FFF7FEFF 		bl	PIN_OUT_PP
  77:../main.c     **** }
 131              		.loc 1 77 0
 132 0024 80BD     		pop	{r7, pc}
 133              		.cfi_endproc
 134              	.LFE30:
 136 0026 00BF     		.section	.text.BtnInit,"ax",%progbits
 137              		.align	2
 138              		.global	BtnInit
 139              		.thumb
 140              		.thumb_func
 142              	BtnInit:
 143              	.LFB31:
  78:../main.c     **** 
  79:../main.c     **** void BtnInit()
  80:../main.c     **** {
 144              		.loc 1 80 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 8
 147              		@ frame_needed = 1, uses_anonymous_args = 0
 148 0000 80B5     		push	{r7, lr}
 149              	.LCFI4:
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 82B0     		sub	sp, sp, #8
 154              	.LCFI5:
 155              		.cfi_def_cfa_offset 16
 156 0004 00AF     		add	r7, sp, #0
 157              	.LCFI6:
 158              		.cfi_def_cfa_register 7
  81:../main.c     **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 159              		.loc 1 81 0
 160 0006 4FF00400 		mov	r0, #4
 161 000a 4FF00101 		mov	r1, #1
 162 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  82:../main.c     ****     GPIO_InitTypeDef GPIO_InitStructure;
  83:../main.c     **** 
  84:../main.c     ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 163              		.loc 1 84 0
 164 0012 4FF00103 		mov	r3, #1
 165 0016 BB80     		strh	r3, [r7, #4]	@ movhi
  85:../main.c     ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 166              		.loc 1 85 0
 167 0018 4FF00403 		mov	r3, #4
 168 001c FB71     		strb	r3, [r7, #7]
  86:../main.c     ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
 169              		.loc 1 86 0
 170 001e 07F10403 		add	r3, r7, #4
 171 0022 4FF40060 		mov	r0, #2048
 172 0026 C4F20100 		movt	r0, 16385
 173 002a 1946     		mov	r1, r3
 174 002c FFF7FEFF 		bl	GPIO_Init
  87:../main.c     ****     GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 175              		.loc 1 87 0
 176 0030 4FF00000 		mov	r0, #0
 177 0034 4FF00001 		mov	r1, #0
 178 0038 FFF7FEFF 		bl	GPIO_EXTILineConfig
  88:../main.c     **** }
 179              		.loc 1 88 0
 180 003c 07F10807 		add	r7, r7, #8
 181 0040 BD46     		mov	sp, r7
 182 0042 80BD     		pop	{r7, pc}
 183              		.cfi_endproc
 184              	.LFE31:
 186              		.section	.text.USART_GPIO_Configuration,"ax",%progbits
 187              		.align	2
 188              		.global	USART_GPIO_Configuration
 189              		.thumb
 190              		.thumb_func
 192              	USART_GPIO_Configuration:
 193              	.LFB32:
  89:../main.c     **** 
  90:../main.c     **** /*******************************************************************************
  91:../main.c     **** * Function Name  : USART_GPIO_Configuration
  92:../main.c     **** * Description    : Configures the different GPIO ports.
  93:../main.c     **** * Input          : None
  94:../main.c     **** * Output         : None
  95:../main.c     **** * Return         : None
  96:../main.c     **** *******************************************************************************/
  97:../main.c     **** void USART_GPIO_Configuration(void)
  98:../main.c     **** {
 194              		.loc 1 98 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 8
 197              		@ frame_needed = 1, uses_anonymous_args = 0
 198 0000 80B5     		push	{r7, lr}
 199              	.LCFI7:
 200              		.cfi_def_cfa_offset 8
 201              		.cfi_offset 7, -8
 202              		.cfi_offset 14, -4
 203 0002 82B0     		sub	sp, sp, #8
 204              	.LCFI8:
 205              		.cfi_def_cfa_offset 16
 206 0004 00AF     		add	r7, sp, #0
 207              	.LCFI9:
 208              		.cfi_def_cfa_register 7
  99:../main.c     ****   /* Enable GPIOA clock */
 100:../main.c     ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 209              		.loc 1 100 0
 210 0006 4FF00400 		mov	r0, #4
 211 000a 4FF00101 		mov	r1, #1
 212 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 101:../main.c     **** 
 102:../main.c     ****   GPIO_InitTypeDef GPIO_InitStructure;
 103:../main.c     **** 
 104:../main.c     ****   /* Configure USART1 Tx (PA.09) as alternate function push-pull */
 105:../main.c     ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 213              		.loc 1 105 0
 214 0012 4FF40073 		mov	r3, #512
 215 0016 BB80     		strh	r3, [r7, #4]	@ movhi
 106:../main.c     ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 216              		.loc 1 106 0
 217 0018 4FF01803 		mov	r3, #24
 218 001c FB71     		strb	r3, [r7, #7]
 107:../main.c     ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 219              		.loc 1 107 0
 220 001e 4FF00303 		mov	r3, #3
 221 0022 BB71     		strb	r3, [r7, #6]
 108:../main.c     ****   GPIO_Init(GPIOA, &GPIO_InitStructure);
 222              		.loc 1 108 0
 223 0024 07F10403 		add	r3, r7, #4
 224 0028 4FF40060 		mov	r0, #2048
 225 002c C4F20100 		movt	r0, 16385
 226 0030 1946     		mov	r1, r3
 227 0032 FFF7FEFF 		bl	GPIO_Init
 109:../main.c     **** 
 110:../main.c     ****   /* Configure USART1 Rx (PA.10) as input floating */
 111:../main.c     ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 228              		.loc 1 111 0
 229 0036 4FF48063 		mov	r3, #1024
 230 003a BB80     		strh	r3, [r7, #4]	@ movhi
 112:../main.c     ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 231              		.loc 1 112 0
 232 003c 4FF00403 		mov	r3, #4
 233 0040 FB71     		strb	r3, [r7, #7]
 113:../main.c     ****   GPIO_Init(GPIOA, &GPIO_InitStructure);
 234              		.loc 1 113 0
 235 0042 07F10403 		add	r3, r7, #4
 236 0046 4FF40060 		mov	r0, #2048
 237 004a C4F20100 		movt	r0, 16385
 238 004e 1946     		mov	r1, r3
 239 0050 FFF7FEFF 		bl	GPIO_Init
 114:../main.c     **** }
 240              		.loc 1 114 0
 241 0054 07F10807 		add	r7, r7, #8
 242 0058 BD46     		mov	sp, r7
 243 005a 80BD     		pop	{r7, pc}
 244              		.cfi_endproc
 245              	.LFE32:
 247              		.section	.rodata
 248              		.align	2
 249              	.LC0:
 250 0000 0A3D3D3D 		.ascii	"\012===== UART1 \320\270\320\275\320\270\321\206\320"
 250      3D3D2055 
 250      41525431 
 250      20D0B8D0 
 250      BDD0B8D1 
 251 0016 B8D0B0D0 		.ascii	"\270\320\260\320\273\320\270\320\267\320\270\321\200"
 251      BBD0B8D0 
 251      B7D0B8D1 
 251      80
 252 0023 D0BED0B2 		.ascii	"\320\276\320\262\320\260\320\275 =====\000"
 252      D0B0D0BD 
 252      203D3D3D 
 252      3D3D00
 253              		.section	.text.USART_Configuration,"ax",%progbits
 254              		.align	2
 255              		.global	USART_Configuration
 256              		.thumb
 257              		.thumb_func
 259              	USART_Configuration:
 260              	.LFB33:
 115:../main.c     **** 
 116:../main.c     **** /*******************************************************************************
 117:../main.c     **** * Function Name  : USART_Configuration
 118:../main.c     **** * Description    : Configures the USART1.
 119:../main.c     **** * Input          : None
 120:../main.c     **** * Output         : None
 121:../main.c     **** * Return         : None
 122:../main.c     **** *******************************************************************************/
 123:../main.c     **** void USART_Configuration(void)
 124:../main.c     **** {
 261              		.loc 1 124 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 16
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 80B5     		push	{r7, lr}
 266              	.LCFI10:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 84B0     		sub	sp, sp, #16
 271              	.LCFI11:
 272              		.cfi_def_cfa_offset 24
 273 0004 00AF     		add	r7, sp, #0
 274              	.LCFI12:
 275              		.cfi_def_cfa_register 7
 125:../main.c     ****   /* Enable USART1 */
 126:../main.c     ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 276              		.loc 1 126 0
 277 0006 4FF48040 		mov	r0, #16384
 278 000a 4FF00101 		mov	r1, #1
 279 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 127:../main.c     **** 
 128:../main.c     ****   USART_InitTypeDef USART_InitStructure;
 129:../main.c     **** 
 130:../main.c     **** /* USART1 configuration ------------------------------------------------------*/
 131:../main.c     ****   /* USART1 configured as follow:
 132:../main.c     ****         - BaudRate = 115200 baud
 133:../main.c     ****         - Word Length = 8 Bits
 134:../main.c     ****         - One Stop Bit
 135:../main.c     ****         - No parity
 136:../main.c     ****         - Hardware flow control disabled (RTS and CTS signals)
 137:../main.c     ****         - Receive and transmit enabled
 138:../main.c     ****         - USART Clock disabled
 139:../main.c     ****         - USART CPOL: Clock is active low
 140:../main.c     ****         - USART CPHA: Data is captured on the middle
 141:../main.c     ****         - USART LastBit: The clock pulse of the last data bit is not output to
 142:../main.c     ****                          the SCLK pin
 143:../main.c     ****   */
 144:../main.c     ****   USART_InitStructure.USART_BaudRate = BAUDRATE;
 280              		.loc 1 144 0
 281 0012 4FF4E133 		mov	r3, #115200
 282 0016 3B60     		str	r3, [r7, #0]
 145:../main.c     ****   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 283              		.loc 1 145 0
 284 0018 4FF00003 		mov	r3, #0
 285 001c BB80     		strh	r3, [r7, #4]	@ movhi
 146:../main.c     ****   USART_InitStructure.USART_StopBits = USART_StopBits_1;
 286              		.loc 1 146 0
 287 001e 4FF00003 		mov	r3, #0
 288 0022 FB80     		strh	r3, [r7, #6]	@ movhi
 147:../main.c     ****   USART_InitStructure.USART_Parity = USART_Parity_No;
 289              		.loc 1 147 0
 290 0024 4FF00003 		mov	r3, #0
 291 0028 3B81     		strh	r3, [r7, #8]	@ movhi
 148:../main.c     ****   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 292              		.loc 1 148 0
 293 002a 4FF00003 		mov	r3, #0
 294 002e BB81     		strh	r3, [r7, #12]	@ movhi
 149:../main.c     ****   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 295              		.loc 1 149 0
 296 0030 4FF00C03 		mov	r3, #12
 297 0034 7B81     		strh	r3, [r7, #10]	@ movhi
 150:../main.c     **** 
 151:../main.c     ****   USART_Init(USART1, &USART_InitStructure);
 298              		.loc 1 151 0
 299 0036 3B46     		mov	r3, r7
 300 0038 4FF46050 		mov	r0, #14336
 301 003c C4F20100 		movt	r0, 16385
 302 0040 1946     		mov	r1, r3
 303 0042 FFF7FEFF 		bl	USART_Init
 152:../main.c     **** 
 153:../main.c     ****   /* Enable USART1 */
 154:../main.c     ****   USART_Cmd(USART1, ENABLE);
 304              		.loc 1 154 0
 305 0046 4FF46050 		mov	r0, #14336
 306 004a C4F20100 		movt	r0, 16385
 307 004e 4FF00101 		mov	r1, #1
 308 0052 FFF7FEFF 		bl	USART_Cmd
 155:../main.c     **** 
 156:../main.c     ****   uart_print_string(USART1, "\n===== UART1 инициализирован =====",1);
 309              		.loc 1 156 0
 310 0056 4FF46050 		mov	r0, #14336
 311 005a C4F20100 		movt	r0, 16385
 312 005e 40F20001 		movw	r1, #:lower16:.LC0
 313 0062 C0F20001 		movt	r1, #:upper16:.LC0
 314 0066 4FF00102 		mov	r2, #1
 315 006a FFF7FEFF 		bl	uart_print_string
 157:../main.c     **** }
 316              		.loc 1 157 0
 317 006e 07F11007 		add	r7, r7, #16
 318 0072 BD46     		mov	sp, r7
 319 0074 80BD     		pop	{r7, pc}
 320              		.cfi_endproc
 321              	.LFE33:
 323              		.section	.text.EXTI_Configuration,"ax",%progbits
 324              		.align	2
 325              		.global	EXTI_Configuration
 326              		.thumb
 327              		.thumb_func
 329              	EXTI_Configuration:
 330              	.LFB34:
 158:../main.c     **** 
 159:../main.c     **** void EXTI_Configuration(void)
 160:../main.c     **** {
 331              		.loc 1 160 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 8
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335 0000 80B5     		push	{r7, lr}
 336              	.LCFI13:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 7, -8
 339              		.cfi_offset 14, -4
 340 0002 82B0     		sub	sp, sp, #8
 341              	.LCFI14:
 342              		.cfi_def_cfa_offset 16
 343 0004 00AF     		add	r7, sp, #0
 344              	.LCFI15:
 345              		.cfi_def_cfa_register 7
 161:../main.c     ****   EXTI_InitTypeDef EXTI_InitStructure;
 162:../main.c     ****   EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 346              		.loc 1 162 0
 347 0006 4FF00103 		mov	r3, #1
 348 000a 3B60     		str	r3, [r7, #0]
 163:../main.c     ****   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 349              		.loc 1 163 0
 350 000c 4FF00003 		mov	r3, #0
 351 0010 3B71     		strb	r3, [r7, #4]
 164:../main.c     ****   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 352              		.loc 1 164 0
 353 0012 4FF00803 		mov	r3, #8
 354 0016 7B71     		strb	r3, [r7, #5]
 165:../main.c     ****   EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 355              		.loc 1 165 0
 356 0018 4FF00103 		mov	r3, #1
 357 001c BB71     		strb	r3, [r7, #6]
 166:../main.c     ****   EXTI_Init(&EXTI_InitStructure);
 358              		.loc 1 166 0
 359 001e 3B46     		mov	r3, r7
 360 0020 1846     		mov	r0, r3
 361 0022 FFF7FEFF 		bl	EXTI_Init
 167:../main.c     **** }
 362              		.loc 1 167 0
 363 0026 07F10807 		add	r7, r7, #8
 364 002a BD46     		mov	sp, r7
 365 002c 80BD     		pop	{r7, pc}
 366              		.cfi_endproc
 367              	.LFE34:
 369 002e 00BF     		.section	.text.NVIC_Configuration_USART1,"ax",%progbits
 370              		.align	2
 371              		.global	NVIC_Configuration_USART1
 372              		.thumb
 373              		.thumb_func
 375              	NVIC_Configuration_USART1:
 376              	.LFB35:
 168:../main.c     **** 
 169:../main.c     **** void NVIC_Configuration_USART1(void)
 170:../main.c     **** {
 377              		.loc 1 170 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 8
 380              		@ frame_needed = 1, uses_anonymous_args = 0
 381 0000 80B5     		push	{r7, lr}
 382              	.LCFI16:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
 386 0002 82B0     		sub	sp, sp, #8
 387              	.LCFI17:
 388              		.cfi_def_cfa_offset 16
 389 0004 00AF     		add	r7, sp, #0
 390              	.LCFI18:
 391              		.cfi_def_cfa_register 7
 171:../main.c     **** 	//configure NVIC
 172:../main.c     **** 	NVIC_InitTypeDef NVIC_InitStructure;
 173:../main.c     **** 
 174:../main.c     **** 	/* Place the vector table into FLASH */
 175:../main.c     **** 	//NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
 176:../main.c     **** 
 177:../main.c     **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 392              		.loc 1 177 0
 393 0006 4FF44070 		mov	r0, #768
 394 000a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 178:../main.c     **** 
 179:../main.c     **** 	//select NVIC channel to configure
 180:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 395              		.loc 1 180 0
 396 000e 4FF02503 		mov	r3, #37
 397 0012 3B71     		strb	r3, [r7, #4]
 181:../main.c     **** 	//set priority to lowest
 182:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 398              		.loc 1 182 0
 399 0014 4FF00F03 		mov	r3, #15
 400 0018 7B71     		strb	r3, [r7, #5]
 183:../main.c     **** 	//set subpriority to lowest
 184:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 401              		.loc 1 184 0
 402 001a 4FF00F03 		mov	r3, #15
 403 001e BB71     		strb	r3, [r7, #6]
 185:../main.c     **** 	//enable IRQ channel
 186:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 404              		.loc 1 186 0
 405 0020 4FF00103 		mov	r3, #1
 406 0024 FB71     		strb	r3, [r7, #7]
 187:../main.c     **** 	//update NVIC registers
 188:../main.c     **** 	NVIC_Init(&NVIC_InitStructure);
 407              		.loc 1 188 0
 408 0026 07F10403 		add	r3, r7, #4
 409 002a 1846     		mov	r0, r3
 410 002c FFF7FEFF 		bl	NVIC_Init
 189:../main.c     **** 
 190:../main.c     **** 	//disable Transmit Data Register empty interrupt
 191:../main.c     **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 411              		.loc 1 191 0
 412 0030 4FF46050 		mov	r0, #14336
 413 0034 C4F20100 		movt	r0, 16385
 414 0038 40F22771 		movw	r1, #1831
 415 003c 4FF00002 		mov	r2, #0
 416 0040 FFF7FEFF 		bl	USART_ITConfig
 192:../main.c     **** 	//enable Receive Data register not empty interrupt
 193:../main.c     **** 	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 417              		.loc 1 193 0
 418 0044 4FF46050 		mov	r0, #14336
 419 0048 C4F20100 		movt	r0, 16385
 420 004c 40F22551 		movw	r1, #1317
 421 0050 4FF00102 		mov	r2, #1
 422 0054 FFF7FEFF 		bl	USART_ITConfig
 194:../main.c     **** 
 195:../main.c     **** 
 196:../main.c     **** }
 423              		.loc 1 196 0
 424 0058 07F10807 		add	r7, r7, #8
 425 005c BD46     		mov	sp, r7
 426 005e 80BD     		pop	{r7, pc}
 427              		.cfi_endproc
 428              	.LFE35:
 430              		.section	.text.NVIC_Configuration_USER_BUTTON,"ax",%progbits
 431              		.align	2
 432              		.global	NVIC_Configuration_USER_BUTTON
 433              		.thumb
 434              		.thumb_func
 436              	NVIC_Configuration_USER_BUTTON:
 437              	.LFB36:
 197:../main.c     **** 
 198:../main.c     **** void NVIC_Configuration_USER_BUTTON(void)
 199:../main.c     **** {
 438              		.loc 1 199 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 8
 441              		@ frame_needed = 1, uses_anonymous_args = 0
 442 0000 80B5     		push	{r7, lr}
 443              	.LCFI19:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 7, -8
 446              		.cfi_offset 14, -4
 447 0002 82B0     		sub	sp, sp, #8
 448              	.LCFI20:
 449              		.cfi_def_cfa_offset 16
 450 0004 00AF     		add	r7, sp, #0
 451              	.LCFI21:
 452              		.cfi_def_cfa_register 7
 200:../main.c     **** 	NVIC_InitTypeDef NVIC_InitStructure;
 201:../main.c     **** 
 202:../main.c     **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 453              		.loc 1 202 0
 454 0006 4FF44070 		mov	r0, #768
 455 000a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 203:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 456              		.loc 1 203 0
 457 000e 4FF00603 		mov	r3, #6
 458 0012 3B71     		strb	r3, [r7, #4]
 204:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 459              		.loc 1 204 0
 460 0014 4FF00F03 		mov	r3, #15
 461 0018 7B71     		strb	r3, [r7, #5]
 205:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 462              		.loc 1 205 0
 463 001a 4FF00F03 		mov	r3, #15
 464 001e BB71     		strb	r3, [r7, #6]
 206:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 465              		.loc 1 206 0
 466 0020 4FF00103 		mov	r3, #1
 467 0024 FB71     		strb	r3, [r7, #7]
 207:../main.c     **** 	NVIC_Init(&NVIC_InitStructure);
 468              		.loc 1 207 0
 469 0026 07F10403 		add	r3, r7, #4
 470 002a 1846     		mov	r0, r3
 471 002c FFF7FEFF 		bl	NVIC_Init
 208:../main.c     **** }
 472              		.loc 1 208 0
 473 0030 07F10807 		add	r7, r7, #8
 474 0034 BD46     		mov	sp, r7
 475 0036 80BD     		pop	{r7, pc}
 476              		.cfi_endproc
 477              	.LFE36:
 479              		.section	.rodata
 480 0032 0000     		.align	2
 481              	.LC1:
 482 0034 D0A2D18B 		.ascii	"\320\242\321\213\320\275\321\206\000"
 482      D0BDD186 
 482      00
 483              		.section	.text.EXTI0_IRQHandler,"ax",%progbits
 484              		.align	2
 485              		.global	EXTI0_IRQHandler
 486              		.thumb
 487              		.thumb_func
 489              	EXTI0_IRQHandler:
 490              	.LFB37:
 209:../main.c     **** 
 210:../main.c     **** void EXTI0_IRQHandler(void)
 211:../main.c     **** {
 491              		.loc 1 211 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495 0000 80B5     		push	{r7, lr}
 496              	.LCFI22:
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 500 0002 00AF     		add	r7, sp, #0
 501              	.LCFI23:
 502              		.cfi_def_cfa_register 7
 212:../main.c     ****         EXTI_ClearITPendingBit(EXTI_Line0);
 503              		.loc 1 212 0
 504 0004 4FF00100 		mov	r0, #1
 505 0008 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 213:../main.c     **** 
 214:../main.c     ****         uart_print_string(USART1, "Тынц",1);
 506              		.loc 1 214 0
 507 000c 4FF46050 		mov	r0, #14336
 508 0010 C4F20100 		movt	r0, 16385
 509 0014 40F20001 		movw	r1, #:lower16:.LC1
 510 0018 C0F20001 		movt	r1, #:upper16:.LC1
 511 001c 4FF00102 		mov	r2, #1
 512 0020 FFF7FEFF 		bl	uart_print_string
 215:../main.c     **** 		{
 216:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 513              		.loc 1 216 0
 514 0024 4FF48053 		mov	r3, #4096
 515 0028 C4F20103 		movt	r3, 16385
 516 002c 4FF48052 		mov	r2, #4096
 517 0030 C4F20102 		movt	r2, 16385
 518 0034 D268     		ldr	r2, [r2, #12]
 519 0036 42F40072 		orr	r2, r2, #512
 520 003a DA60     		str	r2, [r3, #12]
 217:../main.c     **** 			//vTaskDelay(10);
 218:../main.c     **** 			delay_ms(10);
 521              		.loc 1 218 0
 522 003c 4FF00A00 		mov	r0, #10
 523 0040 FFF7FEFF 		bl	delay_ms
 219:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 524              		.loc 1 219 0
 525 0044 4FF48053 		mov	r3, #4096
 526 0048 C4F20103 		movt	r3, 16385
 527 004c 4FF48052 		mov	r2, #4096
 528 0050 C4F20102 		movt	r2, 16385
 529 0054 D268     		ldr	r2, [r2, #12]
 530 0056 82F40072 		eor	r2, r2, #512
 531 005a DA60     		str	r2, [r3, #12]
 220:../main.c     **** 		}
 221:../main.c     **** }
 532              		.loc 1 221 0
 533 005c 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE37:
 537 005e 00BF     		.section	.text.vFreeRTOSInitAll,"ax",%progbits
 538              		.align	2
 539              		.global	vFreeRTOSInitAll
 540              		.thumb
 541              		.thumb_func
 543              	vFreeRTOSInitAll:
 544              	.LFB38:
 222:../main.c     **** 
 223:../main.c     **** void vFreeRTOSInitAll()
 224:../main.c     **** {
 545              		.loc 1 224 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549 0000 80B5     		push	{r7, lr}
 550              	.LCFI24:
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 7, -8
 553              		.cfi_offset 14, -4
 554 0002 00AF     		add	r7, sp, #0
 555              	.LCFI25:
 556              		.cfi_def_cfa_register 7
 225:../main.c     **** 	SetupClock();
 557              		.loc 1 225 0
 558 0004 FFF7FEFF 		bl	SetupClock
 226:../main.c     **** 
 227:../main.c     **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 559              		.loc 1 227 0
 560 0008 4FF01000 		mov	r0, #16
 561 000c 4FF00101 		mov	r1, #1
 562 0010 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 228:../main.c     **** 	LEDsInit();
 563              		.loc 1 228 0
 564 0014 FFF7FEFF 		bl	LEDsInit
 229:../main.c     **** 
 230:../main.c     **** 	smallLEDPanel_Init();
 565              		.loc 1 230 0
 566 0018 FFF7FEFF 		bl	smallLEDPanel_Init
 231:../main.c     **** 
 232:../main.c     **** 	BtnInit();
 567              		.loc 1 232 0
 568 001c FFF7FEFF 		bl	BtnInit
 233:../main.c     **** 
 234:../main.c     **** 	EXTI_Configuration();
 569              		.loc 1 234 0
 570 0020 FFF7FEFF 		bl	EXTI_Configuration
 235:../main.c     **** 
 236:../main.c     **** 	USART_GPIO_Configuration();
 571              		.loc 1 236 0
 572 0024 FFF7FEFF 		bl	USART_GPIO_Configuration
 237:../main.c     **** 	USART_Configuration();
 573              		.loc 1 237 0
 574 0028 FFF7FEFF 		bl	USART_Configuration
 238:../main.c     **** 
 239:../main.c     **** 	NVIC_Configuration_USER_BUTTON();
 575              		.loc 1 239 0
 576 002c FFF7FEFF 		bl	NVIC_Configuration_USER_BUTTON
 240:../main.c     **** 	NVIC_Configuration_USART1();
 577              		.loc 1 240 0
 578 0030 FFF7FEFF 		bl	NVIC_Configuration_USART1
 241:../main.c     **** 
 242:../main.c     **** 	TIM6Init();
 579              		.loc 1 242 0
 580 0034 FFF7FEFF 		bl	TIM6Init
 243:../main.c     **** 
 244:../main.c     **** 	RTC_Config();
 581              		.loc 1 244 0
 582 0038 FFF7FEFF 		bl	RTC_Config
 245:../main.c     **** 
 246:../main.c     **** }
 583              		.loc 1 246 0
 584 003c 80BD     		pop	{r7, pc}
 585              		.cfi_endproc
 586              	.LFE38:
 588 003e 00BF     		.section	.text.vTaskLED,"ax",%progbits
 589              		.align	2
 590              		.global	vTaskLED
 591              		.thumb
 592              		.thumb_func
 594              	vTaskLED:
 595              	.LFB39:
 247:../main.c     **** 
 248:../main.c     **** void vTaskLED(void *pvParameters)
 249:../main.c     **** {
 596              		.loc 1 249 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 8
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600 0000 80B5     		push	{r7, lr}
 601              	.LCFI26:
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 7, -8
 604              		.cfi_offset 14, -4
 605 0002 82B0     		sub	sp, sp, #8
 606              	.LCFI27:
 607              		.cfi_def_cfa_offset 16
 608 0004 00AF     		add	r7, sp, #0
 609              	.LCFI28:
 610              		.cfi_def_cfa_register 7
 611 0006 7860     		str	r0, [r7, #4]
 612              	.L15:
 250:../main.c     **** 
 251:../main.c     ****         for (;;) {
 252:../main.c     ****         	//delay_ms(500);
 253:../main.c     ****         	LED_PORT->ODR ^= LED_BLUE;
 613              		.loc 1 253 0 discriminator 1
 614 0008 4FF48053 		mov	r3, #4096
 615 000c C4F20103 		movt	r3, 16385
 616 0010 4FF48052 		mov	r2, #4096
 617 0014 C4F20102 		movt	r2, 16385
 618 0018 D268     		ldr	r2, [r2, #12]
 619 001a 82F48072 		eor	r2, r2, #256
 620 001e DA60     		str	r2, [r3, #12]
 254:../main.c     ****             vTaskDelay(500);
 621              		.loc 1 254 0 discriminator 1
 622 0020 4FF4FA70 		mov	r0, #500
 623 0024 FFF7FEFF 		bl	vTaskDelay
 255:../main.c     **** 
 256:../main.c     ****             smallLEDPanel_Set(counter);
 624              		.loc 1 256 0 discriminator 1
 625 0028 40F20003 		movw	r3, #:lower16:counter
 626 002c C0F20003 		movt	r3, #:upper16:counter
 627 0030 1B88     		ldrh	r3, [r3, #0]	@ movhi
 628 0032 9BB2     		uxth	r3, r3
 629 0034 1846     		mov	r0, r3
 630 0036 FFF7FEFF 		bl	smallLEDPanel_Set
 257:../main.c     ****             //smallLEDPanel_Inc(1);
 258:../main.c     ****             //smallLEDPanel_All_On();
 259:../main.c     ****             //smallLEDPanel_Clear();
 260:../main.c     ****             //smallLEDPanel_Inc();
 261:../main.c     ****             //counter++;
 262:../main.c     ****         }
 631              		.loc 1 262 0 discriminator 1
 632 003a E5E7     		b	.L15
 633              		.cfi_endproc
 634              	.LFE39:
 636              		.section	.text.USART1_IRQHandler,"ax",%progbits
 637              		.align	2
 638              		.global	USART1_IRQHandler
 639              		.thumb
 640              		.thumb_func
 642              	USART1_IRQHandler:
 643              	.LFB40:
 263:../main.c     ****         vTaskDelete(NULL);
 264:../main.c     **** 
 265:../main.c     **** }
 266:../main.c     **** 
 267:../main.c     **** void USART1_IRQHandler(void)
 268:../main.c     **** {
 644              		.loc 1 268 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 8
 647              		@ frame_needed = 1, uses_anonymous_args = 0
 648 0000 80B5     		push	{r7, lr}
 649              	.LCFI29:
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 7, -8
 652              		.cfi_offset 14, -4
 653 0002 82B0     		sub	sp, sp, #8
 654              	.LCFI30:
 655              		.cfi_def_cfa_offset 16
 656 0004 00AF     		add	r7, sp, #0
 657              	.LCFI31:
 658              		.cfi_def_cfa_register 7
 269:../main.c     **** 
 270:../main.c     **** 	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 659              		.loc 1 270 0
 660 0006 4FF46050 		mov	r0, #14336
 661 000a C4F20100 		movt	r0, 16385
 662 000e 40F22551 		movw	r1, #1317
 663 0012 FFF7FEFF 		bl	USART_GetITStatus
 664 0016 0346     		mov	r3, r0
 665 0018 002B     		cmp	r3, #0
 666 001a 14D0     		beq	.L16
 667              	.LBB2:
 271:../main.c     **** 	    {
 272:../main.c     **** 		   // перемырг
 273:../main.c     **** 		   //LED_PORT->ODR |= LED_BLUE;
 274:../main.c     **** 		   //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 275:../main.c     **** 		   uint16_t i = USART_ReceiveData(USART1);
 668              		.loc 1 275 0
 669 001c 4FF46050 		mov	r0, #14336
 670 0020 C4F20100 		movt	r0, 16385
 671 0024 FFF7FEFF 		bl	USART_ReceiveData
 672 0028 0346     		mov	r3, r0
 673 002a FB80     		strh	r3, [r7, #6]	@ movhi
 276:../main.c     **** 		   UARTSend(&i, 1);
 674              		.loc 1 276 0
 675 002c 07F10603 		add	r3, r7, #6
 676 0030 1846     		mov	r0, r3
 677 0032 4FF00101 		mov	r1, #1
 678 0036 FFF7FEFF 		bl	UARTSend
 277:../main.c     **** 		   counter = i;
 679              		.loc 1 277 0
 680 003a FA88     		ldrh	r2, [r7, #6]
 681 003c 40F20003 		movw	r3, #:lower16:counter
 682 0040 C0F20003 		movt	r3, #:upper16:counter
 683 0044 1A80     		strh	r2, [r3, #0]	@ movhi
 684              	.L16:
 685              	.LBE2:
 278:../main.c     **** 		   //LED_PORT->ODR ^= LED_BLUE;
 279:../main.c     **** 		   //UARTSend(&i, 1);
 280:../main.c     ****           // UARTSend(" <-- data\r\n", 10);
 281:../main.c     ****         }
 282:../main.c     **** }
 686              		.loc 1 282 0
 687 0046 07F10807 		add	r7, r7, #8
 688 004a BD46     		mov	sp, r7
 689 004c 80BD     		pop	{r7, pc}
 690              		.cfi_endproc
 691              	.LFE40:
 693 004e 00BF     		.section	.rodata
 694 003d 000000   		.align	2
 695              	.LC2:
 696 0040 D0A1D186 		.ascii	"\320\241\321\206\321\203\320\272\320\276, \320\276\321"
 696      D183D0BA 
 696      D0BE2C20 
 696      D0BED1
 697 004f 82D0BBD0 		.ascii	"\202\320\273\320\260\320\264\321\214 \320\274\320\265"
 697      B0D0B4D1 
 697      8C20D0BC 
 697      D0B5
 698 005d D0BDD18F 		.ascii	"\320\275\321\217..\000"
 698      2E2E00
 699              		.section	.text.vTaskUSART_TX,"ax",%progbits
 700              		.align	2
 701              		.global	vTaskUSART_TX
 702              		.thumb
 703              		.thumb_func
 705              	vTaskUSART_TX:
 706              	.LFB41:
 283:../main.c     **** 
 284:../main.c     **** void vTaskUSART_TX(void *pvParameters)
 285:../main.c     **** {
 707              		.loc 1 285 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 8
 710              		@ frame_needed = 1, uses_anonymous_args = 0
 711 0000 80B5     		push	{r7, lr}
 712              	.LCFI32:
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 7, -8
 715              		.cfi_offset 14, -4
 716 0002 82B0     		sub	sp, sp, #8
 717              	.LCFI33:
 718              		.cfi_def_cfa_offset 16
 719 0004 00AF     		add	r7, sp, #0
 720              	.LCFI34:
 721              		.cfi_def_cfa_register 7
 722 0006 7860     		str	r0, [r7, #4]
 723              	.L19:
 724              	.LBB3:
 286:../main.c     **** 	for (;;) {
 287:../main.c     **** 
 288:../main.c     **** 		uart_print_string(USART1, "Сцуко, отладь меня..",1);
 725              		.loc 1 288 0 discriminator 1
 726 0008 4FF46050 		mov	r0, #14336
 727 000c C4F20100 		movt	r0, 16385
 728 0010 40F20001 		movw	r1, #:lower16:.LC2
 729 0014 C0F20001 		movt	r1, #:upper16:.LC2
 730 0018 4FF00102 		mov	r2, #1
 731 001c FFF7FEFF 		bl	uart_print_string
 289:../main.c     **** 		// перемырг
 290:../main.c     **** 		{
 291:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 732              		.loc 1 291 0 discriminator 1
 733 0020 4FF48053 		mov	r3, #4096
 734 0024 C4F20103 		movt	r3, 16385
 735 0028 4FF48052 		mov	r2, #4096
 736 002c C4F20102 		movt	r2, 16385
 737 0030 D268     		ldr	r2, [r2, #12]
 738 0032 42F40072 		orr	r2, r2, #512
 739 0036 DA60     		str	r2, [r3, #12]
 292:../main.c     **** 			vTaskDelay(10);
 740              		.loc 1 292 0 discriminator 1
 741 0038 4FF00A00 		mov	r0, #10
 742 003c FFF7FEFF 		bl	vTaskDelay
 293:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 743              		.loc 1 293 0 discriminator 1
 744 0040 4FF48053 		mov	r3, #4096
 745 0044 C4F20103 		movt	r3, 16385
 746 0048 4FF48052 		mov	r2, #4096
 747 004c C4F20102 		movt	r2, 16385
 748 0050 D268     		ldr	r2, [r2, #12]
 749 0052 82F40072 		eor	r2, r2, #512
 750 0056 DA60     		str	r2, [r3, #12]
 294:../main.c     **** 		}
 295:../main.c     **** 		vTaskDelay(1000);
 751              		.loc 1 295 0 discriminator 1
 752 0058 4FF47A70 		mov	r0, #1000
 753 005c FFF7FEFF 		bl	vTaskDelay
 754              	.LBE3:
 296:../main.c     **** 	}
 755              		.loc 1 296 0 discriminator 1
 756 0060 D2E7     		b	.L19
 757              		.cfi_endproc
 758              	.LFE41:
 760 0062 00BF     		.section	.rodata
 761              		.align	2
 762              	.LC3:
 763 0064 D0A2D0B5 		.ascii	"\320\242\320\265\320\274\320\277\320\265\321\200\320"
 763      D0BCD0BF 
 763      D0B5D180 
 763      D0
 764 0071 B0D182D1 		.ascii	"\260\321\202\321\203\321\200\320\260:   \000"
 764      83D180D0 
 764      B03A2020 
 764      2000
 765 007f 00       		.align	2
 766              	.LC4:
 767 0080 3B00     		.ascii	";\000"
 768 0082 0000     		.align	2
 769              	.LC5:
 770 0084 20557074 		.ascii	" Uptime: \000"
 770      696D653A 
 770      2000
 771 008e 0000     		.align	2
 772              	.LC6:
 773 0090 3A00     		.ascii	":\000"
 774 0092 0000     		.align	2
 775              	.LC7:
 776 0094 20436F75 		.ascii	" Counter: \000"
 776      6E746572 
 776      3A2000
 777 009f 00       		.align	2
 778              	.LC8:
 779 00a0 00       		.ascii	"\000"
 780              		.section	.text.vTaskDS1821,"ax",%progbits
 781              		.align	2
 782              		.global	vTaskDS1821
 783              		.thumb
 784              		.thumb_func
 786              	vTaskDS1821:
 787              	.LFB42:
 297:../main.c     **** 
 298:../main.c     ****     vTaskDelete(NULL);
 299:../main.c     **** }
 300:../main.c     **** 
 301:../main.c     **** void vTaskDS1821(void *pvParameters)
 302:../main.c     **** {
 788              		.loc 1 302 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 16
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792 0000 80B5     		push	{r7, lr}
 793              	.LCFI35:
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 84B0     		sub	sp, sp, #16
 798              	.LCFI36:
 799              		.cfi_def_cfa_offset 24
 800 0004 00AF     		add	r7, sp, #0
 801              	.LCFI37:
 802              		.cfi_def_cfa_register 7
 803 0006 7860     		str	r0, [r7, #4]
 303:../main.c     **** 	uart_print_string(USART1,"Температура:   ",0);
 804              		.loc 1 303 0
 805 0008 4FF46050 		mov	r0, #14336
 806 000c C4F20100 		movt	r0, 16385
 807 0010 40F20001 		movw	r1, #:lower16:.LC3
 808 0014 C0F20001 		movt	r1, #:upper16:.LC3
 809 0018 4FF00002 		mov	r2, #0
 810 001c FFF7FEFF 		bl	uart_print_string
 811              	.L21:
 812              	.LBB4:
 304:../main.c     **** 	for(;;)
 305:../main.c     **** 	{
 306:../main.c     **** 		///// 1-wire /////
 307:../main.c     **** 			signed int t;
 308:../main.c     **** 
 309:../main.c     **** 			//uart_print_string(USART1, "Сбрасываем..",1);
 310:../main.c     **** 
 311:../main.c     **** 			//error_handle(One_Wire_Reset(One_Wire_Pin));
 312:../main.c     **** 
 313:../main.c     **** 			//error_handle(DS1821_Write_Status(One_Wire_Pin));
 314:../main.c     **** 
 315:../main.c     **** 			//error_handle(DS1821_Start_Conversion(One_Wire_Pin));
 316:../main.c     **** 			DS1821_Start_Conversion(One_Wire_Pin);
 813              		.loc 1 316 0 discriminator 1
 814 0020 4FF48050 		mov	r0, #4096
 815 0024 C4F20100 		movt	r0, 16385
 816 0028 4FF08001 		mov	r1, #128
 817 002c FFF7FEFF 		bl	DS1821_Start_Conversion
 317:../main.c     **** 			//delay_ms(750);
 318:../main.c     **** 
 319:../main.c     **** 			//error_handle(DS1821_Stop_Conversion(One_Wire_Pin));
 320:../main.c     **** 			//error_handle(DS1821_Read_Temp(&t, One_Wire_Pin));
 321:../main.c     **** 			uart_print_string(USART1, "Температура:   ", 0);
 818              		.loc 1 321 0 discriminator 1
 819 0030 4FF46050 		mov	r0, #14336
 820 0034 C4F20100 		movt	r0, 16385
 821 0038 40F20001 		movw	r1, #:lower16:.LC3
 822 003c C0F20001 		movt	r1, #:upper16:.LC3
 823 0040 4FF00002 		mov	r2, #0
 824 0044 FFF7FEFF 		bl	uart_print_string
 322:../main.c     **** 			DS1821_Read_Temp(&t, One_Wire_Pin);
 825              		.loc 1 322 0 discriminator 1
 826 0048 07F10C03 		add	r3, r7, #12
 827 004c 1846     		mov	r0, r3
 828 004e 4FF48051 		mov	r1, #4096
 829 0052 C4F20101 		movt	r1, 16385
 830 0056 4FF08002 		mov	r2, #128
 831 005a FFF7FEFF 		bl	DS1821_Read_Temp
 323:../main.c     **** 			uart_send_char(USART1, 8);
 832              		.loc 1 323 0 discriminator 1
 833 005e 4FF46050 		mov	r0, #14336
 834 0062 C4F20100 		movt	r0, 16385
 835 0066 4FF00801 		mov	r1, #8
 836 006a FFF7FEFF 		bl	uart_send_char
 324:../main.c     **** 			uart_send_char(USART1, 8);
 837              		.loc 1 324 0 discriminator 1
 838 006e 4FF46050 		mov	r0, #14336
 839 0072 C4F20100 		movt	r0, 16385
 840 0076 4FF00801 		mov	r1, #8
 841 007a FFF7FEFF 		bl	uart_send_char
 325:../main.c     **** 			uart_print_value(USART1, t);
 842              		.loc 1 325 0 discriminator 1
 843 007e FB68     		ldr	r3, [r7, #12]
 844 0080 4FF46050 		mov	r0, #14336
 845 0084 C4F20100 		movt	r0, 16385
 846 0088 1946     		mov	r1, r3
 847 008a FFF7FEFF 		bl	uart_print_value
 326:../main.c     **** 			uart_print_string(USART1,";",0);
 848              		.loc 1 326 0 discriminator 1
 849 008e 4FF46050 		mov	r0, #14336
 850 0092 C4F20100 		movt	r0, 16385
 851 0096 40F20001 		movw	r1, #:lower16:.LC4
 852 009a C0F20001 		movt	r1, #:upper16:.LC4
 853 009e 4FF00002 		mov	r2, #0
 854 00a2 FFF7FEFF 		bl	uart_print_string
 327:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 855              		.loc 1 327 0 discriminator 1
 856 00a6 4FF48053 		mov	r3, #4096
 857 00aa C4F20103 		movt	r3, 16385
 858 00ae 4FF48052 		mov	r2, #4096
 859 00b2 C4F20102 		movt	r2, 16385
 860 00b6 D268     		ldr	r2, [r2, #12]
 861 00b8 42F40072 		orr	r2, r2, #512
 862 00bc DA60     		str	r2, [r3, #12]
 328:../main.c     **** 						//vTaskDelay(10);
 329:../main.c     **** 			delay_ms(10);
 863              		.loc 1 329 0 discriminator 1
 864 00be 4FF00A00 		mov	r0, #10
 865 00c2 FFF7FEFF 		bl	delay_ms
 330:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 866              		.loc 1 330 0 discriminator 1
 867 00c6 4FF48053 		mov	r3, #4096
 868 00ca C4F20103 		movt	r3, 16385
 869 00ce 4FF48052 		mov	r2, #4096
 870 00d2 C4F20102 		movt	r2, 16385
 871 00d6 D268     		ldr	r2, [r2, #12]
 872 00d8 82F40072 		eor	r2, r2, #512
 873 00dc DA60     		str	r2, [r3, #12]
 331:../main.c     **** 			uart_print_string(USART1, " Uptime: ", 0);
 874              		.loc 1 331 0 discriminator 1
 875 00de 4FF46050 		mov	r0, #14336
 876 00e2 C4F20100 		movt	r0, 16385
 877 00e6 40F20001 		movw	r1, #:lower16:.LC5
 878 00ea C0F20001 		movt	r1, #:upper16:.LC5
 879 00ee 4FF00002 		mov	r2, #0
 880 00f2 FFF7FEFF 		bl	uart_print_string
 332:../main.c     **** 			uart_print_value(USART1, Time_GetHours(GetTime()));
 881              		.loc 1 332 0 discriminator 1
 882 00f6 FFF7FEFF 		bl	GetTime
 883 00fa 0346     		mov	r3, r0
 884 00fc 1846     		mov	r0, r3
 885 00fe FFF7FEFF 		bl	Time_GetHours
 886 0102 0346     		mov	r3, r0
 887 0104 4FF46050 		mov	r0, #14336
 888 0108 C4F20100 		movt	r0, 16385
 889 010c 1946     		mov	r1, r3
 890 010e FFF7FEFF 		bl	uart_print_value
 333:../main.c     **** 			uart_print_string(USART1, ":", 0);
 891              		.loc 1 333 0 discriminator 1
 892 0112 4FF46050 		mov	r0, #14336
 893 0116 C4F20100 		movt	r0, 16385
 894 011a 40F20001 		movw	r1, #:lower16:.LC6
 895 011e C0F20001 		movt	r1, #:upper16:.LC6
 896 0122 4FF00002 		mov	r2, #0
 897 0126 FFF7FEFF 		bl	uart_print_string
 334:../main.c     **** 			uart_print_value(USART1, Time_GetMinutes(GetTime()));
 898              		.loc 1 334 0 discriminator 1
 899 012a FFF7FEFF 		bl	GetTime
 900 012e 0346     		mov	r3, r0
 901 0130 1846     		mov	r0, r3
 902 0132 FFF7FEFF 		bl	Time_GetMinutes
 903 0136 0346     		mov	r3, r0
 904 0138 4FF46050 		mov	r0, #14336
 905 013c C4F20100 		movt	r0, 16385
 906 0140 1946     		mov	r1, r3
 907 0142 FFF7FEFF 		bl	uart_print_value
 335:../main.c     **** 			uart_print_string(USART1, ":", 0);
 908              		.loc 1 335 0 discriminator 1
 909 0146 4FF46050 		mov	r0, #14336
 910 014a C4F20100 		movt	r0, 16385
 911 014e 40F20001 		movw	r1, #:lower16:.LC6
 912 0152 C0F20001 		movt	r1, #:upper16:.LC6
 913 0156 4FF00002 		mov	r2, #0
 914 015a FFF7FEFF 		bl	uart_print_string
 336:../main.c     **** 			uart_print_value(USART1, Time_GetSeconds(GetTime()));
 915              		.loc 1 336 0 discriminator 1
 916 015e FFF7FEFF 		bl	GetTime
 917 0162 0346     		mov	r3, r0
 918 0164 1846     		mov	r0, r3
 919 0166 FFF7FEFF 		bl	Time_GetSeconds
 920 016a 0346     		mov	r3, r0
 921 016c 4FF46050 		mov	r0, #14336
 922 0170 C4F20100 		movt	r0, 16385
 923 0174 1946     		mov	r1, r3
 924 0176 FFF7FEFF 		bl	uart_print_value
 337:../main.c     **** 			uart_print_string(USART1, " Counter: ", 0);
 925              		.loc 1 337 0 discriminator 1
 926 017a 4FF46050 		mov	r0, #14336
 927 017e C4F20100 		movt	r0, 16385
 928 0182 40F20001 		movw	r1, #:lower16:.LC7
 929 0186 C0F20001 		movt	r1, #:upper16:.LC7
 930 018a 4FF00002 		mov	r2, #0
 931 018e FFF7FEFF 		bl	uart_print_string
 338:../main.c     **** 			uart_print_value(USART1, counter);
 932              		.loc 1 338 0 discriminator 1
 933 0192 40F20003 		movw	r3, #:lower16:counter
 934 0196 C0F20003 		movt	r3, #:upper16:counter
 935 019a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 936 019c 9BB2     		uxth	r3, r3
 937 019e 4FF46050 		mov	r0, #14336
 938 01a2 C4F20100 		movt	r0, 16385
 939 01a6 1946     		mov	r1, r3
 940 01a8 FFF7FEFF 		bl	uart_print_value
 339:../main.c     **** 			uart_print_string(USART1, "", 1);
 941              		.loc 1 339 0 discriminator 1
 942 01ac 4FF46050 		mov	r0, #14336
 943 01b0 C4F20100 		movt	r0, 16385
 944 01b4 40F20001 		movw	r1, #:lower16:.LC8
 945 01b8 C0F20001 		movt	r1, #:upper16:.LC8
 946 01bc 4FF00102 		mov	r2, #1
 947 01c0 FFF7FEFF 		bl	uart_print_string
 340:../main.c     **** 			//////////////////
 341:../main.c     **** 			vTaskDelay(1000);
 948              		.loc 1 341 0 discriminator 1
 949 01c4 4FF47A70 		mov	r0, #1000
 950 01c8 FFF7FEFF 		bl	vTaskDelay
 951              	.LBE4:
 342:../main.c     **** 	}
 952              		.loc 1 342 0 discriminator 1
 953 01cc 28E7     		b	.L21
 954              		.cfi_endproc
 955              	.LFE42:
 957 01ce 00BF     		.section	.rodata
 958 00a1 000000   		.align	2
 959              	.LC9:
 960 00a4 4C454400 		.ascii	"LED\000"
 961              		.align	2
 962              	.LC10:
 963 00a8 44533138 		.ascii	"DS1821\000"
 963      323100
 964              		.section	.text.main,"ax",%progbits
 965              		.align	2
 966              		.global	main
 967              		.thumb
 968              		.thumb_func
 970              	main:
 971              	.LFB43:
 343:../main.c     **** 	vTaskDelete(NULL);
 344:../main.c     **** }
 345:../main.c     **** 
 346:../main.c     **** 
 347:../main.c     **** 
 348:../main.c     **** int main()
 349:../main.c     **** {
 972              		.loc 1 349 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 0
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976 0000 80B5     		push	{r7, lr}
 977              	.LCFI38:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 84B0     		sub	sp, sp, #16
 982              	.LCFI39:
 983              		.cfi_def_cfa_offset 24
 984 0004 04AF     		add	r7, sp, #16
 985              	.LCFI40:
 986              		.cfi_def_cfa 7, 8
 350:../main.c     **** 	vFreeRTOSInitAll();
 987              		.loc 1 350 0
 988 0006 FFF7FEFF 		bl	vFreeRTOSInitAll
 351:../main.c     **** 
 352:../main.c     **** 	xTaskCreate( vTaskLED, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, NULL, 2,
 989              		.loc 1 352 0
 990 000a 4FF00203 		mov	r3, #2
 991 000e 0093     		str	r3, [sp, #0]
 992 0010 4FF00003 		mov	r3, #0
 993 0014 0193     		str	r3, [sp, #4]
 994 0016 4FF00003 		mov	r3, #0
 995 001a 0293     		str	r3, [sp, #8]
 996 001c 4FF00003 		mov	r3, #0
 997 0020 0393     		str	r3, [sp, #12]
 998 0022 40F20000 		movw	r0, #:lower16:vTaskLED
 999 0026 C0F20000 		movt	r0, #:upper16:vTaskLED
 1000 002a 40F20001 		movw	r1, #:lower16:.LC9
 1001 002e C0F20001 		movt	r1, #:upper16:.LC9
 1002 0032 4FF04602 		mov	r2, #70
 1003 0036 4FF00003 		mov	r3, #0
 1004 003a FFF7FEFF 		bl	xTaskGenericCreate
 353:../main.c     **** 	                        ( xTaskHandle * ) NULL);
 354:../main.c     **** 	//xTaskCreate(vTaskUSART_TX, (signed char*)"USART_TX", configMINIMAL_STACK_SIZE, NULL, 2,
 355:../main.c     ****       //      				( xTaskHandle * ) NULL);
 356:../main.c     **** 	xTaskCreate( vTaskDS1821, ( signed char * ) "DS1821", configMINIMAL_STACK_SIZE, NULL, 2,
 1005              		.loc 1 356 0
 1006 003e 4FF00203 		mov	r3, #2
 1007 0042 0093     		str	r3, [sp, #0]
 1008 0044 4FF00003 		mov	r3, #0
 1009 0048 0193     		str	r3, [sp, #4]
 1010 004a 4FF00003 		mov	r3, #0
 1011 004e 0293     		str	r3, [sp, #8]
 1012 0050 4FF00003 		mov	r3, #0
 1013 0054 0393     		str	r3, [sp, #12]
 1014 0056 40F20000 		movw	r0, #:lower16:vTaskDS1821
 1015 005a C0F20000 		movt	r0, #:upper16:vTaskDS1821
 1016 005e 40F20001 		movw	r1, #:lower16:.LC10
 1017 0062 C0F20001 		movt	r1, #:upper16:.LC10
 1018 0066 4FF04602 		mov	r2, #70
 1019 006a 4FF00003 		mov	r3, #0
 1020 006e FFF7FEFF 		bl	xTaskGenericCreate
 357:../main.c     **** 		                    ( xTaskHandle * ) NULL);
 358:../main.c     **** 	vTaskStartScheduler();
 1021              		.loc 1 358 0
 1022 0072 FFF7FEFF 		bl	vTaskStartScheduler
 1023              	.L23:
 359:../main.c     **** 
 360:../main.c     **** 
 361:../main.c     **** 
 362:../main.c     **** 	for(;;)
 363:../main.c     **** 	{
 364:../main.c     **** //
 365:../main.c     **** 	}
 1024              		.loc 1 365 0 discriminator 1
 1025 0076 FEE7     		b	.L23
 1026              		.cfi_endproc
 1027              	.LFE43:
 1029              		.section	.rodata
 1030 00af 00       		.align	2
 1031              	.LC11:
 1032 00b0 53756363 		.ascii	"Success! GoodLuck!\000"
 1032      65737321 
 1032      20476F6F 
 1032      644C7563 
 1032      6B2100
 1033 00c3 00       		.align	2
 1034              	.LC12:
 1035 00c4 4E6F2065 		.ascii	"No echo from device!\000"
 1035      63686F20 
 1035      66726F6D 
 1035      20646576 
 1035      69636521 
 1036 00d9 000000   		.align	2
 1037              	.LC13:
 1038 00dc 50696E20 		.ascii	"Pin LOW error!\000"
 1038      4C4F5720 
 1038      6572726F 
 1038      722100
 1039 00eb 00       		.align	2
 1040              	.LC14:
 1041 00ec 43524320 		.ascii	"CRC not match!\000"
 1041      6E6F7420 
 1041      6D617463 
 1041      682100
 1042 00fb 00       		.section	.text.error_handle,"ax",%progbits
 1043              		.align	2
 1044              		.global	error_handle
 1045              		.thumb
 1046              		.thumb_func
 1048              	error_handle:
 1049              	.LFB44:
 366:../main.c     **** 	return 0;
 367:../main.c     **** }
 368:../main.c     **** 
 369:../main.c     **** unsigned char error_handle (unsigned char err)
 370:../main.c     **** {
 1050              		.loc 1 370 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 8
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054 0000 80B5     		push	{r7, lr}
 1055              	.LCFI41:
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 82B0     		sub	sp, sp, #8
 1060              	.LCFI42:
 1061              		.cfi_def_cfa_offset 16
 1062 0004 00AF     		add	r7, sp, #0
 1063              	.LCFI43:
 1064              		.cfi_def_cfa_register 7
 1065 0006 0346     		mov	r3, r0
 1066 0008 FB71     		strb	r3, [r7, #7]
 371:../main.c     **** 	switch (err)
 1067              		.loc 1 371 0
 1068 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1069 000c 042B     		cmp	r3, #4
 1070 000e 41D8     		bhi	.L25
 1071 0010 01A2     		adr	r2, .L30
 1072 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1073 0016 00BF     		.align	2
 1074              	.L30:
 1075 0018 2D000000 		.word	.L26+1
 1076 001c 47000000 		.word	.L27+1
 1077 0020 61000000 		.word	.L28+1
 1078 0024 95000000 		.word	.L25+1
 1079 0028 7B000000 		.word	.L29+1
 1080              	.L26:
 1081              	.LBB5:
 372:../main.c     **** 		{
 373:../main.c     **** 		 	case One_Wire_Success: 					uart_print_string(USART1, "Success! GoodLuck!",1); break;
 1082              		.loc 1 373 0
 1083 002c 4FF46050 		mov	r0, #14336
 1084 0030 C4F20100 		movt	r0, 16385
 1085 0034 40F20001 		movw	r1, #:lower16:.LC11
 1086 0038 C0F20001 		movt	r1, #:upper16:.LC11
 1087 003c 4FF00102 		mov	r2, #1
 1088 0040 FFF7FEFF 		bl	uart_print_string
 1089 0044 26E0     		b	.L25
 1090              	.L27:
 374:../main.c     **** 		 	case One_Wire_Error_No_Echo: 			uart_print_string(USART1, "No echo from device!",1); break;
 1091              		.loc 1 374 0
 1092 0046 4FF46050 		mov	r0, #14336
 1093 004a C4F20100 		movt	r0, 16385
 1094 004e 40F20001 		movw	r1, #:lower16:.LC12
 1095 0052 C0F20001 		movt	r1, #:upper16:.LC12
 1096 0056 4FF00102 		mov	r2, #1
 1097 005a FFF7FEFF 		bl	uart_print_string
 1098 005e 19E0     		b	.L25
 1099              	.L28:
 375:../main.c     **** 		 	case One_Wire_Bus_Low_Error: 			uart_print_string(USART1, "Pin LOW error!",1); break;
 1100              		.loc 1 375 0
 1101 0060 4FF46050 		mov	r0, #14336
 1102 0064 C4F20100 		movt	r0, 16385
 1103 0068 40F20001 		movw	r1, #:lower16:.LC13
 1104 006c C0F20001 		movt	r1, #:upper16:.LC13
 1105 0070 4FF00102 		mov	r2, #1
 1106 0074 FFF7FEFF 		bl	uart_print_string
 1107 0078 0CE0     		b	.L25
 1108              	.L29:
 376:../main.c     **** 		 	case One_Wire_CRC_Error: 				uart_print_string(USART1, "CRC not match!",1); break;
 1109              		.loc 1 376 0
 1110 007a 4FF46050 		mov	r0, #14336
 1111 007e C4F20100 		movt	r0, 16385
 1112 0082 40F20001 		movw	r1, #:lower16:.LC14
 1113 0086 C0F20001 		movt	r1, #:upper16:.LC14
 1114 008a 4FF00102 		mov	r2, #1
 1115 008e FFF7FEFF 		bl	uart_print_string
 1116 0092 00BF     		nop
 1117              	.L25:
 1118              	.LBE5:
 377:../main.c     **** 		}
 378:../main.c     **** 		if (err==One_Wire_Success) return 0; else return 1;//uart_print_string(USART1, "GoodLuck!",1);
 1119              		.loc 1 378 0
 1120 0094 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1121 0096 002B     		cmp	r3, #0
 1122 0098 02D1     		bne	.L31
 1123              		.loc 1 378 0 is_stmt 0 discriminator 1
 1124 009a 4FF00003 		mov	r3, #0
 1125 009e 01E0     		b	.L32
 1126              	.L31:
 1127              		.loc 1 378 0 discriminator 2
 1128 00a0 4FF00103 		mov	r3, #1
 1129              	.L32:
 379:../main.c     **** }
 1130              		.loc 1 379 0 is_stmt 1
 1131 00a4 1846     		mov	r0, r3
 1132 00a6 07F10807 		add	r7, r7, #8
 1133 00aa BD46     		mov	sp, r7
 1134 00ac 80BD     		pop	{r7, pc}
 1135              		.cfi_endproc
 1136              	.LFE44:
 1138 00ae 00BF     		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 1139              		.align	2
 1140              		.global	vApplicationMallocFailedHook
 1141              		.thumb
 1142              		.thumb_func
 1144              	vApplicationMallocFailedHook:
 1145              	.LFB45:
 380:../main.c     **** 
 381:../main.c     **** void vApplicationMallocFailedHook( void )
 382:../main.c     **** {
 1146              		.loc 1 382 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 1151 0000 80B4     		push	{r7}
 1152              	.LCFI44:
 1153              		.cfi_def_cfa_offset 4
 1154              		.cfi_offset 7, -4
 1155 0002 00AF     		add	r7, sp, #0
 1156              	.LCFI45:
 1157              		.cfi_def_cfa_register 7
 1158              	.L34:
 383:../main.c     **** 	/* Called if a call to pvPortMalloc() fails because there is insufficient
 384:../main.c     **** 	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
 385:../main.c     **** 	internally by FreeRTOS API functions that create tasks, queues, software
 386:../main.c     **** 	timers, and semaphores.  The size of the FreeRTOS heap is set by the
 387:../main.c     **** 	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
 388:../main.c     **** 	for( ;; );
 1159              		.loc 1 388 0 discriminator 1
 1160 0004 FEE7     		b	.L34
 1161              		.cfi_endproc
 1162              	.LFE45:
 1164 0006 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 1165              		.align	2
 1166              		.global	vApplicationStackOverflowHook
 1167              		.thumb
 1168              		.thumb_func
 1170              	vApplicationStackOverflowHook:
 1171              	.LFB46:
 389:../main.c     **** }
 390:../main.c     **** /*-----------------------------------------------------------*/
 391:../main.c     **** 
 392:../main.c     **** void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
 393:../main.c     **** {
 1172              		.loc 1 393 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176              		@ link register save eliminated.
 1177 0000 80B4     		push	{r7}
 1178              	.LCFI46:
 1179              		.cfi_def_cfa_offset 4
 1180              		.cfi_offset 7, -4
 1181 0002 83B0     		sub	sp, sp, #12
 1182              	.LCFI47:
 1183              		.cfi_def_cfa_offset 16
 1184 0004 00AF     		add	r7, sp, #0
 1185              	.LCFI48:
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
 1188 0008 3960     		str	r1, [r7, #0]
 1189              	.L36:
 394:../main.c     **** 	( void ) pcTaskName;
 395:../main.c     **** 	( void ) pxTask;
 396:../main.c     **** 
 397:../main.c     **** 	/* Run time stack overflow checking is performed if
 398:../main.c     **** 	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 399:../main.c     **** 	function is called if a stack overflow is detected. */
 400:../main.c     **** 	for( ;; );
 1190              		.loc 1 400 0 discriminator 1
 1191 000a FEE7     		b	.L36
 1192              		.cfi_endproc
 1193              	.LFE46:
 1195              		.section	.text.vApplicationIdleHook,"ax",%progbits
 1196              		.align	2
 1197              		.global	vApplicationIdleHook
 1198              		.thumb
 1199              		.thumb_func
 1201              	vApplicationIdleHook:
 1202              	.LFB47:
 401:../main.c     **** }
 402:../main.c     **** /*-----------------------------------------------------------*/
 403:../main.c     **** 
 404:../main.c     **** void vApplicationIdleHook( void )
 405:../main.c     **** {
 1203              		.loc 1 405 0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 8
 1206              		@ frame_needed = 1, uses_anonymous_args = 0
 1207 0000 80B5     		push	{r7, lr}
 1208              	.LCFI49:
 1209              		.cfi_def_cfa_offset 8
 1210              		.cfi_offset 7, -8
 1211              		.cfi_offset 14, -4
 1212 0002 82B0     		sub	sp, sp, #8
 1213              	.LCFI50:
 1214              		.cfi_def_cfa_offset 16
 1215 0004 00AF     		add	r7, sp, #0
 1216              	.LCFI51:
 1217              		.cfi_def_cfa_register 7
 406:../main.c     **** volatile size_t xFreeStackSpace;
 407:../main.c     **** 
 408:../main.c     **** 	/* This function is called on each cycle of the idle task.  In this case it
 409:../main.c     **** 	does nothing useful, other than report the amout of FreeRTOS heap that
 410:../main.c     **** 	remains unallocated. */
 411:../main.c     **** 	xFreeStackSpace = xPortGetFreeHeapSize();
 1218              		.loc 1 411 0
 1219 0006 FFF7FEFF 		bl	xPortGetFreeHeapSize
 1220 000a 0346     		mov	r3, r0
 1221 000c 7B60     		str	r3, [r7, #4]
 412:../main.c     **** 
 413:../main.c     **** 	if( xFreeStackSpace > 100 )
 1222              		.loc 1 413 0
 1223 000e 7B68     		ldr	r3, [r7, #4]
 414:../main.c     **** 	{
 415:../main.c     **** 		/* By now, the kernel has allocated everything it is going to, so
 416:../main.c     **** 		if there is a lot of heap remaining unallocated then
 417:../main.c     **** 		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
 418:../main.c     **** 		reduced accordingly. */
 419:../main.c     **** 	}
 420:../main.c     **** }
 1224              		.loc 1 420 0
 1225 0010 07F10807 		add	r7, r7, #8
 1226 0014 BD46     		mov	sp, r7
 1227 0016 80BD     		pop	{r7, pc}
 1228              		.cfi_endproc
 1229              	.LFE47:
 1231              		.section	.text.UARTSend,"ax",%progbits
 1232              		.align	2
 1233              		.global	UARTSend
 1234              		.thumb
 1235              		.thumb_func
 1237              	UARTSend:
 1238              	.LFB48:
 421:../main.c     **** 
 422:../main.c     **** /*******************************************************************************
 423:../main.c     **** * Function Name  : UARTSend
 424:../main.c     **** * Description    : Send a string to the UART.
 425:../main.c     **** * Input          : - pucBuffer: buffers to be printed.
 426:../main.c     **** *                : - ulCount  : buffer's length
 427:../main.c     **** * Output         : None
 428:../main.c     **** * Return         : None
 429:../main.c     **** *******************************************************************************/
 430:../main.c     **** void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
 431:../main.c     **** {
 1239              		.loc 1 431 0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 8
 1242              		@ frame_needed = 1, uses_anonymous_args = 0
 1243 0000 80B5     		push	{r7, lr}
 1244              	.LCFI52:
 1245              		.cfi_def_cfa_offset 8
 1246              		.cfi_offset 7, -8
 1247              		.cfi_offset 14, -4
 1248 0002 82B0     		sub	sp, sp, #8
 1249              	.LCFI53:
 1250              		.cfi_def_cfa_offset 16
 1251 0004 00AF     		add	r7, sp, #0
 1252              	.LCFI54:
 1253              		.cfi_def_cfa_register 7
 1254 0006 7860     		str	r0, [r7, #4]
 1255 0008 3960     		str	r1, [r7, #0]
 432:../main.c     ****     //
 433:../main.c     ****     // Loop while there are more characters to send.
 434:../main.c     ****     //
 435:../main.c     ****     while(ulCount--)
 1256              		.loc 1 435 0
 1257 000a 18E0     		b	.L39
 1258              	.L41:
 436:../main.c     ****     {
 437:../main.c     ****         USART_SendData(USART1, (uint16_t) *pucBuffer++);
 1259              		.loc 1 437 0
 1260 000c 7B68     		ldr	r3, [r7, #4]
 1261 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1262 0010 7A68     		ldr	r2, [r7, #4]
 1263 0012 02F10102 		add	r2, r2, #1
 1264 0016 7A60     		str	r2, [r7, #4]
 1265 0018 4FF46050 		mov	r0, #14336
 1266 001c C4F20100 		movt	r0, 16385
 1267 0020 1946     		mov	r1, r3
 1268 0022 FFF7FEFF 		bl	USART_SendData
 438:../main.c     ****         /* Loop until the end of transmission */
 439:../main.c     ****         while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 1269              		.loc 1 439 0
 1270 0026 00BF     		nop
 1271              	.L40:
 1272              		.loc 1 439 0 is_stmt 0 discriminator 1
 1273 0028 4FF46050 		mov	r0, #14336
 1274 002c C4F20100 		movt	r0, 16385
 1275 0030 4FF04001 		mov	r1, #64
 1276 0034 FFF7FEFF 		bl	USART_GetFlagStatus
 1277 0038 0346     		mov	r3, r0
 1278 003a 002B     		cmp	r3, #0
 1279 003c F4D0     		beq	.L40
 1280              	.L39:
 435:../main.c     ****     while(ulCount--)
 1281              		.loc 1 435 0 is_stmt 1 discriminator 1
 1282 003e 3B68     		ldr	r3, [r7, #0]
 1283 0040 002B     		cmp	r3, #0
 1284 0042 0CBF     		ite	eq
 1285 0044 0023     		moveq	r3, #0
 1286 0046 0123     		movne	r3, #1
 1287 0048 DBB2     		uxtb	r3, r3
 1288 004a 3A68     		ldr	r2, [r7, #0]
 1289 004c 02F1FF32 		add	r2, r2, #-1
 1290 0050 3A60     		str	r2, [r7, #0]
 1291 0052 002B     		cmp	r3, #0
 1292 0054 DAD1     		bne	.L41
 440:../main.c     ****         {
 441:../main.c     ****         }
 442:../main.c     ****     }
 443:../main.c     **** }
 1293              		.loc 1 443 0
 1294 0056 07F10807 		add	r7, r7, #8
 1295 005a BD46     		mov	sp, r7
 1296 005c 80BD     		pop	{r7, pc}
 1297              		.cfi_endproc
 1298              	.LFE48:
 1300 005e 00BF     		.text
 1301              	.Letext0:
 1302              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/include/
 1303              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeRTOS/Headers/task.h"
 1304              		.file 4 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 1305              		.file 5 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/stm32f10x.h"
 1306              		.file 6 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1307              		.file 7 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1308              		.file 8 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1309              		.file 9 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/misc
 1310              		.file 10 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccmkX612.s:23     .bss.counter:00000000 counter
     /tmp/ccmkX612.s:20     .bss.counter:00000000 $d
     /tmp/ccmkX612.s:26     .text.SetupClock:00000000 $t
     /tmp/ccmkX612.s:31     .text.SetupClock:00000000 SetupClock
     /tmp/ccmkX612.s:102    .text.LEDsInit:00000000 $t
     /tmp/ccmkX612.s:107    .text.LEDsInit:00000000 LEDsInit
     /tmp/ccmkX612.s:137    .text.BtnInit:00000000 $t
     /tmp/ccmkX612.s:142    .text.BtnInit:00000000 BtnInit
     /tmp/ccmkX612.s:187    .text.USART_GPIO_Configuration:00000000 $t
     /tmp/ccmkX612.s:192    .text.USART_GPIO_Configuration:00000000 USART_GPIO_Configuration
     /tmp/ccmkX612.s:248    .rodata:00000000 $d
     /tmp/ccmkX612.s:249    .rodata:00000000 .LC0
     /tmp/ccmkX612.s:254    .text.USART_Configuration:00000000 $t
     /tmp/ccmkX612.s:259    .text.USART_Configuration:00000000 USART_Configuration
     /tmp/ccmkX612.s:324    .text.EXTI_Configuration:00000000 $t
     /tmp/ccmkX612.s:329    .text.EXTI_Configuration:00000000 EXTI_Configuration
     /tmp/ccmkX612.s:370    .text.NVIC_Configuration_USART1:00000000 $t
     /tmp/ccmkX612.s:375    .text.NVIC_Configuration_USART1:00000000 NVIC_Configuration_USART1
     /tmp/ccmkX612.s:431    .text.NVIC_Configuration_USER_BUTTON:00000000 $t
     /tmp/ccmkX612.s:436    .text.NVIC_Configuration_USER_BUTTON:00000000 NVIC_Configuration_USER_BUTTON
     /tmp/ccmkX612.s:481    .rodata:00000034 .LC1
     /tmp/ccmkX612.s:484    .text.EXTI0_IRQHandler:00000000 $t
     /tmp/ccmkX612.s:489    .text.EXTI0_IRQHandler:00000000 EXTI0_IRQHandler
     /tmp/ccmkX612.s:538    .text.vFreeRTOSInitAll:00000000 $t
     /tmp/ccmkX612.s:543    .text.vFreeRTOSInitAll:00000000 vFreeRTOSInitAll
     /tmp/ccmkX612.s:589    .text.vTaskLED:00000000 $t
     /tmp/ccmkX612.s:594    .text.vTaskLED:00000000 vTaskLED
     /tmp/ccmkX612.s:637    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccmkX612.s:642    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccmkX612.s:1237   .text.UARTSend:00000000 UARTSend
     /tmp/ccmkX612.s:695    .rodata:00000040 .LC2
     /tmp/ccmkX612.s:700    .text.vTaskUSART_TX:00000000 $t
     /tmp/ccmkX612.s:705    .text.vTaskUSART_TX:00000000 vTaskUSART_TX
     /tmp/ccmkX612.s:762    .rodata:00000064 .LC3
     /tmp/ccmkX612.s:766    .rodata:00000080 .LC4
     /tmp/ccmkX612.s:769    .rodata:00000084 .LC5
     /tmp/ccmkX612.s:772    .rodata:00000090 .LC6
     /tmp/ccmkX612.s:775    .rodata:00000094 .LC7
     /tmp/ccmkX612.s:778    .rodata:000000a0 .LC8
     /tmp/ccmkX612.s:781    .text.vTaskDS1821:00000000 $t
     /tmp/ccmkX612.s:786    .text.vTaskDS1821:00000000 vTaskDS1821
     /tmp/ccmkX612.s:959    .rodata:000000a4 .LC9
     /tmp/ccmkX612.s:962    .rodata:000000a8 .LC10
     /tmp/ccmkX612.s:965    .text.main:00000000 $t
     /tmp/ccmkX612.s:970    .text.main:00000000 main
     /tmp/ccmkX612.s:1031   .rodata:000000b0 .LC11
     /tmp/ccmkX612.s:1034   .rodata:000000c4 .LC12
     /tmp/ccmkX612.s:1037   .rodata:000000dc .LC13
     /tmp/ccmkX612.s:1040   .rodata:000000ec .LC14
     /tmp/ccmkX612.s:1043   .text.error_handle:00000000 $t
     /tmp/ccmkX612.s:1048   .text.error_handle:00000000 error_handle
     /tmp/ccmkX612.s:1075   .text.error_handle:00000018 $d
     /tmp/ccmkX612.s:1083   .text.error_handle:0000002c $t
     /tmp/ccmkX612.s:1139   .text.vApplicationMallocFailedHook:00000000 $t
     /tmp/ccmkX612.s:1144   .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
     /tmp/ccmkX612.s:1165   .text.vApplicationStackOverflowHook:00000000 $t
     /tmp/ccmkX612.s:1170   .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
     /tmp/ccmkX612.s:1196   .text.vApplicationIdleHook:00000000 $t
     /tmp/ccmkX612.s:1201   .text.vApplicationIdleHook:00000000 vApplicationIdleHook
     /tmp/ccmkX612.s:1232   .text.UARTSend:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f2d2167d278fc96c4a7439609634148
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.projdefs.h.76.214f319a5937dae232f0ee2912b07e1d
                           .group:00000000 wm4.FreeRTOSConfig.h.86.73ce2c6afaf7535ca053cc9af81f6119
                           .group:00000000 wm4.portmacro.h.77.8d562aa278cb516c96f7646e8f3849cb
                           .group:00000000 wm4.portable.h.332.e25bf3f97ebf50a0f90736144cb8c3f8
                           .group:00000000 wm4.mpu_wrappers.h.76.3abcfc7ebb6d78909ee0b4ad2f20f282
                           .group:00000000 wm4.FreeRTOS.h.159.741cbf33489b2c951994722716e9692e
                           .group:00000000 wm4.list.h.105.6a6307ce3396638a078c02ff83387dc6
                           .group:00000000 wm4.task.h.94.33ec4de8c3f825901c54e6cf58507761
                           .group:00000000 wm4.stm32f10x.h.51.643d5396a325ce00fe75ea490db6ba44
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.524.bbf52ca28bdf7ef267115429e0387679
                           .group:00000000 wm4.stm32f10x_conf.h.9.3838e46d9de2be24c7ed73296c5ae8b5
                           .group:00000000 wm4.stm32f10x.h.8267.abe69e40cf43ea9673cb5d472d4b6964
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_rcc.h.25.ce2a81c1048696f722ee0c144eb62674
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_exti.h.25.d345a82aeadfd242f388606e48935354
                           .group:00000000 wm4.misc.h.25.424b617a460d2f3de12ba0450a07cec2
                           .group:00000000 wm4.stm32f10x_tim.h.25.039a15552706aae650954590356e6d7a
                           .group:00000000 wm4.timer6.h.16.13b2c39d825931a32959e8d418342b55
                           .group:00000000 wm4.oneWire.h.14.188ac6fc0985dc623b8f181759f0e155
                           .group:00000000 wm4.ds1821.h.14.68693e8168dc8fdc9849075b4c0da9f1
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.smallLEDPanel.h.9.91b4ad025e717833412c4297ad53ccdd

UNDEFINED SYMBOLS
RCC_DeInit
RCC_HSEConfig
RCC_GetFlagStatus
RCC_HCLKConfig
RCC_PCLK2Config
RCC_PCLK1Config
RCC_PLLConfig
RCC_PLLCmd
RCC_SYSCLKConfig
RCC_GetSYSCLKSource
PIN_OUT_PP
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_EXTILineConfig
USART_Init
USART_Cmd
uart_print_string
EXTI_Init
NVIC_PriorityGroupConfig
NVIC_Init
USART_ITConfig
EXTI_ClearITPendingBit
delay_ms
smallLEDPanel_Init
TIM6Init
RTC_Config
vTaskDelay
smallLEDPanel_Set
USART_GetITStatus
USART_ReceiveData
DS1821_Start_Conversion
DS1821_Read_Temp
uart_send_char
uart_print_value
GetTime
Time_GetHours
Time_GetMinutes
Time_GetSeconds
xTaskGenericCreate
vTaskStartScheduler
xPortGetFreeHeapSize
USART_SendData
USART_GetFlagStatus
