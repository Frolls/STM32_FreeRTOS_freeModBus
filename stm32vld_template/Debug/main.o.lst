   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	counter
  19              		.section	.bss.counter,"aw",%nobits
  20              		.align	1
  23              	counter:
  24 0000 0000     		.space	2
  25              		.section	.text.SetupClock,"ax",%progbits
  26              		.align	2
  27              		.global	SetupClock
  28              		.thumb
  29              		.thumb_func
  31              	SetupClock:
  32              	.LFB29:
  33              		.file 1 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 12.03.2013
   5:../main.c     ****  *      Author: Frolls
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** /* Kernel includes. */
   9:../main.c     **** #include "FreeRTOS.h"
  10:../main.c     **** #include "task.h"
  11:../main.c     **** //#include "queue.h"
  12:../main.c     **** //#include "timers.h"
  13:../main.c     **** 
  14:../main.c     **** // Modbus
  15:../main.c     **** //#include "mb.h"
  16:../main.c     **** //#include "mbport.h"
  17:../main.c     **** 
  18:../main.c     **** /* STM32 Library includes. */
  19:../main.c     **** #include <stm32f10x.h>
  20:../main.c     **** #include <stm32f10x_gpio.h>
  21:../main.c     **** #include <stm32f10x_rcc.h>
  22:../main.c     **** #include <stm32f10x_usart.h>
  23:../main.c     **** #include <stm32f10x_exti.h>
  24:../main.c     **** #include <misc.h>
  25:../main.c     **** 
  26:../main.c     **** #include "timer6.h"
  27:../main.c     **** #include "ds1821.h"
  28:../main.c     **** #include "rtc.h"
  29:../main.c     **** 
  30:../main.c     **** #include "smallLEDPanel.h"
  31:../main.c     **** 
  32:../main.c     **** 
  33:../main.c     **** #define LED_PORT GPIOC
  34:../main.c     **** #define LED_GREEN GPIO_Pin_9
  35:../main.c     **** #define LED_BLUE GPIO_Pin_8
  36:../main.c     **** 
  37:../main.c     **** #define One_Wire_Pin 			GPIOC, GPIO_Pin_7
  38:../main.c     **** 
  39:../main.c     **** #define smallLEDPanel_CLK 		GPIO_Pin_10
  40:../main.c     **** #define smallLEDPanel_SDI 		GPIO_Pin_11
  41:../main.c     **** #define smallLEDPanel_LE 		GPIO_Pin_12
  42:../main.c     **** 
  43:../main.c     **** #define BAUDRATE 115200
  44:../main.c     **** 
  45:../main.c     **** volatile uint16_t counter = 0;
  46:../main.c     **** 
  47:../main.c     **** unsigned char error_handle (unsigned char err);
  48:../main.c     **** 
  49:../main.c     **** void SetupClock()
  50:../main.c     **** {
  34              		.loc 1 50 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 00AF     		add	r7, sp, #0
  44              	.LCFI1:
  45              		.cfi_def_cfa_register 7
  51:../main.c     **** 	RCC_DeInit ();                    /* RCC system reset(for debug purpose)*/
  46              		.loc 1 51 0
  47 0004 FFF7FEFF 		bl	RCC_DeInit
  52:../main.c     **** 	RCC_HSEConfig (RCC_HSE_ON);       /* Enable HSE                         */
  48              		.loc 1 52 0
  49 0008 4FF48030 		mov	r0, #65536
  50 000c FFF7FEFF 		bl	RCC_HSEConfig
  53:../main.c     **** 
  54:../main.c     **** 	/* Wait till HSE is ready                                               */
  55:../main.c     **** 	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
  51              		.loc 1 55 0
  52 0010 00BF     		nop
  53              	.L2:
  54              		.loc 1 55 0 is_stmt 0 discriminator 1
  55 0012 4FF03100 		mov	r0, #49
  56 0016 FFF7FEFF 		bl	RCC_GetFlagStatus
  57 001a 0346     		mov	r3, r0
  58 001c 002B     		cmp	r3, #0
  59 001e F8D0     		beq	.L2
  56:../main.c     **** 
  57:../main.c     **** 	RCC_HCLKConfig   (RCC_SYSCLK_Div1);   /* HCLK   = SYSCLK                */
  60              		.loc 1 57 0 is_stmt 1
  61 0020 4FF00000 		mov	r0, #0
  62 0024 FFF7FEFF 		bl	RCC_HCLKConfig
  58:../main.c     **** 	RCC_PCLK2Config  (RCC_HCLK_Div1);     /* PCLK2  = HCLK                  */
  63              		.loc 1 58 0
  64 0028 4FF00000 		mov	r0, #0
  65 002c FFF7FEFF 		bl	RCC_PCLK2Config
  59:../main.c     **** 	RCC_PCLK1Config  (RCC_HCLK_Div1);     /* PCLK1  = HCLK1                */
  66              		.loc 1 59 0
  67 0030 4FF00000 		mov	r0, #0
  68 0034 FFF7FEFF 		bl	RCC_PCLK1Config
  60:../main.c     **** 	//RCC_ADCCLKConfig (RCC_PCLK2_Div4);    /* ADCCLK = PCLK2/4               */
  61:../main.c     **** 
  62:../main.c     **** 	/* PLLCLK = 8MHz * 6 = 48 MHz                                           */
  63:../main.c     **** 	RCC_PLLConfig (RCC_PLLSource_PREDIV1, RCC_PLLMul_6);
  69              		.loc 1 63 0
  70 0038 4FF48030 		mov	r0, #65536
  71 003c 4FF48011 		mov	r1, #1048576
  72 0040 FFF7FEFF 		bl	RCC_PLLConfig
  64:../main.c     **** 
  65:../main.c     **** 	RCC_PLLCmd (ENABLE);                  /* Enable PLL                     */
  73              		.loc 1 65 0
  74 0044 4FF00100 		mov	r0, #1
  75 0048 FFF7FEFF 		bl	RCC_PLLCmd
  66:../main.c     **** 
  67:../main.c     **** 	/* Wait till PLL is ready                                               */
  68:../main.c     **** 	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
  76              		.loc 1 68 0
  77 004c 00BF     		nop
  78              	.L3:
  79              		.loc 1 68 0 is_stmt 0 discriminator 1
  80 004e 4FF03900 		mov	r0, #57
  81 0052 FFF7FEFF 		bl	RCC_GetFlagStatus
  82 0056 0346     		mov	r3, r0
  83 0058 002B     		cmp	r3, #0
  84 005a F8D0     		beq	.L3
  69:../main.c     **** 
  70:../main.c     **** 	/* Select PLL as system clock source                                    */
  71:../main.c     **** 	RCC_SYSCLKConfig (RCC_SYSCLKSource_PLLCLK);
  85              		.loc 1 71 0 is_stmt 1
  86 005c 4FF00200 		mov	r0, #2
  87 0060 FFF7FEFF 		bl	RCC_SYSCLKConfig
  72:../main.c     **** 
  73:../main.c     **** 	/* Wait till PLL is used as system clock source                         */
  74:../main.c     **** 	while (RCC_GetSYSCLKSource() != 0x08);
  88              		.loc 1 74 0
  89 0064 00BF     		nop
  90              	.L4:
  91              		.loc 1 74 0 is_stmt 0 discriminator 1
  92 0066 FFF7FEFF 		bl	RCC_GetSYSCLKSource
  93 006a 0346     		mov	r3, r0
  94 006c 082B     		cmp	r3, #8
  95 006e FAD1     		bne	.L4
  75:../main.c     **** }
  96              		.loc 1 75 0 is_stmt 1
  97 0070 80BD     		pop	{r7, pc}
  98              		.cfi_endproc
  99              	.LFE29:
 101 0072 00BF     		.section	.text.LEDsInit,"ax",%progbits
 102              		.align	2
 103              		.global	LEDsInit
 104              		.thumb
 105              		.thumb_func
 107              	LEDsInit:
 108              	.LFB30:
  76:../main.c     **** 
  77:../main.c     **** void LEDsInit()
  78:../main.c     **** {
 109              		.loc 1 78 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 8
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0000 80B5     		push	{r7, lr}
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 82B0     		sub	sp, sp, #8
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 16
 121 0004 00AF     		add	r7, sp, #0
 122              	.LCFI4:
 123              		.cfi_def_cfa_register 7
  79:../main.c     ****    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 124              		.loc 1 79 0
 125 0006 4FF01000 		mov	r0, #16
 126 000a 4FF00101 		mov	r1, #1
 127 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  80:../main.c     ****    GPIO_InitTypeDef GPIO_InitStructure;
  81:../main.c     ****    /* Ñâåòîäèîäû íà PC8, PC9          */
  82:../main.c     ****    GPIO_InitStructure.GPIO_Pin   = LED_GREEN | LED_BLUE;
 128              		.loc 1 82 0
 129 0012 4FF44073 		mov	r3, #768
 130 0016 BB80     		strh	r3, [r7, #4]	@ movhi
  83:../main.c     ****    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 131              		.loc 1 83 0
 132 0018 4FF00303 		mov	r3, #3
 133 001c BB71     		strb	r3, [r7, #6]
  84:../main.c     ****    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 134              		.loc 1 84 0
 135 001e 4FF01003 		mov	r3, #16
 136 0022 FB71     		strb	r3, [r7, #7]
  85:../main.c     ****    GPIO_Init(LED_PORT, &GPIO_InitStructure);
 137              		.loc 1 85 0
 138 0024 07F10403 		add	r3, r7, #4
 139 0028 4FF48050 		mov	r0, #4096
 140 002c C4F20100 		movt	r0, 16385
 141 0030 1946     		mov	r1, r3
 142 0032 FFF7FEFF 		bl	GPIO_Init
  86:../main.c     **** }
 143              		.loc 1 86 0
 144 0036 07F10807 		add	r7, r7, #8
 145 003a BD46     		mov	sp, r7
 146 003c 80BD     		pop	{r7, pc}
 147              		.cfi_endproc
 148              	.LFE30:
 150 003e 00BF     		.section	.text.BtnInit,"ax",%progbits
 151              		.align	2
 152              		.global	BtnInit
 153              		.thumb
 154              		.thumb_func
 156              	BtnInit:
 157              	.LFB31:
  87:../main.c     **** 
  88:../main.c     **** void BtnInit()
  89:../main.c     **** {
 158              		.loc 1 89 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 8
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              	.LCFI5:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 82B0     		sub	sp, sp, #8
 168              	.LCFI6:
 169              		.cfi_def_cfa_offset 16
 170 0004 00AF     		add	r7, sp, #0
 171              	.LCFI7:
 172              		.cfi_def_cfa_register 7
  90:../main.c     **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 173              		.loc 1 90 0
 174 0006 4FF00400 		mov	r0, #4
 175 000a 4FF00101 		mov	r1, #1
 176 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  91:../main.c     ****     GPIO_InitTypeDef GPIO_InitStructure;
  92:../main.c     **** 
  93:../main.c     ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 177              		.loc 1 93 0
 178 0012 4FF00103 		mov	r3, #1
 179 0016 BB80     		strh	r3, [r7, #4]	@ movhi
  94:../main.c     ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 180              		.loc 1 94 0
 181 0018 4FF00403 		mov	r3, #4
 182 001c FB71     		strb	r3, [r7, #7]
  95:../main.c     ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
 183              		.loc 1 95 0
 184 001e 07F10403 		add	r3, r7, #4
 185 0022 4FF40060 		mov	r0, #2048
 186 0026 C4F20100 		movt	r0, 16385
 187 002a 1946     		mov	r1, r3
 188 002c FFF7FEFF 		bl	GPIO_Init
  96:../main.c     ****     GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 189              		.loc 1 96 0
 190 0030 4FF00000 		mov	r0, #0
 191 0034 4FF00001 		mov	r1, #0
 192 0038 FFF7FEFF 		bl	GPIO_EXTILineConfig
  97:../main.c     **** }
 193              		.loc 1 97 0
 194 003c 07F10807 		add	r7, r7, #8
 195 0040 BD46     		mov	sp, r7
 196 0042 80BD     		pop	{r7, pc}
 197              		.cfi_endproc
 198              	.LFE31:
 200              		.section	.text.USART_GPIO_Configuration,"ax",%progbits
 201              		.align	2
 202              		.global	USART_GPIO_Configuration
 203              		.thumb
 204              		.thumb_func
 206              	USART_GPIO_Configuration:
 207              	.LFB32:
  98:../main.c     **** 
  99:../main.c     **** /*******************************************************************************
 100:../main.c     **** * Function Name  : USART_GPIO_Configuration
 101:../main.c     **** * Description    : Configures the different GPIO ports.
 102:../main.c     **** * Input          : None
 103:../main.c     **** * Output         : None
 104:../main.c     **** * Return         : None
 105:../main.c     **** *******************************************************************************/
 106:../main.c     **** void USART_GPIO_Configuration(void)
 107:../main.c     **** {
 208              		.loc 1 107 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              	.LCFI8:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 0002 82B0     		sub	sp, sp, #8
 218              	.LCFI9:
 219              		.cfi_def_cfa_offset 16
 220 0004 00AF     		add	r7, sp, #0
 221              	.LCFI10:
 222              		.cfi_def_cfa_register 7
 108:../main.c     ****   /* Enable GPIOA clock */
 109:../main.c     ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 223              		.loc 1 109 0
 224 0006 4FF00400 		mov	r0, #4
 225 000a 4FF00101 		mov	r1, #1
 226 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 110:../main.c     **** 
 111:../main.c     ****   GPIO_InitTypeDef GPIO_InitStructure;
 112:../main.c     **** 
 113:../main.c     ****   /* Configure USART1 Tx (PA.09) as alternate function push-pull */
 114:../main.c     ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 227              		.loc 1 114 0
 228 0012 4FF40073 		mov	r3, #512
 229 0016 BB80     		strh	r3, [r7, #4]	@ movhi
 115:../main.c     ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 230              		.loc 1 115 0
 231 0018 4FF01803 		mov	r3, #24
 232 001c FB71     		strb	r3, [r7, #7]
 116:../main.c     ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 233              		.loc 1 116 0
 234 001e 4FF00303 		mov	r3, #3
 235 0022 BB71     		strb	r3, [r7, #6]
 117:../main.c     ****   GPIO_Init(GPIOA, &GPIO_InitStructure);
 236              		.loc 1 117 0
 237 0024 07F10403 		add	r3, r7, #4
 238 0028 4FF40060 		mov	r0, #2048
 239 002c C4F20100 		movt	r0, 16385
 240 0030 1946     		mov	r1, r3
 241 0032 FFF7FEFF 		bl	GPIO_Init
 118:../main.c     **** 
 119:../main.c     ****   /* Configure USART1 Rx (PA.10) as input floating */
 120:../main.c     ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 242              		.loc 1 120 0
 243 0036 4FF48063 		mov	r3, #1024
 244 003a BB80     		strh	r3, [r7, #4]	@ movhi
 121:../main.c     ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 245              		.loc 1 121 0
 246 003c 4FF00403 		mov	r3, #4
 247 0040 FB71     		strb	r3, [r7, #7]
 122:../main.c     ****   GPIO_Init(GPIOA, &GPIO_InitStructure);
 248              		.loc 1 122 0
 249 0042 07F10403 		add	r3, r7, #4
 250 0046 4FF40060 		mov	r0, #2048
 251 004a C4F20100 		movt	r0, 16385
 252 004e 1946     		mov	r1, r3
 253 0050 FFF7FEFF 		bl	GPIO_Init
 123:../main.c     **** }
 254              		.loc 1 123 0
 255 0054 07F10807 		add	r7, r7, #8
 256 0058 BD46     		mov	sp, r7
 257 005a 80BD     		pop	{r7, pc}
 258              		.cfi_endproc
 259              	.LFE32:
 261              		.section	.rodata
 262              		.align	2
 263              	.LC0:
 264 0000 0A3D3D3D 		.ascii	"\012===== UART1 \320\270\320\275\320\270\321\206\320"
 264      3D3D2055 
 264      41525431 
 264      20D0B8D0 
 264      BDD0B8D1 
 265 0016 B8D0B0D0 		.ascii	"\270\320\260\320\273\320\270\320\267\320\270\321\200"
 265      BBD0B8D0 
 265      B7D0B8D1 
 265      80
 266 0023 D0BED0B2 		.ascii	"\320\276\320\262\320\260\320\275 =====\000"
 266      D0B0D0BD 
 266      203D3D3D 
 266      3D3D00
 267              		.section	.text.USART_Configuration,"ax",%progbits
 268              		.align	2
 269              		.global	USART_Configuration
 270              		.thumb
 271              		.thumb_func
 273              	USART_Configuration:
 274              	.LFB33:
 124:../main.c     **** 
 125:../main.c     **** /*******************************************************************************
 126:../main.c     **** * Function Name  : USART_Configuration
 127:../main.c     **** * Description    : Configures the USART1.
 128:../main.c     **** * Input          : None
 129:../main.c     **** * Output         : None
 130:../main.c     **** * Return         : None
 131:../main.c     **** *******************************************************************************/
 132:../main.c     **** void USART_Configuration(void)
 133:../main.c     **** {
 275              		.loc 1 133 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 16
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279 0000 80B5     		push	{r7, lr}
 280              	.LCFI11:
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 284 0002 84B0     		sub	sp, sp, #16
 285              	.LCFI12:
 286              		.cfi_def_cfa_offset 24
 287 0004 00AF     		add	r7, sp, #0
 288              	.LCFI13:
 289              		.cfi_def_cfa_register 7
 134:../main.c     ****   /* Enable USART1 */
 135:../main.c     ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 290              		.loc 1 135 0
 291 0006 4FF48040 		mov	r0, #16384
 292 000a 4FF00101 		mov	r1, #1
 293 000e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 136:../main.c     **** 
 137:../main.c     ****   USART_InitTypeDef USART_InitStructure;
 138:../main.c     **** 
 139:../main.c     **** /* USART1 configuration ------------------------------------------------------*/
 140:../main.c     ****   /* USART1 configured as follow:
 141:../main.c     ****         - BaudRate = 115200 baud
 142:../main.c     ****         - Word Length = 8 Bits
 143:../main.c     ****         - One Stop Bit
 144:../main.c     ****         - No parity
 145:../main.c     ****         - Hardware flow control disabled (RTS and CTS signals)
 146:../main.c     ****         - Receive and transmit enabled
 147:../main.c     ****         - USART Clock disabled
 148:../main.c     ****         - USART CPOL: Clock is active low
 149:../main.c     ****         - USART CPHA: Data is captured on the middle
 150:../main.c     ****         - USART LastBit: The clock pulse of the last data bit is not output to
 151:../main.c     ****                          the SCLK pin
 152:../main.c     ****   */
 153:../main.c     ****   USART_InitStructure.USART_BaudRate = BAUDRATE;
 294              		.loc 1 153 0
 295 0012 4FF4E133 		mov	r3, #115200
 296 0016 3B60     		str	r3, [r7, #0]
 154:../main.c     ****   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 297              		.loc 1 154 0
 298 0018 4FF00003 		mov	r3, #0
 299 001c BB80     		strh	r3, [r7, #4]	@ movhi
 155:../main.c     ****   USART_InitStructure.USART_StopBits = USART_StopBits_1;
 300              		.loc 1 155 0
 301 001e 4FF00003 		mov	r3, #0
 302 0022 FB80     		strh	r3, [r7, #6]	@ movhi
 156:../main.c     ****   USART_InitStructure.USART_Parity = USART_Parity_No;
 303              		.loc 1 156 0
 304 0024 4FF00003 		mov	r3, #0
 305 0028 3B81     		strh	r3, [r7, #8]	@ movhi
 157:../main.c     ****   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 306              		.loc 1 157 0
 307 002a 4FF00003 		mov	r3, #0
 308 002e BB81     		strh	r3, [r7, #12]	@ movhi
 158:../main.c     ****   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 309              		.loc 1 158 0
 310 0030 4FF00C03 		mov	r3, #12
 311 0034 7B81     		strh	r3, [r7, #10]	@ movhi
 159:../main.c     **** 
 160:../main.c     ****   USART_Init(USART1, &USART_InitStructure);
 312              		.loc 1 160 0
 313 0036 3B46     		mov	r3, r7
 314 0038 4FF46050 		mov	r0, #14336
 315 003c C4F20100 		movt	r0, 16385
 316 0040 1946     		mov	r1, r3
 317 0042 FFF7FEFF 		bl	USART_Init
 161:../main.c     **** 
 162:../main.c     ****   /* Enable USART1 */
 163:../main.c     ****   USART_Cmd(USART1, ENABLE);
 318              		.loc 1 163 0
 319 0046 4FF46050 		mov	r0, #14336
 320 004a C4F20100 		movt	r0, 16385
 321 004e 4FF00101 		mov	r1, #1
 322 0052 FFF7FEFF 		bl	USART_Cmd
 164:../main.c     **** 
 165:../main.c     ****   uart_print_string(USART1, "\n===== UART1 инициализирован =====",1);
 323              		.loc 1 165 0
 324 0056 4FF46050 		mov	r0, #14336
 325 005a C4F20100 		movt	r0, 16385
 326 005e 40F20001 		movw	r1, #:lower16:.LC0
 327 0062 C0F20001 		movt	r1, #:upper16:.LC0
 328 0066 4FF00102 		mov	r2, #1
 329 006a FFF7FEFF 		bl	uart_print_string
 166:../main.c     **** }
 330              		.loc 1 166 0
 331 006e 07F11007 		add	r7, r7, #16
 332 0072 BD46     		mov	sp, r7
 333 0074 80BD     		pop	{r7, pc}
 334              		.cfi_endproc
 335              	.LFE33:
 337              		.section	.text.EXTI_Configuration,"ax",%progbits
 338              		.align	2
 339              		.global	EXTI_Configuration
 340              		.thumb
 341              		.thumb_func
 343              	EXTI_Configuration:
 344              	.LFB34:
 167:../main.c     **** 
 168:../main.c     **** void EXTI_Configuration(void)
 169:../main.c     **** {
 345              		.loc 1 169 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI14:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 82B0     		sub	sp, sp, #8
 355              	.LCFI15:
 356              		.cfi_def_cfa_offset 16
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI16:
 359              		.cfi_def_cfa_register 7
 170:../main.c     ****   EXTI_InitTypeDef EXTI_InitStructure;
 171:../main.c     ****   EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 360              		.loc 1 171 0
 361 0006 4FF00103 		mov	r3, #1
 362 000a 3B60     		str	r3, [r7, #0]
 172:../main.c     ****   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 363              		.loc 1 172 0
 364 000c 4FF00003 		mov	r3, #0
 365 0010 3B71     		strb	r3, [r7, #4]
 173:../main.c     ****   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 366              		.loc 1 173 0
 367 0012 4FF00803 		mov	r3, #8
 368 0016 7B71     		strb	r3, [r7, #5]
 174:../main.c     ****   EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 369              		.loc 1 174 0
 370 0018 4FF00103 		mov	r3, #1
 371 001c BB71     		strb	r3, [r7, #6]
 175:../main.c     ****   EXTI_Init(&EXTI_InitStructure);
 372              		.loc 1 175 0
 373 001e 3B46     		mov	r3, r7
 374 0020 1846     		mov	r0, r3
 375 0022 FFF7FEFF 		bl	EXTI_Init
 176:../main.c     **** }
 376              		.loc 1 176 0
 377 0026 07F10807 		add	r7, r7, #8
 378 002a BD46     		mov	sp, r7
 379 002c 80BD     		pop	{r7, pc}
 380              		.cfi_endproc
 381              	.LFE34:
 383 002e 00BF     		.section	.text.NVIC_Configuration_USART1,"ax",%progbits
 384              		.align	2
 385              		.global	NVIC_Configuration_USART1
 386              		.thumb
 387              		.thumb_func
 389              	NVIC_Configuration_USART1:
 390              	.LFB35:
 177:../main.c     **** 
 178:../main.c     **** void NVIC_Configuration_USART1(void)
 179:../main.c     **** {
 391              		.loc 1 179 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395 0000 80B5     		push	{r7, lr}
 396              	.LCFI17:
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 7, -8
 399              		.cfi_offset 14, -4
 400 0002 82B0     		sub	sp, sp, #8
 401              	.LCFI18:
 402              		.cfi_def_cfa_offset 16
 403 0004 00AF     		add	r7, sp, #0
 404              	.LCFI19:
 405              		.cfi_def_cfa_register 7
 180:../main.c     **** 	//configure NVIC
 181:../main.c     **** 	NVIC_InitTypeDef NVIC_InitStructure;
 182:../main.c     **** 
 183:../main.c     **** 	/* Place the vector table into FLASH */
 184:../main.c     **** 	//NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
 185:../main.c     **** 
 186:../main.c     **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 406              		.loc 1 186 0
 407 0006 4FF44070 		mov	r0, #768
 408 000a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 187:../main.c     **** 
 188:../main.c     **** 	//select NVIC channel to configure
 189:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 409              		.loc 1 189 0
 410 000e 4FF02503 		mov	r3, #37
 411 0012 3B71     		strb	r3, [r7, #4]
 190:../main.c     **** 	//set priority to lowest
 191:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 412              		.loc 1 191 0
 413 0014 4FF00F03 		mov	r3, #15
 414 0018 7B71     		strb	r3, [r7, #5]
 192:../main.c     **** 	//set subpriority to lowest
 193:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 415              		.loc 1 193 0
 416 001a 4FF00F03 		mov	r3, #15
 417 001e BB71     		strb	r3, [r7, #6]
 194:../main.c     **** 	//enable IRQ channel
 195:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 418              		.loc 1 195 0
 419 0020 4FF00103 		mov	r3, #1
 420 0024 FB71     		strb	r3, [r7, #7]
 196:../main.c     **** 	//update NVIC registers
 197:../main.c     **** 	NVIC_Init(&NVIC_InitStructure);
 421              		.loc 1 197 0
 422 0026 07F10403 		add	r3, r7, #4
 423 002a 1846     		mov	r0, r3
 424 002c FFF7FEFF 		bl	NVIC_Init
 198:../main.c     **** 
 199:../main.c     **** 	//disable Transmit Data Register empty interrupt
 200:../main.c     **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 425              		.loc 1 200 0
 426 0030 4FF46050 		mov	r0, #14336
 427 0034 C4F20100 		movt	r0, 16385
 428 0038 40F22771 		movw	r1, #1831
 429 003c 4FF00002 		mov	r2, #0
 430 0040 FFF7FEFF 		bl	USART_ITConfig
 201:../main.c     **** 	//enable Receive Data register not empty interrupt
 202:../main.c     **** 	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 431              		.loc 1 202 0
 432 0044 4FF46050 		mov	r0, #14336
 433 0048 C4F20100 		movt	r0, 16385
 434 004c 40F22551 		movw	r1, #1317
 435 0050 4FF00102 		mov	r2, #1
 436 0054 FFF7FEFF 		bl	USART_ITConfig
 203:../main.c     **** 
 204:../main.c     **** 
 205:../main.c     **** }
 437              		.loc 1 205 0
 438 0058 07F10807 		add	r7, r7, #8
 439 005c BD46     		mov	sp, r7
 440 005e 80BD     		pop	{r7, pc}
 441              		.cfi_endproc
 442              	.LFE35:
 444              		.section	.text.NVIC_Configuration_USER_BUTTON,"ax",%progbits
 445              		.align	2
 446              		.global	NVIC_Configuration_USER_BUTTON
 447              		.thumb
 448              		.thumb_func
 450              	NVIC_Configuration_USER_BUTTON:
 451              	.LFB36:
 206:../main.c     **** 
 207:../main.c     **** void NVIC_Configuration_USER_BUTTON(void)
 208:../main.c     **** {
 452              		.loc 1 208 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              	.LCFI20:
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 82B0     		sub	sp, sp, #8
 462              	.LCFI21:
 463              		.cfi_def_cfa_offset 16
 464 0004 00AF     		add	r7, sp, #0
 465              	.LCFI22:
 466              		.cfi_def_cfa_register 7
 209:../main.c     **** 	NVIC_InitTypeDef NVIC_InitStructure;
 210:../main.c     **** 
 211:../main.c     **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 467              		.loc 1 211 0
 468 0006 4FF44070 		mov	r0, #768
 469 000a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 212:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 470              		.loc 1 212 0
 471 000e 4FF00603 		mov	r3, #6
 472 0012 3B71     		strb	r3, [r7, #4]
 213:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 473              		.loc 1 213 0
 474 0014 4FF00F03 		mov	r3, #15
 475 0018 7B71     		strb	r3, [r7, #5]
 214:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 476              		.loc 1 214 0
 477 001a 4FF00F03 		mov	r3, #15
 478 001e BB71     		strb	r3, [r7, #6]
 215:../main.c     **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 479              		.loc 1 215 0
 480 0020 4FF00103 		mov	r3, #1
 481 0024 FB71     		strb	r3, [r7, #7]
 216:../main.c     **** 	NVIC_Init(&NVIC_InitStructure);
 482              		.loc 1 216 0
 483 0026 07F10403 		add	r3, r7, #4
 484 002a 1846     		mov	r0, r3
 485 002c FFF7FEFF 		bl	NVIC_Init
 217:../main.c     **** }
 486              		.loc 1 217 0
 487 0030 07F10807 		add	r7, r7, #8
 488 0034 BD46     		mov	sp, r7
 489 0036 80BD     		pop	{r7, pc}
 490              		.cfi_endproc
 491              	.LFE36:
 493              		.section	.rodata
 494 0032 0000     		.align	2
 495              	.LC1:
 496 0034 D0A2D18B 		.ascii	"\320\242\321\213\320\275\321\206\000"
 496      D0BDD186 
 496      00
 497              		.section	.text.EXTI0_IRQHandler,"ax",%progbits
 498              		.align	2
 499              		.global	EXTI0_IRQHandler
 500              		.thumb
 501              		.thumb_func
 503              	EXTI0_IRQHandler:
 504              	.LFB37:
 218:../main.c     **** 
 219:../main.c     **** void EXTI0_IRQHandler(void)
 220:../main.c     **** {
 505              		.loc 1 220 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              	.LCFI23:
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 7, -8
 513              		.cfi_offset 14, -4
 514 0002 00AF     		add	r7, sp, #0
 515              	.LCFI24:
 516              		.cfi_def_cfa_register 7
 221:../main.c     ****         EXTI_ClearITPendingBit(EXTI_Line0);
 517              		.loc 1 221 0
 518 0004 4FF00100 		mov	r0, #1
 519 0008 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 222:../main.c     **** 
 223:../main.c     ****         uart_print_string(USART1, "Тынц",1);
 520              		.loc 1 223 0
 521 000c 4FF46050 		mov	r0, #14336
 522 0010 C4F20100 		movt	r0, 16385
 523 0014 40F20001 		movw	r1, #:lower16:.LC1
 524 0018 C0F20001 		movt	r1, #:upper16:.LC1
 525 001c 4FF00102 		mov	r2, #1
 526 0020 FFF7FEFF 		bl	uart_print_string
 224:../main.c     **** 		{
 225:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 527              		.loc 1 225 0
 528 0024 4FF48053 		mov	r3, #4096
 529 0028 C4F20103 		movt	r3, 16385
 530 002c 4FF48052 		mov	r2, #4096
 531 0030 C4F20102 		movt	r2, 16385
 532 0034 D268     		ldr	r2, [r2, #12]
 533 0036 42F40072 		orr	r2, r2, #512
 534 003a DA60     		str	r2, [r3, #12]
 226:../main.c     **** 			//vTaskDelay(10);
 227:../main.c     **** 			delay_ms(10);
 535              		.loc 1 227 0
 536 003c 4FF00A00 		mov	r0, #10
 537 0040 FFF7FEFF 		bl	delay_ms
 228:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 538              		.loc 1 228 0
 539 0044 4FF48053 		mov	r3, #4096
 540 0048 C4F20103 		movt	r3, 16385
 541 004c 4FF48052 		mov	r2, #4096
 542 0050 C4F20102 		movt	r2, 16385
 543 0054 D268     		ldr	r2, [r2, #12]
 544 0056 82F40072 		eor	r2, r2, #512
 545 005a DA60     		str	r2, [r3, #12]
 229:../main.c     **** 		}
 230:../main.c     **** }
 546              		.loc 1 230 0
 547 005c 80BD     		pop	{r7, pc}
 548              		.cfi_endproc
 549              	.LFE37:
 551 005e 00BF     		.section	.text.vFreeRTOSInitAll,"ax",%progbits
 552              		.align	2
 553              		.global	vFreeRTOSInitAll
 554              		.thumb
 555              		.thumb_func
 557              	vFreeRTOSInitAll:
 558              	.LFB38:
 231:../main.c     **** 
 232:../main.c     **** void vFreeRTOSInitAll()
 233:../main.c     **** {
 559              		.loc 1 233 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 0000 80B5     		push	{r7, lr}
 564              	.LCFI25:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 14, -4
 568 0002 00AF     		add	r7, sp, #0
 569              	.LCFI26:
 570              		.cfi_def_cfa_register 7
 234:../main.c     **** 	SetupClock();
 571              		.loc 1 234 0
 572 0004 FFF7FEFF 		bl	SetupClock
 235:../main.c     **** 
 236:../main.c     **** 	LEDsInit();
 573              		.loc 1 236 0
 574 0008 FFF7FEFF 		bl	LEDsInit
 237:../main.c     **** 	smallLEDPanel_Init();//LED_PORT, smallLEDPanel_CLK, smallLEDPanel_SDI, smallLEDPanel_LE);
 575              		.loc 1 237 0
 576 000c FFF7FEFF 		bl	smallLEDPanel_Init
 238:../main.c     **** 
 239:../main.c     **** 	BtnInit();
 577              		.loc 1 239 0
 578 0010 FFF7FEFF 		bl	BtnInit
 240:../main.c     **** 
 241:../main.c     **** 	EXTI_Configuration();
 579              		.loc 1 241 0
 580 0014 FFF7FEFF 		bl	EXTI_Configuration
 242:../main.c     **** 
 243:../main.c     **** 	USART_GPIO_Configuration();
 581              		.loc 1 243 0
 582 0018 FFF7FEFF 		bl	USART_GPIO_Configuration
 244:../main.c     **** 	USART_Configuration();
 583              		.loc 1 244 0
 584 001c FFF7FEFF 		bl	USART_Configuration
 245:../main.c     **** 
 246:../main.c     **** 	NVIC_Configuration_USER_BUTTON();
 585              		.loc 1 246 0
 586 0020 FFF7FEFF 		bl	NVIC_Configuration_USER_BUTTON
 247:../main.c     **** 	NVIC_Configuration_USART1();
 587              		.loc 1 247 0
 588 0024 FFF7FEFF 		bl	NVIC_Configuration_USART1
 248:../main.c     **** 
 249:../main.c     **** 	TIM6Init();
 589              		.loc 1 249 0
 590 0028 FFF7FEFF 		bl	TIM6Init
 250:../main.c     **** 
 251:../main.c     **** 	RTC_Config();
 591              		.loc 1 251 0
 592 002c FFF7FEFF 		bl	RTC_Config
 252:../main.c     **** 
 253:../main.c     **** }
 593              		.loc 1 253 0
 594 0030 80BD     		pop	{r7, pc}
 595              		.cfi_endproc
 596              	.LFE38:
 598 0032 00BF     		.section	.text.vTaskLED,"ax",%progbits
 599              		.align	2
 600              		.global	vTaskLED
 601              		.thumb
 602              		.thumb_func
 604              	vTaskLED:
 605              	.LFB39:
 254:../main.c     **** 
 255:../main.c     **** void vTaskLED(void *pvParameters)
 256:../main.c     **** {
 606              		.loc 1 256 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 8
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610 0000 80B5     		push	{r7, lr}
 611              	.LCFI27:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 82B0     		sub	sp, sp, #8
 616              	.LCFI28:
 617              		.cfi_def_cfa_offset 16
 618 0004 00AF     		add	r7, sp, #0
 619              	.LCFI29:
 620              		.cfi_def_cfa_register 7
 621 0006 7860     		str	r0, [r7, #4]
 622              	.L15:
 257:../main.c     **** 
 258:../main.c     ****         for (;;) {
 259:../main.c     ****         	//delay_ms(500);
 260:../main.c     ****         	LED_PORT->ODR ^= LED_BLUE;
 623              		.loc 1 260 0 discriminator 1
 624 0008 4FF48053 		mov	r3, #4096
 625 000c C4F20103 		movt	r3, 16385
 626 0010 4FF48052 		mov	r2, #4096
 627 0014 C4F20102 		movt	r2, 16385
 628 0018 D268     		ldr	r2, [r2, #12]
 629 001a 82F48072 		eor	r2, r2, #256
 630 001e DA60     		str	r2, [r3, #12]
 261:../main.c     ****             vTaskDelay(500);
 631              		.loc 1 261 0 discriminator 1
 632 0020 4FF4FA70 		mov	r0, #500
 633 0024 FFF7FEFF 		bl	vTaskDelay
 262:../main.c     **** 
 263:../main.c     ****         }
 634              		.loc 1 263 0 discriminator 1
 635 0028 EEE7     		b	.L15
 636              		.cfi_endproc
 637              	.LFE39:
 639 002a 00BF     		.section	.text.USART1_IRQHandler,"ax",%progbits
 640              		.align	2
 641              		.global	USART1_IRQHandler
 642              		.thumb
 643              		.thumb_func
 645              	USART1_IRQHandler:
 646              	.LFB40:
 264:../main.c     ****         vTaskDelete(NULL);
 265:../main.c     **** 
 266:../main.c     **** }
 267:../main.c     **** 
 268:../main.c     **** void USART1_IRQHandler(void)
 269:../main.c     **** {
 647              		.loc 1 269 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 8
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651 0000 80B5     		push	{r7, lr}
 652              	.LCFI30:
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 7, -8
 655              		.cfi_offset 14, -4
 656 0002 82B0     		sub	sp, sp, #8
 657              	.LCFI31:
 658              		.cfi_def_cfa_offset 16
 659 0004 00AF     		add	r7, sp, #0
 660              	.LCFI32:
 661              		.cfi_def_cfa_register 7
 270:../main.c     **** 
 271:../main.c     **** 	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 662              		.loc 1 271 0
 663 0006 4FF46050 		mov	r0, #14336
 664 000a C4F20100 		movt	r0, 16385
 665 000e 40F22551 		movw	r1, #1317
 666 0012 FFF7FEFF 		bl	USART_GetITStatus
 667 0016 0346     		mov	r3, r0
 668 0018 002B     		cmp	r3, #0
 669 001a 0ED0     		beq	.L16
 670              	.LBB2:
 272:../main.c     **** 	    {
 273:../main.c     **** 		   // перемырг
 274:../main.c     **** 		   //LED_PORT->ODR |= LED_BLUE;
 275:../main.c     **** 		   //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 276:../main.c     **** 		   uint16_t i = USART_ReceiveData(USART1);
 671              		.loc 1 276 0
 672 001c 4FF46050 		mov	r0, #14336
 673 0020 C4F20100 		movt	r0, 16385
 674 0024 FFF7FEFF 		bl	USART_ReceiveData
 675 0028 0346     		mov	r3, r0
 676 002a FB80     		strh	r3, [r7, #6]	@ movhi
 277:../main.c     **** 		   UARTSend(&i, 1);
 677              		.loc 1 277 0
 678 002c 07F10603 		add	r3, r7, #6
 679 0030 1846     		mov	r0, r3
 680 0032 4FF00101 		mov	r1, #1
 681 0036 FFF7FEFF 		bl	UARTSend
 682              	.L16:
 683              	.LBE2:
 278:../main.c     **** 		   //LED_PORT->ODR ^= LED_BLUE;
 279:../main.c     **** 		   //UARTSend(&i, 1);
 280:../main.c     ****           // UARTSend(" <-- data\r\n", 10);
 281:../main.c     ****         }
 282:../main.c     **** }
 684              		.loc 1 282 0
 685 003a 07F10807 		add	r7, r7, #8
 686 003e BD46     		mov	sp, r7
 687 0040 80BD     		pop	{r7, pc}
 688              		.cfi_endproc
 689              	.LFE40:
 691 0042 00BF     		.section	.rodata
 692 003d 000000   		.align	2
 693              	.LC2:
 694 0040 D0A1D186 		.ascii	"\320\241\321\206\321\203\320\272\320\276, \320\276\321"
 694      D183D0BA 
 694      D0BE2C20 
 694      D0BED1
 695 004f 82D0BBD0 		.ascii	"\202\320\273\320\260\320\264\321\214 \320\274\320\265"
 695      B0D0B4D1 
 695      8C20D0BC 
 695      D0B5
 696 005d D0BDD18F 		.ascii	"\320\275\321\217..\000"
 696      2E2E00
 697              		.section	.text.vTaskUSART_TX,"ax",%progbits
 698              		.align	2
 699              		.global	vTaskUSART_TX
 700              		.thumb
 701              		.thumb_func
 703              	vTaskUSART_TX:
 704              	.LFB41:
 283:../main.c     **** 
 284:../main.c     **** void vTaskUSART_TX(void *pvParameters)
 285:../main.c     **** {
 705              		.loc 1 285 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 8
 708              		@ frame_needed = 1, uses_anonymous_args = 0
 709 0000 80B5     		push	{r7, lr}
 710              	.LCFI33:
 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 7, -8
 713              		.cfi_offset 14, -4
 714 0002 82B0     		sub	sp, sp, #8
 715              	.LCFI34:
 716              		.cfi_def_cfa_offset 16
 717 0004 00AF     		add	r7, sp, #0
 718              	.LCFI35:
 719              		.cfi_def_cfa_register 7
 720 0006 7860     		str	r0, [r7, #4]
 721              	.L19:
 722              	.LBB3:
 286:../main.c     **** 	for (;;) {
 287:../main.c     **** 
 288:../main.c     **** 		uart_print_string(USART1, "Сцуко, отладь меня..",1);
 723              		.loc 1 288 0 discriminator 1
 724 0008 4FF46050 		mov	r0, #14336
 725 000c C4F20100 		movt	r0, 16385
 726 0010 40F20001 		movw	r1, #:lower16:.LC2
 727 0014 C0F20001 		movt	r1, #:upper16:.LC2
 728 0018 4FF00102 		mov	r2, #1
 729 001c FFF7FEFF 		bl	uart_print_string
 289:../main.c     **** 		// перемырг
 290:../main.c     **** 		{
 291:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 730              		.loc 1 291 0 discriminator 1
 731 0020 4FF48053 		mov	r3, #4096
 732 0024 C4F20103 		movt	r3, 16385
 733 0028 4FF48052 		mov	r2, #4096
 734 002c C4F20102 		movt	r2, 16385
 735 0030 D268     		ldr	r2, [r2, #12]
 736 0032 42F40072 		orr	r2, r2, #512
 737 0036 DA60     		str	r2, [r3, #12]
 292:../main.c     **** 			vTaskDelay(10);
 738              		.loc 1 292 0 discriminator 1
 739 0038 4FF00A00 		mov	r0, #10
 740 003c FFF7FEFF 		bl	vTaskDelay
 293:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 741              		.loc 1 293 0 discriminator 1
 742 0040 4FF48053 		mov	r3, #4096
 743 0044 C4F20103 		movt	r3, 16385
 744 0048 4FF48052 		mov	r2, #4096
 745 004c C4F20102 		movt	r2, 16385
 746 0050 D268     		ldr	r2, [r2, #12]
 747 0052 82F40072 		eor	r2, r2, #512
 748 0056 DA60     		str	r2, [r3, #12]
 294:../main.c     **** 		}
 295:../main.c     **** 		vTaskDelay(1000);
 749              		.loc 1 295 0 discriminator 1
 750 0058 4FF47A70 		mov	r0, #1000
 751 005c FFF7FEFF 		bl	vTaskDelay
 752              	.LBE3:
 296:../main.c     **** 	}
 753              		.loc 1 296 0 discriminator 1
 754 0060 D2E7     		b	.L19
 755              		.cfi_endproc
 756              	.LFE41:
 758 0062 00BF     		.section	.rodata
 759              		.align	2
 760              	.LC3:
 761 0064 D0A2D0B5 		.ascii	"\320\242\320\265\320\274\320\277\320\265\321\200\320"
 761      D0BCD0BF 
 761      D0B5D180 
 761      D0
 762 0071 B0D182D1 		.ascii	"\260\321\202\321\203\321\200\320\260:   \000"
 762      83D180D0 
 762      B03A2020 
 762      2000
 763 007f 00       		.align	2
 764              	.LC4:
 765 0080 3B00     		.ascii	";\000"
 766 0082 0000     		.align	2
 767              	.LC5:
 768 0084 20557074 		.ascii	" Uptime: \000"
 768      696D653A 
 768      2000
 769 008e 0000     		.align	2
 770              	.LC6:
 771 0090 3A00     		.ascii	":\000"
 772 0092 0000     		.align	2
 773              	.LC7:
 774 0094 00       		.ascii	"\000"
 775              		.section	.text.vTaskDS1821,"ax",%progbits
 776              		.align	2
 777              		.global	vTaskDS1821
 778              		.thumb
 779              		.thumb_func
 781              	vTaskDS1821:
 782              	.LFB42:
 297:../main.c     **** 
 298:../main.c     ****     vTaskDelete(NULL);
 299:../main.c     **** }
 300:../main.c     **** 
 301:../main.c     **** void vTaskDS1821(void *pvParameters)
 302:../main.c     **** {
 783              		.loc 1 302 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 16
 786              		@ frame_needed = 1, uses_anonymous_args = 0
 787 0000 80B5     		push	{r7, lr}
 788              	.LCFI36:
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 7, -8
 791              		.cfi_offset 14, -4
 792 0002 84B0     		sub	sp, sp, #16
 793              	.LCFI37:
 794              		.cfi_def_cfa_offset 24
 795 0004 00AF     		add	r7, sp, #0
 796              	.LCFI38:
 797              		.cfi_def_cfa_register 7
 798 0006 7860     		str	r0, [r7, #4]
 303:../main.c     **** 	uart_print_string(USART1,"Температура:   ",0);
 799              		.loc 1 303 0
 800 0008 4FF46050 		mov	r0, #14336
 801 000c C4F20100 		movt	r0, 16385
 802 0010 40F20001 		movw	r1, #:lower16:.LC3
 803 0014 C0F20001 		movt	r1, #:upper16:.LC3
 804 0018 4FF00002 		mov	r2, #0
 805 001c FFF7FEFF 		bl	uart_print_string
 806              	.L21:
 807              	.LBB4:
 304:../main.c     **** 	for(;;)
 305:../main.c     **** 	{
 306:../main.c     **** 		///// 1-wire /////
 307:../main.c     **** 			signed int t;
 308:../main.c     **** 
 309:../main.c     **** 			//uart_print_string(USART1, "Сбрасываем..",1);
 310:../main.c     **** 
 311:../main.c     **** 			//error_handle(One_Wire_Reset(One_Wire_Pin));
 312:../main.c     **** 
 313:../main.c     **** 			//error_handle(DS1821_Write_Status(One_Wire_Pin));
 314:../main.c     **** 
 315:../main.c     **** 			//error_handle(DS1821_Start_Conversion(One_Wire_Pin));
 316:../main.c     **** 			DS1821_Start_Conversion(One_Wire_Pin);
 808              		.loc 1 316 0 discriminator 1
 809 0020 4FF48050 		mov	r0, #4096
 810 0024 C4F20100 		movt	r0, 16385
 811 0028 4FF08001 		mov	r1, #128
 812 002c FFF7FEFF 		bl	DS1821_Start_Conversion
 317:../main.c     **** 			//delay_ms(750);
 318:../main.c     **** 
 319:../main.c     **** 			//error_handle(DS1821_Stop_Conversion(One_Wire_Pin));
 320:../main.c     **** 			//error_handle(DS1821_Read_Temp(&t, One_Wire_Pin));
 321:../main.c     **** 			uart_print_string(USART1, "Температура:   ", 0);
 813              		.loc 1 321 0 discriminator 1
 814 0030 4FF46050 		mov	r0, #14336
 815 0034 C4F20100 		movt	r0, 16385
 816 0038 40F20001 		movw	r1, #:lower16:.LC3
 817 003c C0F20001 		movt	r1, #:upper16:.LC3
 818 0040 4FF00002 		mov	r2, #0
 819 0044 FFF7FEFF 		bl	uart_print_string
 322:../main.c     **** 			DS1821_Read_Temp(&t, One_Wire_Pin);
 820              		.loc 1 322 0 discriminator 1
 821 0048 07F10C03 		add	r3, r7, #12
 822 004c 1846     		mov	r0, r3
 823 004e 4FF48051 		mov	r1, #4096
 824 0052 C4F20101 		movt	r1, 16385
 825 0056 4FF08002 		mov	r2, #128
 826 005a FFF7FEFF 		bl	DS1821_Read_Temp
 323:../main.c     **** 			uart_send_char(USART1, 8);
 827              		.loc 1 323 0 discriminator 1
 828 005e 4FF46050 		mov	r0, #14336
 829 0062 C4F20100 		movt	r0, 16385
 830 0066 4FF00801 		mov	r1, #8
 831 006a FFF7FEFF 		bl	uart_send_char
 324:../main.c     **** 			uart_send_char(USART1, 8);
 832              		.loc 1 324 0 discriminator 1
 833 006e 4FF46050 		mov	r0, #14336
 834 0072 C4F20100 		movt	r0, 16385
 835 0076 4FF00801 		mov	r1, #8
 836 007a FFF7FEFF 		bl	uart_send_char
 325:../main.c     **** 			uart_print_value(USART1, t);
 837              		.loc 1 325 0 discriminator 1
 838 007e FB68     		ldr	r3, [r7, #12]
 839 0080 4FF46050 		mov	r0, #14336
 840 0084 C4F20100 		movt	r0, 16385
 841 0088 1946     		mov	r1, r3
 842 008a FFF7FEFF 		bl	uart_print_value
 326:../main.c     **** 			uart_print_string(USART1,";",0);
 843              		.loc 1 326 0 discriminator 1
 844 008e 4FF46050 		mov	r0, #14336
 845 0092 C4F20100 		movt	r0, 16385
 846 0096 40F20001 		movw	r1, #:lower16:.LC4
 847 009a C0F20001 		movt	r1, #:upper16:.LC4
 848 009e 4FF00002 		mov	r2, #0
 849 00a2 FFF7FEFF 		bl	uart_print_string
 327:../main.c     **** 			LED_PORT->ODR |= LED_GREEN;
 850              		.loc 1 327 0 discriminator 1
 851 00a6 4FF48053 		mov	r3, #4096
 852 00aa C4F20103 		movt	r3, 16385
 853 00ae 4FF48052 		mov	r2, #4096
 854 00b2 C4F20102 		movt	r2, 16385
 855 00b6 D268     		ldr	r2, [r2, #12]
 856 00b8 42F40072 		orr	r2, r2, #512
 857 00bc DA60     		str	r2, [r3, #12]
 328:../main.c     **** 						//vTaskDelay(10);
 329:../main.c     **** 			delay_ms(10);
 858              		.loc 1 329 0 discriminator 1
 859 00be 4FF00A00 		mov	r0, #10
 860 00c2 FFF7FEFF 		bl	delay_ms
 330:../main.c     **** 			LED_PORT->ODR ^= LED_GREEN;
 861              		.loc 1 330 0 discriminator 1
 862 00c6 4FF48053 		mov	r3, #4096
 863 00ca C4F20103 		movt	r3, 16385
 864 00ce 4FF48052 		mov	r2, #4096
 865 00d2 C4F20102 		movt	r2, 16385
 866 00d6 D268     		ldr	r2, [r2, #12]
 867 00d8 82F40072 		eor	r2, r2, #512
 868 00dc DA60     		str	r2, [r3, #12]
 331:../main.c     **** 			uart_print_string(USART1, " Uptime: ", 0);
 869              		.loc 1 331 0 discriminator 1
 870 00de 4FF46050 		mov	r0, #14336
 871 00e2 C4F20100 		movt	r0, 16385
 872 00e6 40F20001 		movw	r1, #:lower16:.LC5
 873 00ea C0F20001 		movt	r1, #:upper16:.LC5
 874 00ee 4FF00002 		mov	r2, #0
 875 00f2 FFF7FEFF 		bl	uart_print_string
 332:../main.c     **** 			uart_print_value(USART1, Time_GetHours(GetTime()));
 876              		.loc 1 332 0 discriminator 1
 877 00f6 FFF7FEFF 		bl	GetTime
 878 00fa 0346     		mov	r3, r0
 879 00fc 1846     		mov	r0, r3
 880 00fe FFF7FEFF 		bl	Time_GetHours
 881 0102 0346     		mov	r3, r0
 882 0104 4FF46050 		mov	r0, #14336
 883 0108 C4F20100 		movt	r0, 16385
 884 010c 1946     		mov	r1, r3
 885 010e FFF7FEFF 		bl	uart_print_value
 333:../main.c     **** 			uart_print_string(USART1, ":", 0);
 886              		.loc 1 333 0 discriminator 1
 887 0112 4FF46050 		mov	r0, #14336
 888 0116 C4F20100 		movt	r0, 16385
 889 011a 40F20001 		movw	r1, #:lower16:.LC6
 890 011e C0F20001 		movt	r1, #:upper16:.LC6
 891 0122 4FF00002 		mov	r2, #0
 892 0126 FFF7FEFF 		bl	uart_print_string
 334:../main.c     **** 			uart_print_value(USART1, Time_GetMinutes(GetTime()));
 893              		.loc 1 334 0 discriminator 1
 894 012a FFF7FEFF 		bl	GetTime
 895 012e 0346     		mov	r3, r0
 896 0130 1846     		mov	r0, r3
 897 0132 FFF7FEFF 		bl	Time_GetMinutes
 898 0136 0346     		mov	r3, r0
 899 0138 4FF46050 		mov	r0, #14336
 900 013c C4F20100 		movt	r0, 16385
 901 0140 1946     		mov	r1, r3
 902 0142 FFF7FEFF 		bl	uart_print_value
 335:../main.c     **** 			uart_print_string(USART1, ":", 0);
 903              		.loc 1 335 0 discriminator 1
 904 0146 4FF46050 		mov	r0, #14336
 905 014a C4F20100 		movt	r0, 16385
 906 014e 40F20001 		movw	r1, #:lower16:.LC6
 907 0152 C0F20001 		movt	r1, #:upper16:.LC6
 908 0156 4FF00002 		mov	r2, #0
 909 015a FFF7FEFF 		bl	uart_print_string
 336:../main.c     **** 			uart_print_value(USART1, Time_GetSeconds(GetTime()));
 910              		.loc 1 336 0 discriminator 1
 911 015e FFF7FEFF 		bl	GetTime
 912 0162 0346     		mov	r3, r0
 913 0164 1846     		mov	r0, r3
 914 0166 FFF7FEFF 		bl	Time_GetSeconds
 915 016a 0346     		mov	r3, r0
 916 016c 4FF46050 		mov	r0, #14336
 917 0170 C4F20100 		movt	r0, 16385
 918 0174 1946     		mov	r1, r3
 919 0176 FFF7FEFF 		bl	uart_print_value
 337:../main.c     **** 			uart_print_string(USART1, "", 1);
 920              		.loc 1 337 0 discriminator 1
 921 017a 4FF46050 		mov	r0, #14336
 922 017e C4F20100 		movt	r0, 16385
 923 0182 40F20001 		movw	r1, #:lower16:.LC7
 924 0186 C0F20001 		movt	r1, #:upper16:.LC7
 925 018a 4FF00102 		mov	r2, #1
 926 018e FFF7FEFF 		bl	uart_print_string
 338:../main.c     **** 			//////////////////
 339:../main.c     **** 			vTaskDelay(1000);
 927              		.loc 1 339 0 discriminator 1
 928 0192 4FF47A70 		mov	r0, #1000
 929 0196 FFF7FEFF 		bl	vTaskDelay
 930              	.LBE4:
 340:../main.c     **** 	}
 931              		.loc 1 340 0 discriminator 1
 932 019a 41E7     		b	.L21
 933              		.cfi_endproc
 934              	.LFE42:
 936              		.section	.rodata
 937 0095 000000   		.align	2
 938              	.LC8:
 939 0098 4C454400 		.ascii	"LED\000"
 940              		.align	2
 941              	.LC9:
 942 009c 44533138 		.ascii	"DS1821\000"
 942      323100
 943              		.section	.text.main,"ax",%progbits
 944              		.align	2
 945              		.global	main
 946              		.thumb
 947              		.thumb_func
 949              	main:
 950              	.LFB43:
 341:../main.c     **** 	vTaskDelete(NULL);
 342:../main.c     **** }
 343:../main.c     **** 
 344:../main.c     **** 
 345:../main.c     **** 
 346:../main.c     **** int main()
 347:../main.c     **** {
 951              		.loc 1 347 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955 0000 80B5     		push	{r7, lr}
 956              	.LCFI39:
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
 960 0002 84B0     		sub	sp, sp, #16
 961              	.LCFI40:
 962              		.cfi_def_cfa_offset 24
 963 0004 04AF     		add	r7, sp, #16
 964              	.LCFI41:
 965              		.cfi_def_cfa 7, 8
 348:../main.c     **** 	vFreeRTOSInitAll();
 966              		.loc 1 348 0
 967 0006 FFF7FEFF 		bl	vFreeRTOSInitAll
 349:../main.c     **** 
 350:../main.c     **** 	xTaskCreate( vTaskLED, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, NULL, 2,
 968              		.loc 1 350 0
 969 000a 4FF00203 		mov	r3, #2
 970 000e 0093     		str	r3, [sp, #0]
 971 0010 4FF00003 		mov	r3, #0
 972 0014 0193     		str	r3, [sp, #4]
 973 0016 4FF00003 		mov	r3, #0
 974 001a 0293     		str	r3, [sp, #8]
 975 001c 4FF00003 		mov	r3, #0
 976 0020 0393     		str	r3, [sp, #12]
 977 0022 40F20000 		movw	r0, #:lower16:vTaskLED
 978 0026 C0F20000 		movt	r0, #:upper16:vTaskLED
 979 002a 40F20001 		movw	r1, #:lower16:.LC8
 980 002e C0F20001 		movt	r1, #:upper16:.LC8
 981 0032 4FF04602 		mov	r2, #70
 982 0036 4FF00003 		mov	r3, #0
 983 003a FFF7FEFF 		bl	xTaskGenericCreate
 351:../main.c     **** 	                        ( xTaskHandle * ) NULL);
 352:../main.c     **** 	//xTaskCreate(vTaskUSART_TX, (signed char*)"USART_TX", configMINIMAL_STACK_SIZE, NULL, 2,
 353:../main.c     ****       //      				( xTaskHandle * ) NULL);
 354:../main.c     **** 	xTaskCreate( vTaskDS1821, ( signed char * ) "DS1821", configMINIMAL_STACK_SIZE, NULL, 2,
 984              		.loc 1 354 0
 985 003e 4FF00203 		mov	r3, #2
 986 0042 0093     		str	r3, [sp, #0]
 987 0044 4FF00003 		mov	r3, #0
 988 0048 0193     		str	r3, [sp, #4]
 989 004a 4FF00003 		mov	r3, #0
 990 004e 0293     		str	r3, [sp, #8]
 991 0050 4FF00003 		mov	r3, #0
 992 0054 0393     		str	r3, [sp, #12]
 993 0056 40F20000 		movw	r0, #:lower16:vTaskDS1821
 994 005a C0F20000 		movt	r0, #:upper16:vTaskDS1821
 995 005e 40F20001 		movw	r1, #:lower16:.LC9
 996 0062 C0F20001 		movt	r1, #:upper16:.LC9
 997 0066 4FF04602 		mov	r2, #70
 998 006a 4FF00003 		mov	r3, #0
 999 006e FFF7FEFF 		bl	xTaskGenericCreate
 355:../main.c     **** 		                    ( xTaskHandle * ) NULL);
 356:../main.c     **** 	vTaskStartScheduler();
 1000              		.loc 1 356 0
 1001 0072 FFF7FEFF 		bl	vTaskStartScheduler
 1002              	.L23:
 357:../main.c     **** 
 358:../main.c     **** 
 359:../main.c     **** 
 360:../main.c     **** 	for(;;)
 361:../main.c     **** 	{
 362:../main.c     **** //
 363:../main.c     **** 	}
 1003              		.loc 1 363 0 discriminator 1
 1004 0076 FEE7     		b	.L23
 1005              		.cfi_endproc
 1006              	.LFE43:
 1008              		.section	.rodata
 1009 00a3 00       		.align	2
 1010              	.LC10:
 1011 00a4 53756363 		.ascii	"Success! GoodLuck!\000"
 1011      65737321 
 1011      20476F6F 
 1011      644C7563 
 1011      6B2100
 1012 00b7 00       		.align	2
 1013              	.LC11:
 1014 00b8 4E6F2065 		.ascii	"No echo from device!\000"
 1014      63686F20 
 1014      66726F6D 
 1014      20646576 
 1014      69636521 
 1015 00cd 000000   		.align	2
 1016              	.LC12:
 1017 00d0 50696E20 		.ascii	"Pin LOW error!\000"
 1017      4C4F5720 
 1017      6572726F 
 1017      722100
 1018 00df 00       		.align	2
 1019              	.LC13:
 1020 00e0 43524320 		.ascii	"CRC not match!\000"
 1020      6E6F7420 
 1020      6D617463 
 1020      682100
 1021 00ef 00       		.section	.text.error_handle,"ax",%progbits
 1022              		.align	2
 1023              		.global	error_handle
 1024              		.thumb
 1025              		.thumb_func
 1027              	error_handle:
 1028              	.LFB44:
 364:../main.c     **** 	return 0;
 365:../main.c     **** }
 366:../main.c     **** 
 367:../main.c     **** unsigned char error_handle (unsigned char err)
 368:../main.c     **** {
 1029              		.loc 1 368 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 8
 1032              		@ frame_needed = 1, uses_anonymous_args = 0
 1033 0000 80B5     		push	{r7, lr}
 1034              	.LCFI42:
 1035              		.cfi_def_cfa_offset 8
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 82B0     		sub	sp, sp, #8
 1039              	.LCFI43:
 1040              		.cfi_def_cfa_offset 16
 1041 0004 00AF     		add	r7, sp, #0
 1042              	.LCFI44:
 1043              		.cfi_def_cfa_register 7
 1044 0006 0346     		mov	r3, r0
 1045 0008 FB71     		strb	r3, [r7, #7]
 369:../main.c     **** 	switch (err)
 1046              		.loc 1 369 0
 1047 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1048 000c 042B     		cmp	r3, #4
 1049 000e 41D8     		bhi	.L25
 1050 0010 01A2     		adr	r2, .L30
 1051 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1052 0016 00BF     		.align	2
 1053              	.L30:
 1054 0018 2D000000 		.word	.L26+1
 1055 001c 47000000 		.word	.L27+1
 1056 0020 61000000 		.word	.L28+1
 1057 0024 95000000 		.word	.L25+1
 1058 0028 7B000000 		.word	.L29+1
 1059              	.L26:
 1060              	.LBB5:
 370:../main.c     **** 		{
 371:../main.c     **** 		 	case One_Wire_Success: 					uart_print_string(USART1, "Success! GoodLuck!",1); break;
 1061              		.loc 1 371 0
 1062 002c 4FF46050 		mov	r0, #14336
 1063 0030 C4F20100 		movt	r0, 16385
 1064 0034 40F20001 		movw	r1, #:lower16:.LC10
 1065 0038 C0F20001 		movt	r1, #:upper16:.LC10
 1066 003c 4FF00102 		mov	r2, #1
 1067 0040 FFF7FEFF 		bl	uart_print_string
 1068 0044 26E0     		b	.L25
 1069              	.L27:
 372:../main.c     **** 		 	case One_Wire_Error_No_Echo: 			uart_print_string(USART1, "No echo from device!",1); break;
 1070              		.loc 1 372 0
 1071 0046 4FF46050 		mov	r0, #14336
 1072 004a C4F20100 		movt	r0, 16385
 1073 004e 40F20001 		movw	r1, #:lower16:.LC11
 1074 0052 C0F20001 		movt	r1, #:upper16:.LC11
 1075 0056 4FF00102 		mov	r2, #1
 1076 005a FFF7FEFF 		bl	uart_print_string
 1077 005e 19E0     		b	.L25
 1078              	.L28:
 373:../main.c     **** 		 	case One_Wire_Bus_Low_Error: 			uart_print_string(USART1, "Pin LOW error!",1); break;
 1079              		.loc 1 373 0
 1080 0060 4FF46050 		mov	r0, #14336
 1081 0064 C4F20100 		movt	r0, 16385
 1082 0068 40F20001 		movw	r1, #:lower16:.LC12
 1083 006c C0F20001 		movt	r1, #:upper16:.LC12
 1084 0070 4FF00102 		mov	r2, #1
 1085 0074 FFF7FEFF 		bl	uart_print_string
 1086 0078 0CE0     		b	.L25
 1087              	.L29:
 374:../main.c     **** 		 	case One_Wire_CRC_Error: 				uart_print_string(USART1, "CRC not match!",1); break;
 1088              		.loc 1 374 0
 1089 007a 4FF46050 		mov	r0, #14336
 1090 007e C4F20100 		movt	r0, 16385
 1091 0082 40F20001 		movw	r1, #:lower16:.LC13
 1092 0086 C0F20001 		movt	r1, #:upper16:.LC13
 1093 008a 4FF00102 		mov	r2, #1
 1094 008e FFF7FEFF 		bl	uart_print_string
 1095 0092 00BF     		nop
 1096              	.L25:
 1097              	.LBE5:
 375:../main.c     **** 		}
 376:../main.c     **** 		if (err==One_Wire_Success) return 0; else return 1;//uart_print_string(USART1, "GoodLuck!",1);
 1098              		.loc 1 376 0
 1099 0094 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1100 0096 002B     		cmp	r3, #0
 1101 0098 02D1     		bne	.L31
 1102              		.loc 1 376 0 is_stmt 0 discriminator 1
 1103 009a 4FF00003 		mov	r3, #0
 1104 009e 01E0     		b	.L32
 1105              	.L31:
 1106              		.loc 1 376 0 discriminator 2
 1107 00a0 4FF00103 		mov	r3, #1
 1108              	.L32:
 377:../main.c     **** }
 1109              		.loc 1 377 0 is_stmt 1
 1110 00a4 1846     		mov	r0, r3
 1111 00a6 07F10807 		add	r7, r7, #8
 1112 00aa BD46     		mov	sp, r7
 1113 00ac 80BD     		pop	{r7, pc}
 1114              		.cfi_endproc
 1115              	.LFE44:
 1117 00ae 00BF     		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 1118              		.align	2
 1119              		.global	vApplicationMallocFailedHook
 1120              		.thumb
 1121              		.thumb_func
 1123              	vApplicationMallocFailedHook:
 1124              	.LFB45:
 378:../main.c     **** 
 379:../main.c     **** void vApplicationMallocFailedHook( void )
 380:../main.c     **** {
 1125              		.loc 1 380 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 0
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129              		@ link register save eliminated.
 1130 0000 80B4     		push	{r7}
 1131              	.LCFI45:
 1132              		.cfi_def_cfa_offset 4
 1133              		.cfi_offset 7, -4
 1134 0002 00AF     		add	r7, sp, #0
 1135              	.LCFI46:
 1136              		.cfi_def_cfa_register 7
 1137              	.L34:
 381:../main.c     **** 	/* Called if a call to pvPortMalloc() fails because there is insufficient
 382:../main.c     **** 	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
 383:../main.c     **** 	internally by FreeRTOS API functions that create tasks, queues, software
 384:../main.c     **** 	timers, and semaphores.  The size of the FreeRTOS heap is set by the
 385:../main.c     **** 	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
 386:../main.c     **** 	for( ;; );
 1138              		.loc 1 386 0 discriminator 1
 1139 0004 FEE7     		b	.L34
 1140              		.cfi_endproc
 1141              	.LFE45:
 1143 0006 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 1144              		.align	2
 1145              		.global	vApplicationStackOverflowHook
 1146              		.thumb
 1147              		.thumb_func
 1149              	vApplicationStackOverflowHook:
 1150              	.LFB46:
 387:../main.c     **** }
 388:../main.c     **** /*-----------------------------------------------------------*/
 389:../main.c     **** 
 390:../main.c     **** void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
 391:../main.c     **** {
 1151              		.loc 1 391 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 8
 1154              		@ frame_needed = 1, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156 0000 80B4     		push	{r7}
 1157              	.LCFI47:
 1158              		.cfi_def_cfa_offset 4
 1159              		.cfi_offset 7, -4
 1160 0002 83B0     		sub	sp, sp, #12
 1161              	.LCFI48:
 1162              		.cfi_def_cfa_offset 16
 1163 0004 00AF     		add	r7, sp, #0
 1164              	.LCFI49:
 1165              		.cfi_def_cfa_register 7
 1166 0006 7860     		str	r0, [r7, #4]
 1167 0008 3960     		str	r1, [r7, #0]
 1168              	.L36:
 392:../main.c     **** 	( void ) pcTaskName;
 393:../main.c     **** 	( void ) pxTask;
 394:../main.c     **** 
 395:../main.c     **** 	/* Run time stack overflow checking is performed if
 396:../main.c     **** 	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 397:../main.c     **** 	function is called if a stack overflow is detected. */
 398:../main.c     **** 	for( ;; );
 1169              		.loc 1 398 0 discriminator 1
 1170 000a FEE7     		b	.L36
 1171              		.cfi_endproc
 1172              	.LFE46:
 1174              		.section	.text.vApplicationIdleHook,"ax",%progbits
 1175              		.align	2
 1176              		.global	vApplicationIdleHook
 1177              		.thumb
 1178              		.thumb_func
 1180              	vApplicationIdleHook:
 1181              	.LFB47:
 399:../main.c     **** }
 400:../main.c     **** /*-----------------------------------------------------------*/
 401:../main.c     **** 
 402:../main.c     **** void vApplicationIdleHook( void )
 403:../main.c     **** {
 1182              		.loc 1 403 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 8
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186 0000 80B5     		push	{r7, lr}
 1187              	.LCFI50:
 1188              		.cfi_def_cfa_offset 8
 1189              		.cfi_offset 7, -8
 1190              		.cfi_offset 14, -4
 1191 0002 82B0     		sub	sp, sp, #8
 1192              	.LCFI51:
 1193              		.cfi_def_cfa_offset 16
 1194 0004 00AF     		add	r7, sp, #0
 1195              	.LCFI52:
 1196              		.cfi_def_cfa_register 7
 404:../main.c     **** volatile size_t xFreeStackSpace;
 405:../main.c     **** 
 406:../main.c     **** 	/* This function is called on each cycle of the idle task.  In this case it
 407:../main.c     **** 	does nothing useful, other than report the amout of FreeRTOS heap that
 408:../main.c     **** 	remains unallocated. */
 409:../main.c     **** 	xFreeStackSpace = xPortGetFreeHeapSize();
 1197              		.loc 1 409 0
 1198 0006 FFF7FEFF 		bl	xPortGetFreeHeapSize
 1199 000a 0346     		mov	r3, r0
 1200 000c 7B60     		str	r3, [r7, #4]
 410:../main.c     **** 
 411:../main.c     **** 	if( xFreeStackSpace > 100 )
 1201              		.loc 1 411 0
 1202 000e 7B68     		ldr	r3, [r7, #4]
 412:../main.c     **** 	{
 413:../main.c     **** 		/* By now, the kernel has allocated everything it is going to, so
 414:../main.c     **** 		if there is a lot of heap remaining unallocated then
 415:../main.c     **** 		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
 416:../main.c     **** 		reduced accordingly. */
 417:../main.c     **** 	}
 418:../main.c     **** }
 1203              		.loc 1 418 0
 1204 0010 07F10807 		add	r7, r7, #8
 1205 0014 BD46     		mov	sp, r7
 1206 0016 80BD     		pop	{r7, pc}
 1207              		.cfi_endproc
 1208              	.LFE47:
 1210              		.section	.text.UARTSend,"ax",%progbits
 1211              		.align	2
 1212              		.global	UARTSend
 1213              		.thumb
 1214              		.thumb_func
 1216              	UARTSend:
 1217              	.LFB48:
 419:../main.c     **** 
 420:../main.c     **** /*******************************************************************************
 421:../main.c     **** * Function Name  : UARTSend
 422:../main.c     **** * Description    : Send a string to the UART.
 423:../main.c     **** * Input          : - pucBuffer: buffers to be printed.
 424:../main.c     **** *                : - ulCount  : buffer's length
 425:../main.c     **** * Output         : None
 426:../main.c     **** * Return         : None
 427:../main.c     **** *******************************************************************************/
 428:../main.c     **** void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
 429:../main.c     **** {
 1218              		.loc 1 429 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 8
 1221              		@ frame_needed = 1, uses_anonymous_args = 0
 1222 0000 80B5     		push	{r7, lr}
 1223              	.LCFI53:
 1224              		.cfi_def_cfa_offset 8
 1225              		.cfi_offset 7, -8
 1226              		.cfi_offset 14, -4
 1227 0002 82B0     		sub	sp, sp, #8
 1228              	.LCFI54:
 1229              		.cfi_def_cfa_offset 16
 1230 0004 00AF     		add	r7, sp, #0
 1231              	.LCFI55:
 1232              		.cfi_def_cfa_register 7
 1233 0006 7860     		str	r0, [r7, #4]
 1234 0008 3960     		str	r1, [r7, #0]
 430:../main.c     ****     //
 431:../main.c     ****     // Loop while there are more characters to send.
 432:../main.c     ****     //
 433:../main.c     ****     while(ulCount--)
 1235              		.loc 1 433 0
 1236 000a 18E0     		b	.L39
 1237              	.L41:
 434:../main.c     ****     {
 435:../main.c     ****         USART_SendData(USART1, (uint16_t) *pucBuffer++);
 1238              		.loc 1 435 0
 1239 000c 7B68     		ldr	r3, [r7, #4]
 1240 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1241 0010 7A68     		ldr	r2, [r7, #4]
 1242 0012 02F10102 		add	r2, r2, #1
 1243 0016 7A60     		str	r2, [r7, #4]
 1244 0018 4FF46050 		mov	r0, #14336
 1245 001c C4F20100 		movt	r0, 16385
 1246 0020 1946     		mov	r1, r3
 1247 0022 FFF7FEFF 		bl	USART_SendData
 436:../main.c     ****         /* Loop until the end of transmission */
 437:../main.c     ****         while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 1248              		.loc 1 437 0
 1249 0026 00BF     		nop
 1250              	.L40:
 1251              		.loc 1 437 0 is_stmt 0 discriminator 1
 1252 0028 4FF46050 		mov	r0, #14336
 1253 002c C4F20100 		movt	r0, 16385
 1254 0030 4FF04001 		mov	r1, #64
 1255 0034 FFF7FEFF 		bl	USART_GetFlagStatus
 1256 0038 0346     		mov	r3, r0
 1257 003a 002B     		cmp	r3, #0
 1258 003c F4D0     		beq	.L40
 1259              	.L39:
 433:../main.c     ****     while(ulCount--)
 1260              		.loc 1 433 0 is_stmt 1 discriminator 1
 1261 003e 3B68     		ldr	r3, [r7, #0]
 1262 0040 002B     		cmp	r3, #0
 1263 0042 0CBF     		ite	eq
 1264 0044 0023     		moveq	r3, #0
 1265 0046 0123     		movne	r3, #1
 1266 0048 DBB2     		uxtb	r3, r3
 1267 004a 3A68     		ldr	r2, [r7, #0]
 1268 004c 02F1FF32 		add	r2, r2, #-1
 1269 0050 3A60     		str	r2, [r7, #0]
 1270 0052 002B     		cmp	r3, #0
 1271 0054 DAD1     		bne	.L41
 438:../main.c     ****         {
 439:../main.c     ****         }
 440:../main.c     ****     }
 441:../main.c     **** }
 1272              		.loc 1 441 0
 1273 0056 07F10807 		add	r7, r7, #8
 1274 005a BD46     		mov	sp, r7
 1275 005c 80BD     		pop	{r7, pc}
 1276              		.cfi_endproc
 1277              	.LFE48:
 1279 005e 00BF     		.text
 1280              	.Letext0:
 1281              		.file 2 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/include/
 1282              		.file 3 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/FreeRTOS/Headers/task.h"
 1283              		.file 4 "/home/frolls/ARM/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../..
 1284              		.file 5 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/stm32f10x.h"
 1285              		.file 6 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1286              		.file 7 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1287              		.file 8 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/stm3
 1288              		.file 9 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/StdPeripheralDriver/inc/misc
 1289              		.file 10 "/home/frolls/git/STM32_FreeRTOS_freeModBus/stm32vld_template/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc54pzxp.s:23     .bss.counter:00000000 counter
     /tmp/cc54pzxp.s:20     .bss.counter:00000000 $d
     /tmp/cc54pzxp.s:26     .text.SetupClock:00000000 $t
     /tmp/cc54pzxp.s:31     .text.SetupClock:00000000 SetupClock
     /tmp/cc54pzxp.s:102    .text.LEDsInit:00000000 $t
     /tmp/cc54pzxp.s:107    .text.LEDsInit:00000000 LEDsInit
     /tmp/cc54pzxp.s:151    .text.BtnInit:00000000 $t
     /tmp/cc54pzxp.s:156    .text.BtnInit:00000000 BtnInit
     /tmp/cc54pzxp.s:201    .text.USART_GPIO_Configuration:00000000 $t
     /tmp/cc54pzxp.s:206    .text.USART_GPIO_Configuration:00000000 USART_GPIO_Configuration
     /tmp/cc54pzxp.s:262    .rodata:00000000 $d
     /tmp/cc54pzxp.s:263    .rodata:00000000 .LC0
     /tmp/cc54pzxp.s:268    .text.USART_Configuration:00000000 $t
     /tmp/cc54pzxp.s:273    .text.USART_Configuration:00000000 USART_Configuration
     /tmp/cc54pzxp.s:338    .text.EXTI_Configuration:00000000 $t
     /tmp/cc54pzxp.s:343    .text.EXTI_Configuration:00000000 EXTI_Configuration
     /tmp/cc54pzxp.s:384    .text.NVIC_Configuration_USART1:00000000 $t
     /tmp/cc54pzxp.s:389    .text.NVIC_Configuration_USART1:00000000 NVIC_Configuration_USART1
     /tmp/cc54pzxp.s:445    .text.NVIC_Configuration_USER_BUTTON:00000000 $t
     /tmp/cc54pzxp.s:450    .text.NVIC_Configuration_USER_BUTTON:00000000 NVIC_Configuration_USER_BUTTON
     /tmp/cc54pzxp.s:495    .rodata:00000034 .LC1
     /tmp/cc54pzxp.s:498    .text.EXTI0_IRQHandler:00000000 $t
     /tmp/cc54pzxp.s:503    .text.EXTI0_IRQHandler:00000000 EXTI0_IRQHandler
     /tmp/cc54pzxp.s:552    .text.vFreeRTOSInitAll:00000000 $t
     /tmp/cc54pzxp.s:557    .text.vFreeRTOSInitAll:00000000 vFreeRTOSInitAll
     /tmp/cc54pzxp.s:599    .text.vTaskLED:00000000 $t
     /tmp/cc54pzxp.s:604    .text.vTaskLED:00000000 vTaskLED
     /tmp/cc54pzxp.s:640    .text.USART1_IRQHandler:00000000 $t
     /tmp/cc54pzxp.s:645    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/cc54pzxp.s:1216   .text.UARTSend:00000000 UARTSend
     /tmp/cc54pzxp.s:693    .rodata:00000040 .LC2
     /tmp/cc54pzxp.s:698    .text.vTaskUSART_TX:00000000 $t
     /tmp/cc54pzxp.s:703    .text.vTaskUSART_TX:00000000 vTaskUSART_TX
     /tmp/cc54pzxp.s:760    .rodata:00000064 .LC3
     /tmp/cc54pzxp.s:764    .rodata:00000080 .LC4
     /tmp/cc54pzxp.s:767    .rodata:00000084 .LC5
     /tmp/cc54pzxp.s:770    .rodata:00000090 .LC6
     /tmp/cc54pzxp.s:773    .rodata:00000094 .LC7
     /tmp/cc54pzxp.s:776    .text.vTaskDS1821:00000000 $t
     /tmp/cc54pzxp.s:781    .text.vTaskDS1821:00000000 vTaskDS1821
     /tmp/cc54pzxp.s:938    .rodata:00000098 .LC8
     /tmp/cc54pzxp.s:941    .rodata:0000009c .LC9
     /tmp/cc54pzxp.s:944    .text.main:00000000 $t
     /tmp/cc54pzxp.s:949    .text.main:00000000 main
     /tmp/cc54pzxp.s:1010   .rodata:000000a4 .LC10
     /tmp/cc54pzxp.s:1013   .rodata:000000b8 .LC11
     /tmp/cc54pzxp.s:1016   .rodata:000000d0 .LC12
     /tmp/cc54pzxp.s:1019   .rodata:000000e0 .LC13
     /tmp/cc54pzxp.s:1022   .text.error_handle:00000000 $t
     /tmp/cc54pzxp.s:1027   .text.error_handle:00000000 error_handle
     /tmp/cc54pzxp.s:1054   .text.error_handle:00000018 $d
     /tmp/cc54pzxp.s:1062   .text.error_handle:0000002c $t
     /tmp/cc54pzxp.s:1118   .text.vApplicationMallocFailedHook:00000000 $t
     /tmp/cc54pzxp.s:1123   .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
     /tmp/cc54pzxp.s:1144   .text.vApplicationStackOverflowHook:00000000 $t
     /tmp/cc54pzxp.s:1149   .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
     /tmp/cc54pzxp.s:1175   .text.vApplicationIdleHook:00000000 $t
     /tmp/cc54pzxp.s:1180   .text.vApplicationIdleHook:00000000 vApplicationIdleHook
     /tmp/cc54pzxp.s:1211   .text.UARTSend:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_DeInit
RCC_HSEConfig
RCC_GetFlagStatus
RCC_HCLKConfig
RCC_PCLK2Config
RCC_PCLK1Config
RCC_PLLConfig
RCC_PLLCmd
RCC_SYSCLKConfig
RCC_GetSYSCLKSource
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_EXTILineConfig
USART_Init
USART_Cmd
uart_print_string
EXTI_Init
NVIC_PriorityGroupConfig
NVIC_Init
USART_ITConfig
EXTI_ClearITPendingBit
delay_ms
smallLEDPanel_Init
TIM6Init
RTC_Config
vTaskDelay
USART_GetITStatus
USART_ReceiveData
DS1821_Start_Conversion
DS1821_Read_Temp
uart_send_char
uart_print_value
GetTime
Time_GetHours
Time_GetMinutes
Time_GetSeconds
xTaskGenericCreate
vTaskStartScheduler
xPortGetFreeHeapSize
USART_SendData
USART_GetFlagStatus
