
stm32vld_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004864  080001d0  080001d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000031  08004a34  08004a34  00010020  2**0
                  CONTENTS, READONLY
  3 .data         00000020  20000000  08004fd1  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001d58  20000020  08004ff4  00010020  2**2
                  ALLOC
  5 ._user_heap_stack 00000100  20001d78  08006d4c  00010020  2**0
                  ALLOC
  6 .debug_info   00009e16  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d9  00000000  00000000  00019e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004d44  00000000  00000000  0001c040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000de0  00000000  00000000  00020d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c58  00000000  00000000  00021b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000d214  00000000  00000000  000227c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006e90  00000000  00000000  0002f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00047b8d  00000000  00000000  00036864  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000070  00000000  00000000  0007e3f1  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002c00  00000000  00000000  0007e464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <DS1821_Start_Conversion>:
 *      Author: frolls
 */
#include "ds1821.h"

unsigned char DS1821_Start_Conversion (GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
	unsigned char cnt;
	cnt=One_Wire_Reset(GPIOx, PINx);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	4619      	mov	r1, r3
 80001e2:	f000 f843 	bl	800026c <One_Wire_Reset>
 80001e6:	4603      	mov	r3, r0
 80001e8:	73fb      	strb	r3, [r7, #15]
	if (cnt!=One_Wire_Success) return cnt;
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <DS1821_Start_Conversion+0x24>
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	e009      	b.n	8000208 <DS1821_Start_Conversion+0x38>
	One_Wire_Write_Byte(DS1821_START_CONVERT_T,GPIOx, PINx);
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	f04f 00ee 	mov.w	r0, #238	; 0xee
 80001fc:	6879      	ldr	r1, [r7, #4]
 80001fe:	461a      	mov	r2, r3
 8000200:	f000 f880 	bl	8000304 <One_Wire_Write_Byte>
	return One_Wire_Success;
 8000204:	f04f 0300 	mov.w	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	f107 0710 	add.w	r7, r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop

08000214 <DS1821_Read_Temp>:
	One_Wire_Write_Byte(DS1821_STOP_CONVERT_T,GPIOx, PINx);
	return One_Wire_Success;
}

unsigned char DS1821_Read_Temp(unsigned int * temperature, GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
	unsigned char tmp;
	tmp=One_Wire_Reset(GPIOx, PINx);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	b29b      	uxth	r3, r3
 8000224:	68b8      	ldr	r0, [r7, #8]
 8000226:	4619      	mov	r1, r3
 8000228:	f000 f820 	bl	800026c <One_Wire_Reset>
 800022c:	4603      	mov	r3, r0
 800022e:	75fb      	strb	r3, [r7, #23]
	if (tmp!=One_Wire_Success) return tmp;
 8000230:	7dfb      	ldrb	r3, [r7, #23]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <DS1821_Read_Temp+0x26>
 8000236:	7dfb      	ldrb	r3, [r7, #23]
 8000238:	e013      	b.n	8000262 <DS1821_Read_Temp+0x4e>
	One_Wire_Write_Byte(DS1821_READ_TEMPERATURE, GPIOx, PINx);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	b29b      	uxth	r3, r3
 800023e:	f04f 00aa 	mov.w	r0, #170	; 0xaa
 8000242:	68b9      	ldr	r1, [r7, #8]
 8000244:	461a      	mov	r2, r3
 8000246:	f000 f85d 	bl	8000304 <One_Wire_Write_Byte>
	* temperature = One_Wire_Read_Byte(GPIOx, PINx);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	b29b      	uxth	r3, r3
 800024e:	68b8      	ldr	r0, [r7, #8]
 8000250:	4619      	mov	r1, r3
 8000252:	f000 f8b9 	bl	80003c8 <One_Wire_Read_Byte>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]
	return One_Wire_Success;
 800025e:	f04f 0300 	mov.w	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	f107 0718 	add.w	r7, r7, #24
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <One_Wire_Reset>:
 */

#include "oneWire.h"

unsigned int One_Wire_Reset(GPIO_TypeDef * GPIOx, u16 PINx)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	unsigned int tmp;
	PIN_IN(GPIOx, PINx);
 8000278:	887b      	ldrh	r3, [r7, #2]
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	4619      	mov	r1, r3
 800027e:	f000 f9e5 	bl	800064c <PIN_IN>
	if ((PIN_SYG(GPIOx, PINx))==0)	return One_Wire_Bus_Low_Error;
 8000282:	887b      	ldrh	r3, [r7, #2]
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	4619      	mov	r1, r3
 8000288:	f000 f9c8 	bl	800061c <PIN_SYG>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d102      	bne.n	8000298 <One_Wire_Reset+0x2c>
 8000292:	f04f 0302 	mov.w	r3, #2
 8000296:	e02f      	b.n	80002f8 <One_Wire_Reset+0x8c>
	PIN_OUT_PP(GPIOx, PINx);
 8000298:	887b      	ldrh	r3, [r7, #2]
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	4619      	mov	r1, r3
 800029e:	f000 f9ed 	bl	800067c <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 80002a2:	887b      	ldrh	r3, [r7, #2]
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	4619      	mov	r1, r3
 80002a8:	f000 f9aa 	bl	8000600 <PIN_OFF>
	delay_us(Time_Reset_Low);
 80002ac:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80002b0:	f000 fa8c 	bl	80007cc <delay_us>
	PIN_ON(GPIOx, PINx);
 80002b4:	887b      	ldrh	r3, [r7, #2]
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	4619      	mov	r1, r3
 80002ba:	f000 f993 	bl	80005e4 <PIN_ON>
	PIN_IN(GPIOx, PINx);
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	4619      	mov	r1, r3
 80002c4:	f000 f9c2 	bl	800064c <PIN_IN>
	delay_us(Time_Pulse_Delay_High);
 80002c8:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80002cc:	f000 fa7e 	bl	80007cc <delay_us>
	if ((PIN_SYG(GPIOx, PINx))==0) tmp=One_Wire_Success;
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	4619      	mov	r1, r3
 80002d6:	f000 f9a1 	bl	800061c <PIN_SYG>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <One_Wire_Reset+0x7c>
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	e002      	b.n	80002ee <One_Wire_Reset+0x82>
		else tmp=One_Wire_Error_No_Echo;
 80002e8:	f04f 0301 	mov.w	r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
	delay_us(Time_After_Reset);
 80002ee:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80002f2:	f000 fa6b 	bl	80007cc <delay_us>
	return tmp;
 80002f6:	68fb      	ldr	r3, [r7, #12]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	f107 0710 	add.w	r7, r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop

08000304 <One_Wire_Write_Byte>:

void One_Wire_Write_Byte(unsigned char Byte,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6039      	str	r1, [r7, #0]
 800030c:	4613      	mov	r3, r2
 800030e:	4602      	mov	r2, r0
 8000310:	71fa      	strb	r2, [r7, #7]
 8000312:	80bb      	strh	r3, [r7, #4]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++) One_Wire_Write_Bit(Byte&(1<<cnt),GPIOx, PINx);
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e013      	b.n	8000344 <One_Wire_Write_Byte+0x40>
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f04f 0201 	mov.w	r2, #1
 8000322:	fa02 f303 	lsl.w	r3, r2, r3
 8000326:	b2da      	uxtb	r2, r3
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4013      	ands	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	b2da      	uxtb	r2, r3
 8000330:	88bb      	ldrh	r3, [r7, #4]
 8000332:	4610      	mov	r0, r2
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	f000 f80c 	bl	8000354 <One_Wire_Write_Bit>
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	f103 0301 	add.w	r3, r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	2b08      	cmp	r3, #8
 8000348:	d1e8      	bne.n	800031c <One_Wire_Write_Byte+0x18>
}
 800034a:	f107 0710 	add.w	r7, r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop

08000354 <One_Wire_Write_Bit>:

void One_Wire_Write_Bit (unsigned char Bit,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6039      	str	r1, [r7, #0]
 800035c:	4613      	mov	r3, r2
 800035e:	4602      	mov	r2, r0
 8000360:	71fa      	strb	r2, [r7, #7]
 8000362:	80bb      	strh	r3, [r7, #4]
	PIN_OUT_PP(GPIOx, PINx);
 8000364:	88bb      	ldrh	r3, [r7, #4]
 8000366:	6838      	ldr	r0, [r7, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	f000 f987 	bl	800067c <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	6838      	ldr	r0, [r7, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	f000 f944 	bl	8000600 <PIN_OFF>
	if (Bit==0)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d10d      	bne.n	800039a <One_Wire_Write_Bit+0x46>
	{
		delay_us(Time_Pulse_Delay_High);
 800037e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000382:	f000 fa23 	bl	80007cc <delay_us>
		PIN_ON(GPIOx, PINx);
 8000386:	88bb      	ldrh	r3, [r7, #4]
 8000388:	6838      	ldr	r0, [r7, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	f000 f92a 	bl	80005e4 <PIN_ON>
		delay_us(Time_Pulse_Delay_Low);
 8000390:	f04f 000a 	mov.w	r0, #10
 8000394:	f000 fa1a 	bl	80007cc <delay_us>
 8000398:	e00c      	b.n	80003b4 <One_Wire_Write_Bit+0x60>
	}
	else
	{
		delay_us(Time_Pulse_Delay_Low);
 800039a:	f04f 000a 	mov.w	r0, #10
 800039e:	f000 fa15 	bl	80007cc <delay_us>
		PIN_ON(GPIOx, PINx);
 80003a2:	88bb      	ldrh	r3, [r7, #4]
 80003a4:	6838      	ldr	r0, [r7, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	f000 f91c 	bl	80005e4 <PIN_ON>
		delay_us(Time_Pulse_Delay_High);
 80003ac:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80003b0:	f000 fa0c 	bl	80007cc <delay_us>
	}
	PIN_IN(GPIOx, PINx);
 80003b4:	88bb      	ldrh	r3, [r7, #4]
 80003b6:	6838      	ldr	r0, [r7, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	f000 f947 	bl	800064c <PIN_IN>
}
 80003be:	f107 0708 	add.w	r7, r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop

080003c8 <One_Wire_Read_Byte>:

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
	unsigned char tmp=0;
 80003d4:	f04f 0300 	mov.w	r3, #0
 80003d8:	73fb      	strb	r3, [r7, #15]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 80003da:	f04f 0300 	mov.w	r3, #0
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	e015      	b.n	800040e <One_Wire_Read_Byte+0x46>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
 80003e2:	887b      	ldrh	r3, [r7, #2]
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	4619      	mov	r1, r3
 80003e8:	f000 f81e 	bl	8000428 <One_Wire_Read_Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d009      	beq.n	8000406 <One_Wire_Read_Byte+0x3e>
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	f04f 0201 	mov.w	r2, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	4313      	orrs	r3, r2
 8000402:	b2db      	uxtb	r3, r3
 8000404:	73fb      	strb	r3, [r7, #15]

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
	unsigned char tmp=0;
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	f103 0301 	add.w	r3, r3, #1
 800040c:	73bb      	strb	r3, [r7, #14]
 800040e:	7bbb      	ldrb	r3, [r7, #14]
 8000410:	2b08      	cmp	r3, #8
 8000412:	d1e6      	bne.n	80003e2 <One_Wire_Read_Byte+0x1a>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
	delay_us(Time_Pulse_Delay_High);
 8000414:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000418:	f000 f9d8 	bl	80007cc <delay_us>
	return tmp;
 800041c:	7bfb      	ldrb	r3, [r7, #15]
}
 800041e:	4618      	mov	r0, r3
 8000420:	f107 0710 	add.w	r7, r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <One_Wire_Read_Bit>:

unsigned char One_Wire_Read_Bit (GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	807b      	strh	r3, [r7, #2]
		unsigned char tmp;
	 	PIN_OUT_PP(GPIOx, PINx);
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	4619      	mov	r1, r3
 800043a:	f000 f91f 	bl	800067c <PIN_OUT_PP>
		PIN_OFF(GPIOx, PINx);
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	f000 f8dc 	bl	8000600 <PIN_OFF>
		delay_us(Time_Hold_Down);
 8000448:	f04f 0002 	mov.w	r0, #2
 800044c:	f000 f9be 	bl	80007cc <delay_us>
		PIN_IN(GPIOx, PINx);
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	4619      	mov	r1, r3
 8000456:	f000 f8f9 	bl	800064c <PIN_IN>
		delay_us(Time_Pulse_Delay_Low);
 800045a:	f04f 000a 	mov.w	r0, #10
 800045e:	f000 f9b5 	bl	80007cc <delay_us>
		if ((PIN_SYG(GPIOx, PINx))!=0)	tmp = 1;
 8000462:	887b      	ldrh	r3, [r7, #2]
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	4619      	mov	r1, r3
 8000468:	f000 f8d8 	bl	800061c <PIN_SYG>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d003      	beq.n	800047a <One_Wire_Read_Bit+0x52>
 8000472:	f04f 0301 	mov.w	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e002      	b.n	8000480 <One_Wire_Read_Bit+0x58>
			else tmp = 0;
 800047a:	f04f 0300 	mov.w	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
		delay_us(Time_Pulse_Delay_High);
 8000480:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000484:	f000 f9a2 	bl	80007cc <delay_us>
		return tmp;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	f107 0710 	add.w	r7, r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <uart_send_char>:
 *  Created on: 22.03.2013
 *      Author: frolls
 */
#include "serial.h"
void uart_send_char (USART_TypeDef * USARTx, char dat)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	while (!(USARTx->SR & USART_SR_TXE)) {}
 80004a0:	bf00      	nop
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f8      	beq.n	80004a2 <uart_send_char+0xe>
  	USART_SendData(USARTx,dat);
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4619      	mov	r1, r3
 80004b8:	f001 fa84 	bl	80019c4 <USART_SendData>
}
 80004bc:	f107 0708 	add.w	r7, r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <uart_print_string>:

void uart_print_string(USART_TypeDef * USARTx, char * string, char newline)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	4613      	mov	r3, r2
 80004d0:	71fb      	strb	r3, [r7, #7]
	while (*string != 0x00){ uart_send_char(USARTx, *string++);}
 80004d2:	e009      	b.n	80004e8 <uart_print_string+0x24>
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	f102 0201 	add.w	r2, r2, #1
 80004de:	60ba      	str	r2, [r7, #8]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	4619      	mov	r1, r3
 80004e4:	f7ff ffd6 	bl	8000494 <uart_send_char>
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1f1      	bne.n	80004d4 <uart_print_string+0x10>
	if (newline !=0 ){
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d004      	beq.n	8000500 <uart_print_string+0x3c>
		uart_send_char(USARTx, '\n');
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f04f 010a 	mov.w	r1, #10
 80004fc:	f7ff ffca 	bl	8000494 <uart_send_char>
		//uart_send_char(USARTx, 13);
	}
}
 8000500:	f107 0710 	add.w	r7, r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <uart_print_value>:

void uart_print_value(USART_TypeDef * USARTx, long val)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	char buffer[10] = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	f103 0304 	add.w	r3, r3, #4
 8000520:	f04f 0200 	mov.w	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	f103 0304 	add.w	r3, r3, #4
 800052a:	f04f 0200 	mov.w	r2, #0
 800052e:	801a      	strh	r2, [r3, #0]
 8000530:	f103 0302 	add.w	r3, r3, #2
	char * head = buffer;
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	617b      	str	r3, [r7, #20]
	char cnt=0;
 800053a:	f04f 0300 	mov.w	r3, #0
 800053e:	74fb      	strb	r3, [r7, #19]
	if (val!=0)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d045      	beq.n	80005d2 <uart_print_value+0xca>
	{
		while( val )
 8000546:	e02e      	b.n	80005a6 <uart_print_value+0x9e>
		{
    		*head++ = (val % 10)["0123456789"];
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	f246 6367 	movw	r3, #26215	; 0x6667
 800054e:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000552:	fb83 2301 	smull	r2, r3, r3, r1
 8000556:	ea4f 02a3 	mov.w	r2, r3, asr #2
 800055a:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800055e:	1ad2      	subs	r2, r2, r3
 8000560:	4613      	mov	r3, r2
 8000562:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000566:	189b      	adds	r3, r3, r2
 8000568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	f644 1304 	movw	r3, #18692	; 0x4904
 8000572:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000576:	5c9a      	ldrb	r2, [r3, r2]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	f103 0301 	add.w	r3, r3, #1
 8000582:	617b      	str	r3, [r7, #20]
    		val /= 10;
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	f246 6367 	movw	r3, #26215	; 0x6667
 800058a:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800058e:	fb83 1302 	smull	r1, r3, r3, r2
 8000592:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000596:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800059a:	1acb      	subs	r3, r1, r3
 800059c:	603b      	str	r3, [r7, #0]
			cnt++;
 800059e:	7cfb      	ldrb	r3, [r7, #19]
 80005a0:	f103 0301 	add.w	r3, r3, #1
 80005a4:	74fb      	strb	r3, [r7, #19]
	char buffer[10] = {0};
	char * head = buffer;
	char cnt=0;
	if (val!=0)
	{
		while( val )
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1cd      	bne.n	8000548 <uart_print_value+0x40>
		{
    		*head++ = (val % 10)["0123456789"];
    		val /= 10;
			cnt++;
		}
		while (cnt!=0){ cnt--; uart_send_char(USARTx, (buffer[cnt])); }
 80005ac:	e00d      	b.n	80005ca <uart_print_value+0xc2>
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
 80005b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80005b4:	74fb      	strb	r3, [r7, #19]
 80005b6:	7cfb      	ldrb	r3, [r7, #19]
 80005b8:	f107 0218 	add.w	r2, r7, #24
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f7ff ff65 	bl	8000494 <uart_send_char>
 80005ca:	7cfb      	ldrb	r3, [r7, #19]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1ee      	bne.n	80005ae <uart_print_value+0xa6>
 80005d0:	e004      	b.n	80005dc <uart_print_value+0xd4>
	}
	else
	{
		uart_send_char(USARTx, ('0'));
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f04f 0130 	mov.w	r1, #48	; 0x30
 80005d8:	f7ff ff5c 	bl	8000494 <uart_send_char>
	}
}
 80005dc:	f107 0718 	add.w	r7, r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <PIN_ON>:

#include "stm32_GPIO.h"
#include "stm32f10x_gpio.h"

void PIN_ON(GPIO_TypeDef * GPIOx,u16 PINx)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR=PINx;
 80005f0:	887a      	ldrh	r2, [r7, #2]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	611a      	str	r2, [r3, #16]
	//GPIOx->ODR=GPIOx->IDR|(PINx);
}
 80005f6:	f107 070c 	add.w	r7, r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <PIN_OFF>:

void PIN_OFF(GPIO_TypeDef * GPIOx,u16 PINx)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	GPIOx->BRR=PINx;
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	615a      	str	r2, [r3, #20]
	//GPIOx->ODR=GPIOx->IDR&(~(PINx));
}
 8000612:	f107 070c 	add.w	r7, r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <PIN_SYG>:

u8 PIN_SYG(GPIO_TypeDef * GPIOx, u16 PINx)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR&PINx)!=0)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	887b      	ldrh	r3, [r7, #2]
 800062e:	4013      	ands	r3, r2
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <PIN_SYG+0x1e>
	{return 1;}
 8000634:	f04f 0301 	mov.w	r3, #1
 8000638:	e001      	b.n	800063e <PIN_SYG+0x22>
	else
	{return 0;}
 800063a:	f04f 0300 	mov.w	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	f107 070c 	add.w	r7, r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <PIN_IN>:

void PIN_IN (GPIO_TypeDef * GPIOx,u16 PINx)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 800065c:	f04f 0303 	mov.w	r3, #3
 8000660:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 8000662:	f04f 0304 	mov.w	r3, #4
 8000666:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	4619      	mov	r1, r3
 8000670:	f000 face 	bl	8000c10 <GPIO_Init>
}
 8000674:	f107 0710 	add.w	r7, r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <PIN_OUT_PP>:

void PIN_OUT_PP (GPIO_TypeDef * GPIOx,u16 PINx)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000688:	887b      	ldrh	r3, [r7, #2]
 800068a:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 800068c:	f04f 0303 	mov.w	r3, #3
 8000690:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_Out_PP;
 8000692:	f04f 0310 	mov.w	r3, #16
 8000696:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	4619      	mov	r1, r3
 80006a0:	f000 fab6 	bl	8000c10 <GPIO_Init>
}
 80006a4:	f107 0710 	add.w	r7, r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <TIM6Init>:
 *      Author: frolls
 */
#include "timer6.h"

void TIM6Init()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Не забываем затактировать таймер */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80006b0:	f04f 0010 	mov.w	r0, #16
 80006b4:	f04f 0101 	mov.w	r1, #1
 80006b8:	f000 feae 	bl	8001418 <RCC_APB1PeriphClockCmd>

  //uart_print_string(USART1, "TIM6 initialized!", 1);
  //uart_print_string(USART1, "TIM_TimeBaseStructure.TIM_Prescaler: ", 0);
  //uart_print_value(USART1, TIM_TimeBaseStructure.TIM_Prescaler);
  //uart_print_string(USART1, "", 1);
}
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop

080006c0 <TIM6_DAC_IRQHandler>:
}

volatile uint8_t delay_end = 0;

void TIM6_DAC_IRQHandler()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Так как этот обработчик вызывается и для ЦАП, нужно проверять,
   * произошло ли прерывание по переполнению счётчика таймера TIM6.
   */
	if(TIM_GetITStatus(TIM6, TIM_FLAG_Update)!=RESET)
 80006c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006cc:	f04f 0101 	mov.w	r1, #1
 80006d0:	f000 ffee 	bl	80016b0 <TIM_GetITStatus>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d01e      	beq.n	8000718 <TIM6_DAC_IRQHandler+0x58>
	  {
	   TIM_ClearITPendingBit(TIM6, TIM_FLAG_Update);
 80006da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006e2:	f04f 0101 	mov.w	r1, #1
 80006e6:	f001 f813 	bl	8001710 <TIM_ClearITPendingBit>
	   TIM_Cmd(TIM6, DISABLE);
 80006ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006ee:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006f2:	f04f 0100 	mov.w	r1, #0
 80006f6:	f000 ffad 	bl	8001654 <TIM_Cmd>
	   TIM_SetCounter(TIM6, 0);
 80006fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006fe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000702:	f04f 0100 	mov.w	r1, #0
 8000706:	f000 ffc5 	bl	8001694 <TIM_SetCounter>
	   delay_end = 1;
 800070a:	f240 0320 	movw	r3, #32
 800070e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000712:	f04f 0201 	mov.w	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
	  }
}
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop

0800071c <delay_ms>:

void delay_ms(uint16_t delay)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	 TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY)*1000 - 1;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800072e:	f240 021c 	movw	r2, #28
 8000732:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000736:	6811      	ldr	r1, [r2, #0]
 8000738:	f64d 6283 	movw	r2, #56963	; 0xde83
 800073c:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000740:	fba2 0201 	umull	r0, r2, r2, r1
 8000744:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000748:	b292      	uxth	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8000750:	1a89      	subs	r1, r1, r2
 8000752:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8000756:	188a      	adds	r2, r1, r2
 8000758:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800075c:	b292      	uxth	r2, r2
 800075e:	f102 32ff 	add.w	r2, r2, #4294967295
 8000762:	b292      	uxth	r2, r2
 8000764:	851a      	strh	r2, [r3, #40]	; 0x28
	 TIM6->ARR = delay;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800076e:	88fa      	ldrh	r2, [r7, #6]
 8000770:	859a      	strh	r2, [r3, #44]	; 0x2c
	 TIM6->EGR |= TIM_EGR_UG;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800077a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800077e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000782:	8a92      	ldrh	r2, [r2, #20]
 8000784:	b292      	uxth	r2, r2
 8000786:	f042 0201 	orr.w	r2, r2, #1
 800078a:	b292      	uxth	r2, r2
 800078c:	829a      	strh	r2, [r3, #20]
     TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800079a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800079e:	8812      	ldrh	r2, [r2, #0]
 80007a0:	b292      	uxth	r2, r2
 80007a2:	f042 0209 	orr.w	r2, r2, #9
 80007a6:	b292      	uxth	r2, r2
 80007a8:	801a      	strh	r2, [r3, #0]
     while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 80007aa:	bf00      	nop
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f5      	bne.n	80007ac <delay_ms+0x90>
}
 80007c0:	f107 070c 	add.w	r7, r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <delay_us>:

void delay_us(uint16_t delay)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
	TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY) - 1;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007de:	f240 021c 	movw	r2, #28
 80007e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007e6:	6811      	ldr	r1, [r2, #0]
 80007e8:	f64d 6283 	movw	r2, #56963	; 0xde83
 80007ec:	f2c4 321b 	movt	r2, #17179	; 0x431b
 80007f0:	fba2 0201 	umull	r0, r2, r2, r1
 80007f4:	ea4f 4292 	mov.w	r2, r2, lsr #18
 80007f8:	b292      	uxth	r2, r2
 80007fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80007fe:	b292      	uxth	r2, r2
 8000800:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM6->ARR = delay;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800080a:	88fa      	ldrh	r2, [r7, #6]
 800080c:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM6->EGR |= TIM_EGR_UG;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800081e:	8a92      	ldrh	r2, [r2, #20]
 8000820:	b292      	uxth	r2, r2
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	b292      	uxth	r2, r2
 8000828:	829a      	strh	r2, [r3, #20]
	TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000836:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800083a:	8812      	ldrh	r2, [r2, #0]
 800083c:	b292      	uxth	r2, r2
 800083e:	f042 0209 	orr.w	r2, r2, #9
 8000842:	b292      	uxth	r2, r2
 8000844:	801a      	strh	r2, [r3, #0]
    while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 8000846:	bf00      	nop
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f5      	bne.n	8000848 <delay_us+0x7c>
}
 800085c:	f107 070c 	add.w	r7, r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <RTC_Config>:
 */

#include <rtc.h>

void RTC_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
        //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
        //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
        //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        //NVIC_Init(&NVIC_InitStructure);

        RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 800086c:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8000870:	f04f 0101 	mov.w	r1, #1
 8000874:	f000 fdd0 	bl	8001418 <RCC_APB1PeriphClockCmd>

        PWR_BackupAccessCmd(ENABLE);
 8000878:	f04f 0001 	mov.w	r0, #1
 800087c:	f000 faf8 	bl	8000e70 <PWR_BackupAccessCmd>
        RCC_LSEConfig(RCC_LSE_ON);
 8000880:	f04f 0001 	mov.w	r0, #1
 8000884:	f000 fc62 	bl	800114c <RCC_LSEConfig>
        while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
 8000888:	bf00      	nop
 800088a:	f04f 0041 	mov.w	r0, #65	; 0x41
 800088e:	f000 fded 	bl	800146c <RCC_GetFlagStatus>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0f8      	beq.n	800088a <RTC_Config+0x22>
        RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8000898:	f44f 7080 	mov.w	r0, #256	; 0x100
 800089c:	f000 fc86 	bl	80011ac <RCC_RTCCLKConfig>
        RCC_RTCCLKCmd(ENABLE);
 80008a0:	f04f 0001 	mov.w	r0, #1
 80008a4:	f000 fc98 	bl	80011d8 <RCC_RTCCLKCmd>

        RTC_WaitForSynchro();
 80008a8:	f000 feb6 	bl	8001618 <RTC_WaitForSynchro>
        RTC_WaitForLastTask();
 80008ac:	f000 fea4 	bl	80015f8 <RTC_WaitForLastTask>
        //RTC_ITConfig(RTC_IT_SEC, ENABLE);
        RTC_WaitForLastTask();
 80008b0:	f000 fea2 	bl	80015f8 <RTC_WaitForLastTask>
        RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
 80008b4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80008b8:	f000 fe80 	bl	80015bc <RTC_SetPrescaler>
        RTC_WaitForLastTask();
 80008bc:	f000 fe9c 	bl	80015f8 <RTC_WaitForLastTask>
}
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop

080008c4 <GetTime>:

uint32_t GetTime(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	/* Reset RTC Counter when Time is 23:59:59 */
	    if (RTC_GetCounter() == 0x0001517F)
 80008c8:	f000 fe40 	bl	800154c <RTC_GetCounter>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f245 137f 	movw	r3, #20863	; 0x517f
 80008d2:	f2c0 0301 	movt	r3, #1
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d105      	bne.n	80008e6 <GetTime+0x22>
	    {
	        RTC_SetCounter(0x0);
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f000 fe51 	bl	8001584 <RTC_SetCounter>
	        /* Wait until last write operation on RTC registers has finished */
	        RTC_WaitForLastTask();
 80008e2:	f000 fe89 	bl	80015f8 <RTC_WaitForLastTask>
	    }
	return RTC_GetCounter();
 80008e6:	f000 fe31 	bl	800154c <RTC_GetCounter>
 80008ea:	4603      	mov	r3, r0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <Time_GetHours>:

uint32_t Time_GetHours(uint32_t TimeVar)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    /* Compute  hours */
    return TimeVar / 3600;
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 80008fe:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 8000902:	fba3 1302 	umull	r1, r3, r3, r2
 8000906:	ea4f 23d3 	mov.w	r3, r3, lsr #11
}
 800090a:	4618      	mov	r0, r3
 800090c:	f107 070c 	add.w	r7, r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <Time_GetMinutes>:

uint32_t Time_GetMinutes(uint32_t TimeVar)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	return (TimeVar % 3600) / 60;
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 8000926:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 800092a:	fba3 2301 	umull	r2, r3, r3, r1
 800092e:	ea4f 22d3 	mov.w	r2, r3, lsr #11
 8000932:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000936:	fb03 f302 	mul.w	r3, r3, r2
 800093a:	1aca      	subs	r2, r1, r3
 800093c:	f648 0389 	movw	r3, #34953	; 0x8889
 8000940:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8000944:	fba3 1302 	umull	r1, r3, r3, r2
 8000948:	ea4f 1353 	mov.w	r3, r3, lsr #5
}
 800094c:	4618      	mov	r0, r3
 800094e:	f107 070c 	add.w	r7, r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <Time_GetSeconds>:

uint32_t Time_GetSeconds(uint32_t TimeVar)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	return (TimeVar % 3600) % 60;
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 8000966:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 800096a:	fba3 1302 	umull	r1, r3, r3, r2
 800096e:	ea4f 21d3 	mov.w	r1, r3, lsr #11
 8000972:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000976:	fb03 f301 	mul.w	r3, r3, r1
 800097a:	1ad1      	subs	r1, r2, r3
 800097c:	f648 0389 	movw	r3, #34953	; 0x8889
 8000980:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8000984:	fba3 2301 	umull	r2, r3, r3, r1
 8000988:	ea4f 1253 	mov.w	r2, r3, lsr #5
 800098c:	4613      	mov	r3, r2
 800098e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000998:	1aca      	subs	r2, r1, r3
 800099a:	4613      	mov	r3, r2
}
 800099c:	4618      	mov	r0, r3
 800099e:	f107 070c 	add.w	r7, r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <NVIC_PriorityGroupConfig>:
 *                                1 bits for subpriority
 *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
 *                                0 bits for subpriority
 * @retval None
 */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
	SCB ->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80009b0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80009b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 80009be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009c2:	60da      	str	r2, [r3, #12]
}
 80009c4:	f107 070c 	add.w	r7, r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <NVIC_Init>:
 *         parameters in the NVIC_InitStruct.
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct) {
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	f04f 030f 	mov.w	r3, #15
 80009e8:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd)); assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority)); assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

	if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	78db      	ldrb	r3, [r3, #3]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d047      	beq.n	8000a82 <NVIC_Init+0xb2>
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
 80009f2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80009f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	ea6f 0303 	mvn.w	r3, r3
 8000a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a04:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000a08:	617b      	str	r3, [r7, #20]
		tmppre = (0x4 - tmppriority);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f1c3 0304 	rsb	r3, r3, #4
 8000a10:	613b      	str	r3, [r7, #16]
		tmpsub = tmpsub >> tmppriority;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1a:	60fb      	str	r3, [r7, #12]

		tmppriority =
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	785b      	ldrb	r3, [r3, #1]
 8000a20:	461a      	mov	r2, r3
						<< tmppre;
 8000a22:	693b      	ldr	r3, [r7, #16]
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
		tmppre = (0x4 - tmppriority);
		tmpsub = tmpsub >> tmppriority;

		tmppriority =
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	617b      	str	r3, [r7, #20]
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
						<< tmppre;
		tmppriority |= NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4013      	ands	r3, r2
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	617b      	str	r3, [r7, #20]
		tmppriority = tmppriority << 0x04;
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000a40:	617b      	str	r3, [r7, #20]

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a42:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a46:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	185b      	adds	r3, r3, r1
 8000a56:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000a5a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a5e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000a6a:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	7809      	ldrb	r1, [r1, #0]
 8000a70:	f001 011f 	and.w	r1, r1, #31
 8000a74:	f04f 0001 	mov.w	r0, #1
 8000a78:	fa00 f101 	lsl.w	r1, r0, r1
		tmppriority = tmppriority << 0x04;

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000a80:	e014      	b.n	8000aac <NVIC_Init+0xdc>
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000a82:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a86:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000a92:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	7809      	ldrb	r1, [r1, #0]
 8000a98:	f001 011f 	and.w	r1, r1, #31
 8000a9c:	f04f 0001 	mov.w	r0, #1
 8000aa0:	fa00 f101 	lsl.w	r1, r0, r1
		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000aa4:	f102 0220 	add.w	r2, r2, #32
 8000aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	}
}
 8000aac:	f107 071c 	add.w	r7, r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <EXTI_Init>:
 *         parameters in the EXTI_InitStruct.
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
 *         that contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode)); assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger)); assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line)); assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

	tmp = (uint32_t) EXTI_BASE;
 8000ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ace:	60fb      	str	r3, [r7, #12]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	799b      	ldrb	r3, [r3, #6]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d078      	beq.n	8000bca <EXTI_Init+0x112>
		/* Clear EXTI line configuration */
		EXTI ->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000adc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000ae8:	6811      	ldr	r1, [r2, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	ea6f 0202 	mvn.w	r2, r2
 8000af2:	400a      	ands	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
		EXTI ->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b02:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b06:	6851      	ldr	r1, [r2, #4]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	ea6f 0202 	mvn.w	r2, r2
 8000b10:	400a      	ands	r2, r1
 8000b12:	605a      	str	r2, [r3, #4]

		tmp += EXTI_InitStruct->EXTI_Mode;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	6811      	ldr	r1, [r2, #0]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 8000b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b38:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b3c:	6891      	ldr	r1, [r2, #8]
				~EXTI_InitStruct->EXTI_Line;
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	ea6f 0202 	mvn.w	r2, r2

		tmp += EXTI_InitStruct->EXTI_Mode;

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 8000b46:	400a      	ands	r2, r1
 8000b48:	609a      	str	r2, [r3, #8]
				~EXTI_InitStruct->EXTI_Line;
		EXTI ->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b56:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b5a:	68d1      	ldr	r1, [r2, #12]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	6812      	ldr	r2, [r2, #0]
 8000b60:	ea6f 0202 	mvn.w	r2, r2
 8000b64:	400a      	ands	r2, r1
 8000b66:	60da      	str	r2, [r3, #12]

		/* Select the trigger for the selected external interrupts */
		if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	795b      	ldrb	r3, [r3, #5]
 8000b6c:	2b10      	cmp	r3, #16
 8000b6e:	d11a      	bne.n	8000ba6 <EXTI_Init+0xee>
			/* Rising Falling edge */
			EXTI ->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b80:	6891      	ldr	r1, [r2, #8]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	609a      	str	r2, [r3, #8]
			EXTI ->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b96:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b9a:	68d1      	ldr	r1, [r2, #12]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	6812      	ldr	r2, [r2, #0]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	e01f      	b.n	8000be6 <EXTI_Init+0x12e>
		} else {
			tmp = (uint32_t) EXTI_BASE;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bae:	60fb      	str	r3, [r7, #12]
			tmp += EXTI_InitStruct->EXTI_Trigger;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	60fb      	str	r3, [r7, #12]

			*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	6811      	ldr	r1, [r2, #0]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e00d      	b.n	8000be6 <EXTI_Init+0x12e>
		}
	} else {
		tmp += EXTI_InitStruct->EXTI_Mode;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	60fb      	str	r3, [r7, #12]

		/* Disable the selected external lines */
		*(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	6811      	ldr	r1, [r2, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	ea6f 0202 	mvn.w	r2, r2
 8000be2:	400a      	ands	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]
	}
}
 8000be6:	f107 0714 	add.w	r7, r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <EXTI_ClearITPendingBit>:
 * @brief  Clears the EXTI's line pending bits.
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(EXTI_Line));

	EXTI ->PR = EXTI_Line;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	615a      	str	r2, [r3, #20]
}
 8000c04:	f107 070c 	add.w	r7, r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <GPIO_Init>:
 * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
 * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
 *         contains the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct) {
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000c1a:	f04f 0300 	mov.w	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx)); assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode)); assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

	/*---------------------------- GPIO Mode Configuration -----------------------*/
	currentmode = ((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x0F);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	78db      	ldrb	r3, [r3, #3]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	61fb      	str	r3, [r7, #28]
	if ((((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x10)) != 0x00) {
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	78db      	ldrb	r3, [r3, #3]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <GPIO_Init+0x4e>
		/* Check the parameters */
		assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
		/* Output mode */
		currentmode |= (uint32_t) GPIO_InitStruct->GPIO_Speed;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61fb      	str	r3, [r7, #28]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d04e      	beq.n	8000d06 <GPIO_Init+0xf6>
		tmpreg = GPIOx->CRL;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	e041      	b.n	8000cfa <GPIO_Init+0xea>
			pos = ((uint32_t) 0x01) << pinpos;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	f04f 0201 	mov.w	r2, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d12d      	bne.n	8000cf2 <GPIO_Init+0xe2>
				pos = pinpos << 2;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c9c:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding low control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f04f 020f 	mov.w	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	ea6f 0303 	mvn.w	r3, r3
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	78db      	ldrb	r3, [r3, #3]
 8000cc8:	2b28      	cmp	r3, #40	; 0x28
 8000cca:	d107      	bne.n	8000cdc <GPIO_Init+0xcc>
					GPIOx->BRR = (((uint32_t) 0x01) << pinpos);
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f04f 0201 	mov.w	r2, #1
 8000cd2:	fa02 f203 	lsl.w	r2, r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	e00a      	b.n	8000cf2 <GPIO_Init+0xe2>
				} else {
					/* Set the corresponding ODR bit */
					if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	78db      	ldrb	r3, [r3, #3]
 8000ce0:	2b48      	cmp	r3, #72	; 0x48
 8000ce2:	d106      	bne.n	8000cf2 <GPIO_Init+0xe2>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	f04f 0201 	mov.w	r2, #1
 8000cea:	fa02 f203 	lsl.w	r2, r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
		tmpreg = GPIOx->CRL;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	f103 0301 	add.w	r3, r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	d9ba      	bls.n	8000c76 <GPIO_Init+0x66>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
					}
				}
			}
		}
		GPIOx->CRL = tmpreg;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	601a      	str	r2, [r3, #0]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d953      	bls.n	8000db6 <GPIO_Init+0x1a6>
		tmpreg = GPIOx->CRH;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	e046      	b.n	8000daa <GPIO_Init+0x19a>
			pos = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	f103 0308 	add.w	r3, r3, #8
 8000d22:	f04f 0201 	mov.w	r2, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d130      	bne.n	8000da2 <GPIO_Init+0x192>
				pos = pinpos << 2;
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d46:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding high control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f04f 020f 	mov.w	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	ea6f 0303 	mvn.w	r3, r3
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	78db      	ldrb	r3, [r3, #3]
 8000d72:	2b28      	cmp	r3, #40	; 0x28
 8000d74:	d108      	bne.n	8000d88 <GPIO_Init+0x178>
					GPIOx->BRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	f103 0308 	add.w	r3, r3, #8
 8000d7c:	f04f 0201 	mov.w	r2, #1
 8000d80:	fa02 f203 	lsl.w	r2, r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	615a      	str	r2, [r3, #20]
				}
				/* Set the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	78db      	ldrb	r3, [r3, #3]
 8000d8c:	2b48      	cmp	r3, #72	; 0x48
 8000d8e:	d108      	bne.n	8000da2 <GPIO_Init+0x192>
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	f103 0308 	add.w	r3, r3, #8
 8000d96:	f04f 0201 	mov.w	r2, #1
 8000d9a:	fa02 f203 	lsl.w	r2, r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
		tmpreg = GPIOx->CRH;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	f103 0301 	add.w	r3, r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b07      	cmp	r3, #7
 8000dae:	d9b5      	bls.n	8000d1c <GPIO_Init+0x10c>
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
				}
			}
		}
		GPIOx->CRH = tmpreg;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	605a      	str	r2, [r3, #4]
	}
}
 8000db6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <GPIO_EXTILineConfig>:
 *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).
 * @param  GPIO_PinSource: specifies the EXTI line to be configured.
 *   This parameter can be GPIO_PinSourcex where x can be (0..15).
 * @retval None
 */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource) {
 8000dc0:	b490      	push	{r4, r7}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	71fa      	strb	r2, [r7, #7]
 8000dcc:	71bb      	strb	r3, [r7, #6]
	uint32_t tmp = 0x00;
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000dde:	f04f 020f 	mov.w	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	60fb      	str	r3, [r7, #12]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000df0:	79ba      	ldrb	r2, [r7, #6]
 8000df2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	4610      	mov	r0, r2
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000e02:	79b9      	ldrb	r1, [r7, #6]
 8000e04:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000e08:	b2c9      	uxtb	r1, r1
 8000e0a:	f101 0102 	add.w	r1, r1, #2
 8000e0e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	ea6f 0202 	mvn.w	r2, r2
 8000e18:	4011      	ands	r1, r2
 8000e1a:	f100 0202 	add.w	r2, r0, #2
 8000e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e2a:	79ba      	ldrb	r2, [r7, #6]
 8000e2c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	4610      	mov	r0, r2
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000e3c:	79b9      	ldrb	r1, [r7, #6]
 8000e3e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000e42:	b2c9      	uxtb	r1, r1
 8000e44:	f101 0102 	add.w	r1, r1, #2
 8000e48:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000e4c:	79fc      	ldrb	r4, [r7, #7]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
 8000e4e:	79ba      	ldrb	r2, [r7, #6]
 8000e50:	f002 0203 	and.w	r2, r2, #3
 8000e54:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8000e58:	fa04 f202 	lsl.w	r2, r4, r2
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000e5c:	4311      	orrs	r1, r2
 8000e5e:	f100 0202 	add.w	r2, r0, #2
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
}
 8000e66:	f107 0710 	add.w	r7, r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc90      	pop	{r4, r7}
 8000e6e:	4770      	bx	lr

08000e70 <PWR_BackupAccessCmd>:
 * @brief  Enables or disables access to the RTC and backup registers.
 * @param  NewState: new state of the access to the RTC and backup registers.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void PWR_BackupAccessCmd(FunctionalState NewState) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NewState));
	*(__IO uint32_t *) CR_DBP_BB = (uint32_t) NewState;
 8000e7a:	f04f 0320 	mov.w	r3, #32
 8000e7e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	601a      	str	r2, [r3, #0]
}
 8000e86:	f107 070c 	add.w	r7, r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ebc:	6859      	ldr	r1, [r3, #4]
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ece:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ee0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ee4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000efc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f0e:	6852      	ldr	r2, [r2, #4]
 8000f10:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f14:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f1e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000f22:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f56:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f6e:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f76:	d003      	beq.n	8000f80 <RCC_HSEConfig+0x48>
 8000f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f7c:	d00d      	beq.n	8000f9a <RCC_HSEConfig+0x62>
 8000f7e:	e019      	b.n	8000fb4 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f96:	601a      	str	r2, [r3, #0]
      break;
 8000f98:	e00d      	b.n	8000fb6 <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000fb0:	601a      	str	r2, [r3, #0]
      break;
 8000fb2:	e000      	b.n	8000fb6 <RCC_HSEConfig+0x7e>
      
    default:
      break;
 8000fb4:	bf00      	nop
  }
}
 8000fb6:	f107 070c 	add.w	r7, r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000fe2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	605a      	str	r2, [r3, #4]
}
 8000ffc:	f107 0714 	add.w	r7, r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001012:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001016:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	601a      	str	r2, [r3, #0]
}
 800101e:	f107 070c 	add.w	r7, r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f023 0303 	bic.w	r3, r3, #3
 8001048:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	605a      	str	r2, [r3, #4]
}
 800105e:	f107 0714 	add.w	r7, r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	b2db      	uxtb	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010a8:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	605a      	str	r2, [r3, #4]
}
 80010be:	f107 0714 	add.w	r7, r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010e8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	605a      	str	r2, [r3, #4]
}
 80010fe:	f107 0714 	add.w	r7, r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001128:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
}
 8001142:	f107 0714 	add.w	r7, r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001156:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800115a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001164:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001168:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d002      	beq.n	800117e <RCC_LSEConfig+0x32>
 8001178:	2b04      	cmp	r3, #4
 800117a:	d008      	beq.n	800118e <RCC_LSEConfig+0x42>
 800117c:	e00f      	b.n	800119e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800117e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001182:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001186:	f04f 0201 	mov.w	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
      break;
 800118c:	e008      	b.n	80011a0 <RCC_LSEConfig+0x54>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800118e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001192:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001196:	f04f 0205 	mov.w	r2, #5
 800119a:	701a      	strb	r2, [r3, #0]
      break;            
 800119c:	e000      	b.n	80011a0 <RCC_LSEConfig+0x54>
      
    default:
      break;      
 800119e:	bf00      	nop
  }
}
 80011a0:	f107 070c 	add.w	r7, r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011c4:	6a11      	ldr	r1, [r2, #32]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	621a      	str	r2, [r3, #32]
}
 80011cc:	f107 070c 	add.w	r7, r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80011e2:	f240 433c 	movw	r3, #1084	; 0x43c
 80011e6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	601a      	str	r2, [r3, #0]
}
 80011ee:	f107 070c 	add.w	r7, r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00a      	beq.n	800124a <RCC_GetClocksFreq+0x52>
 8001234:	2b08      	cmp	r3, #8
 8001236:	d00f      	beq.n	8001258 <RCC_GetClocksFreq+0x60>
 8001238:	2b00      	cmp	r3, #0
 800123a:	d147      	bne.n	80012cc <RCC_GetClocksFreq+0xd4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001242:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001246:	6013      	str	r3, [r2, #0]
      break;
 8001248:	e047      	b.n	80012da <RCC_GetClocksFreq+0xe2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001250:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001254:	6013      	str	r3, [r2, #0]
      break;
 8001256:	e040      	b.n	80012da <RCC_GetClocksFreq+0xe2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001266:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800127e:	f103 0302 	add.w	r3, r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <RCC_GetClocksFreq+0xa6>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001290:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001294:	fb03 f202 	mul.w	r2, r3, r2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800129c:	e01d      	b.n	80012da <RCC_GetClocksFreq+0xe2>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	f103 0301 	add.w	r3, r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 80012b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80012b6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	fb02 f203 	mul.w	r2, r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80012ca:	e006      	b.n	80012da <RCC_GetClocksFreq+0xe2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80012d2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80012d6:	6013      	str	r3, [r2, #0]
      break;
 80012d8:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80012f0:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80012f2:	f240 0300 	movw	r3, #0
 80012f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	189b      	adds	r3, r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	fa22 f203 	lsr.w	r2, r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001320:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001328:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800132a:	f240 0300 	movw	r3, #0
 800132e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	189b      	adds	r3, r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	fa22 f203 	lsr.w	r2, r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001358:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001360:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001362:	f240 0300 	movw	r3, #0
 8001366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	189b      	adds	r3, r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	fa22 f203 	lsr.w	r2, r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001390:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8001398:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 800139a:	f240 0310 	movw	r3, #16
 800139e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	189b      	adds	r3, r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	611a      	str	r2, [r3, #16]
}
 80013ba:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00c      	beq.n	80013f0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013e6:	6991      	ldr	r1, [r2, #24]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	619a      	str	r2, [r3, #24]
 80013ee:	e00d      	b.n	800140c <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001400:	6991      	ldr	r1, [r2, #24]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	ea6f 0202 	mvn.w	r2, r2
 8001408:	400a      	ands	r2, r1
 800140a:	619a      	str	r2, [r3, #24]
  }
}
 800140c:	f107 070c 	add.w	r7, r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001436:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800143a:	69d1      	ldr	r1, [r2, #28]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	430a      	orrs	r2, r1
 8001440:	61da      	str	r2, [r3, #28]
 8001442:	e00d      	b.n	8001460 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800144c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001450:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001454:	69d1      	ldr	r1, [r2, #28]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	ea6f 0202 	mvn.w	r2, r2
 800145c:	400a      	ands	r2, r1
 800145e:	61da      	str	r2, [r3, #28]
  }
}
 8001460:	f107 070c 	add.w	r7, r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800148e:	b2db      	uxtb	r3, r3
 8001490:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d106      	bne.n	80014a6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e00f      	b.n	80014c6 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d106      	bne.n	80014ba <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e005      	b.n	80014c6 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80014ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <RCC_GetFlagStatus+0x7a>
  {
    bitstatus = SET;
 80014de:	f04f 0301 	mov.w	r3, #1
 80014e2:	74fb      	strb	r3, [r7, #19]
 80014e4:	e002      	b.n	80014ec <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	f107 071c 	add.w	r7, r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <RTC_EnterConfigMode>:
/**
 * @brief  Enters the RTC configuration mode.
 * @param  None
 * @retval None
 */
void RTC_EnterConfigMode(void) {
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	/* Set the CNF flag to enter in the Configuration Mode */
	RTC ->CRL |= RTC_CRL_CNF;
 8001500:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001504:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001508:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800150c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001510:	8892      	ldrh	r2, [r2, #4]
 8001512:	b292      	uxth	r2, r2
 8001514:	f042 0210 	orr.w	r2, r2, #16
 8001518:	b292      	uxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
}
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <RTC_ExitConfigMode>:
/**
 * @brief  Exits from the RTC configuration mode.
 * @param  None
 * @retval None
 */
void RTC_ExitConfigMode(void) {
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	/* Reset the CNF flag to exit from the Configuration Mode */
	RTC ->CRL &= (uint16_t) ~((uint16_t) RTC_CRL_CNF );
 8001528:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800152c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001530:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001534:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001538:	8892      	ldrh	r2, [r2, #4]
 800153a:	b292      	uxth	r2, r2
 800153c:	f022 0210 	bic.w	r2, r2, #16
 8001540:	b292      	uxth	r2, r2
 8001542:	809a      	strh	r2, [r3, #4]
}
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop

0800154c <RTC_GetCounter>:
/**
 * @brief  Gets the RTC counter value.
 * @param  None
 * @retval RTC counter value.
 */
uint32_t RTC_GetCounter(void) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
	uint16_t tmp = 0;
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	80fb      	strh	r3, [r7, #6]
	tmp = RTC ->CNTL;
 8001558:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800155c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001560:	8b9b      	ldrh	r3, [r3, #28]
 8001562:	80fb      	strh	r3, [r7, #6]
	return (((uint32_t) RTC ->CNTH << 16) | tmp);
 8001564:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001568:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800156c:	8b1b      	ldrh	r3, [r3, #24]
 800156e:	b29b      	uxth	r3, r3
 8001570:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4313      	orrs	r3, r2
}
 8001578:	4618      	mov	r0, r3
 800157a:	f107 070c 	add.w	r7, r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <RTC_SetCounter>:
/**
 * @brief  Sets the RTC counter value.
 * @param  CounterValue: RTC counter new value.
 * @retval None
 */
void RTC_SetCounter(uint32_t CounterValue) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	RTC_EnterConfigMode();
 800158c:	f7ff ffb6 	bl	80014fc <RTC_EnterConfigMode>
	/* Set RTC COUNTER MSB word */RTC ->CNTH = CounterValue >> 16;
 8001590:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001594:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800159e:	b292      	uxth	r2, r2
 80015a0:	831a      	strh	r2, [r3, #24]
	/* Set RTC COUNTER LSB word */RTC ->CNTL = (CounterValue & RTC_LSB_MASK );
 80015a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	b292      	uxth	r2, r2
 80015ae:	839a      	strh	r2, [r3, #28]
	RTC_ExitConfigMode();
 80015b0:	f7ff ffb8 	bl	8001524 <RTC_ExitConfigMode>
}
 80015b4:	f107 0708 	add.w	r7, r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <RTC_SetPrescaler>:
/**
 * @brief  Sets the RTC prescaler value.
 * @param  PrescalerValue: RTC prescaler new value.
 * @retval None
 */
void RTC_SetPrescaler(uint32_t PrescalerValue) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_RTC_PRESCALER(PrescalerValue));

	RTC_EnterConfigMode();
 80015c4:	f7ff ff9a 	bl	80014fc <RTC_EnterConfigMode>
	/* Set RTC PRESCALER MSB word */RTC ->PRLH = (PrescalerValue
 80015c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
			& PRLH_MSB_MASK ) >> 16;
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80015d6:	ea4f 4212 	mov.w	r2, r2, lsr #16
void RTC_SetPrescaler(uint32_t PrescalerValue) {
	/* Check the parameters */
	assert_param(IS_RTC_PRESCALER(PrescalerValue));

	RTC_EnterConfigMode();
	/* Set RTC PRESCALER MSB word */RTC ->PRLH = (PrescalerValue
 80015da:	b292      	uxth	r2, r2
 80015dc:	811a      	strh	r2, [r3, #8]
			& PRLH_MSB_MASK ) >> 16;
	/* Set RTC PRESCALER LSB word */RTC ->PRLL = (PrescalerValue
 80015de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	b292      	uxth	r2, r2
 80015ea:	819a      	strh	r2, [r3, #12]
			& RTC_LSB_MASK );
	RTC_ExitConfigMode();
 80015ec:	f7ff ff9a 	bl	8001524 <RTC_ExitConfigMode>
}
 80015f0:	f107 0708 	add.w	r7, r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <RTC_WaitForLastTask>:
 * @brief  Waits until last write operation on RTC registers has finished.
 * @note   This function must be called before any write to RTC registers.
 * @param  None
 * @retval None
 */
void RTC_WaitForLastTask(void) {
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	/* Loop until RTOFF flag is set */
	while ((RTC ->CRL & RTC_FLAG_RTOFF )== (uint16_t)RESET){
 80015fc:	bf00      	nop
 80015fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001602:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001606:	889b      	ldrh	r3, [r3, #4]
 8001608:	b29b      	uxth	r3, r3
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f5      	beq.n	80015fe <RTC_WaitForLastTask+0x6>
}
}
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <RTC_WaitForSynchro>:
	 * @note   This function must be called before any read operation after an APB reset
	 *   or an APB clock stop.
	 * @param  None
	 * @retval None
	 */
void RTC_WaitForSynchro(void) {
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	/* Clear RSF flag */
	RTC ->CRL &= (uint16_t) ~RTC_FLAG_RSF;
 800161c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001620:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001624:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001628:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800162c:	8892      	ldrh	r2, [r2, #4]
 800162e:	b292      	uxth	r2, r2
 8001630:	f022 0208 	bic.w	r2, r2, #8
 8001634:	b292      	uxth	r2, r2
 8001636:	809a      	strh	r2, [r3, #4]
	/* Loop until RSF flag is set */
	while ((RTC ->CRL & RTC_FLAG_RSF )== (uint16_t)RESET){
 8001638:	bf00      	nop
 800163a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800163e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001642:	889b      	ldrh	r3, [r3, #4]
 8001644:	b29b      	uxth	r3, r3
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f5      	beq.n	800163a <RTC_WaitForSynchro+0x22>
}
}
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	e007      	b.n	8001688 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	801a      	strh	r2, [r3, #0]
  }
}
 8001688:	f107 070c 	add.w	r7, r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop

08001694 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80016a6:	f107 070c 	add.w	r7, r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	81bb      	strh	r3, [r7, #12]
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8a1b      	ldrh	r3, [r3, #16]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	4013      	ands	r3, r2
 80016d8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	899b      	ldrh	r3, [r3, #12]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <TIM_GetITStatus+0x4a>
 80016ec:	897b      	ldrh	r3, [r7, #10]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80016f2:	f04f 0301 	mov.w	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e002      	b.n	8001700 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	f107 0714 	add.w	r7, r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop

08001710 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	ea6f 0303 	mvn.w	r3, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	821a      	strh	r2, [r3, #16]
}
 8001728:	f107 070c 	add.w	r7, r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <USART_Init>:
 * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 *         that contains the configuration information for the specified USART 
 *         peripheral.
 * @retval None
 */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0x00, apbclock = 0x00;
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t integerdivider = 0x00;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fractionaldivider = 0x00;
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
	uint32_t usartxbase = 0;
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
	if (USART_InitStruct->USART_HardwareFlowControl
			!= USART_HardwareFlowControl_None ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	61fb      	str	r3, [r7, #28]

	/*---------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = USARTx->CR2;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	8a1b      	ldrh	r3, [r3, #16]
 8001764:	b29b      	uxth	r3, r3
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear STOP[13:12] bits */
	tmpreg &= CR2_STOP_CLEAR_Mask;
 8001768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800176e:	4013      	ands	r3, r2
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
	/* Set STOP[13:12] bits according to USART_StopBits value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_StopBits;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	88db      	ldrh	r3, [r3, #6]
 8001776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001778:	4313      	orrs	r3, r2
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Write to USART CR2 */
	USARTx->CR2 = (uint16_t) tmpreg;
 800177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	821a      	strh	r2, [r3, #16]

	/*---------------------------- USART CR1 Configuration -----------------------*/
	tmpreg = USARTx->CR1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	899b      	ldrh	r3, [r3, #12]
 8001788:	b29b      	uxth	r3, r3
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear M, PCE, PS, TE and RE bits */
	tmpreg &= CR1_CLEAR_Mask;
 800178c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001792:	4013      	ands	r3, r2
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	889a      	ldrh	r2, [r3, #4]
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	891b      	ldrh	r3, [r3, #8]
 800179e:	4313      	orrs	r3, r2
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	895b      	ldrh	r3, [r3, #10]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b29b      	uxth	r3, r3
	tmpreg &= CR1_CLEAR_Mask;
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 80017aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ac:	4313      	orrs	r3, r2
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
	/* Write to USART CR1 */
	USARTx->CR1 = (uint16_t) tmpreg;
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	819a      	strh	r2, [r3, #12]

	/*---------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = USARTx->CR3;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	8a9b      	ldrh	r3, [r3, #20]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear CTSE and RTSE bits */
	tmpreg &= CR3_CLEAR_Mask;
 80017c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c2:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80017c6:	4013      	ands	r3, r2
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART HFC -------------------------------------------------*/
	/* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
	tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	899b      	ldrh	r3, [r3, #12]
 80017ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d0:	4313      	orrs	r3, r2
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Write to USART CR3 */
	USARTx->CR3 = (uint16_t) tmpreg;
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	829a      	strh	r2, [r3, #20]

	/*---------------------------- USART BRR Configuration -----------------------*/
	/* Configure the USART Baud Rate -------------------------------------------*/
	RCC_GetClocksFreq(&RCC_ClocksStatus);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fd09 	bl	80011f8 <RCC_GetClocksFreq>
	if (usartxbase == USART1_BASE) {
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d102      	bne.n	80017fa <USART_Init+0xc6>
		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f8:	e001      	b.n	80017fe <USART_Init+0xca>
	} else {
		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	899b      	ldrh	r3, [r3, #12]
 8001802:	b29b      	uxth	r3, r3
 8001804:	b29b      	uxth	r3, r3
 8001806:	b21b      	sxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	da0f      	bge.n	800182c <USART_Init+0xf8>
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 800180c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800180e:	4613      	mov	r3, r2
 8001810:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001814:	189b      	adds	r3, r3, r2
 8001816:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800181a:	189a      	adds	r2, r3, r2
				/ (2 * (USART_InitStruct->USART_BaudRate)));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	ea4f 0343 	mov.w	r3, r3, lsl #1
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
 800182a:	e00e      	b.n	800184a <USART_Init+0x116>
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 800182c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182e:	4613      	mov	r3, r2
 8001830:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001834:	189b      	adds	r3, r3, r2
 8001836:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800183a:	189a      	adds	r2, r3, r2
				/ (4 * (USART_InitStruct->USART_BaudRate)));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	ea4f 0383 	mov.w	r3, r3, lsl #2
		integerdivider = ((25 * apbclock)
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
				/ (4 * (USART_InitStruct->USART_BaudRate)));
	}
	tmpreg = (integerdivider / 100) << 4;
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	f248 531f 	movw	r3, #34079	; 0x851f
 8001850:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001854:	fba3 1302 	umull	r1, r3, r3, r2
 8001858:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800185c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Determine the fractional part */
	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001868:	f04f 0264 	mov.w	r2, #100	; 0x64
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	623b      	str	r3, [r7, #32]

	/* Implement the fractional part in the register */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	899b      	ldrh	r3, [r3, #12]
 800187a:	b29b      	uxth	r3, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	b21b      	sxth	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	da12      	bge.n	80018aa <USART_Init+0x176>
		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t) 0x07);
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800188a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800188e:	f248 531f 	movw	r3, #34079	; 0x851f
 8001892:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001896:	fba3 1302 	umull	r1, r3, r3, r2
 800189a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a4:	4313      	orrs	r3, r2
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a8:	e011      	b.n	80018ce <USART_Init+0x19a>
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t) 0x0F);
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80018b0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80018b4:	f248 531f 	movw	r3, #34079	; 0x851f
 80018b8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80018bc:	fba3 1302 	umull	r1, r3, r3, r2
 80018c0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ca:	4313      	orrs	r3, r2
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write to USART BRR */
	USARTx->BRR = (uint16_t) tmpreg;
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	811a      	strh	r2, [r3, #8]
}
 80018d6:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop

080018e0 <USART_Cmd>:
 *           USART1, USART2, USART3, UART4 or UART5.
 * @param  NewState: new state of the USARTx peripheral.
 *         This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <USART_Cmd+0x24>
		/* Enable the selected USART by setting the UE bit in the CR1 register */
		USARTx->CR1 |= CR1_UE_Set;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	899b      	ldrh	r3, [r3, #12]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	819a      	strh	r2, [r3, #12]
 8001902:	e007      	b.n	8001914 <USART_Cmd+0x34>
	} else {
		/* Disable the selected USART by clearing the UE bit in the CR1 register */
		USARTx->CR1 &= CR1_UE_Reset;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	899b      	ldrh	r3, [r3, #12]
 8001908:	b29b      	uxth	r3, r3
 800190a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	819a      	strh	r2, [r3, #12]
	}
}
 8001914:	f107 070c 	add.w	r7, r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <USART_ITConfig>:
 * @param  NewState: new state of the specified USARTx interrupts.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT,
		FunctionalState NewState) {
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	460a      	mov	r2, r1
 800192c:	807a      	strh	r2, [r7, #2]
 800192e:	707b      	strb	r3, [r7, #1]
	uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
	uint32_t usartxbase = 0x00;
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
	/* The CTS interrupt is not available for UART4 and UART5 */
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	617b      	str	r3, [r7, #20]

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	613b      	str	r3, [r7, #16]

	/* Get the interrupt position */
	itpos = USART_IT & IT_Mask;
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	60fb      	str	r3, [r7, #12]
	itmask = (((uint32_t) 0x01) << itpos);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f04f 0201 	mov.w	r2, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	60bb      	str	r3, [r7, #8]

	if (usartreg == 0x01) /* The IT is in CR1 register */
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d104      	bne.n	800197c <USART_ITConfig+0x5c>
	{
		usartxbase += 0x0C;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f103 030c 	add.w	r3, r3, #12
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e00b      	b.n	8001994 <USART_ITConfig+0x74>
	} else if (usartreg == 0x02) /* The IT is in CR2 register */
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d104      	bne.n	800198c <USART_ITConfig+0x6c>
	{
		usartxbase += 0x10;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f103 0310 	add.w	r3, r3, #16
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e003      	b.n	8001994 <USART_ITConfig+0x74>
	} else /* The IT is in CR3 register */
	{
		usartxbase += 0x14;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f103 0314 	add.w	r3, r3, #20
 8001992:	617b      	str	r3, [r7, #20]
	}
	if (NewState != DISABLE) {
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <USART_ITConfig+0x88>
		*(__IO uint32_t*) usartxbase |= itmask;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	6811      	ldr	r1, [r2, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e007      	b.n	80019b8 <USART_ITConfig+0x98>
	} else {
		*(__IO uint32_t*) usartxbase &= ~itmask;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	6811      	ldr	r1, [r2, #0]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	ea6f 0202 	mvn.w	r2, r2
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
	}
}
 80019b8:	f107 071c 	add.w	r7, r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop

080019c4 <USART_SendData>:
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @param  Data: the data to transmit.
 * @retval None
 */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data) {
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_USART_DATA(Data));

	/* Transmit Data */
	USARTx->DR = (Data & (uint16_t) 0x01FF);
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80019d6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	809a      	strh	r2, [r3, #4]
}
 80019e0:	f107 070c 	add.w	r7, r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop

080019ec <USART_ReceiveData>:
 * @param  USARTx: Select the USART or the UART peripheral. 
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @retval The received data.
 */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx));

	/* Receive Data */
	return (uint16_t) (USARTx->DR & (uint16_t) 0x01FF);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80019fe:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8001a02:	b29b      	uxth	r3, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	f107 070c 	add.w	r7, r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <USART_GetFlagStatus>:
 *     @arg USART_FLAG_NE:   Noise Error flag
 *     @arg USART_FLAG_FE:   Framing Error flag
 *     @arg USART_FLAG_PE:   Parity Error flag
 * @retval The new state of USART_FLAG (SET or RESET).
 */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG) {
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
	FlagStatus bitstatus = RESET;
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
	/* The CTS flag is not available for UART4 and UART5 */
	if (USART_FLAG == USART_FLAG_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	if ((USARTx->SR & USART_FLAG) != (uint16_t) RESET) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <USART_GetFlagStatus+0x2a>
		bitstatus = SET;
 8001a32:	f04f 0301 	mov.w	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e002      	b.n	8001a40 <USART_GetFlagStatus+0x30>
	} else {
		bitstatus = RESET;
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	f107 0714 	add.w	r7, r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <USART_GetITStatus>:
 *     @arg USART_IT_NE:   Noise Error interrupt
 *     @arg USART_IT_FE:   Framing Error interrupt
 *     @arg USART_IT_PE:   Parity Error interrupt
 * @retval The new state of USART_IT (SET or RESET).
 */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT) {
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
	uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
	ITStatus bitstatus = RESET;
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	74fb      	strb	r3, [r7, #19]
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	60bb      	str	r3, [r7, #8]
	/* Get the interrupt position */
	itmask = USART_IT & IT_Mask;
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	617b      	str	r3, [r7, #20]
	itmask = (uint32_t) 0x01 << itmask;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f04f 0201 	mov.w	r2, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]

	if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d106      	bne.n	8001aa8 <USART_GetITStatus+0x58>
	{
		itmask &= USARTx->CR1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	899b      	ldrh	r3, [r3, #12]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e00f      	b.n	8001ac8 <USART_GetITStatus+0x78>
	} else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d106      	bne.n	8001abc <USART_GetITStatus+0x6c>
	{
		itmask &= USARTx->CR2;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	8a1b      	ldrh	r3, [r3, #16]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e005      	b.n	8001ac8 <USART_GetITStatus+0x78>
	} else /* The IT  is in CR3 register */
	{
		itmask &= USARTx->CR3;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	8a9b      	ldrh	r3, [r3, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
	}

	bitpos = USART_IT >> 0x08;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	60fb      	str	r3, [r7, #12]
	bitpos = (uint32_t) 0x01 << bitpos;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f04f 0201 	mov.w	r2, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	60fb      	str	r3, [r7, #12]
	bitpos &= USARTx->SR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
	if ((itmask != (uint16_t) RESET) && (bitpos != (uint16_t) RESET)) {
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <USART_GetITStatus+0xae>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <USART_GetITStatus+0xae>
		bitstatus = SET;
 8001af6:	f04f 0301 	mov.w	r3, #1
 8001afa:	74fb      	strb	r3, [r7, #19]
 8001afc:	e002      	b.n	8001b04 <USART_GetITStatus+0xb4>
	} else {
		bitstatus = RESET;
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	74fb      	strb	r3, [r7, #19]
	}

	return bitstatus;
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	f107 071c 	add.w	r7, r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop

08001b14 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f023 0307 	bic.w	r3, r3, #7
 8001b32:	f103 0308 	add.w	r3, r3, #8
 8001b36:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8001b38:	f000 ff52 	bl	80029e0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8001b3c:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d108      	bne.n	8001b5c <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <pvPortMalloc+0xc4>)
 8001b4c:	f023 0307 	bic.w	r3, r3, #7
 8001b50:	461a      	mov	r2, r3
 8001b52:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b5a:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001b5c:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	18d2      	adds	r2, r2, r3
 8001b6a:	f641 33f7 	movw	r3, #7159	; 0x1bf7
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d825      	bhi.n	8001bbe <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8001b72:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	18d2      	adds	r2, r2, r3
 8001b80:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b88:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d917      	bls.n	8001bbe <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8001b8e:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8001ba6:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	18d2      	adds	r2, r2, r3
 8001bb4:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bbc:	601a      	str	r2, [r3, #0]
		}
	}
	xTaskResumeAll();
 8001bbe:	f000 ff21 	bl	8002a04 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <pvPortMalloc+0xb8>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001bc8:	f002 fc30 	bl	800442c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f107 0710 	add.w	r7, r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000002c 	.word	0x2000002c

08001bdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <vPortFree+0x14>
 8001bea:	f000 f97d 	bl	8001ee8 <ulPortSetInterruptMask>
 8001bee:	e7fe      	b.n	8001bee <vPortFree+0x12>
}
 8001bf0:	f107 0708 	add.w	r7, r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001bfc:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8001c0a:	f103 0318 	add.w	r3, r3, #24
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f103 0208 	add.w	r2, r3, #8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f103 0208 	add.w	r2, r3, #8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f103 0208 	add.w	r2, r3, #8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	f107 070c 	add.w	r7, r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
}
 8001c68:	f107 070c 	add.w	r7, r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop

08001c74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f103 0201 	add.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	f107 0714 	add.w	r7, r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cda:	d103      	bne.n	8001ce4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e00d      	b.n	8001d00 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f103 0308 	add.w	r3, r3, #8
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e002      	b.n	8001cf4 <vListInsert+0x30>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d9f6      	bls.n	8001cee <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f103 0201 	add.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	f107 0714 	add.w	r7, r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6892      	ldr	r2, [r2, #8]
 8001d48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6852      	ldr	r2, [r2, #4]
 8001d52:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d103      	bne.n	8001d6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f103 32ff 	add.w	r2, r3, #4294967295
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	f107 0714 	add.w	r7, r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f1a3 0304 	sub.w	r3, r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001daa:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f1a3 0304 	sub.w	r3, r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1a3 0304 	sub.w	r3, r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f1a3 0314 	sub.w	r3, r3, #20
 8001dd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f1a3 0320 	sub.w	r3, r3, #32
 8001dde:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001de0:	68fb      	ldr	r3, [r7, #12]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	f107 0714 	add.w	r7, r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <pxCurrentTCBConst2>)
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	6808      	ldr	r0, [r1, #0]
 8001df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dfa:	f380 8809 	msr	PSP, r0
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f380 8811 	msr	BASEPRI, r0
 8001e06:	f04e 0e0d 	orr.w	lr, lr, #13
 8001e0a:	4770      	bx	lr

08001e0c <pxCurrentTCBConst2>:
 8001e0c:	20001c2c 	.word	0x20001c2c

08001e10 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001e10:	4803      	ldr	r0, [pc, #12]	; (8001e20 <prvPortStartFirstTask+0x10>)
 8001e12:	6800      	ldr	r0, [r0, #0]
 8001e14:	6800      	ldr	r0, [r0, #0]
 8001e16:	f380 8808 	msr	MSP, r0
 8001e1a:	b662      	cpsie	i
 8001e1c:	df00      	svc	0
 8001e1e:	bf00      	nop
 8001e20:	e000ed08 	.word	0xe000ed08

08001e24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001e28:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001e2c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e30:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001e34:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001e3e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001e40:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001e44:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e48:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001e4c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001e56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001e58:	f000 f884 	bl	8001f64 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001e5c:	f240 0314 	movw	r3, #20
 8001e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001e6a:	f7ff ffd1 	bl	8001e10 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8001e6e:	f04f 0300 	mov.w	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop

08001e78 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e7c:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001e80:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001e94:	f000 f828 	bl	8001ee8 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001e98:	f240 0314 	movw	r3, #20
 8001e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f103 0201 	add.w	r2, r3, #1
 8001ea6:	f240 0314 	movw	r3, #20
 8001eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop

08001eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8001eb8:	f240 0314 	movw	r3, #20
 8001ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f103 32ff 	add.w	r2, r3, #4294967295
 8001ec6:	f240 0314 	movw	r3, #20
 8001eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ece:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001ed0:	f240 0314 	movw	r3, #20
 8001ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d103      	bne.n	8001ee6 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8001ede:	f04f 0000 	mov.w	r0, #0
 8001ee2:	f000 f80b 	bl	8001efc <vPortClearInterruptMask>
	}
}
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001ee8:	f3ef 8011 	mrs	r0, BASEPRI
 8001eec:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001ef0:	f381 8811 	msr	BASEPRI, r1
 8001ef4:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8001ef6:	f04f 0300 	mov.w	r3, #0
}
 8001efa:	4618      	mov	r0, r3

08001efc <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8001efc:	f380 8811 	msr	BASEPRI, r0
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001f04:	f3ef 8009 	mrs	r0, PSP
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <pxCurrentTCBConst>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f10:	6010      	str	r0, [r2, #0]
 8001f12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001f16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f1a:	f380 8811 	msr	BASEPRI, r0
 8001f1e:	f000 ff1d 	bl	8002d5c <vTaskSwitchContext>
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f380 8811 	msr	BASEPRI, r0
 8001f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	6808      	ldr	r0, [r1, #0]
 8001f32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f36:	f380 8809 	msr	PSP, r0
 8001f3a:	4770      	bx	lr

08001f3c <pxCurrentTCBConst>:
 8001f3c:	20001c2c 	.word	0x20001c2c

08001f40 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f44:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001f48:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f50:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8001f52:	f7ff ffc9 	bl	8001ee8 <ulPortSetInterruptMask>
	{
		vTaskIncrementTick();
 8001f56:	f000 fe1b 	bl	8002b90 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001f5a:	f04f 0000 	mov.w	r0, #0
 8001f5e:	f7ff ffcd 	bl	8001efc <vPortClearInterruptMask>
}
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8001f68:	f24e 0314 	movw	r3, #57364	; 0xe014
 8001f6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f70:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8001f76:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001f7a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f7e:	f04f 0207 	mov.w	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <xQueueGenericReset+0x1a>
 8001fa0:	f7ff ffa2 	bl	8001ee8 <ulPortSetInterruptMask>
 8001fa4:	e7fe      	b.n	8001fa4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001fa6:	f7ff ff73 	bl	8001e90 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	18d2      	adds	r2, r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	18d2      	adds	r2, r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10f      	bne.n	8002020 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d017      	beq.n	8002038 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f103 0310 	add.w	r3, r3, #16
 800200e:	4618      	mov	r0, r3
 8002010:	f000 ffc0 	bl	8002f94 <xTaskRemoveFromEventList>
 8002014:	4603      	mov	r3, r0
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10e      	bne.n	8002038 <xQueueGenericReset+0xac>
				{
					portYIELD_WITHIN_API();
 800201a:	f7ff ff2d 	bl	8001e78 <vPortYieldFromISR>
 800201e:	e00b      	b.n	8002038 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f103 0310 	add.w	r3, r3, #16
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fdf6 	bl	8001c18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fdf0 	bl	8001c18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002038:	f7ff ff3c 	bl	8001eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800203c:	f04f 0301 	mov.w	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	f107 0710 	add.w	r7, r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop

0800204c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	4613      	mov	r3, r2
 8002058:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d029      	beq.n	80020ba <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8002066:	f04f 004c 	mov.w	r0, #76	; 0x4c
 800206a:	f7ff fd53 	bl	8001b14 <pvPortMalloc>
 800206e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d021      	beq.n	80020ba <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	f103 0301 	add.w	r3, r3, #1
 8002082:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7ff fd45 	bl	8001b14 <pvPortMalloc>
 800208a:	4602      	mov	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 80020a4:	69b8      	ldr	r0, [r7, #24]
 80020a6:	f04f 0101 	mov.w	r1, #1
 80020aa:	f7ff ff6f 	bl	8001f8c <xQueueGenericReset>
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	e002      	b.n	80020ba <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80020b4:	69b8      	ldr	r0, [r7, #24]
 80020b6:	f7ff fd91 	bl	8001bdc <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <xQueueGenericCreate+0x7a>
 80020c0:	f7ff ff12 	bl	8001ee8 <ulPortSetInterruptMask>
 80020c4:	e7fe      	b.n	80020c4 <xQueueGenericCreate+0x78>

	return xReturn;
 80020c6:	69fb      	ldr	r3, [r7, #28]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	f107 0720 	add.w	r7, r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop

080020d4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <xQueueGenericSend+0x24>
 80020f2:	f7ff fef9 	bl	8001ee8 <ulPortSetInterruptMask>
 80020f6:	e7fe      	b.n	80020f6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <xQueueGenericSend+0x32>
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <xQueueGenericSend+0x38>
 8002106:	f04f 0301 	mov.w	r3, #1
 800210a:	e001      	b.n	8002110 <xQueueGenericSend+0x3c>
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <xQueueGenericSend+0x48>
 8002114:	f7ff fee8 	bl	8001ee8 <ulPortSetInterruptMask>
 8002118:	e7fe      	b.n	8002118 <xQueueGenericSend+0x44>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 800211a:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800211c:	f7ff feb8 	bl	8001e90 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	429a      	cmp	r2, r3
 800212a:	d218      	bcs.n	800215e <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800212c:	69b8      	ldr	r0, [r7, #24]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	f000 f9b1 	bl	8002498 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <xQueueGenericSend+0x80>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002144:	4618      	mov	r0, r3
 8002146:	f000 ff25 	bl	8002f94 <xTaskRemoveFromEventList>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <xQueueGenericSend+0x80>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8002150:	f7ff fe92 	bl	8001e78 <vPortYieldFromISR>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002154:	f7ff feae 	bl	8001eb4 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8002158:	f04f 0301 	mov.w	r3, #1
 800215c:	e05d      	b.n	800221a <xQueueGenericSend+0x146>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <xQueueGenericSend+0x9a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002164:	f7ff fea6 	bl	8001eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e055      	b.n	800221a <xQueueGenericSend+0x146>
				}
				else if( xEntryTimeSet == pdFALSE )
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	4618      	mov	r0, r3
 800217a:	f000 ff73 	bl	8003064 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800217e:	f04f 0301 	mov.w	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8002184:	f7ff fe96 	bl	8001eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002188:	f000 fc2a 	bl	80029e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800218c:	f7ff fe80 	bl	8001e90 <vPortEnterCritical>
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d103      	bne.n	80021a2 <xQueueGenericSend+0xce>
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d103      	bne.n	80021b4 <xQueueGenericSend+0xe0>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	649a      	str	r2, [r3, #72]	; 0x48
 80021b4:	f7ff fe7e 	bl	8001eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021b8:	f107 0210 	add.w	r2, r7, #16
 80021bc:	f107 0304 	add.w	r3, r7, #4
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f000 ff6a 	bl	800309c <xTaskCheckForTimeOut>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d11e      	bne.n	800220c <xQueueGenericSend+0x138>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021ce:	69b8      	ldr	r0, [r7, #24]
 80021d0:	f000 fa56 	bl	8002680 <prvIsQueueFull>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d012      	beq.n	8002200 <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f103 0210 	add.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f000 fe63 	bl	8002eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021ea:	69b8      	ldr	r0, [r7, #24]
 80021ec:	f000 f9de 	bl	80025ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021f0:	f000 fc08 	bl	8002a04 <xTaskResumeAll>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d18f      	bne.n	800211a <xQueueGenericSend+0x46>
				{
					portYIELD_WITHIN_API();
 80021fa:	f7ff fe3d 	bl	8001e78 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80021fe:	e78c      	b.n	800211a <xQueueGenericSend+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002200:	69b8      	ldr	r0, [r7, #24]
 8002202:	f000 f9d3 	bl	80025ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002206:	f000 fbfd 	bl	8002a04 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 800220a:	e786      	b.n	800211a <xQueueGenericSend+0x46>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800220c:	69b8      	ldr	r0, [r7, #24]
 800220e:	f000 f9cd 	bl	80025ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002212:	f000 fbf7 	bl	8002a04 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002216:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 800221a:	4618      	mov	r0, r3
 800221c:	f107 0720 	add.w	r7, r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <xQueueGenericSendFromISR+0x1e>
 800223c:	f7ff fe54 	bl	8001ee8 <ulPortSetInterruptMask>
 8002240:	e7fe      	b.n	8002240 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <xQueueGenericSendFromISR+0x2c>
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <xQueueGenericSendFromISR+0x32>
 8002250:	f04f 0301 	mov.w	r3, #1
 8002254:	e001      	b.n	800225a <xQueueGenericSendFromISR+0x36>
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <xQueueGenericSendFromISR+0x40>
 800225e:	f7ff fe43 	bl	8001ee8 <ulPortSetInterruptMask>
 8002262:	e7fe      	b.n	8002262 <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002264:	f7ff fe40 	bl	8001ee8 <ulPortSetInterruptMask>
 8002268:	6178      	str	r0, [r7, #20]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	429a      	cmp	r2, r3
 8002274:	d228      	bcs.n	80022c8 <xQueueGenericSendFromISR+0xa4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002276:	69b8      	ldr	r0, [r7, #24]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	f000 f90c 	bl	8002498 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d114      	bne.n	80022b4 <xQueueGenericSendFromISR+0x90>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d016      	beq.n	80022c0 <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fe7b 	bl	8002f94 <xTaskRemoveFromEventList>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0201 	mov.w	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e005      	b.n	80022c0 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b8:	f103 0201 	add.w	r2, r3, #1
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80022c0:	f04f 0301 	mov.w	r3, #1
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e002      	b.n	80022ce <xQueueGenericSendFromISR+0xaa>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff fe14 	bl	8001efc <vPortClearInterruptMask>

	return xReturn;
 80022d4:	69fb      	ldr	r3, [r7, #28]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	f107 0720 	add.w	r7, r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue );
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <xQueueGenericReceive+0x24>
 80022fe:	f7ff fdf3 	bl	8001ee8 <ulPortSetInterruptMask>
 8002302:	e7fe      	b.n	8002302 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <xQueueGenericReceive+0x32>
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <xQueueGenericReceive+0x38>
 8002312:	f04f 0301 	mov.w	r3, #1
 8002316:	e001      	b.n	800231c <xQueueGenericReceive+0x3c>
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <xQueueGenericReceive+0x48>
 8002320:	f7ff fde2 	bl	8001ee8 <ulPortSetInterruptMask>
 8002324:	e7fe      	b.n	8002324 <xQueueGenericReceive+0x44>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002326:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002328:	f7ff fdb2 	bl	8001e90 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03f      	beq.n	80023b4 <xQueueGenericReceive+0xd4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800233a:	6a38      	ldr	r0, [r7, #32]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	f000 f90d 	bl	800255c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11e      	bne.n	8002386 <xQueueGenericReceive+0xa6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	f103 32ff 	add.w	r2, r3, #4294967295
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <xQueueGenericReceive+0x86>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 800235c:	f001 f884 	bl	8003468 <xTaskGetCurrentTaskHandle>
 8002360:	4602      	mov	r2, r0
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01d      	beq.n	80023aa <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f103 0310 	add.w	r3, r3, #16
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fe0d 	bl	8002f94 <xTaskRemoveFromEventList>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d114      	bne.n	80023aa <xQueueGenericReceive+0xca>
						{
							portYIELD_WITHIN_API();
 8002380:	f7ff fd7a 	bl	8001e78 <vPortYieldFromISR>
 8002384:	e011      	b.n	80023aa <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <xQueueGenericReceive+0xca>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fdfa 	bl	8002f94 <xTaskRemoveFromEventList>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80023a6:	f7ff fd67 	bl	8001e78 <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 80023aa:	f7ff fd83 	bl	8001eb4 <vPortExitCritical>
				return pdPASS;
 80023ae:	f04f 0301 	mov.w	r3, #1
 80023b2:	e06b      	b.n	800248c <xQueueGenericReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023ba:	f7ff fd7b 	bl	8001eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e063      	b.n	800248c <xQueueGenericReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fe48 	bl	8003064 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023d4:	f04f 0301 	mov.w	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		}
		taskEXIT_CRITICAL();
 80023da:	f7ff fd6b 	bl	8001eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023de:	f000 faff 	bl	80029e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023e2:	f7ff fd55 	bl	8001e90 <vPortEnterCritical>
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ee:	d103      	bne.n	80023f8 <xQueueGenericReceive+0x118>
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d103      	bne.n	800240a <xQueueGenericReceive+0x12a>
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	649a      	str	r2, [r3, #72]	; 0x48
 800240a:	f7ff fd53 	bl	8001eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800240e:	f107 0214 	add.w	r2, r7, #20
 8002412:	f107 0304 	add.w	r3, r7, #4
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f000 fe3f 	bl	800309c <xTaskCheckForTimeOut>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d12c      	bne.n	800247e <xQueueGenericReceive+0x19e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002424:	6a38      	ldr	r0, [r7, #32]
 8002426:	f000 f911 	bl	800264c <prvIsQueueEmpty>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d108      	bne.n	800244a <xQueueGenericReceive+0x16a>
					{
						portENTER_CRITICAL();
 8002438:	f7ff fd2a 	bl	8001e90 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	f001 f845 	bl	80034d0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8002446:	f7ff fd35 	bl	8001eb4 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f000 fd2b 	bl	8002eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800245a:	6a38      	ldr	r0, [r7, #32]
 800245c:	f000 f8a6 	bl	80025ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002460:	f000 fad0 	bl	8002a04 <xTaskResumeAll>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	f47f af5d 	bne.w	8002326 <xQueueGenericReceive+0x46>
				{
					portYIELD_WITHIN_API();
 800246c:	f7ff fd04 	bl	8001e78 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002470:	e759      	b.n	8002326 <xQueueGenericReceive+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002472:	6a38      	ldr	r0, [r7, #32]
 8002474:	f000 f89a 	bl	80025ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002478:	f000 fac4 	bl	8002a04 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800247c:	e753      	b.n	8002326 <xQueueGenericReceive+0x46>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800247e:	6a38      	ldr	r0, [r7, #32]
 8002480:	f000 f894 	bl	80025ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002484:	f000 fabe 	bl	8002a04 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002488:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 800248c:	4618      	mov	r0, r3
 800248e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop

08002498 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d148      	bne.n	8002546 <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 f877 	bl	80035ac <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	e03e      	b.n	8002546 <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11a      	bne.n	8002504 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4610      	mov	r0, r2
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	461a      	mov	r2, r3
 80024dc:	f002 f848 	bl	8004570 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	18d2      	adds	r2, r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d325      	bcc.n	8002546 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	e020      	b.n	8002546 <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4610      	mov	r0, r2
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	461a      	mov	r2, r3
 8002512:	f002 f82d 	bl	8004570 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f1c3 0300 	rsb	r3, r3, #0
 8002522:	18d2      	adds	r2, r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d208      	bcs.n	8002546 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f1c3 0300 	rsb	r3, r3, #0
 8002540:	18d2      	adds	r2, r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	f103 0201 	add.w	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002552:	f107 0710 	add.w	r7, r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop

0800255c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d019      	beq.n	80025a2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	18d2      	adds	r2, r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d303      	bcc.n	8002590 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	4611      	mov	r1, r2
 800259c:	461a      	mov	r2, r3
 800259e:	f001 ffe7 	bl	8004570 <memcpy>
	}
}
 80025a2:	f107 0708 	add.w	r7, r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop

080025ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025b4:	f7ff fc6c 	bl	8001e90 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80025b8:	e014      	b.n	80025e4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <prvUnlockQueue+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fce3 	bl	8002f94 <xTaskRemoveFromEventList>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <prvUnlockQueue+0x2c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80025d4:	f000 fdc0 	bl	8003158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	f103 32ff 	add.w	r2, r3, #4294967295
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dce6      	bgt.n	80025ba <prvUnlockQueue+0xe>
 80025ec:	e000      	b.n	80025f0 <prvUnlockQueue+0x44>
						vTaskMissedYield();
					}
				}
				else
				{
					break;
 80025ee:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80025f8:	f7ff fc5c 	bl	8001eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025fc:	f7ff fc48 	bl	8001e90 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002600:	e014      	b.n	800262c <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d015      	beq.n	8002636 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f103 0310 	add.w	r3, r3, #16
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fcbf 	bl	8002f94 <xTaskRemoveFromEventList>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 800261c:	f000 fd9c 	bl	8003158 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f103 32ff 	add.w	r2, r3, #4294967295
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	2b00      	cmp	r3, #0
 8002632:	dce6      	bgt.n	8002602 <prvUnlockQueue+0x56>
 8002634:	e000      	b.n	8002638 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8002636:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f04f 32ff 	mov.w	r2, #4294967295
 800263e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002640:	f7ff fc38 	bl	8001eb4 <vPortExitCritical>
}
 8002644:	f107 0708 	add.w	r7, r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002654:	f7ff fc1c 	bl	8001e90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == 0 )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
 8002660:	f04f 0301 	mov.w	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e002      	b.n	800266e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800266e:	f7ff fc21 	bl	8001eb4 <vPortExitCritical>

	return xReturn;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	4618      	mov	r0, r3
 8002676:	f107 0710 	add.w	r7, r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop

08002680 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002688:	f7ff fc02 	bl	8001e90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	429a      	cmp	r2, r3
 8002696:	d103      	bne.n	80026a0 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
 8002698:	f04f 0301 	mov.w	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e002      	b.n	80026a6 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026a6:	f7ff fc05 	bl	8001eb4 <vPortExitCritical>

	return xReturn;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	f107 0710 	add.w	r7, r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop

080026b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
	xQUEUE *pxQueue;

		pxQueue = ( xQUEUE * ) xQueue;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80026c6:	f7ff fbe3 	bl	8001e90 <vPortEnterCritical>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d103      	bne.n	80026dc <vQueueWaitForMessageRestricted+0x24>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d103      	bne.n	80026ee <vQueueWaitForMessageRestricted+0x36>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	649a      	str	r2, [r3, #72]	; 0x48
 80026ee:	f7ff fbe1 	bl	8001eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <vQueueWaitForMessageRestricted+0x50>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	f000 fc16 	bl	8002f34 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff ff4f 	bl	80025ac <prvUnlockQueue>
	}
 800270e:	f107 0710 	add.w	r7, r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop

08002718 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <xTaskGenericCreate+0x1c>
 800272e:	f7ff fbdb 	bl	8001ee8 <ulPortSetInterruptMask>
 8002732:	e7fe      	b.n	8002732 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	2b04      	cmp	r3, #4
 8002738:	d902      	bls.n	8002740 <xTaskGenericCreate+0x28>
 800273a:	f7ff fbd5 	bl	8001ee8 <ulPortSetInterruptMask>
 800273e:	e7fe      	b.n	800273e <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4618      	mov	r0, r3
 8002744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002746:	f000 fe47 	bl	80033d8 <prvAllocateTCBAndStack>
 800274a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80b5 	beq.w	80028be <xTaskGenericCreate+0x1a6>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	f103 33ff 	add.w	r3, r3, #4294967295
 800275e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002762:	18d3      	adds	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 0307 	bic.w	r3, r3, #7
 800276c:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <xTaskGenericCreate+0x66>
 8002778:	f7ff fbb6 	bl	8001ee8 <ulPortSetInterruptMask>
 800277c:	e7fe      	b.n	800277c <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	69b8      	ldr	r0, [r7, #24]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	f000 fd03 	bl	8003194 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	f7ff fafc 	bl	8001d90 <pxPortInitialiseStack>
 8002798:	4602      	mov	r2, r0
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <xTaskGenericCreate+0x98>
 80027aa:	f7ff fb9d 	bl	8001ee8 <ulPortSetInterruptMask>
 80027ae:	e7fe      	b.n	80027ae <xTaskGenericCreate+0x96>

		if( ( void * ) pxCreatedTask != NULL )
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <xTaskGenericCreate+0xa4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 80027bc:	f7ff fb68 	bl	8001e90 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80027c0:	f641 5304 	movw	r3, #7428	; 0x1d04
 80027c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f103 0201 	add.w	r2, r3, #1
 80027ce:	f641 5304 	movw	r3, #7428	; 0x1d04
 80027d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027d6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80027d8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80027dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <xTaskGenericCreate+0xee>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80027e6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80027ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80027f2:	f641 5304 	movw	r3, #7428	; 0x1d04
 80027f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d118      	bne.n	8002832 <xTaskGenericCreate+0x11a>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002800:	f000 fd04 	bl	800320c <prvInitialiseTaskLists>
 8002804:	e015      	b.n	8002832 <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002806:	f641 5314 	movw	r3, #7444	; 0x1d14
 800280a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10e      	bne.n	8002832 <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002814:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002818:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	429a      	cmp	r2, r3
 8002824:	d805      	bhi.n	8002832 <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
 8002826:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800282a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002836:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800283a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d906      	bls.n	8002852 <xTaskGenericCreate+0x13a>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800284c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002850:	601a      	str	r2, [r3, #0]
			}

			uxTaskNumber++;
 8002852:	f641 5328 	movw	r3, #7464	; 0x1d28
 8002856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f103 0201 	add.w	r2, r3, #1
 8002860:	f641 5328 	movw	r3, #7464	; 0x1d28
 8002864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002868:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002872:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d906      	bls.n	800288a <xTaskGenericCreate+0x172>
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	4613      	mov	r3, r2
 8002890:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002894:	189b      	adds	r3, r3, r2
 8002896:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800289a:	f641 4230 	movw	r2, #7216	; 0x1c30
 800289e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80028a2:	189a      	adds	r2, r3, r2
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f103 0304 	add.w	r3, r3, #4
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7ff f9e1 	bl	8001c74 <vListInsertEnd>

			xReturn = pdPASS;
 80028b2:	f04f 0301 	mov.w	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80028b8:	f7ff fafc 	bl	8001eb4 <vPortExitCritical>
 80028bc:	e002      	b.n	80028c4 <xTaskGenericCreate+0x1ac>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d111      	bne.n	80028ee <xTaskGenericCreate+0x1d6>
	{
		if( xSchedulerRunning != pdFALSE )
 80028ca:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <xTaskGenericCreate+0x1d6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80028d8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80028dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d201      	bcs.n	80028ee <xTaskGenericCreate+0x1d6>
			{
				portYIELD_WITHIN_API();
 80028ea:	f7ff fac5 	bl	8001e78 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 80028ee:	69fb      	ldr	r3, [r7, #28]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	f107 0720 	add.w	r7, r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop

080028fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d019      	beq.n	8002944 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
 8002910:	f000 f866 	bl	80029e0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002914:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	18d3      	adds	r3, r2, r3
 8002922:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002924:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002928:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f103 0304 	add.w	r3, r3, #4
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fa00 	bl	8001d38 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002938:	68b8      	ldr	r0, [r7, #8]
 800293a:	f000 fd07 	bl	800334c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800293e:	f000 f861 	bl	8002a04 <xTaskResumeAll>
 8002942:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
 800294a:	f7ff fa95 	bl	8001e78 <vPortYieldFromISR>
		}
	}
 800294e:	f107 0710 	add.w	r7, r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop

08002958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	9303      	str	r3, [sp, #12]
 8002976:	f243 1071 	movw	r0, #12657	; 0x3171
 800297a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800297e:	f644 1124 	movw	r1, #18724	; 0x4924
 8002982:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002986:	f04f 0246 	mov.w	r2, #70	; 0x46
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	f7ff fec3 	bl	8002718 <xTaskGenericCreate>
 8002992:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <vTaskStartScheduler+0x48>
		{
			xReturn = xTimerCreateTimerTask();
 800299a:	f000 fe4f 	bl	800363c <xTimerCreateTimerTask>
 800299e:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d112      	bne.n	80029cc <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 80029a6:	f7ff fa9f 	bl	8001ee8 <ulPortSetInterruptMask>

		xSchedulerRunning = pdTRUE;
 80029aa:	f641 5314 	movw	r3, #7444	; 0x1d14
 80029ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029b2:	f04f 0201 	mov.w	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80029b8:	f641 5308 	movw	r3, #7432	; 0x1d08
 80029bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029c6:	f7ff fa2d 	bl	8001e24 <xPortStartScheduler>
 80029ca:	e005      	b.n	80029d8 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <vTaskStartScheduler+0x80>
 80029d2:	f7ff fa89 	bl	8001ee8 <ulPortSetInterruptMask>
 80029d6:	e7fe      	b.n	80029d6 <vTaskStartScheduler+0x7e>
	}
}
 80029d8:	f107 0708 	add.w	r7, r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80029e4:	f641 5318 	movw	r3, #7448	; 0x1d18
 80029e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f103 0201 	add.w	r2, r3, #1
 80029f2:	f641 5318 	movw	r3, #7448	; 0x1d18
 80029f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a10:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <xTaskResumeAll+0x20>
 8002a1e:	f7ff fa63 	bl	8001ee8 <ulPortSetInterruptMask>
 8002a22:	e7fe      	b.n	8002a22 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a24:	f7ff fa34 	bl	8001e90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a28:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f103 32ff 	add.w	r2, r3, #4294967295
 8002a36:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a3e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002a40:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 8084 	bne.w	8002b58 <xTaskResumeAll+0x154>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002a50:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d07c      	beq.n	8002b58 <xTaskResumeAll+0x154>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002a64:	e03b      	b.n	8002ade <xTaskResumeAll+0xda>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8002a66:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8002a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
 8002a72:	f104 0318 	add.w	r3, r4, #24
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f95e 	bl	8001d38 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8002a7c:	f104 0304 	add.w	r3, r4, #4
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f959 	bl	8001d38 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002a86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a88:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d905      	bls.n	8002aa2 <xTaskResumeAll+0x9e>
 8002a96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a98:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ab0:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002ab4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002ab8:	189a      	adds	r2, r3, r2
 8002aba:	f104 0304 	add.w	r3, r4, #4
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7ff f8d7 	bl	8001c74 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ac6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ac8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <xTaskResumeAll+0xda>
					{
						xYieldRequired = pdTRUE;
 8002ad8:	f04f 0301 	mov.w	r3, #1
 8002adc:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002ade:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8002ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1bc      	bne.n	8002a66 <xTaskResumeAll+0x62>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002aec:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d018      	beq.n	8002b2c <xTaskResumeAll+0x128>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002afa:	e00d      	b.n	8002b18 <xTaskResumeAll+0x114>
					{
						vTaskIncrementTick();
 8002afc:	f000 f848 	bl	8002b90 <vTaskIncrementTick>
						--uxMissedTicks;
 8002b00:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8002b0e:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b16:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002b18:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ea      	bne.n	8002afc <xTaskResumeAll+0xf8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8002b26:	f04f 0301 	mov.w	r3, #1
 8002b2a:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d006      	beq.n	8002b40 <xTaskResumeAll+0x13c>
 8002b32:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d10b      	bne.n	8002b58 <xTaskResumeAll+0x154>
				{
					xAlreadyYielded = pdTRUE;
 8002b40:	f04f 0301 	mov.w	r3, #1
 8002b44:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8002b46:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8002b54:	f7ff f990 	bl	8001e78 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8002b58:	f7ff f9ac 	bl	8001eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8002b5c:	687b      	ldr	r3, [r7, #4]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f107 070c 	add.w	r7, r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}

08002b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8002b6e:	f7ff f98f 	bl	8001e90 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8002b72:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8002b7e:	f7ff f999 	bl	8001eb4 <vPortExitCritical>

	return xTicks;
 8002b82:	687b      	ldr	r3, [r7, #4]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	f107 0708 	add.w	r7, r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop

08002b90 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002b96:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 80ca 	bne.w	8002d3a <vTaskIncrementTick+0x1aa>
	{
		++xTickCount;
 8002ba6:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f103 0201 	add.w	r2, r3, #1
 8002bb4:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bbc:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8002bbe:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d14b      	bne.n	8002c64 <vTaskIncrementTick+0xd4>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8002bcc:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <vTaskIncrementTick+0x52>
 8002bdc:	f7ff f984 	bl	8001ee8 <ulPortSetInterruptMask>
 8002be0:	e7fe      	b.n	8002be0 <vTaskIncrementTick+0x50>

			pxTemp = pxDelayedTaskList;
 8002be2:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8002bee:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8002bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c00:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8002c02:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8002c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8002c0e:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f103 0201 	add.w	r2, r3, #1
 8002c1c:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c24:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c26:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <vTaskIncrementTick+0xb6>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8002c36:	f240 0318 	movw	r3, #24
 8002c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e00e      	b.n	8002c64 <vTaskIncrementTick+0xd4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c46:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	f240 0318 	movw	r3, #24
 8002c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c62:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8002c64:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f240 0318 	movw	r3, #24
 8002c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d36a      	bcc.n	8002d52 <vTaskIncrementTick+0x1c2>
 8002c7c:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <vTaskIncrementTick+0x10c>
 8002c8c:	f240 0318 	movw	r3, #24
 8002c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e05a      	b.n	8002d52 <vTaskIncrementTick+0x1c2>
 8002c9c:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d206      	bcs.n	8002cd0 <vTaskIncrementTick+0x140>
 8002cc2:	f240 0318 	movw	r3, #24
 8002cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e040      	b.n	8002d52 <vTaskIncrementTick+0x1c2>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f103 0304 	add.w	r3, r3, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f82e 	bl	8001d38 <uxListRemove>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <vTaskIncrementTick+0x160>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f103 0318 	add.w	r3, r3, #24
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff f824 	bl	8001d38 <uxListRemove>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d906      	bls.n	8002d10 <vTaskIncrementTick+0x180>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d06:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	4613      	mov	r3, r2
 8002d16:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d20:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002d24:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002d28:	189a      	adds	r2, r3, r2
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f103 0304 	add.w	r3, r3, #4
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fe ff9e 	bl	8001c74 <vListInsertEnd>
 8002d38:	e7a0      	b.n	8002c7c <vTaskIncrementTick+0xec>
	}
	else
	{
		++uxMissedTicks;
 8002d3a:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f103 0201 	add.w	r2, r3, #1
 8002d48:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d50:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
 8002d52:	f107 0710 	add.w	r7, r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8002d62:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8002d70:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d78:	f04f 0201 	mov.w	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e093      	b.n	8002ea8 <vTaskSwitchContext+0x14c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8002d80:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d80f      	bhi.n	8002dbc <vTaskSwitchContext+0x60>
 8002d9c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f001 fb3c 	bl	8004434 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8002dbc:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f644 2120 	movw	r1, #18976	; 0x4a20
 8002dce:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002dd2:	f04f 0214 	mov.w	r2, #20
 8002dd6:	f001 fb6f 	bl	80044b8 <memcmp>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d026      	beq.n	8002e2e <vTaskSwitchContext+0xd2>
 8002de0:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f001 fb1a 	bl	8004434 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e00:	e015      	b.n	8002e2e <vTaskSwitchContext+0xd2>
 8002e02:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <vTaskSwitchContext+0xba>
 8002e10:	f7ff f86a 	bl	8001ee8 <ulPortSetInterruptMask>
 8002e14:	e7fe      	b.n	8002e14 <vTaskSwitchContext+0xb8>
 8002e16:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f103 32ff 	add.w	r2, r3, #4294967295
 8002e24:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002e3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e40:	460b      	mov	r3, r1
 8002e42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e46:	185b      	adds	r3, r3, r1
 8002e48:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0d6      	beq.n	8002e02 <vTaskSwitchContext+0xa6>
 8002e54:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e64:	189b      	adds	r3, r3, r2
 8002e66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e6a:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002e6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f103 0308 	add.w	r3, r3, #8
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d104      	bne.n	8002e98 <vTaskSwitchContext+0x13c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ea6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
 8002ea8:	f107 0708 	add.w	r7, r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <vTaskPlaceOnEventList+0x16>
 8002ec0:	f7ff f812 	bl	8001ee8 <ulPortSetInterruptMask>
 8002ec4:	e7fe      	b.n	8002ec4 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002ec6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f103 0318 	add.w	r3, r3, #24
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fe fef4 	bl	8001cc4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002edc:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f103 0304 	add.w	r3, r3, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe ff24 	bl	8001d38 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d10e      	bne.n	8002f16 <vTaskPlaceOnEventList+0x66>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002ef8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f103 0304 	add.w	r3, r3, #4
 8002f06:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 8002f0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f7fe feb0 	bl	8001c74 <vListInsertEnd>
 8002f14:	e00a      	b.n	8002f2c <vTaskPlaceOnEventList+0x7c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002f16:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	18d3      	adds	r3, r2, r3
 8002f24:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fa10 	bl	800334c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f2c:	f107 0710 	add.w	r7, r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <vTaskPlaceOnEventListRestricted+0x16>
 8002f44:	f7fe ffd0 	bl	8001ee8 <ulPortSetInterruptMask>
 8002f48:	e7fe      	b.n	8002f48 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002f4a:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f103 0318 	add.w	r3, r3, #24
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fe fe8a 	bl	8001c74 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002f60:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f103 0304 	add.w	r3, r3, #4
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fee2 	bl	8001d38 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002f74:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	18d3      	adds	r3, r2, r3
 8002f82:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f9e1 	bl	800334c <prvAddCurrentTaskToDelayedList>
	}
 8002f8a:	f107 0710 	add.w	r7, r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop

08002f94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <xTaskRemoveFromEventList+0x1c>
 8002faa:	f7fe ff9d 	bl	8001ee8 <ulPortSetInterruptMask>
 8002fae:	e7fe      	b.n	8002fae <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f103 0318 	add.w	r3, r3, #24
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe febe 	bl	8001d38 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002fbc:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d12a      	bne.n	8003020 <xTaskRemoveFromEventList+0x8c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f103 0304 	add.w	r3, r3, #4
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe feb1 	bl	8001d38 <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fda:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d906      	bls.n	8002ff6 <xTaskRemoveFromEventList+0x62>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003000:	189b      	adds	r3, r3, r2
 8003002:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003006:	f641 4230 	movw	r2, #7216	; 0x1c30
 800300a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800300e:	189a      	adds	r2, r3, r2
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f103 0304 	add.w	r3, r3, #4
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f7fe fe2b 	bl	8001c74 <vListInsertEnd>
 800301e:	e009      	b.n	8003034 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f103 0318 	add.w	r3, r3, #24
 8003026:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 800302a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800302e:	4619      	mov	r1, r3
 8003030:	f7fe fe20 	bl	8001c74 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	429a      	cmp	r2, r3
 8003046:	d303      	bcc.n	8003050 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003048:	f04f 0301 	mov.w	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e002      	b.n	8003056 <xTaskRemoveFromEventList+0xc2>
	}
	else
	{
		xReturn = pdFALSE;
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	f107 0710 	add.w	r7, r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop

08003064 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <vTaskSetTimeOutState+0x14>
 8003072:	f7fe ff39 	bl	8001ee8 <ulPortSetInterruptMask>
 8003076:	e7fe      	b.n	8003076 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003078:	f641 5324 	movw	r3, #7460	; 0x1d24
 800307c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003086:	f641 5308 	movw	r3, #7432	; 0x1d08
 800308a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]
}
 8003094:	f107 0708 	add.w	r7, r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <xTaskCheckForTimeOut+0x16>
 80030ac:	f7fe ff1c 	bl	8001ee8 <ulPortSetInterruptMask>
 80030b0:	e7fe      	b.n	80030b0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <xTaskCheckForTimeOut+0x22>
 80030b8:	f7fe ff16 	bl	8001ee8 <ulPortSetInterruptMask>
 80030bc:	e7fe      	b.n	80030bc <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80030be:	f7fe fee7 	bl	8001e90 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d103      	bne.n	80030d4 <xTaskCheckForTimeOut+0x38>
			{
				xReturn = pdFALSE;
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e038      	b.n	8003146 <xTaskCheckForTimeOut+0xaa>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f641 5324 	movw	r3, #7460	; 0x1d24
 80030dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d00c      	beq.n	8003100 <xTaskCheckForTimeOut+0x64>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	f641 5308 	movw	r3, #7432	; 0x1d08
 80030ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d803      	bhi.n	8003100 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80030f8:	f04f 0301 	mov.w	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e022      	b.n	8003146 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8003100:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	1ad2      	subs	r2, r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d213      	bcs.n	8003140 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1acb      	subs	r3, r1, r3
 800312c:	18d2      	adds	r2, r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ff96 	bl	8003064 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e002      	b.n	8003146 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 8003140:	f04f 0301 	mov.w	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003146:	f7fe feb5 	bl	8001eb4 <vPortExitCritical>

	return xReturn;
 800314a:	68fb      	ldr	r3, [r7, #12]
}
 800314c:	4618      	mov	r0, r3
 800314e:	f107 0710 	add.w	r7, r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop

08003158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 800315c:	f641 5320 	movw	r3, #7456	; 0x1d20
 8003160:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003164:	f04f 0201 	mov.w	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003178:	f000 f89a 	bl	80032b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800317c:	f641 4330 	movw	r3, #7216	; 0x1c30
 8003180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d901      	bls.n	800318e <prvIdleTask+0x1e>
			{
				taskYIELD();
 800318a:	f7fe fe75 	bl	8001e78 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800318e:	f001 f957 	bl	8004440 <vApplicationIdleHook>
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003192:	e7f1      	b.n	8003178 <prvIdleTask+0x8>

08003194 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80031a8:	4618      	mov	r0, r3
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	f04f 020a 	mov.w	r2, #10
 80031b0:	f001 fb22 	bl	80047f8 <strncpy>
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d902      	bls.n	80031ca <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80031c4:	f04f 0304 	mov.w	r3, #4
 80031c8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f103 0304 	add.w	r3, r3, #4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fd3b 	bl	8001c58 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f103 0318 	add.w	r3, r3, #24
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fd35 	bl	8001c58 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1c3 0205 	rsb	r2, r3, #5
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif /* portUSING_MPU_WRAPPERS */
}
 8003204:	f107 0710 	add.w	r7, r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e012      	b.n	8003240 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003222:	189b      	adds	r3, r3, r2
 8003224:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003228:	f641 4230 	movw	r2, #7216	; 0x1c30
 800322c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003230:	189b      	adds	r3, r3, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fcf0 	bl	8001c18 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f103 0301 	add.w	r3, r3, #1
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d9e9      	bls.n	800321a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8003246:	f641 4094 	movw	r0, #7316	; 0x1c94
 800324a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800324e:	f7fe fce3 	bl	8001c18 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8003252:	f641 40a8 	movw	r0, #7336	; 0x1ca8
 8003256:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800325a:	f7fe fcdd 	bl	8001c18 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 800325e:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 8003262:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003266:	f7fe fcd7 	bl	8001c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 800326a:	f641 40d8 	movw	r0, #7384	; 0x1cd8
 800326e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003272:	f7fe fcd1 	bl	8001c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8003276:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 800327a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800327e:	f7fe fccb 	bl	8001c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003282:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8003286:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800328a:	f641 4294 	movw	r2, #7316	; 0x1c94
 800328e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003294:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8003298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800329c:	f641 42a8 	movw	r2, #7336	; 0x1ca8
 80032a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80032a4:	601a      	str	r2, [r3, #0]
}
 80032a6:	f107 0708 	add.w	r7, r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80032b6:	e03d      	b.n	8003334 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
 80032b8:	f7ff fb92 	bl	80029e0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80032bc:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 80032c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf14      	ite	ne
 80032ca:	2300      	movne	r3, #0
 80032cc:	2301      	moveq	r3, #1
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80032d2:	f7ff fb97 	bl	8002a04 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d12b      	bne.n	8003334 <prvCheckTasksWaitingTermination+0x84>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80032dc:	f7fe fdd8 	bl	8001e90 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80032e0:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 80032e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f103 0304 	add.w	r3, r3, #4
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fd1f 	bl	8001d38 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80032fa:	f641 5304 	movw	r3, #7428	; 0x1d04
 80032fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f103 32ff 	add.w	r2, r3, #4294967295
 8003308:	f641 5304 	movw	r3, #7428	; 0x1d04
 800330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003310:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8003312:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003316:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003320:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003328:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 800332a:	f7fe fdc3 	bl	8001eb4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f000 f88a 	bl	8003448 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003334:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003338:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ba      	bne.n	80032b8 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8003342:	f107 0708 	add.w	r7, r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop

0800334c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003354:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8003362:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d210      	bcs.n	8003394 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003372:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8003376:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003380:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f103 0304 	add.w	r3, r3, #4
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f7fe fc99 	bl	8001cc4 <vListInsert>
 8003392:	e01d      	b.n	80033d0 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003394:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8003398:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80033a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f103 0304 	add.w	r3, r3, #4
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7fe fc88 	bl	8001cc4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80033b4:	f240 0318 	movw	r3, #24
 80033b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d205      	bcs.n	80033d0 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80033c4:	f240 0318 	movw	r3, #24
 80033c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	601a      	str	r2, [r3, #0]
		}
	}
}
 80033d0:	f107 0708 	add.w	r7, r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80033e4:	f04f 0044 	mov.w	r0, #68	; 0x44
 80033e8:	f7fe fb94 	bl	8001b14 <pvPortMalloc>
 80033ec:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <prvAllocateTCBAndStack+0x32>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fb87 	bl	8001b14 <pvPortMalloc>
 8003406:	4603      	mov	r3, r0
 8003408:	e000      	b.n	800340c <prvAllocateTCBAndStack+0x34>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7fe fbdf 	bl	8001bdc <vPortFree>
			pxNewTCB = NULL;
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e00a      	b.n	800343c <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003430:	4610      	mov	r0, r2
 8003432:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8003436:	461a      	mov	r2, r3
 8003438:	f001 f948 	bl	80046cc <memset>
		}
	}

	return pxNewTCB;
 800343c:	68fb      	ldr	r3, [r7, #12]
}
 800343e:	4618      	mov	r0, r3
 8003440:	f107 0710 	add.w	r7, r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fbc1 	bl	8001bdc <vPortFree>
		vPortFree( pxTCB );
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe fbbe 	bl	8001bdc <vPortFree>
	}
 8003460:	f107 0708 	add.w	r7, r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800346e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	607b      	str	r3, [r7, #4]

		return xReturn;
 800347a:	687b      	ldr	r3, [r7, #4]
	}
 800347c:	4618      	mov	r0, r3
 800347e:	f107 070c 	add.w	r7, r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800348e:	f641 5314 	movw	r3, #7444	; 0x1d14
 8003492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e00d      	b.n	80034c0 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80034a4:	f641 5318 	movw	r3, #7448	; 0x1d18
 80034a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034b2:	f04f 0301 	mov.w	r3, #1
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	e002      	b.n	80034c0 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034ba:	f04f 0302 	mov.w	r3, #2
 80034be:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034c0:	687b      	ldr	r3, [r7, #4]
	}
 80034c2:	4618      	mov	r0, r3
 80034c4:	f107 070c 	add.w	r7, r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d05f      	beq.n	80035a2 <vTaskPriorityInherit+0xd2>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80034ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d255      	bcs.n	80035a2 <vTaskPriorityInherit+0xd2>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 80034f6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80034fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f1c3 0205 	rsb	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	4613      	mov	r3, r2
 8003514:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003518:	189b      	adds	r3, r3, r2
 800351a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800351e:	f641 4230 	movw	r2, #7216	; 0x1c30
 8003522:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003526:	189b      	adds	r3, r3, r2
 8003528:	4299      	cmp	r1, r3
 800352a:	d132      	bne.n	8003592 <vTaskPriorityInherit+0xc2>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f103 0304 	add.w	r3, r3, #4
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fc00 	bl	8001d38 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003538:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800353c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d906      	bls.n	8003568 <vTaskPriorityInherit+0x98>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003562:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	4613      	mov	r3, r2
 800356e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003572:	189b      	adds	r3, r3, r2
 8003574:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003578:	f641 4230 	movw	r2, #7216	; 0x1c30
 800357c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003580:	189a      	adds	r2, r3, r2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f103 0304 	add.w	r3, r3, #4
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f7fe fb72 	bl	8001c74 <vListInsertEnd>
 8003590:	e007      	b.n	80035a2 <vTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003592:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 80035a2:	f107 0710 	add.w	r7, r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop

080035ac <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d039      	beq.n	8003632 <vTaskPriorityDisinherit+0x86>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d033      	beq.n	8003632 <vTaskPriorityDisinherit+0x86>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f103 0304 	add.w	r3, r3, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fbb1 	bl	8001d38 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f1c3 0205 	rsb	r2, r3, #5
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	f641 5310 	movw	r3, #7440	; 0x1d10
 80035f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d906      	bls.n	800360a <vTaskPriorityDisinherit+0x5e>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	4613      	mov	r3, r2
 8003610:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003614:	189b      	adds	r3, r3, r2
 8003616:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800361a:	f641 4230 	movw	r2, #7216	; 0x1c30
 800361e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003622:	189a      	adds	r2, r3, r2
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f103 0304 	add.w	r3, r3, #4
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fe fb21 	bl	8001c74 <vListInsertEnd>
			}
		}
	}
 8003632:	f107 0710 	add.w	r7, r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop

0800363c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003648:	f000 faa4 	bl	8003b94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800364c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003650:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01a      	beq.n	8003690 <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800365a:	f04f 0303 	mov.w	r3, #3
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	9302      	str	r3, [sp, #8]
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	f243 70d1 	movw	r0, #14289	; 0x37d1
 8003676:	f6c0 0000 	movt	r0, #2048	; 0x800
 800367a:	f644 112c 	movw	r1, #18732	; 0x492c
 800367e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003682:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	f7ff f845 	bl	8002718 <xTaskGenericCreate>
 800368e:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d102      	bne.n	800369c <xTimerCreateTimerTask+0x60>
 8003696:	f7fe fc27 	bl	8001ee8 <ulPortSetInterruptMask>
 800369a:	e7fe      	b.n	800369a <xTimerCreateTimerTask+0x5e>
	return xReturn;
 800369c:	687b      	ldr	r3, [r7, #4]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	f107 0708 	add.w	r7, r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80036bc:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80036c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d03d      	beq.n	8003746 <xTimerGenericCommand+0x9e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d125      	bne.n	8003728 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036dc:	f7ff fed4 	bl	8003488 <xTaskGetSchedulerState>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10f      	bne.n	8003706 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80036e6:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80036ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f7fe fce9 	bl	80020d4 <xQueueGenericSend>
 8003702:	61f8      	str	r0, [r7, #28]
 8003704:	e01f      	b.n	8003746 <xTimerGenericCommand+0x9e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003706:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800370a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	f107 0310 	add.w	r3, r7, #16
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	f7fe fcd8 	bl	80020d4 <xQueueGenericSend>
 8003724:	61f8      	str	r0, [r7, #28]
 8003726:	e00e      	b.n	8003746 <xTimerGenericCommand+0x9e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003728:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800372c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f107 0310 	add.w	r3, r7, #16
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	f7fe fd70 	bl	8002224 <xQueueGenericSendFromISR>
 8003744:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8003746:	69fb      	ldr	r3, [r7, #28]
}
 8003748:	4618      	mov	r0, r3
 800374a:	f107 0720 	add.w	r7, r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop

08003754 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800375e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003762:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f103 0304 	add.w	r3, r3, #4
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe fadf 	bl	8001d38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d11e      	bne.n	80037c0 <prvProcessExpiredTimer+0x6c>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	18d3      	adds	r3, r2, r3
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	4619      	mov	r1, r3
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f000 f8bf 	bl	8003914 <prvInsertTimerInActiveList>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d111      	bne.n	80037c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	f7ff ff7b 	bl	80036a8 <xTimerGenericCommand>
 80037b2:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <prvProcessExpiredTimer+0x6c>
 80037ba:	f7fe fb95 	bl	8001ee8 <ulPortSetInterruptMask>
 80037be:	e7fe      	b.n	80037be <prvProcessExpiredTimer+0x6a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	4798      	blx	r3
}
 80037c8:	f107 0710 	add.w	r7, r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f843 	bl	8003868 <prvGetNextExpireTime>
 80037e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	4619      	mov	r1, r3
 80037ea:	f000 f803 	bl	80037f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80037ee:	f000 f8db 	bl	80039a8 <prvProcessReceivedCommands>
	}
 80037f2:	e7f1      	b.n	80037d8 <prvTimerTask+0x8>

080037f4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80037fe:	f7ff f8ef 	bl	80029e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003802:	f107 0308 	add.w	r3, r7, #8
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f858 	bl	80038bc <prvSampleTimeNow>
 800380c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d121      	bne.n	8003858 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <prvProcessTimerOrBlockTask+0x3c>
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	429a      	cmp	r2, r3
 8003820:	d806      	bhi.n	8003830 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 8003822:	f7ff f8ef 	bl	8002a04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	f7ff ff93 	bl	8003754 <prvProcessExpiredTimer>
 800382e:	e017      	b.n	8003860 <prvProcessTimerOrBlockTask+0x6c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8003830:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1acb      	subs	r3, r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f7fe ff38 	bl	80026b8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8003848:	f7ff f8dc 	bl	8002a04 <xTaskResumeAll>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <prvProcessTimerOrBlockTask+0x6a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8003852:	f7fe fb11 	bl	8001e78 <vPortYieldFromISR>
 8003856:	e002      	b.n	800385e <prvProcessTimerOrBlockTask+0x6a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 8003858:	f7ff f8d4 	bl	8002a04 <xTaskResumeAll>
 800385c:	e000      	b.n	8003860 <prvProcessTimerOrBlockTask+0x6c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800385e:	bf00      	nop
		else
		{
			xTaskResumeAll();
		}
	}
}
 8003860:	f107 0710 	add.w	r7, r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003870:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf14      	ite	ne
 8003880:	2300      	movne	r3, #0
 8003882:	2301      	moveq	r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d108      	bne.n	80038a6 <prvGetNextExpireTime+0x3e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003894:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e002      	b.n	80038ac <prvGetNextExpireTime+0x44>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80038ac:	68fb      	ldr	r3, [r7, #12]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	f107 0714 	add.w	r7, r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop

080038bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 80038c4:	f7ff f950 	bl	8002b68 <xTaskGetTickCount>
 80038c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80038ca:	f641 5360 	movw	r3, #7520	; 0x1d60
 80038ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <prvSampleTimeNow+0x38>
	{
		prvSwitchTimerLists( xLastTime );
 80038da:	f641 5360 	movw	r3, #7520	; 0x1d60
 80038de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f8e1 	bl	8003aac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f04f 0201 	mov.w	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e003      	b.n	80038fc <prvSampleTimeNow+0x40>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80038fc:	f641 5360 	movw	r3, #7520	; 0x1d60
 8003900:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003908:	68fb      	ldr	r3, [r7, #12]
}
 800390a:	4618      	mov	r0, r3
 800390c:	f107 0710 	add.w	r7, r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	d817      	bhi.n	800396c <prvInsertTimerInActiveList+0x58>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	429a      	cmp	r2, r3
 8003948:	d303      	bcc.n	8003952 <prvInsertTimerInActiveList+0x3e>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800394a:	f04f 0301 	mov.w	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e024      	b.n	800399c <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003952:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003956:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f103 0304 	add.w	r3, r3, #4
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	f7fe f9ad 	bl	8001cc4 <vListInsert>
 800396a:	e017      	b.n	800399c <prvInsertTimerInActiveList+0x88>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d207      	bcs.n	8003984 <prvInsertTimerInActiveList+0x70>
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d303      	bcc.n	8003984 <prvInsertTimerInActiveList+0x70>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800397c:	f04f 0301 	mov.w	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e00b      	b.n	800399c <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003984:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003988:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f103 0304 	add.w	r3, r3, #4
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	f7fe f994 	bl	8001cc4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800399c:	697b      	ldr	r3, [r7, #20]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	f107 0718 	add.w	r7, r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80039ae:	e066      	b.n	8003a7e <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <prvProcessReceivedCommands+0x20>
		{
			/* The timer is in a list, remove it. */
			uxListRemove( &( pxTimer->xTimerListItem ) );
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f103 0304 	add.w	r3, r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe f9b8 	bl	8001d38 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039c8:	f107 0304 	add.w	r3, r7, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff75 	bl	80038bc <prvSampleTimeNow>
 80039d2:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d84e      	bhi.n	8003a78 <prvProcessReceivedCommands+0xd0>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <prvProcessReceivedCommands+0x38>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a79 	.word	0x08003a79
 80039e8:	08003a47 	.word	0x08003a47
 80039ec:	08003a71 	.word	0x08003a71
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	18d2      	adds	r2, r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	69f8      	ldr	r0, [r7, #28]
 80039fc:	4611      	mov	r1, r2
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	f7ff ff88 	bl	8003914 <prvInsertTimerInActiveList>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d138      	bne.n	8003a7c <prvProcessReceivedCommands+0xd4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	69f8      	ldr	r0, [r7, #28]
 8003a10:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d130      	bne.n	8003a7c <prvProcessReceivedCommands+0xd4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	18d3      	adds	r3, r2, r3
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	9200      	str	r2, [sp, #0]
 8003a28:	69f8      	ldr	r0, [r7, #28]
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	f7ff fe38 	bl	80036a8 <xTimerGenericCommand>
 8003a38:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d11d      	bne.n	8003a7c <prvProcessReceivedCommands+0xd4>
 8003a40:	f7fe fa52 	bl	8001ee8 <ulPortSetInterruptMask>
 8003a44:	e7fe      	b.n	8003a44 <prvProcessReceivedCommands+0x9c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <prvProcessReceivedCommands+0xb2>
 8003a54:	f7fe fa48 	bl	8001ee8 <ulPortSetInterruptMask>
 8003a58:	e7fe      	b.n	8003a58 <prvProcessReceivedCommands+0xb0>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	18d3      	adds	r3, r2, r3
 8003a62:	69f8      	ldr	r0, [r7, #28]
 8003a64:	4619      	mov	r1, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f7ff ff53 	bl	8003914 <prvInsertTimerInActiveList>
				break;
 8003a6e:	e006      	b.n	8003a7e <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8003a70:	69f8      	ldr	r0, [r7, #28]
 8003a72:	f7fe f8b3 	bl	8001bdc <vPortFree>
				break;
 8003a76:	e002      	b.n	8003a7e <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <prvProcessReceivedCommands+0xd6>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 8003a7c:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003a7e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	f7fe fc22 	bl	80022e0 <xQueueGenericReceive>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d186      	bne.n	80039b0 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8003aa2:	f107 0720 	add.w	r7, r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop

08003aac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ab4:	e04b      	b.n	8003b4e <prvSwitchTimerLists+0xa2>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ab6:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ac6:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f103 0304 	add.w	r3, r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe f92b 	bl	8001d38 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	69b8      	ldr	r0, [r7, #24]
 8003ae8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d12d      	bne.n	8003b4e <prvSwitchTimerLists+0xa2>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d912      	bls.n	8003b2a <prvSwitchTimerLists+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b10:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f103 0304 	add.w	r3, r3, #4
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	f7fe f8ce 	bl	8001cc4 <vListInsert>
 8003b28:	e011      	b.n	8003b4e <prvSwitchTimerLists+0xa2>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	69b8      	ldr	r0, [r7, #24]
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	f7ff fdb4 	bl	80036a8 <xTimerGenericCommand>
 8003b40:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <prvSwitchTimerLists+0xa2>
 8003b48:	f7fe f9ce 	bl	8001ee8 <ulPortSetInterruptMask>
 8003b4c:	e7fe      	b.n	8003b4c <prvSwitchTimerLists+0xa0>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b4e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ab      	bne.n	8003ab6 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b5e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b6a:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b7c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8003b7e:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	f107 0720 	add.w	r7, r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop

08003b94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b98:	f7fe f97a 	bl	8001e90 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b9c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d12b      	bne.n	8003c02 <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
 8003baa:	f641 502c 	movw	r0, #7468	; 0x1d2c
 8003bae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bb2:	f7fe f831 	bl	8001c18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003bb6:	f641 5040 	movw	r0, #7488	; 0x1d40
 8003bba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bbe:	f7fe f82b 	bl	8001c18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003bc2:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bca:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003bce:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003bd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003bd4:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bdc:	f641 5240 	movw	r2, #7488	; 0x1d40
 8003be0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003be4:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8003be6:	f04f 0005 	mov.w	r0, #5
 8003bea:	f04f 010c 	mov.w	r1, #12
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f7fe fa2b 	bl	800204c <xQueueGenericCreate>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c00:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8003c02:	f7fe f957 	bl	8001eb4 <vPortExitCritical>
}
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <TIM7_IRQHandler>:
{
	( void )pxMBPortCBTimerExpired(  );
}

void TIM7_IRQHandler()
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8003c0c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003c10:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003c14:	f04f 0101 	mov.w	r1, #1
 8003c18:	f7fd fd7a 	bl	8001710 <TIM_ClearITPendingBit>
	( void )pxMBPortCBTimerExpired(  );
 8003c1c:	f641 5368 	movw	r3, #7528	; 0x1d68
 8003c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4798      	blx	r3
}
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop

08003c2c <Reset_Handler>:
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f000 b804 	b.w	8003c3a <LoopCopyDataInit>

08003c32 <CopyDataInit>:
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <LoopFillZerobss+0x12>)
 8003c34:	585b      	ldr	r3, [r3, r1]
 8003c36:	5043      	str	r3, [r0, r1]
 8003c38:	3104      	adds	r1, #4

08003c3a <LoopCopyDataInit>:
 8003c3a:	480b      	ldr	r0, [pc, #44]	; (8003c68 <LoopFillZerobss+0x16>)
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <LoopFillZerobss+0x1a>)
 8003c3e:	1842      	adds	r2, r0, r1
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f4ff aff6 	bcc.w	8003c32 <CopyDataInit>
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <LoopFillZerobss+0x1e>)
 8003c48:	f000 b803 	b.w	8003c52 <LoopFillZerobss>

08003c4c <FillZerobss>:
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f842 3b04 	str.w	r3, [r2], #4

08003c52 <LoopFillZerobss>:
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <LoopFillZerobss+0x22>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	f4ff aff9 	bcc.w	8003c4c <FillZerobss>
 8003c5a:	f000 f80f 	bl	8003c7c <SystemInit>
 8003c5e:	f000 fba7 	bl	80043b0 <main>
 8003c62:	4770      	bx	lr
 8003c64:	08004fd1 	.word	0x08004fd1
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	20000020 	.word	0x20000020
 8003c70:	20000020 	.word	0x20000020
 8003c74:	20001d78 	.word	0x20001d78

08003c78 <ADC1_IRQHandler>:
 8003c78:	f7ff bffe 	b.w	8003c78 <ADC1_IRQHandler>

08003c7c <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	/* Reset the RCC clock configuration to the default reset state(for debug purpose) */
	/* Set HSION bit */
	RCC ->CR |= (uint32_t) 0x00000001;
 8003c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
	RCC ->CFGR &= (uint32_t) 0xF8FF0000;
 8003c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	6053      	str	r3, [r2, #4]
#else
	RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   

	/* Reset HSEON, CSSON and PLLON bits */RCC ->CR &= (uint32_t) 0xFEF6FFFF;
 8003cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cc2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003ccc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cd0:	601a      	str	r2, [r3, #0]

	/* Reset HSEBYP bit */RCC ->CR &= (uint32_t) 0xFFFBFFFF;
 8003cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce8:	601a      	str	r2, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */RCC ->CFGR &=
 8003cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003cfa:	6852      	ldr	r2, [r2, #4]
 8003cfc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003d00:	605a      	str	r2, [r3, #4]
	RCC->CIR = 0x00FF0000;

	/* Reset CFGR2 register */
	RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
	/* Disable all interrupts and clear pending bits  */RCC ->CIR = 0x009F0000;
 8003d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d0a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003d0e:	609a      	str	r2, [r3, #8]

	/* Reset CFGR2 register */RCC ->CFGR2 = 0x00000000;
 8003d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* DATA_IN_ExtSRAM */
#endif 

	/* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
	/* Configure the Flash Latency cycles and enable prefetch buffer */
	SetSysClock();
 8003d1e:	f000 f809 	bl	8003d34 <SetSysClock>

#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB ->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d22:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003d26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d2e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop

08003d34 <SetSysClock>:
/**
 * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 * @param  None
 * @retval None
 */
static void SetSysClock(void) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
	SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
	SetSysClockTo24();
 8003d38:	f000 f802 	bl	8003d40 <SetSysClockTo24>
	SetSysClockTo72();
#endif

	/* If none of the define above is enabled, the HSI is used as System clock
	 source (default after reset) */
}
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <SetSysClockTo24>:
 *         and PCLK1 prescalers.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
static void SetSysClockTo24(void) {
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	603b      	str	r3, [r7, #0]

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	/* Enable HSE */RCC ->CR |= ((uint32_t) RCC_CR_HSEON );
 8003d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d68:	601a      	str	r2, [r3, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do {
		HSEStatus = RCC ->CR & RCC_CR_HSERDY;
 8003d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f103 0301 	add.w	r3, r3, #1
 8003d80:	607b      	str	r3, [r7, #4]
	} while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT ));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <SetSysClockTo24+0x50>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d8e:	d1ec      	bne.n	8003d6a <SetSysClockTo24+0x2a>

	if ((RCC ->CR & RCC_CR_HSERDY )!= RESET) {
 8003d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <SetSysClockTo24+0x6a>
		HSEStatus = (uint32_t) 0x01;
 8003da2:	f04f 0301 	mov.w	r3, #1
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	e002      	b.n	8003db0 <SetSysClockTo24+0x70>
	} else {
		HSEStatus = (uint32_t) 0x00;
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t) 0x01) {
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d16d      	bne.n	8003e92 <SetSysClockTo24+0x152>
		FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
		FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
#endif

		/* HCLK = SYSCLK */
		RCC ->CFGR |= (uint32_t) RCC_CFGR_HPRE_DIV1;
 8003db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dc2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003dc6:	6852      	ldr	r2, [r2, #4]
 8003dc8:	605a      	str	r2, [r3, #4]

		/* PCLK2 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE2_DIV1;
 8003dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003dda:	6852      	ldr	r2, [r2, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

		/* PCLK1 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE1_DIV1;
 8003dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003dee:	6852      	ldr	r2, [r2, #4]
 8003df0:	605a      	str	r2, [r3, #4]
		/* Wait till PLL2 is ready */
		while((RCC->CR & RCC_CR_PLL2RDY) == 0)
		{
		}
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */RCC ->CFGR &=
 8003df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dfe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e02:	6852      	ldr	r2, [r2, #4]
 8003e04:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003e08:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE
						| RCC_CFGR_PLLMULL ));
		RCC ->CFGR |= (uint32_t) (RCC_CFGR_PLLSRC_PREDIV1
 8003e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e1a:	6852      	ldr	r2, [r2, #4]
 8003e1c:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 8003e20:	605a      	str	r2, [r3, #4]
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

		/* Enable PLL */RCC ->CR |= RCC_CR_PLLON;
 8003e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003e38:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is ready */
		while ((RCC ->CR & RCC_CR_PLLRDY )== 0){
 8003e3a:	bf00      	nop
 8003e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f6      	beq.n	8003e3c <SetSysClockTo24+0xfc>
		}

		/* Select PLL as system clock source */RCC ->CFGR &=
 8003e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e5e:	6852      	ldr	r2, [r2, #4]
 8003e60:	f022 0203 	bic.w	r2, r2, #3
 8003e64:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_SW ));
		RCC ->CFGR |= (uint32_t) RCC_CFGR_SW_PLL;
 8003e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e76:	6852      	ldr	r2, [r2, #4]
 8003e78:	f042 0202 	orr.w	r2, r2, #2
 8003e7c:	605a      	str	r2, [r3, #4]

		/* Wait till PLL is used as system clock source */
		while ((RCC ->CFGR & (uint32_t) RCC_CFGR_SWS )!= (uint32_t)0x08){
 8003e7e:	bf00      	nop
 8003e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d1f6      	bne.n	8003e80 <SetSysClockTo24+0x140>
}
else
{ /* If HSE fails to start-up, the application will have wrong clock 
 configuration. User can add here some code to deal with this error */
}
}
 8003e92:	f107 070c 	add.w	r7, r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <SetupClock>:
volatile uint16_t counter = 0;

unsigned char error_handle (unsigned char err);

void SetupClock()
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
	RCC_DeInit ();                    /* RCC system reset(for debug purpose)*/
 8003ea0:	f7fc fff6 	bl	8000e90 <RCC_DeInit>
	      RCC_HSEConfig (RCC_HSE_ON);       /* Enable HSE                         */
 8003ea4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ea8:	f7fd f846 	bl	8000f38 <RCC_HSEConfig>

	      /* Wait till HSE is ready                                               */
	      while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 8003eac:	bf00      	nop
 8003eae:	f04f 0031 	mov.w	r0, #49	; 0x31
 8003eb2:	f7fd fadb 	bl	800146c <RCC_GetFlagStatus>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f8      	beq.n	8003eae <SetupClock+0x12>

	      RCC_HCLKConfig   (RCC_SYSCLK_Div1);   /* HCLK   = SYSCLK                */
 8003ebc:	f04f 0000 	mov.w	r0, #0
 8003ec0:	f7fd f8e2 	bl	8001088 <RCC_HCLKConfig>
	      RCC_PCLK2Config  (RCC_HCLK_Div1);     /* PCLK2  = HCLK                  */
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f7fd f91e 	bl	8001108 <RCC_PCLK2Config>
	      RCC_PCLK1Config  (RCC_HCLK_Div1);     /* PCLK1  = HCLK1                */
 8003ecc:	f04f 0000 	mov.w	r0, #0
 8003ed0:	f7fd f8fa 	bl	80010c8 <RCC_PCLK1Config>
	      //RCC_ADCCLKConfig (RCC_PCLK2_Div4);    /* ADCCLK = PCLK2/4               */

	      /* PLLCLK = 8MHz * 6 = 48 MHz                                           */
	      RCC_PLLConfig (RCC_PLLSource_PREDIV1, RCC_PLLMul_6);
 8003ed4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ed8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003edc:	f7fd f870 	bl	8000fc0 <RCC_PLLConfig>

	      RCC_PLLCmd (ENABLE);                  /* Enable PLL                     */
 8003ee0:	f04f 0001 	mov.w	r0, #1
 8003ee4:	f7fd f890 	bl	8001008 <RCC_PLLCmd>

	      /* Wait till PLL is ready                                               */
	      while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8003ee8:	bf00      	nop
 8003eea:	f04f 0039 	mov.w	r0, #57	; 0x39
 8003eee:	f7fd fabd 	bl	800146c <RCC_GetFlagStatus>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f8      	beq.n	8003eea <SetupClock+0x4e>

	      /* Select PLL as system clock source                                    */
	      RCC_SYSCLKConfig (RCC_SYSCLKSource_PLLCLK);
 8003ef8:	f04f 0002 	mov.w	r0, #2
 8003efc:	f7fd f894 	bl	8001028 <RCC_SYSCLKConfig>

	      /* Wait till PLL is used as system clock source                         */
	      while (RCC_GetSYSCLKSource() != 0x08);
 8003f00:	bf00      	nop
 8003f02:	f7fd f8b1 	bl	8001068 <RCC_GetSYSCLKSource>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d1fa      	bne.n	8003f02 <SetupClock+0x66>

}
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop

08003f10 <LEDsInit>:

void LEDsInit()
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003f16:	f04f 0010 	mov.w	r0, #16
 8003f1a:	f04f 0101 	mov.w	r1, #1
 8003f1e:	f7fd fa51 	bl	80013c4 <RCC_APB2PeriphClockCmd>
   GPIO_InitTypeDef GPIO_InitStructure;
   /* Ñâåòîäèîäû íà PC8, PC9          */
   GPIO_InitStructure.GPIO_Pin   = LED_GREEN | LED_BLUE;
 8003f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f26:	80bb      	strh	r3, [r7, #4]
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003f28:	f04f 0303 	mov.w	r3, #3
 8003f2c:	71bb      	strb	r3, [r7, #6]
   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 8003f2e:	f04f 0310 	mov.w	r3, #16
 8003f32:	71fb      	strb	r3, [r7, #7]
   GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8003f34:	f107 0304 	add.w	r3, r7, #4
 8003f38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f3c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7fc fe65 	bl	8000c10 <GPIO_Init>
}
 8003f46:	f107 0708 	add.w	r7, r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <BtnInit>:

void BtnInit()
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8003f56:	f04f 0004 	mov.w	r0, #4
 8003f5a:	f04f 0101 	mov.w	r1, #1
 8003f5e:	f7fd fa31 	bl	80013c4 <RCC_APB2PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8003f62:	f04f 0301 	mov.w	r3, #1
 8003f66:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003f68:	f04f 0304 	mov.w	r3, #4
 8003f6c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003f6e:	f107 0304 	add.w	r3, r7, #4
 8003f72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f76:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f7fc fe48 	bl	8000c10 <GPIO_Init>
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	f7fc ff1a 	bl	8000dc0 <GPIO_EXTILineConfig>
}
 8003f8c:	f107 0708 	add.w	r7, r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <USART_GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_GPIO_Configuration(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
  /* Enable GPIOA clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003f9a:	f04f 0004 	mov.w	r0, #4
 8003f9e:	f04f 0101 	mov.w	r1, #1
 8003fa2:	f7fd fa0f 	bl	80013c4 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure USART1 Tx (PA.09) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003faa:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003fac:	f04f 0318 	mov.w	r3, #24
 8003fb0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003fb2:	f04f 0303 	mov.w	r3, #3
 8003fb6:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003fb8:	f107 0304 	add.w	r3, r7, #4
 8003fbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fc0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7fc fe23 	bl	8000c10 <GPIO_Init>

  /* Configure USART1 Rx (PA.10) as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fce:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003fd0:	f04f 0304 	mov.w	r3, #4
 8003fd4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003fd6:	f107 0304 	add.w	r3, r7, #4
 8003fda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fde:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fe14 	bl	8000c10 <GPIO_Init>
}
 8003fe8:	f107 0708 	add.w	r7, r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <USART_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Configuration(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
  /* Enable USART1 */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8003ff6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ffa:	f04f 0101 	mov.w	r1, #1
 8003ffe:	f7fd f9e1 	bl	80013c4 <RCC_APB2PeriphClockCmd>
        - USART CPOL: Clock is active low
        - USART CPHA: Data is captured on the middle
        - USART LastBit: The clock pulse of the last data bit is not output to
                         the SCLK pin
  */
  USART_InitStructure.USART_BaudRate = BAUDRATE;
 8004002:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004006:	603b      	str	r3, [r7, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	80bb      	strh	r3, [r7, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	80fb      	strh	r3, [r7, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	813b      	strh	r3, [r7, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	81bb      	strh	r3, [r7, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004020:	f04f 030c 	mov.w	r3, #12
 8004024:	817b      	strh	r3, [r7, #10]

  USART_Init(USART1, &USART_InitStructure);
 8004026:	463b      	mov	r3, r7
 8004028:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800402c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004030:	4619      	mov	r1, r3
 8004032:	f7fd fb7f 	bl	8001734 <USART_Init>

  /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
 8004036:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800403a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800403e:	f04f 0101 	mov.w	r1, #1
 8004042:	f7fd fc4d 	bl	80018e0 <USART_Cmd>

  uart_print_string(USART1, "\n===== UART1 инициализирован =====",1);
 8004046:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800404a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800404e:	f644 1134 	movw	r1, #18740	; 0x4934
 8004052:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004056:	f04f 0201 	mov.w	r2, #1
 800405a:	f7fc fa33 	bl	80004c4 <uart_print_string>
}
 800405e:	f107 0710 	add.w	r7, r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop

08004068 <EXTI_Configuration>:

void EXTI_Configuration(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800406e:	f04f 0301 	mov.w	r3, #1
 8004072:	603b      	str	r3, [r7, #0]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	713b      	strb	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 800407a:	f04f 0308 	mov.w	r3, #8
 800407e:	717b      	strb	r3, [r7, #5]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004080:	f04f 0301 	mov.w	r3, #1
 8004084:	71bb      	strb	r3, [r7, #6]
  EXTI_Init(&EXTI_InitStructure);
 8004086:	463b      	mov	r3, r7
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fd15 	bl	8000ab8 <EXTI_Init>
}
 800408e:	f107 0708 	add.w	r7, r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop

08004098 <NVIC_Configuration_USART1>:

void NVIC_Configuration_USART1(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Place the vector table into FLASH */
	//NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800409e:	f44f 7040 	mov.w	r0, #768	; 0x300
 80040a2:	f7fc fc81 	bl	80009a8 <NVIC_PriorityGroupConfig>

	//select NVIC channel to configure
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80040a6:	f04f 0325 	mov.w	r3, #37	; 0x25
 80040aa:	713b      	strb	r3, [r7, #4]
	//set priority to lowest
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 80040ac:	f04f 030f 	mov.w	r3, #15
 80040b0:	717b      	strb	r3, [r7, #5]
	//set subpriority to lowest
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 80040b2:	f04f 030f 	mov.w	r3, #15
 80040b6:	71bb      	strb	r3, [r7, #6]
	//enable IRQ channel
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80040b8:	f04f 0301 	mov.w	r3, #1
 80040bc:	71fb      	strb	r3, [r7, #7]
	//update NVIC registers
	NVIC_Init(&NVIC_InitStructure);
 80040be:	f107 0304 	add.w	r3, r7, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc fc84 	bl	80009d0 <NVIC_Init>

	//disable Transmit Data Register empty interrupt
	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80040c8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80040cc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040d0:	f240 7127 	movw	r1, #1831	; 0x727
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f7fd fc22 	bl	8001920 <USART_ITConfig>
	//enable Receive Data register not empty interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80040dc:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80040e0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040e4:	f240 5125 	movw	r1, #1317	; 0x525
 80040e8:	f04f 0201 	mov.w	r2, #1
 80040ec:	f7fd fc18 	bl	8001920 <USART_ITConfig>


}
 80040f0:	f107 0708 	add.w	r7, r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <NVIC_Configuration_USER_BUTTON>:

void NVIC_Configuration_USER_BUTTON(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80040fe:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004102:	f7fc fc51 	bl	80009a8 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8004106:	f04f 0306 	mov.w	r3, #6
 800410a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 800410c:	f04f 030f 	mov.w	r3, #15
 8004110:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 8004112:	f04f 030f 	mov.w	r3, #15
 8004116:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004118:	f04f 0301 	mov.w	r3, #1
 800411c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800411e:	f107 0304 	add.w	r3, r7, #4
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fc54 	bl	80009d0 <NVIC_Init>
}
 8004128:	f107 0708 	add.w	r7, r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
        EXTI_ClearITPendingBit(EXTI_Line0);
 8004134:	f04f 0001 	mov.w	r0, #1
 8004138:	f7fc fd5a 	bl	8000bf0 <EXTI_ClearITPendingBit>

        uart_print_string(USART1, "Тынц",1);
 800413c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004140:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004144:	f644 1168 	movw	r1, #18792	; 0x4968
 8004148:	f6c0 0100 	movt	r1, #2048	; 0x800
 800414c:	f04f 0201 	mov.w	r2, #1
 8004150:	f7fc f9b8 	bl	80004c4 <uart_print_string>
		{
			LED_PORT->ODR |= LED_GREEN;
 8004154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004158:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800415c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004160:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	60da      	str	r2, [r3, #12]
			//vTaskDelay(10);
			delay_ms(10);
 800416c:	f04f 000a 	mov.w	r0, #10
 8004170:	f7fc fad4 	bl	800071c <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 8004174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004178:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800417c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004180:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004184:	68d2      	ldr	r2, [r2, #12]
 8004186:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800418a:	60da      	str	r2, [r3, #12]
		}
}
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop

08004190 <vFreeRTOSInitAll>:

void vFreeRTOSInitAll()
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
	SetupClock();
 8004194:	f7ff fe82 	bl	8003e9c <SetupClock>

	LEDsInit();
 8004198:	f7ff feba 	bl	8003f10 <LEDsInit>
	BtnInit();
 800419c:	f7ff fed8 	bl	8003f50 <BtnInit>

	EXTI_Configuration();
 80041a0:	f7ff ff62 	bl	8004068 <EXTI_Configuration>

	USART_GPIO_Configuration();
 80041a4:	f7ff fef6 	bl	8003f94 <USART_GPIO_Configuration>
	USART_Configuration();
 80041a8:	f7ff ff22 	bl	8003ff0 <USART_Configuration>

	NVIC_Configuration_USER_BUTTON();
 80041ac:	f7ff ffa4 	bl	80040f8 <NVIC_Configuration_USER_BUTTON>
	NVIC_Configuration_USART1();
 80041b0:	f7ff ff72 	bl	8004098 <NVIC_Configuration_USART1>

	TIM6Init();
 80041b4:	f7fc fa7a 	bl	80006ac <TIM6Init>

}
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop

080041bc <vTaskLED>:

void vTaskLED(void *pvParameters)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

        for (;;) {
        	//delay_ms(500);
        	LED_PORT->ODR ^= LED_BLUE;
 80041c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80041cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041d0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80041d4:	68d2      	ldr	r2, [r2, #12]
 80041d6:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80041da:	60da      	str	r2, [r3, #12]
            vTaskDelay(500);
 80041dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041e0:	f7fe fb8c 	bl	80028fc <vTaskDelay>

        }
 80041e4:	e7ee      	b.n	80041c4 <vTaskLED+0x8>
 80041e6:	bf00      	nop

080041e8 <USART1_IRQHandler>:
        vTaskDelete(NULL);

}

void USART1_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 80041ee:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80041f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80041f6:	f240 5125 	movw	r1, #1317	; 0x525
 80041fa:	f7fd fc29 	bl	8001a50 <USART_GetITStatus>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <USART1_IRQHandler+0x3a>
	    {
		   // перемырг
		   //LED_PORT->ODR |= LED_BLUE;
		   //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
		   uint16_t i = USART_ReceiveData(USART1);
 8004204:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004208:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800420c:	f7fd fbee 	bl	80019ec <USART_ReceiveData>
 8004210:	4603      	mov	r3, r0
 8004212:	80fb      	strh	r3, [r7, #6]
		   UARTSend(&i, 1);
 8004214:	f107 0306 	add.w	r3, r7, #6
 8004218:	4618      	mov	r0, r3
 800421a:	f04f 0101 	mov.w	r1, #1
 800421e:	f000 f91b 	bl	8004458 <UARTSend>
		   //LED_PORT->ODR ^= LED_BLUE;
		   //UARTSend(&i, 1);
          // UARTSend(" <-- data\r\n", 10);
        }
}
 8004222:	f107 0708 	add.w	r7, r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop

0800422c <vTaskDS1821>:

    vTaskDelete(NULL);
}

void vTaskDS1821(void *pvParameters)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	uart_print_string(USART1,"Температура:   ",0);
 8004234:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004238:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800423c:	f644 1198 	movw	r1, #18840	; 0x4998
 8004240:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f7fc f93c 	bl	80004c4 <uart_print_string>
			//error_handle(One_Wire_Reset(One_Wire_Pin));

			//error_handle(DS1821_Write_Status(One_Wire_Pin));

			//error_handle(DS1821_Start_Conversion(One_Wire_Pin));
			DS1821_Start_Conversion(One_Wire_Pin);
 800424c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004250:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004254:	f04f 0180 	mov.w	r1, #128	; 0x80
 8004258:	f7fb ffba 	bl	80001d0 <DS1821_Start_Conversion>
			//delay_ms(750);

			//error_handle(DS1821_Stop_Conversion(One_Wire_Pin));
			//error_handle(DS1821_Read_Temp(&t, One_Wire_Pin));
			uart_print_string(USART1, "Температура:   ", 0);
 800425c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004260:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004264:	f644 1198 	movw	r1, #18840	; 0x4998
 8004268:	f6c0 0100 	movt	r1, #2048	; 0x800
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f7fc f928 	bl	80004c4 <uart_print_string>
			DS1821_Read_Temp(&t, One_Wire_Pin);
 8004274:	f107 030c 	add.w	r3, r7, #12
 8004278:	4618      	mov	r0, r3
 800427a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800427e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004282:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004286:	f7fb ffc5 	bl	8000214 <DS1821_Read_Temp>
			uart_send_char(USART1, 8);
 800428a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800428e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004292:	f04f 0108 	mov.w	r1, #8
 8004296:	f7fc f8fd 	bl	8000494 <uart_send_char>
			uart_send_char(USART1, 8);
 800429a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800429e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042a2:	f04f 0108 	mov.w	r1, #8
 80042a6:	f7fc f8f5 	bl	8000494 <uart_send_char>
			uart_print_value(USART1, t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042b0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7fc f927 	bl	8000508 <uart_print_value>
			//uart_print_string(USART1,"",1);
			LED_PORT->ODR |= LED_GREEN;
 80042ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042c6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80042ca:	68d2      	ldr	r2, [r2, #12]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	60da      	str	r2, [r3, #12]
						//vTaskDelay(10);
			delay_ms(10);
 80042d2:	f04f 000a 	mov.w	r0, #10
 80042d6:	f7fc fa21 	bl	800071c <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 80042da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042e6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80042ea:	68d2      	ldr	r2, [r2, #12]
 80042ec:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 80042f0:	60da      	str	r2, [r3, #12]
			uart_print_string(USART1, " Uptime: ", 0);
 80042f2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042fa:	f644 11b4 	movw	r1, #18868	; 0x49b4
 80042fe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f7fc f8dd 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetHours(GetTime()));
 800430a:	f7fc fadb 	bl	80008c4 <GetTime>
 800430e:	4603      	mov	r3, r0
 8004310:	4618      	mov	r0, r3
 8004312:	f7fc faed 	bl	80008f0 <Time_GetHours>
 8004316:	4603      	mov	r3, r0
 8004318:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800431c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004320:	4619      	mov	r1, r3
 8004322:	f7fc f8f1 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, ":", 0);
 8004326:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800432a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800432e:	f644 11c0 	movw	r1, #18880	; 0x49c0
 8004332:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f7fc f8c3 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetMinutes(GetTime()));
 800433e:	f7fc fac1 	bl	80008c4 <GetTime>
 8004342:	4603      	mov	r3, r0
 8004344:	4618      	mov	r0, r3
 8004346:	f7fc fae7 	bl	8000918 <Time_GetMinutes>
 800434a:	4603      	mov	r3, r0
 800434c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004350:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004354:	4619      	mov	r1, r3
 8004356:	f7fc f8d7 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, ":", 0);
 800435a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800435e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004362:	f644 11c0 	movw	r1, #18880	; 0x49c0
 8004366:	f6c0 0100 	movt	r1, #2048	; 0x800
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f7fc f8a9 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetSeconds(GetTime()));
 8004372:	f7fc faa7 	bl	80008c4 <GetTime>
 8004376:	4603      	mov	r3, r0
 8004378:	4618      	mov	r0, r3
 800437a:	f7fc faed 	bl	8000958 <Time_GetSeconds>
 800437e:	4603      	mov	r3, r0
 8004380:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004384:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004388:	4619      	mov	r1, r3
 800438a:	f7fc f8bd 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, "", 1);
 800438e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004392:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004396:	f644 11c4 	movw	r1, #18884	; 0x49c4
 800439a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800439e:	f04f 0201 	mov.w	r2, #1
 80043a2:	f7fc f88f 	bl	80004c4 <uart_print_string>
			//////////////////
			vTaskDelay(1000);
 80043a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043aa:	f7fe faa7 	bl	80028fc <vTaskDelay>
	}
 80043ae:	e74d      	b.n	800424c <vTaskDS1821+0x20>

080043b0 <main>:
}



int main()
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af04      	add	r7, sp, #16
	vFreeRTOSInitAll();
 80043b6:	f7ff feeb 	bl	8004190 <vFreeRTOSInitAll>

	RTC_Config();
 80043ba:	f7fc fa55 	bl	8000868 <RTC_Config>

	xTaskCreate( vTaskLED, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, NULL, 2,
 80043be:	f04f 0302 	mov.w	r3, #2
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	9302      	str	r3, [sp, #8]
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	f244 10bd 	movw	r0, #16829	; 0x41bd
 80043da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80043de:	f644 11c8 	movw	r1, #18888	; 0x49c8
 80043e2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80043e6:	f04f 0246 	mov.w	r2, #70	; 0x46
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	f7fe f993 	bl	8002718 <xTaskGenericCreate>
	                        ( xTaskHandle * ) NULL);
	//xTaskCreate(vTaskUSART_TX, (signed char*)"USART_TX", configMINIMAL_STACK_SIZE, NULL, 2,
      //      				( xTaskHandle * ) NULL);
	xTaskCreate( vTaskDS1821, ( signed char * ) "DS1821", configMINIMAL_STACK_SIZE, NULL, 2,
 80043f2:	f04f 0302 	mov.w	r3, #2
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	9302      	str	r3, [sp, #8]
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	9303      	str	r3, [sp, #12]
 800440a:	f244 202d 	movw	r0, #16941	; 0x422d
 800440e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004412:	f644 11cc 	movw	r1, #18892	; 0x49cc
 8004416:	f6c0 0100 	movt	r1, #2048	; 0x800
 800441a:	f04f 0246 	mov.w	r2, #70	; 0x46
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	f7fe f979 	bl	8002718 <xTaskGenericCreate>
		                        ( xTaskHandle * ) NULL);
	vTaskStartScheduler();
 8004426:	f7fe fa97 	bl	8002958 <vTaskStartScheduler>

	for(;;)
	{
//
	}
 800442a:	e7fe      	b.n	800442a <main+0x7a>

0800442c <vApplicationMallocFailedHook>:
		}
		if (err==One_Wire_Success) return 0; else return 1;//uart_print_string(USART1, "GoodLuck!",1);
}

void vApplicationMallocFailedHook( void )
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004430:	e7fe      	b.n	8004430 <vApplicationMallocFailedHook+0x4>
 8004432:	bf00      	nop

08004434 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 800443e:	e7fe      	b.n	800443e <vApplicationStackOverflowHook+0xa>

08004440 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004446:	f7fd fbd7 	bl	8001bf8 <xPortGetFreeHeapSize>
 800444a:	4603      	mov	r3, r0
 800444c:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800444e:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8004450:	f107 0708 	add.w	r7, r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UARTSend>:
*                : - ulCount  : buffer's length
* Output         : None
* Return         : None
*******************************************************************************/
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 8004462:	e018      	b.n	8004496 <UARTSend+0x3e>
    {
        USART_SendData(USART1, (uint16_t) *pucBuffer++);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	f102 0201 	add.w	r2, r2, #1
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004474:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004478:	4619      	mov	r1, r3
 800447a:	f7fd faa3 	bl	80019c4 <USART_SendData>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 800447e:	bf00      	nop
 8004480:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004484:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004488:	f04f 0140 	mov.w	r1, #64	; 0x40
 800448c:	f7fd fac0 	bl	8001a10 <USART_GetFlagStatus>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f4      	beq.n	8004480 <UARTSend+0x28>
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf0c      	ite	eq
 800449c:	2300      	moveq	r3, #0
 800449e:	2301      	movne	r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80044a8:	603a      	str	r2, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1da      	bne.n	8004464 <UARTSend+0xc>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
        {
        }
    }
}
 80044ae:	f107 0708 	add.w	r7, r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop

080044b8 <memcmp>:
 80044b8:	2a03      	cmp	r2, #3
 80044ba:	b4f0      	push	{r4, r5, r6, r7}
 80044bc:	d931      	bls.n	8004522 <memcmp+0x6a>
 80044be:	ea41 0300 	orr.w	r3, r1, r0
 80044c2:	079c      	lsls	r4, r3, #30
 80044c4:	d12e      	bne.n	8004524 <memcmp+0x6c>
 80044c6:	6806      	ldr	r6, [r0, #0]
 80044c8:	680f      	ldr	r7, [r1, #0]
 80044ca:	1f15      	subs	r5, r2, #4
 80044cc:	1d03      	adds	r3, r0, #4
 80044ce:	1d0c      	adds	r4, r1, #4
 80044d0:	42be      	cmp	r6, r7
 80044d2:	f3c5 0c80 	ubfx	ip, r5, #2, #1
 80044d6:	d124      	bne.n	8004522 <memcmp+0x6a>
 80044d8:	2d03      	cmp	r5, #3
 80044da:	462a      	mov	r2, r5
 80044dc:	d91f      	bls.n	800451e <memcmp+0x66>
 80044de:	f1bc 0f00 	cmp.w	ip, #0
 80044e2:	d008      	beq.n	80044f6 <memcmp+0x3e>
 80044e4:	681e      	ldr	r6, [r3, #0]
 80044e6:	6825      	ldr	r5, [r4, #0]
 80044e8:	4621      	mov	r1, r4
 80044ea:	4618      	mov	r0, r3
 80044ec:	3404      	adds	r4, #4
 80044ee:	3304      	adds	r3, #4
 80044f0:	42ae      	cmp	r6, r5
 80044f2:	d011      	beq.n	8004518 <memcmp+0x60>
 80044f4:	e015      	b.n	8004522 <memcmp+0x6a>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4618      	mov	r0, r3
 80044fa:	681c      	ldr	r4, [r3, #0]
 80044fc:	680b      	ldr	r3, [r1, #0]
 80044fe:	1d05      	adds	r5, r0, #4
 8004500:	1d0e      	adds	r6, r1, #4
 8004502:	429c      	cmp	r4, r3
 8004504:	d10d      	bne.n	8004522 <memcmp+0x6a>
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	682e      	ldr	r6, [r5, #0]
 800450c:	680d      	ldr	r5, [r1, #0]
 800450e:	3a04      	subs	r2, #4
 8004510:	1d03      	adds	r3, r0, #4
 8004512:	1d0c      	adds	r4, r1, #4
 8004514:	42ae      	cmp	r6, r5
 8004516:	d104      	bne.n	8004522 <memcmp+0x6a>
 8004518:	3a04      	subs	r2, #4
 800451a:	2a03      	cmp	r2, #3
 800451c:	d8eb      	bhi.n	80044f6 <memcmp+0x3e>
 800451e:	4621      	mov	r1, r4
 8004520:	4618      	mov	r0, r3
 8004522:	b31a      	cbz	r2, 800456c <memcmp+0xb4>
 8004524:	7803      	ldrb	r3, [r0, #0]
 8004526:	780c      	ldrb	r4, [r1, #0]
 8004528:	42a3      	cmp	r3, r4
 800452a:	d10a      	bne.n	8004542 <memcmp+0x8a>
 800452c:	1e55      	subs	r5, r2, #1
 800452e:	2200      	movs	r2, #0
 8004530:	07eb      	lsls	r3, r5, #31
 8004532:	d514      	bpl.n	800455e <memcmp+0xa6>
 8004534:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004538:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800453c:	2201      	movs	r2, #1
 800453e:	42a3      	cmp	r3, r4
 8004540:	d00d      	beq.n	800455e <memcmp+0xa6>
 8004542:	1b18      	subs	r0, r3, r4
 8004544:	e010      	b.n	8004568 <memcmp+0xb0>
 8004546:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800454a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800454e:	42a3      	cmp	r3, r4
 8004550:	d1f7      	bne.n	8004542 <memcmp+0x8a>
 8004552:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004556:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800455a:	42a3      	cmp	r3, r4
 800455c:	d1f1      	bne.n	8004542 <memcmp+0x8a>
 800455e:	42aa      	cmp	r2, r5
 8004560:	f102 0202 	add.w	r2, r2, #2
 8004564:	d1ef      	bne.n	8004546 <memcmp+0x8e>
 8004566:	2000      	movs	r0, #0
 8004568:	bcf0      	pop	{r4, r5, r6, r7}
 800456a:	4770      	bx	lr
 800456c:	4610      	mov	r0, r2
 800456e:	e7fb      	b.n	8004568 <memcmp+0xb0>

08004570 <memcpy>:
 8004570:	2a0f      	cmp	r2, #15
 8004572:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8004576:	f240 80a1 	bls.w	80046bc <memcpy+0x14c>
 800457a:	ea41 0300 	orr.w	r3, r1, r0
 800457e:	079b      	lsls	r3, r3, #30
 8004580:	f040 809e 	bne.w	80046c0 <memcpy+0x150>
 8004584:	680c      	ldr	r4, [r1, #0]
 8004586:	f1a2 0510 	sub.w	r5, r2, #16
 800458a:	6004      	str	r4, [r0, #0]
 800458c:	684b      	ldr	r3, [r1, #4]
 800458e:	46ac      	mov	ip, r5
 8004590:	6043      	str	r3, [r0, #4]
 8004592:	688c      	ldr	r4, [r1, #8]
 8004594:	f1bc 0f0f 	cmp.w	ip, #15
 8004598:	6084      	str	r4, [r0, #8]
 800459a:	68cc      	ldr	r4, [r1, #12]
 800459c:	f3c5 1500 	ubfx	r5, r5, #4, #1
 80045a0:	60c4      	str	r4, [r0, #12]
 80045a2:	f100 0310 	add.w	r3, r0, #16
 80045a6:	f101 0410 	add.w	r4, r1, #16
 80045aa:	d92b      	bls.n	8004604 <memcpy+0x94>
 80045ac:	b175      	cbz	r5, 80045cc <memcpy+0x5c>
 80045ae:	6825      	ldr	r5, [r4, #0]
 80045b0:	f1ac 0c10 	sub.w	ip, ip, #16
 80045b4:	601d      	str	r5, [r3, #0]
 80045b6:	6865      	ldr	r5, [r4, #4]
 80045b8:	605d      	str	r5, [r3, #4]
 80045ba:	68a5      	ldr	r5, [r4, #8]
 80045bc:	609d      	str	r5, [r3, #8]
 80045be:	68e5      	ldr	r5, [r4, #12]
 80045c0:	3410      	adds	r4, #16
 80045c2:	60dd      	str	r5, [r3, #12]
 80045c4:	3310      	adds	r3, #16
 80045c6:	f1bc 0f0f 	cmp.w	ip, #15
 80045ca:	d91b      	bls.n	8004604 <memcpy+0x94>
 80045cc:	6827      	ldr	r7, [r4, #0]
 80045ce:	f104 0610 	add.w	r6, r4, #16
 80045d2:	601f      	str	r7, [r3, #0]
 80045d4:	6867      	ldr	r7, [r4, #4]
 80045d6:	f103 0510 	add.w	r5, r3, #16
 80045da:	605f      	str	r7, [r3, #4]
 80045dc:	68a7      	ldr	r7, [r4, #8]
 80045de:	f1ac 0c20 	sub.w	ip, ip, #32
 80045e2:	609f      	str	r7, [r3, #8]
 80045e4:	68e7      	ldr	r7, [r4, #12]
 80045e6:	60df      	str	r7, [r3, #12]
 80045e8:	6924      	ldr	r4, [r4, #16]
 80045ea:	611c      	str	r4, [r3, #16]
 80045ec:	6877      	ldr	r7, [r6, #4]
 80045ee:	f106 0410 	add.w	r4, r6, #16
 80045f2:	606f      	str	r7, [r5, #4]
 80045f4:	68b7      	ldr	r7, [r6, #8]
 80045f6:	3320      	adds	r3, #32
 80045f8:	60af      	str	r7, [r5, #8]
 80045fa:	68f6      	ldr	r6, [r6, #12]
 80045fc:	f1bc 0f0f 	cmp.w	ip, #15
 8004600:	60ee      	str	r6, [r5, #12]
 8004602:	d8e3      	bhi.n	80045cc <memcpy+0x5c>
 8004604:	f1a2 0810 	sub.w	r8, r2, #16
 8004608:	f028 030f 	bic.w	r3, r8, #15
 800460c:	f002 040f 	and.w	r4, r2, #15
 8004610:	f103 0c10 	add.w	ip, r3, #16
 8004614:	2c03      	cmp	r4, #3
 8004616:	eb00 030c 	add.w	r3, r0, ip
 800461a:	eb01 080c 	add.w	r8, r1, ip
 800461e:	d951      	bls.n	80046c4 <memcpy+0x154>
 8004620:	1f21      	subs	r1, r4, #4
 8004622:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8004626:	4644      	mov	r4, r8
 8004628:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 800462c:	f854 6b04 	ldr.w	r6, [r4], #4
 8004630:	ebc8 010c 	rsb	r1, r8, ip
 8004634:	f10c 0c04 	add.w	ip, ip, #4
 8004638:	461d      	mov	r5, r3
 800463a:	4564      	cmp	r4, ip
 800463c:	f845 6b04 	str.w	r6, [r5], #4
 8004640:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8004644:	d012      	beq.n	800466c <memcpy+0xfc>
 8004646:	b129      	cbz	r1, 8004654 <memcpy+0xe4>
 8004648:	f854 1b04 	ldr.w	r1, [r4], #4
 800464c:	4564      	cmp	r4, ip
 800464e:	f845 1b04 	str.w	r1, [r5], #4
 8004652:	d00b      	beq.n	800466c <memcpy+0xfc>
 8004654:	4627      	mov	r7, r4
 8004656:	f857 1b04 	ldr.w	r1, [r7], #4
 800465a:	462e      	mov	r6, r5
 800465c:	f846 1b04 	str.w	r1, [r6], #4
 8004660:	6864      	ldr	r4, [r4, #4]
 8004662:	606c      	str	r4, [r5, #4]
 8004664:	1d3c      	adds	r4, r7, #4
 8004666:	1d35      	adds	r5, r6, #4
 8004668:	4564      	cmp	r4, ip
 800466a:	d1f3      	bne.n	8004654 <memcpy+0xe4>
 800466c:	f109 0c01 	add.w	ip, r9, #1
 8004670:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8004674:	f002 0203 	and.w	r2, r2, #3
 8004678:	eb08 0109 	add.w	r1, r8, r9
 800467c:	444b      	add	r3, r9
 800467e:	b1d2      	cbz	r2, 80046b6 <memcpy+0x146>
 8004680:	780d      	ldrb	r5, [r1, #0]
 8004682:	189a      	adds	r2, r3, r2
 8004684:	43dc      	mvns	r4, r3
 8004686:	f803 5b01 	strb.w	r5, [r3], #1
 800468a:	1914      	adds	r4, r2, r4
 800468c:	4293      	cmp	r3, r2
 800468e:	f004 0401 	and.w	r4, r4, #1
 8004692:	d010      	beq.n	80046b6 <memcpy+0x146>
 8004694:	b12c      	cbz	r4, 80046a2 <memcpy+0x132>
 8004696:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800469a:	f803 4b01 	strb.w	r4, [r3], #1
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <memcpy+0x146>
 80046a2:	784d      	ldrb	r5, [r1, #1]
 80046a4:	461c      	mov	r4, r3
 80046a6:	f804 5b01 	strb.w	r5, [r4], #1
 80046aa:	788d      	ldrb	r5, [r1, #2]
 80046ac:	3102      	adds	r1, #2
 80046ae:	705d      	strb	r5, [r3, #1]
 80046b0:	1c63      	adds	r3, r4, #1
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d1f5      	bne.n	80046a2 <memcpy+0x132>
 80046b6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80046ba:	4770      	bx	lr
 80046bc:	4603      	mov	r3, r0
 80046be:	e7de      	b.n	800467e <memcpy+0x10e>
 80046c0:	4603      	mov	r3, r0
 80046c2:	e7dd      	b.n	8004680 <memcpy+0x110>
 80046c4:	4641      	mov	r1, r8
 80046c6:	4622      	mov	r2, r4
 80046c8:	e7d9      	b.n	800467e <memcpy+0x10e>
 80046ca:	bf00      	nop

080046cc <memset>:
 80046cc:	b4f0      	push	{r4, r5, r6, r7}
 80046ce:	0784      	lsls	r4, r0, #30
 80046d0:	4603      	mov	r3, r0
 80046d2:	f000 808d 	beq.w	80047f0 <memset+0x124>
 80046d6:	1e54      	subs	r4, r2, #1
 80046d8:	2a00      	cmp	r2, #0
 80046da:	f000 8087 	beq.w	80047ec <memset+0x120>
 80046de:	07e5      	lsls	r5, r4, #31
 80046e0:	b2ce      	uxtb	r6, r1
 80046e2:	d411      	bmi.n	8004708 <memset+0x3c>
 80046e4:	461a      	mov	r2, r3
 80046e6:	f802 6b01 	strb.w	r6, [r2], #1
 80046ea:	4613      	mov	r3, r2
 80046ec:	4615      	mov	r5, r2
 80046ee:	0792      	lsls	r2, r2, #30
 80046f0:	d010      	beq.n	8004714 <memset+0x48>
 80046f2:	1e62      	subs	r2, r4, #1
 80046f4:	2c00      	cmp	r4, #0
 80046f6:	d079      	beq.n	80047ec <memset+0x120>
 80046f8:	f803 6b01 	strb.w	r6, [r3], #1
 80046fc:	4614      	mov	r4, r2
 80046fe:	079a      	lsls	r2, r3, #30
 8004700:	461d      	mov	r5, r3
 8004702:	d007      	beq.n	8004714 <memset+0x48>
 8004704:	3c01      	subs	r4, #1
 8004706:	e7ed      	b.n	80046e4 <memset+0x18>
 8004708:	4603      	mov	r3, r0
 800470a:	f803 6b01 	strb.w	r6, [r3], #1
 800470e:	079a      	lsls	r2, r3, #30
 8004710:	461d      	mov	r5, r3
 8004712:	d1f7      	bne.n	8004704 <memset+0x38>
 8004714:	2c03      	cmp	r4, #3
 8004716:	d952      	bls.n	80047be <memset+0xf2>
 8004718:	b2ce      	uxtb	r6, r1
 800471a:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 800471e:	2c0f      	cmp	r4, #15
 8004720:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8004724:	d92d      	bls.n	8004782 <memset+0xb6>
 8004726:	f1a4 0210 	sub.w	r2, r4, #16
 800472a:	4617      	mov	r7, r2
 800472c:	2f0f      	cmp	r7, #15
 800472e:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8004732:	602b      	str	r3, [r5, #0]
 8004734:	606b      	str	r3, [r5, #4]
 8004736:	60ab      	str	r3, [r5, #8]
 8004738:	60eb      	str	r3, [r5, #12]
 800473a:	f105 0210 	add.w	r2, r5, #16
 800473e:	d916      	bls.n	800476e <memset+0xa2>
 8004740:	b13e      	cbz	r6, 8004752 <memset+0x86>
 8004742:	3f10      	subs	r7, #16
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	6053      	str	r3, [r2, #4]
 8004748:	6093      	str	r3, [r2, #8]
 800474a:	60d3      	str	r3, [r2, #12]
 800474c:	3210      	adds	r2, #16
 800474e:	2f0f      	cmp	r7, #15
 8004750:	d90d      	bls.n	800476e <memset+0xa2>
 8004752:	3f20      	subs	r7, #32
 8004754:	f102 0610 	add.w	r6, r2, #16
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	6053      	str	r3, [r2, #4]
 800475c:	6093      	str	r3, [r2, #8]
 800475e:	60d3      	str	r3, [r2, #12]
 8004760:	6113      	str	r3, [r2, #16]
 8004762:	6153      	str	r3, [r2, #20]
 8004764:	6193      	str	r3, [r2, #24]
 8004766:	61d3      	str	r3, [r2, #28]
 8004768:	3220      	adds	r2, #32
 800476a:	2f0f      	cmp	r7, #15
 800476c:	d8f1      	bhi.n	8004752 <memset+0x86>
 800476e:	f1a4 0210 	sub.w	r2, r4, #16
 8004772:	f022 020f 	bic.w	r2, r2, #15
 8004776:	f004 040f 	and.w	r4, r4, #15
 800477a:	3210      	adds	r2, #16
 800477c:	2c03      	cmp	r4, #3
 800477e:	4415      	add	r5, r2
 8004780:	d91d      	bls.n	80047be <memset+0xf2>
 8004782:	1f27      	subs	r7, r4, #4
 8004784:	463e      	mov	r6, r7
 8004786:	462a      	mov	r2, r5
 8004788:	2e03      	cmp	r6, #3
 800478a:	f842 3b04 	str.w	r3, [r2], #4
 800478e:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8004792:	d90d      	bls.n	80047b0 <memset+0xe4>
 8004794:	b127      	cbz	r7, 80047a0 <memset+0xd4>
 8004796:	3e04      	subs	r6, #4
 8004798:	2e03      	cmp	r6, #3
 800479a:	f842 3b04 	str.w	r3, [r2], #4
 800479e:	d907      	bls.n	80047b0 <memset+0xe4>
 80047a0:	4617      	mov	r7, r2
 80047a2:	f847 3b04 	str.w	r3, [r7], #4
 80047a6:	3e08      	subs	r6, #8
 80047a8:	6053      	str	r3, [r2, #4]
 80047aa:	1d3a      	adds	r2, r7, #4
 80047ac:	2e03      	cmp	r6, #3
 80047ae:	d8f7      	bhi.n	80047a0 <memset+0xd4>
 80047b0:	1f23      	subs	r3, r4, #4
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	1d13      	adds	r3, r2, #4
 80047b8:	f004 0403 	and.w	r4, r4, #3
 80047bc:	18ed      	adds	r5, r5, r3
 80047be:	b1ac      	cbz	r4, 80047ec <memset+0x120>
 80047c0:	b2c9      	uxtb	r1, r1
 80047c2:	43ea      	mvns	r2, r5
 80047c4:	192c      	adds	r4, r5, r4
 80047c6:	f805 1b01 	strb.w	r1, [r5], #1
 80047ca:	18a3      	adds	r3, r4, r2
 80047cc:	42a5      	cmp	r5, r4
 80047ce:	f003 0201 	and.w	r2, r3, #1
 80047d2:	d00b      	beq.n	80047ec <memset+0x120>
 80047d4:	b11a      	cbz	r2, 80047de <memset+0x112>
 80047d6:	f805 1b01 	strb.w	r1, [r5], #1
 80047da:	42a5      	cmp	r5, r4
 80047dc:	d006      	beq.n	80047ec <memset+0x120>
 80047de:	462b      	mov	r3, r5
 80047e0:	f803 1b01 	strb.w	r1, [r3], #1
 80047e4:	7069      	strb	r1, [r5, #1]
 80047e6:	1c5d      	adds	r5, r3, #1
 80047e8:	42a5      	cmp	r5, r4
 80047ea:	d1f8      	bne.n	80047de <memset+0x112>
 80047ec:	bcf0      	pop	{r4, r5, r6, r7}
 80047ee:	4770      	bx	lr
 80047f0:	4605      	mov	r5, r0
 80047f2:	4614      	mov	r4, r2
 80047f4:	e78e      	b.n	8004714 <memset+0x48>
 80047f6:	bf00      	nop

080047f8 <strncpy>:
 80047f8:	ea41 0300 	orr.w	r3, r1, r0
 80047fc:	079b      	lsls	r3, r3, #30
 80047fe:	b4f0      	push	{r4, r5, r6, r7}
 8004800:	d174      	bne.n	80048ec <strncpy+0xf4>
 8004802:	2a03      	cmp	r2, #3
 8004804:	d972      	bls.n	80048ec <strncpy+0xf4>
 8004806:	460c      	mov	r4, r1
 8004808:	f854 5b04 	ldr.w	r5, [r4], #4
 800480c:	1f16      	subs	r6, r2, #4
 800480e:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8004812:	ea27 0705 	bic.w	r7, r7, r5
 8004816:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800481a:	4603      	mov	r3, r0
 800481c:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 8004820:	d131      	bne.n	8004886 <strncpy+0x8e>
 8004822:	4603      	mov	r3, r0
 8004824:	2e03      	cmp	r6, #3
 8004826:	4632      	mov	r2, r6
 8004828:	f843 5b04 	str.w	r5, [r3], #4
 800482c:	d92a      	bls.n	8004884 <strncpy+0x8c>
 800482e:	f1bc 0f00 	cmp.w	ip, #0
 8004832:	d00a      	beq.n	800484a <strncpy+0x52>
 8004834:	4621      	mov	r1, r4
 8004836:	f854 5b04 	ldr.w	r5, [r4], #4
 800483a:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800483e:	ea26 0605 	bic.w	r6, r6, r5
 8004842:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8004846:	d018      	beq.n	800487a <strncpy+0x82>
 8004848:	e01d      	b.n	8004886 <strncpy+0x8e>
 800484a:	4626      	mov	r6, r4
 800484c:	f856 5b04 	ldr.w	r5, [r6], #4
 8004850:	4621      	mov	r1, r4
 8004852:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8004856:	ea27 0705 	bic.w	r7, r7, r5
 800485a:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800485e:	d112      	bne.n	8004886 <strncpy+0x8e>
 8004860:	f843 5b04 	str.w	r5, [r3], #4
 8004864:	6865      	ldr	r5, [r4, #4]
 8004866:	4631      	mov	r1, r6
 8004868:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800486c:	ea26 0605 	bic.w	r6, r6, r5
 8004870:	3a04      	subs	r2, #4
 8004872:	1d0c      	adds	r4, r1, #4
 8004874:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8004878:	d105      	bne.n	8004886 <strncpy+0x8e>
 800487a:	3a04      	subs	r2, #4
 800487c:	2a03      	cmp	r2, #3
 800487e:	f843 5b04 	str.w	r5, [r3], #4
 8004882:	d8e2      	bhi.n	800484a <strncpy+0x52>
 8004884:	4621      	mov	r1, r4
 8004886:	b37a      	cbz	r2, 80048e8 <strncpy+0xf0>
 8004888:	780d      	ldrb	r5, [r1, #0]
 800488a:	3a01      	subs	r2, #1
 800488c:	f803 5b01 	strb.w	r5, [r3], #1
 8004890:	b19d      	cbz	r5, 80048ba <strncpy+0xc2>
 8004892:	f012 0f01 	tst.w	r2, #1
 8004896:	461c      	mov	r4, r3
 8004898:	d12a      	bne.n	80048f0 <strncpy+0xf8>
 800489a:	4623      	mov	r3, r4
 800489c:	b322      	cbz	r2, 80048e8 <strncpy+0xf0>
 800489e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80048a2:	3a01      	subs	r2, #1
 80048a4:	f803 5b01 	strb.w	r5, [r3], #1
 80048a8:	b13d      	cbz	r5, 80048ba <strncpy+0xc2>
 80048aa:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80048ae:	3a01      	subs	r2, #1
 80048b0:	7065      	strb	r5, [r4, #1]
 80048b2:	1c5c      	adds	r4, r3, #1
 80048b4:	4623      	mov	r3, r4
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	d1ef      	bne.n	800489a <strncpy+0xa2>
 80048ba:	b1aa      	cbz	r2, 80048e8 <strncpy+0xf0>
 80048bc:	2100      	movs	r1, #0
 80048be:	189c      	adds	r4, r3, r2
 80048c0:	43da      	mvns	r2, r3
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	18a2      	adds	r2, r4, r2
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	f002 0201 	and.w	r2, r2, #1
 80048ce:	d00b      	beq.n	80048e8 <strncpy+0xf0>
 80048d0:	b11a      	cbz	r2, 80048da <strncpy+0xe2>
 80048d2:	f803 1b01 	strb.w	r1, [r3], #1
 80048d6:	42a3      	cmp	r3, r4
 80048d8:	d006      	beq.n	80048e8 <strncpy+0xf0>
 80048da:	461a      	mov	r2, r3
 80048dc:	f802 1b01 	strb.w	r1, [r2], #1
 80048e0:	7059      	strb	r1, [r3, #1]
 80048e2:	1c53      	adds	r3, r2, #1
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d1f8      	bne.n	80048da <strncpy+0xe2>
 80048e8:	bcf0      	pop	{r4, r5, r6, r7}
 80048ea:	4770      	bx	lr
 80048ec:	4603      	mov	r3, r0
 80048ee:	e7ca      	b.n	8004886 <strncpy+0x8e>
 80048f0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80048f4:	461c      	mov	r4, r3
 80048f6:	f804 5b01 	strb.w	r5, [r4], #1
 80048fa:	3a01      	subs	r2, #1
 80048fc:	4623      	mov	r3, r4
 80048fe:	2d00      	cmp	r5, #0
 8004900:	d1cb      	bne.n	800489a <strncpy+0xa2>
 8004902:	e7da      	b.n	80048ba <strncpy+0xc2>
 8004904:	33323130 	.word	0x33323130
 8004908:	37363534 	.word	0x37363534
 800490c:	00003938 	.word	0x00003938
 8004910:	33323130 	.word	0x33323130
 8004914:	37363534 	.word	0x37363534
 8004918:	42413938 	.word	0x42413938
 800491c:	46454443 	.word	0x46454443
 8004920:	00000000 	.word	0x00000000
 8004924:	454c4449 	.word	0x454c4449
 8004928:	00000000 	.word	0x00000000
 800492c:	20726d54 	.word	0x20726d54
 8004930:	00637653 	.word	0x00637653
 8004934:	3d3d3d0a 	.word	0x3d3d3d0a
 8004938:	55203d3d 	.word	0x55203d3d
 800493c:	31545241 	.word	0x31545241
 8004940:	d0b8d020 	.word	0xd0b8d020
 8004944:	d1b8d0bd 	.word	0xd1b8d0bd
 8004948:	d0b8d086 	.word	0xd0b8d086
 800494c:	d0bbd0b0 	.word	0xd0bbd0b0
 8004950:	d0b7d0b8 	.word	0xd0b7d0b8
 8004954:	d080d1b8 	.word	0xd080d1b8
 8004958:	d0b2d0be 	.word	0xd0b2d0be
 800495c:	20bdd0b0 	.word	0x20bdd0b0
 8004960:	3d3d3d3d 	.word	0x3d3d3d3d
 8004964:	0000003d 	.word	0x0000003d
 8004968:	8bd1a2d0 	.word	0x8bd1a2d0
 800496c:	86d1bdd0 	.word	0x86d1bdd0
 8004970:	00000000 	.word	0x00000000
 8004974:	86d1a1d0 	.word	0x86d1a1d0
 8004978:	bad083d1 	.word	0xbad083d1
 800497c:	202cbed0 	.word	0x202cbed0
 8004980:	82d1bed0 	.word	0x82d1bed0
 8004984:	b0d0bbd0 	.word	0xb0d0bbd0
 8004988:	8cd1b4d0 	.word	0x8cd1b4d0
 800498c:	d0bcd020 	.word	0xd0bcd020
 8004990:	d1bdd0b5 	.word	0xd1bdd0b5
 8004994:	002e2e8f 	.word	0x002e2e8f
 8004998:	b5d0a2d0 	.word	0xb5d0a2d0
 800499c:	bfd0bcd0 	.word	0xbfd0bcd0
 80049a0:	80d1b5d0 	.word	0x80d1b5d0
 80049a4:	82d1b0d0 	.word	0x82d1b0d0
 80049a8:	80d183d1 	.word	0x80d183d1
 80049ac:	203ab0d0 	.word	0x203ab0d0
 80049b0:	00002020 	.word	0x00002020
 80049b4:	74705520 	.word	0x74705520
 80049b8:	3a656d69 	.word	0x3a656d69
 80049bc:	00000020 	.word	0x00000020
 80049c0:	0000003a 	.word	0x0000003a
 80049c4:	00000000 	.word	0x00000000
 80049c8:	0044454c 	.word	0x0044454c
 80049cc:	38315344 	.word	0x38315344
 80049d0:	00003132 	.word	0x00003132
 80049d4:	63637553 	.word	0x63637553
 80049d8:	21737365 	.word	0x21737365
 80049dc:	6f6f4720 	.word	0x6f6f4720
 80049e0:	63754c64 	.word	0x63754c64
 80049e4:	0000216b 	.word	0x0000216b
 80049e8:	65206f4e 	.word	0x65206f4e
 80049ec:	206f6863 	.word	0x206f6863
 80049f0:	6d6f7266 	.word	0x6d6f7266
 80049f4:	76656420 	.word	0x76656420
 80049f8:	21656369 	.word	0x21656369
 80049fc:	00000000 	.word	0x00000000
 8004a00:	206e6950 	.word	0x206e6950
 8004a04:	20574f4c 	.word	0x20574f4c
 8004a08:	6f727265 	.word	0x6f727265
 8004a0c:	00002172 	.word	0x00002172
 8004a10:	20435243 	.word	0x20435243
 8004a14:	20746f6e 	.word	0x20746f6e
 8004a18:	6374616d 	.word	0x6374616d
 8004a1c:	00002168 	.word	0x00002168

08004a20 <ucExpectedStackBytes.5898>:
 8004a20:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8004a30:	a5a5a5a5                                ....
