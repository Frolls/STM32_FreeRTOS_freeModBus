
stm32vld_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004890  080001d0  080001d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000031  08004a60  08004a60  00010020  2**0
                  CONTENTS, READONLY
  3 .data         00000020  20000000  08005030  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001d58  20000020  08005050  00010020  2**2
                  ALLOC
  5 ._user_heap_stack 00000100  20001d78  08006da8  00010020  2**0
                  ALLOC
  6 .debug_info   00009e1f  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021bf  00000000  00000000  00019e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004d9c  00000000  00000000  0001c02f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e08  00000000  00000000  00020dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c70  00000000  00000000  00021bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000499e  00000000  00000000  00022848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003d09  00000000  00000000  000271e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  0002aeef  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00002c48  00000000  00000000  0002af60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <DS1821_Start_Conversion>:
 *      Author: frolls
 */
#include "ds1821.h"

unsigned char DS1821_Start_Conversion (GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
	unsigned char cnt;
	cnt=One_Wire_Reset(GPIOx, PINx);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	4619      	mov	r1, r3
 80001e2:	f000 f843 	bl	800026c <One_Wire_Reset>
 80001e6:	4603      	mov	r3, r0
 80001e8:	73fb      	strb	r3, [r7, #15]
	if (cnt!=One_Wire_Success) return cnt;
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <DS1821_Start_Conversion+0x24>
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	e009      	b.n	8000208 <DS1821_Start_Conversion+0x38>
	One_Wire_Write_Byte(DS1821_START_CONVERT_T,GPIOx, PINx);
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	f04f 00ee 	mov.w	r0, #238	; 0xee
 80001fc:	6879      	ldr	r1, [r7, #4]
 80001fe:	461a      	mov	r2, r3
 8000200:	f000 f880 	bl	8000304 <One_Wire_Write_Byte>
	return One_Wire_Success;
 8000204:	f04f 0300 	mov.w	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	f107 0710 	add.w	r7, r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop

08000214 <DS1821_Read_Temp>:
	One_Wire_Write_Byte(DS1821_STOP_CONVERT_T,GPIOx, PINx);
	return One_Wire_Success;
}

unsigned char DS1821_Read_Temp(unsigned int * temperature, GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
	unsigned char tmp;
	tmp=One_Wire_Reset(GPIOx, PINx);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	b29b      	uxth	r3, r3
 8000224:	68b8      	ldr	r0, [r7, #8]
 8000226:	4619      	mov	r1, r3
 8000228:	f000 f820 	bl	800026c <One_Wire_Reset>
 800022c:	4603      	mov	r3, r0
 800022e:	75fb      	strb	r3, [r7, #23]
	if (tmp!=One_Wire_Success) return tmp;
 8000230:	7dfb      	ldrb	r3, [r7, #23]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <DS1821_Read_Temp+0x26>
 8000236:	7dfb      	ldrb	r3, [r7, #23]
 8000238:	e013      	b.n	8000262 <DS1821_Read_Temp+0x4e>
	One_Wire_Write_Byte(DS1821_READ_TEMPERATURE, GPIOx, PINx);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	b29b      	uxth	r3, r3
 800023e:	f04f 00aa 	mov.w	r0, #170	; 0xaa
 8000242:	68b9      	ldr	r1, [r7, #8]
 8000244:	461a      	mov	r2, r3
 8000246:	f000 f85d 	bl	8000304 <One_Wire_Write_Byte>
	* temperature = One_Wire_Read_Byte(GPIOx, PINx);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	b29b      	uxth	r3, r3
 800024e:	68b8      	ldr	r0, [r7, #8]
 8000250:	4619      	mov	r1, r3
 8000252:	f000 f8b9 	bl	80003c8 <One_Wire_Read_Byte>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]
	return One_Wire_Success;
 800025e:	f04f 0300 	mov.w	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	f107 0718 	add.w	r7, r7, #24
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <One_Wire_Reset>:
 */

#include "oneWire.h"

unsigned int One_Wire_Reset(GPIO_TypeDef * GPIOx, u16 PINx)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	unsigned int tmp;
	PIN_IN(GPIOx, PINx);
 8000278:	887b      	ldrh	r3, [r7, #2]
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	4619      	mov	r1, r3
 800027e:	f000 f9eb 	bl	8000658 <PIN_IN>
	if ((PIN_SYG(GPIOx, PINx))==0)	return One_Wire_Bus_Low_Error;
 8000282:	887b      	ldrh	r3, [r7, #2]
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	4619      	mov	r1, r3
 8000288:	f000 f9ce 	bl	8000628 <PIN_SYG>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d102      	bne.n	8000298 <One_Wire_Reset+0x2c>
 8000292:	f04f 0302 	mov.w	r3, #2
 8000296:	e02f      	b.n	80002f8 <One_Wire_Reset+0x8c>
	PIN_OUT_PP(GPIOx, PINx);
 8000298:	887b      	ldrh	r3, [r7, #2]
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	4619      	mov	r1, r3
 800029e:	f000 f9f3 	bl	8000688 <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 80002a2:	887b      	ldrh	r3, [r7, #2]
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	4619      	mov	r1, r3
 80002a8:	f000 f9b0 	bl	800060c <PIN_OFF>
	delay_us(Time_Reset_Low);
 80002ac:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80002b0:	f000 fa92 	bl	80007d8 <delay_us>
	PIN_ON(GPIOx, PINx);
 80002b4:	887b      	ldrh	r3, [r7, #2]
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	4619      	mov	r1, r3
 80002ba:	f000 f999 	bl	80005f0 <PIN_ON>
	PIN_IN(GPIOx, PINx);
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	4619      	mov	r1, r3
 80002c4:	f000 f9c8 	bl	8000658 <PIN_IN>
	delay_us(Time_Pulse_Delay_High);
 80002c8:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80002cc:	f000 fa84 	bl	80007d8 <delay_us>
	if ((PIN_SYG(GPIOx, PINx))==0) tmp=One_Wire_Success;
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	4619      	mov	r1, r3
 80002d6:	f000 f9a7 	bl	8000628 <PIN_SYG>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <One_Wire_Reset+0x7c>
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	e002      	b.n	80002ee <One_Wire_Reset+0x82>
		else tmp=One_Wire_Error_No_Echo;
 80002e8:	f04f 0301 	mov.w	r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
	delay_us(Time_After_Reset);
 80002ee:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80002f2:	f000 fa71 	bl	80007d8 <delay_us>
	return tmp;
 80002f6:	68fb      	ldr	r3, [r7, #12]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	f107 0710 	add.w	r7, r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop

08000304 <One_Wire_Write_Byte>:

void One_Wire_Write_Byte(unsigned char Byte,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6039      	str	r1, [r7, #0]
 800030c:	4613      	mov	r3, r2
 800030e:	4602      	mov	r2, r0
 8000310:	71fa      	strb	r2, [r7, #7]
 8000312:	80bb      	strh	r3, [r7, #4]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++) One_Wire_Write_Bit(Byte&(1<<cnt),GPIOx, PINx);
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e013      	b.n	8000344 <One_Wire_Write_Byte+0x40>
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f04f 0201 	mov.w	r2, #1
 8000322:	fa02 f303 	lsl.w	r3, r2, r3
 8000326:	b2da      	uxtb	r2, r3
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4013      	ands	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	b2da      	uxtb	r2, r3
 8000330:	88bb      	ldrh	r3, [r7, #4]
 8000332:	4610      	mov	r0, r2
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	f000 f80c 	bl	8000354 <One_Wire_Write_Bit>
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	f103 0301 	add.w	r3, r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	2b08      	cmp	r3, #8
 8000348:	d1e8      	bne.n	800031c <One_Wire_Write_Byte+0x18>
}
 800034a:	f107 0710 	add.w	r7, r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop

08000354 <One_Wire_Write_Bit>:

void One_Wire_Write_Bit (unsigned char Bit,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6039      	str	r1, [r7, #0]
 800035c:	4613      	mov	r3, r2
 800035e:	4602      	mov	r2, r0
 8000360:	71fa      	strb	r2, [r7, #7]
 8000362:	80bb      	strh	r3, [r7, #4]
	PIN_OUT_PP(GPIOx, PINx);
 8000364:	88bb      	ldrh	r3, [r7, #4]
 8000366:	6838      	ldr	r0, [r7, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	f000 f98d 	bl	8000688 <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	6838      	ldr	r0, [r7, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	f000 f94a 	bl	800060c <PIN_OFF>
	if (Bit==0)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d10d      	bne.n	800039a <One_Wire_Write_Bit+0x46>
	{
		delay_us(Time_Pulse_Delay_High);
 800037e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000382:	f000 fa29 	bl	80007d8 <delay_us>
		PIN_ON(GPIOx, PINx);
 8000386:	88bb      	ldrh	r3, [r7, #4]
 8000388:	6838      	ldr	r0, [r7, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	f000 f930 	bl	80005f0 <PIN_ON>
		delay_us(Time_Pulse_Delay_Low);
 8000390:	f04f 000a 	mov.w	r0, #10
 8000394:	f000 fa20 	bl	80007d8 <delay_us>
 8000398:	e00c      	b.n	80003b4 <One_Wire_Write_Bit+0x60>
	}
	else
	{
		delay_us(Time_Pulse_Delay_Low);
 800039a:	f04f 000a 	mov.w	r0, #10
 800039e:	f000 fa1b 	bl	80007d8 <delay_us>
		PIN_ON(GPIOx, PINx);
 80003a2:	88bb      	ldrh	r3, [r7, #4]
 80003a4:	6838      	ldr	r0, [r7, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	f000 f922 	bl	80005f0 <PIN_ON>
		delay_us(Time_Pulse_Delay_High);
 80003ac:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80003b0:	f000 fa12 	bl	80007d8 <delay_us>
	}
	PIN_IN(GPIOx, PINx);
 80003b4:	88bb      	ldrh	r3, [r7, #4]
 80003b6:	6838      	ldr	r0, [r7, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	f000 f94d 	bl	8000658 <PIN_IN>
}
 80003be:	f107 0708 	add.w	r7, r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop

080003c8 <One_Wire_Read_Byte>:

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
	unsigned char tmp=0;
 80003d4:	f04f 0300 	mov.w	r3, #0
 80003d8:	73fb      	strb	r3, [r7, #15]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 80003da:	f04f 0300 	mov.w	r3, #0
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	e015      	b.n	800040e <One_Wire_Read_Byte+0x46>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
 80003e2:	887b      	ldrh	r3, [r7, #2]
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	4619      	mov	r1, r3
 80003e8:	f000 f81e 	bl	8000428 <One_Wire_Read_Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d009      	beq.n	8000406 <One_Wire_Read_Byte+0x3e>
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	f04f 0201 	mov.w	r2, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	4313      	orrs	r3, r2
 8000402:	b2db      	uxtb	r3, r3
 8000404:	73fb      	strb	r3, [r7, #15]

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
	unsigned char tmp=0;
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	f103 0301 	add.w	r3, r3, #1
 800040c:	73bb      	strb	r3, [r7, #14]
 800040e:	7bbb      	ldrb	r3, [r7, #14]
 8000410:	2b08      	cmp	r3, #8
 8000412:	d1e6      	bne.n	80003e2 <One_Wire_Read_Byte+0x1a>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
	delay_us(Time_Pulse_Delay_High);
 8000414:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000418:	f000 f9de 	bl	80007d8 <delay_us>
	return tmp;
 800041c:	7bfb      	ldrb	r3, [r7, #15]
}
 800041e:	4618      	mov	r0, r3
 8000420:	f107 0710 	add.w	r7, r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <One_Wire_Read_Bit>:

unsigned char One_Wire_Read_Bit (GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	807b      	strh	r3, [r7, #2]
		unsigned char tmp;
	 	PIN_OUT_PP(GPIOx, PINx);
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	4619      	mov	r1, r3
 800043a:	f000 f925 	bl	8000688 <PIN_OUT_PP>
		PIN_OFF(GPIOx, PINx);
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	f000 f8e2 	bl	800060c <PIN_OFF>
		delay_us(Time_Hold_Down);
 8000448:	f04f 0002 	mov.w	r0, #2
 800044c:	f000 f9c4 	bl	80007d8 <delay_us>
		PIN_IN(GPIOx, PINx);
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	4619      	mov	r1, r3
 8000456:	f000 f8ff 	bl	8000658 <PIN_IN>
		delay_us(Time_Pulse_Delay_Low);
 800045a:	f04f 000a 	mov.w	r0, #10
 800045e:	f000 f9bb 	bl	80007d8 <delay_us>
		if ((PIN_SYG(GPIOx, PINx))!=0)	tmp = 1;
 8000462:	887b      	ldrh	r3, [r7, #2]
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	4619      	mov	r1, r3
 8000468:	f000 f8de 	bl	8000628 <PIN_SYG>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d003      	beq.n	800047a <One_Wire_Read_Bit+0x52>
 8000472:	f04f 0301 	mov.w	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e002      	b.n	8000480 <One_Wire_Read_Bit+0x58>
			else tmp = 0;
 800047a:	f04f 0300 	mov.w	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
		delay_us(Time_Pulse_Delay_High);
 8000480:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000484:	f000 f9a8 	bl	80007d8 <delay_us>
		return tmp;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	f107 0710 	add.w	r7, r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <uart_send_char>:
 *  Created on: 22.03.2013
 *      Author: frolls
 */
#include "serial.h"
void uart_send_char (USART_TypeDef * USARTx, char dat)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	while (!(USARTx->SR & USART_SR_TXE)) {}
 80004a0:	bf00      	nop
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f8      	beq.n	80004a2 <uart_send_char+0xe>
  	USART_SendData(USARTx,dat);
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4619      	mov	r1, r3
 80004b8:	f001 fa8a 	bl	80019d0 <USART_SendData>
}
 80004bc:	f107 0708 	add.w	r7, r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <uart_print_string>:

void uart_print_string(USART_TypeDef * USARTx, char * string, char newline)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	4613      	mov	r3, r2
 80004d0:	71fb      	strb	r3, [r7, #7]
	while (*string != 0x00){ uart_send_char(USARTx, *string++);}
 80004d2:	e009      	b.n	80004e8 <uart_print_string+0x24>
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	f102 0201 	add.w	r2, r2, #1
 80004de:	60ba      	str	r2, [r7, #8]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	4619      	mov	r1, r3
 80004e4:	f7ff ffd6 	bl	8000494 <uart_send_char>
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1f1      	bne.n	80004d4 <uart_print_string+0x10>
	if (newline !=0 ){
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d004      	beq.n	8000500 <uart_print_string+0x3c>
		uart_send_char(USARTx, '\n');
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f04f 010a 	mov.w	r1, #10
 80004fc:	f7ff ffca 	bl	8000494 <uart_send_char>
		//uart_send_char(USARTx, 13);
	}
}
 8000500:	f107 0710 	add.w	r7, r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <uart_print_value>:

void uart_print_value(USART_TypeDef * USARTx, long val)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	char buffer[10] = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	f103 0304 	add.w	r3, r3, #4
 8000520:	f04f 0200 	mov.w	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	f103 0304 	add.w	r3, r3, #4
 800052a:	f04f 0200 	mov.w	r2, #0
 800052e:	801a      	strh	r2, [r3, #0]
 8000530:	f103 0302 	add.w	r3, r3, #2
	char * head = buffer;
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	617b      	str	r3, [r7, #20]
	char cnt=0;
 800053a:	f04f 0300 	mov.w	r3, #0
 800053e:	74fb      	strb	r3, [r7, #19]
	if (val!=0)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d045      	beq.n	80005d2 <uart_print_value+0xca>
	{
		while( val )
 8000546:	e02e      	b.n	80005a6 <uart_print_value+0x9e>
		{
    		*head++ = (val % 10)["0123456789"];
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	f246 6367 	movw	r3, #26215	; 0x6667
 800054e:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000552:	fb83 2301 	smull	r2, r3, r3, r1
 8000556:	ea4f 02a3 	mov.w	r2, r3, asr #2
 800055a:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800055e:	1ad2      	subs	r2, r2, r3
 8000560:	4613      	mov	r3, r2
 8000562:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000566:	189b      	adds	r3, r3, r2
 8000568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	f644 132c 	movw	r3, #18732	; 0x492c
 8000572:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000576:	5c9a      	ldrb	r2, [r3, r2]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	f103 0301 	add.w	r3, r3, #1
 8000582:	617b      	str	r3, [r7, #20]
    		val /= 10;
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	f246 6367 	movw	r3, #26215	; 0x6667
 800058a:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800058e:	fb83 1302 	smull	r1, r3, r3, r2
 8000592:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000596:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800059a:	1acb      	subs	r3, r1, r3
 800059c:	603b      	str	r3, [r7, #0]
			cnt++;
 800059e:	7cfb      	ldrb	r3, [r7, #19]
 80005a0:	f103 0301 	add.w	r3, r3, #1
 80005a4:	74fb      	strb	r3, [r7, #19]
	char buffer[10] = {0};
	char * head = buffer;
	char cnt=0;
	if (val!=0)
	{
		while( val )
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1cd      	bne.n	8000548 <uart_print_value+0x40>
		{
    		*head++ = (val % 10)["0123456789"];
    		val /= 10;
			cnt++;
		}
		while (cnt!=0){ cnt--; uart_send_char(USARTx, (buffer[cnt])); }
 80005ac:	e00d      	b.n	80005ca <uart_print_value+0xc2>
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
 80005b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80005b4:	74fb      	strb	r3, [r7, #19]
 80005b6:	7cfb      	ldrb	r3, [r7, #19]
 80005b8:	f107 0218 	add.w	r2, r7, #24
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f7ff ff65 	bl	8000494 <uart_send_char>
 80005ca:	7cfb      	ldrb	r3, [r7, #19]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1ee      	bne.n	80005ae <uart_print_value+0xa6>
 80005d0:	e004      	b.n	80005dc <uart_print_value+0xd4>
	}
	else
	{
		uart_send_char(USARTx, ('0'));
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f04f 0130 	mov.w	r1, #48	; 0x30
 80005d8:	f7ff ff5c 	bl	8000494 <uart_send_char>
	}
}
 80005dc:	f107 0718 	add.w	r7, r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <smallLEDPanel_Init>:
 *      Author: frolls
 */
#include "smallLEDPanel.h"

void smallLEDPanel_Init(void)//GPIO_TypeDef * GPIOx, u16 PIN_CLK, u16 PIN_SDI, u16 PIN_LE)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	//GPIO_InitTypeDef GPIO_InitStructure;
	//GPIO_InitStructure.GPIO_Pin   = PIN_CLK ;//| PIN_SDI;// | PIN_LE;
	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
	//GPIO_Init(GPIOx, &GPIO_InitStructure);
}
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <PIN_ON>:

#include "stm32_GPIO.h"
#include "stm32f10x_gpio.h"

void PIN_ON(GPIO_TypeDef * GPIOx,u16 PINx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR=PINx;
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	611a      	str	r2, [r3, #16]
	//GPIOx->ODR=GPIOx->IDR|(PINx);
}
 8000602:	f107 070c 	add.w	r7, r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <PIN_OFF>:

void PIN_OFF(GPIO_TypeDef * GPIOx,u16 PINx)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	807b      	strh	r3, [r7, #2]
	GPIOx->BRR=PINx;
 8000618:	887a      	ldrh	r2, [r7, #2]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	615a      	str	r2, [r3, #20]
	//GPIOx->ODR=GPIOx->IDR&(~(PINx));
}
 800061e:	f107 070c 	add.w	r7, r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <PIN_SYG>:

u8 PIN_SYG(GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR&PINx)!=0)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	4013      	ands	r3, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <PIN_SYG+0x1e>
	{return 1;}
 8000640:	f04f 0301 	mov.w	r3, #1
 8000644:	e001      	b.n	800064a <PIN_SYG+0x22>
	else
	{return 0;}
 8000646:	f04f 0300 	mov.w	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	f107 070c 	add.w	r7, r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <PIN_IN>:

void PIN_IN (GPIO_TypeDef * GPIOx,u16 PINx)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 8000668:	f04f 0303 	mov.w	r3, #3
 800066c:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 800066e:	f04f 0304 	mov.w	r3, #4
 8000672:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	f000 face 	bl	8000c1c <GPIO_Init>
}
 8000680:	f107 0710 	add.w	r7, r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <PIN_OUT_PP>:

void PIN_OUT_PP (GPIO_TypeDef * GPIOx,u16 PINx)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000694:	887b      	ldrh	r3, [r7, #2]
 8000696:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 8000698:	f04f 0303 	mov.w	r3, #3
 800069c:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_Out_PP;
 800069e:	f04f 0310 	mov.w	r3, #16
 80006a2:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 fab6 	bl	8000c1c <GPIO_Init>
}
 80006b0:	f107 0710 	add.w	r7, r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <TIM6Init>:
 *      Author: frolls
 */
#include "timer6.h"

void TIM6Init()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* Не забываем затактировать таймер */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80006bc:	f04f 0010 	mov.w	r0, #16
 80006c0:	f04f 0101 	mov.w	r1, #1
 80006c4:	f000 feae 	bl	8001424 <RCC_APB1PeriphClockCmd>

  //uart_print_string(USART1, "TIM6 initialized!", 1);
  //uart_print_string(USART1, "TIM_TimeBaseStructure.TIM_Prescaler: ", 0);
  //uart_print_value(USART1, TIM_TimeBaseStructure.TIM_Prescaler);
  //uart_print_string(USART1, "", 1);
}
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop

080006cc <TIM6_DAC_IRQHandler>:
}

volatile uint8_t delay_end = 0;

void TIM6_DAC_IRQHandler()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* Так как этот обработчик вызывается и для ЦАП, нужно проверять,
   * произошло ли прерывание по переполнению счётчика таймера TIM6.
   */
	if(TIM_GetITStatus(TIM6, TIM_FLAG_Update)!=RESET)
 80006d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006d8:	f04f 0101 	mov.w	r1, #1
 80006dc:	f000 ffee 	bl	80016bc <TIM_GetITStatus>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d01e      	beq.n	8000724 <TIM6_DAC_IRQHandler+0x58>
	  {
	   TIM_ClearITPendingBit(TIM6, TIM_FLAG_Update);
 80006e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006ee:	f04f 0101 	mov.w	r1, #1
 80006f2:	f001 f813 	bl	800171c <TIM_ClearITPendingBit>
	   TIM_Cmd(TIM6, DISABLE);
 80006f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006fa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006fe:	f04f 0100 	mov.w	r1, #0
 8000702:	f000 ffad 	bl	8001660 <TIM_Cmd>
	   TIM_SetCounter(TIM6, 0);
 8000706:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800070a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800070e:	f04f 0100 	mov.w	r1, #0
 8000712:	f000 ffc5 	bl	80016a0 <TIM_SetCounter>
	   delay_end = 1;
 8000716:	f240 0320 	movw	r3, #32
 800071a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800071e:	f04f 0201 	mov.w	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
	  }
}
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop

08000728 <delay_ms>:

void delay_ms(uint16_t delay)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	 TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY)*1000 - 1;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800073a:	f240 021c 	movw	r2, #28
 800073e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000742:	6811      	ldr	r1, [r2, #0]
 8000744:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000748:	f2c4 321b 	movt	r2, #17179	; 0x431b
 800074c:	fba2 0201 	umull	r0, r2, r2, r1
 8000750:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000754:	b292      	uxth	r2, r2
 8000756:	4611      	mov	r1, r2
 8000758:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800075c:	1a89      	subs	r1, r1, r2
 800075e:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8000762:	188a      	adds	r2, r1, r2
 8000764:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000768:	b292      	uxth	r2, r2
 800076a:	f102 32ff 	add.w	r2, r2, #4294967295
 800076e:	b292      	uxth	r2, r2
 8000770:	851a      	strh	r2, [r3, #40]	; 0x28
	 TIM6->ARR = delay;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800077a:	88fa      	ldrh	r2, [r7, #6]
 800077c:	859a      	strh	r2, [r3, #44]	; 0x2c
	 TIM6->EGR |= TIM_EGR_UG;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800078a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800078e:	8a92      	ldrh	r2, [r2, #20]
 8000790:	b292      	uxth	r2, r2
 8000792:	f042 0201 	orr.w	r2, r2, #1
 8000796:	b292      	uxth	r2, r2
 8000798:	829a      	strh	r2, [r3, #20]
     TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80007aa:	8812      	ldrh	r2, [r2, #0]
 80007ac:	b292      	uxth	r2, r2
 80007ae:	f042 0209 	orr.w	r2, r2, #9
 80007b2:	b292      	uxth	r2, r2
 80007b4:	801a      	strh	r2, [r3, #0]
     while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 80007b6:	bf00      	nop
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f5      	bne.n	80007b8 <delay_ms+0x90>
}
 80007cc:	f107 070c 	add.w	r7, r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <delay_us>:

void delay_us(uint16_t delay)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY) - 1;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007ea:	f240 021c 	movw	r2, #28
 80007ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007f2:	6811      	ldr	r1, [r2, #0]
 80007f4:	f64d 6283 	movw	r2, #56963	; 0xde83
 80007f8:	f2c4 321b 	movt	r2, #17179	; 0x431b
 80007fc:	fba2 0201 	umull	r0, r2, r2, r1
 8000800:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000804:	b292      	uxth	r2, r2
 8000806:	f102 32ff 	add.w	r2, r2, #4294967295
 800080a:	b292      	uxth	r2, r2
 800080c:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM6->ARR = delay;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000816:	88fa      	ldrh	r2, [r7, #6]
 8000818:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM6->EGR |= TIM_EGR_UG;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000826:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800082a:	8a92      	ldrh	r2, [r2, #20]
 800082c:	b292      	uxth	r2, r2
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	b292      	uxth	r2, r2
 8000834:	829a      	strh	r2, [r3, #20]
	TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800083e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000842:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	b292      	uxth	r2, r2
 800084a:	f042 0209 	orr.w	r2, r2, #9
 800084e:	b292      	uxth	r2, r2
 8000850:	801a      	strh	r2, [r3, #0]
    while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 8000852:	bf00      	nop
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	b29b      	uxth	r3, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f5      	bne.n	8000854 <delay_us+0x7c>
}
 8000868:	f107 070c 	add.w	r7, r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <RTC_Config>:
 */

#include <rtc.h>

void RTC_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
        //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
        //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
        //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        //NVIC_Init(&NVIC_InitStructure);

        RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 8000878:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 800087c:	f04f 0101 	mov.w	r1, #1
 8000880:	f000 fdd0 	bl	8001424 <RCC_APB1PeriphClockCmd>

        PWR_BackupAccessCmd(ENABLE);
 8000884:	f04f 0001 	mov.w	r0, #1
 8000888:	f000 faf8 	bl	8000e7c <PWR_BackupAccessCmd>
        RCC_LSEConfig(RCC_LSE_ON);
 800088c:	f04f 0001 	mov.w	r0, #1
 8000890:	f000 fc62 	bl	8001158 <RCC_LSEConfig>
        while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
 8000894:	bf00      	nop
 8000896:	f04f 0041 	mov.w	r0, #65	; 0x41
 800089a:	f000 fded 	bl	8001478 <RCC_GetFlagStatus>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f8      	beq.n	8000896 <RTC_Config+0x22>
        RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 80008a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008a8:	f000 fc86 	bl	80011b8 <RCC_RTCCLKConfig>
        RCC_RTCCLKCmd(ENABLE);
 80008ac:	f04f 0001 	mov.w	r0, #1
 80008b0:	f000 fc98 	bl	80011e4 <RCC_RTCCLKCmd>

        RTC_WaitForSynchro();
 80008b4:	f000 feb6 	bl	8001624 <RTC_WaitForSynchro>
        RTC_WaitForLastTask();
 80008b8:	f000 fea4 	bl	8001604 <RTC_WaitForLastTask>
        //RTC_ITConfig(RTC_IT_SEC, ENABLE);
        RTC_WaitForLastTask();
 80008bc:	f000 fea2 	bl	8001604 <RTC_WaitForLastTask>
        RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
 80008c0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80008c4:	f000 fe80 	bl	80015c8 <RTC_SetPrescaler>
        RTC_WaitForLastTask();
 80008c8:	f000 fe9c 	bl	8001604 <RTC_WaitForLastTask>
}
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop

080008d0 <GetTime>:

uint32_t GetTime(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	/* Reset RTC Counter when Time is 23:59:59 */
	    if (RTC_GetCounter() == 0x0001517F)
 80008d4:	f000 fe40 	bl	8001558 <RTC_GetCounter>
 80008d8:	4602      	mov	r2, r0
 80008da:	f245 137f 	movw	r3, #20863	; 0x517f
 80008de:	f2c0 0301 	movt	r3, #1
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d105      	bne.n	80008f2 <GetTime+0x22>
	    {
	        RTC_SetCounter(0x0);
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f000 fe51 	bl	8001590 <RTC_SetCounter>
	        /* Wait until last write operation on RTC registers has finished */
	        RTC_WaitForLastTask();
 80008ee:	f000 fe89 	bl	8001604 <RTC_WaitForLastTask>
	    }
	return RTC_GetCounter();
 80008f2:	f000 fe31 	bl	8001558 <RTC_GetCounter>
 80008f6:	4603      	mov	r3, r0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	bd80      	pop	{r7, pc}

080008fc <Time_GetHours>:

uint32_t Time_GetHours(uint32_t TimeVar)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    /* Compute  hours */
    return TimeVar / 3600;
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 800090a:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 800090e:	fba3 1302 	umull	r1, r3, r3, r2
 8000912:	ea4f 23d3 	mov.w	r3, r3, lsr #11
}
 8000916:	4618      	mov	r0, r3
 8000918:	f107 070c 	add.w	r7, r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <Time_GetMinutes>:

uint32_t Time_GetMinutes(uint32_t TimeVar)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	return (TimeVar % 3600) / 60;
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 8000932:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 8000936:	fba3 2301 	umull	r2, r3, r3, r1
 800093a:	ea4f 22d3 	mov.w	r2, r3, lsr #11
 800093e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000942:	fb03 f302 	mul.w	r3, r3, r2
 8000946:	1aca      	subs	r2, r1, r3
 8000948:	f648 0389 	movw	r3, #34953	; 0x8889
 800094c:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8000950:	fba3 1302 	umull	r1, r3, r3, r2
 8000954:	ea4f 1353 	mov.w	r3, r3, lsr #5
}
 8000958:	4618      	mov	r0, r3
 800095a:	f107 070c 	add.w	r7, r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <Time_GetSeconds>:

uint32_t Time_GetSeconds(uint32_t TimeVar)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	return (TimeVar % 3600) % 60;
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 8000972:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 8000976:	fba3 1302 	umull	r1, r3, r3, r2
 800097a:	ea4f 21d3 	mov.w	r1, r3, lsr #11
 800097e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000982:	fb03 f301 	mul.w	r3, r3, r1
 8000986:	1ad1      	subs	r1, r2, r3
 8000988:	f648 0389 	movw	r3, #34953	; 0x8889
 800098c:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8000990:	fba3 2301 	umull	r2, r3, r3, r1
 8000994:	ea4f 1253 	mov.w	r2, r3, lsr #5
 8000998:	4613      	mov	r3, r2
 800099a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800099e:	1a9b      	subs	r3, r3, r2
 80009a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80009a4:	1aca      	subs	r2, r1, r3
 80009a6:	4613      	mov	r3, r2
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	f107 070c 	add.w	r7, r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <NVIC_PriorityGroupConfig>:
 *                                1 bits for subpriority
 *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
 *                                0 bits for subpriority
 * @retval None
 */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
	SCB ->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80009bc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80009c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 80009ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009ce:	60da      	str	r2, [r3, #12]
}
 80009d0:	f107 070c 	add.w	r7, r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <NVIC_Init>:
 *         parameters in the NVIC_InitStruct.
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct) {
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80009e4:	f04f 0300 	mov.w	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	f04f 030f 	mov.w	r3, #15
 80009f4:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd)); assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority)); assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

	if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	78db      	ldrb	r3, [r3, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d047      	beq.n	8000a8e <NVIC_Init+0xb2>
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
 80009fe:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000a02:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	ea6f 0303 	mvn.w	r3, r3
 8000a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a10:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000a14:	617b      	str	r3, [r7, #20]
		tmppre = (0x4 - tmppriority);
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f1c3 0304 	rsb	r3, r3, #4
 8000a1c:	613b      	str	r3, [r7, #16]
		tmpsub = tmpsub >> tmppriority;
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	fa22 f303 	lsr.w	r3, r2, r3
 8000a26:	60fb      	str	r3, [r7, #12]

		tmppriority =
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	461a      	mov	r2, r3
						<< tmppre;
 8000a2e:	693b      	ldr	r3, [r7, #16]
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
		tmppre = (0x4 - tmppriority);
		tmpsub = tmpsub >> tmppriority;

		tmppriority =
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
						<< tmppre;
		tmppriority |= NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	617b      	str	r3, [r7, #20]
		tmppriority = tmppriority << 0x04;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000a4c:	617b      	str	r3, [r7, #20]

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a4e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a52:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	185b      	adds	r3, r3, r1
 8000a62:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000a66:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a6a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000a76:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	7809      	ldrb	r1, [r1, #0]
 8000a7c:	f001 011f 	and.w	r1, r1, #31
 8000a80:	f04f 0001 	mov.w	r0, #1
 8000a84:	fa00 f101 	lsl.w	r1, r0, r1
		tmppriority = tmppriority << 0x04;

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000a8c:	e014      	b.n	8000ab8 <NVIC_Init+0xdc>
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000a8e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a92:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000a9e:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	7809      	ldrb	r1, [r1, #0]
 8000aa4:	f001 011f 	and.w	r1, r1, #31
 8000aa8:	f04f 0001 	mov.w	r0, #1
 8000aac:	fa00 f101 	lsl.w	r1, r0, r1
		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000ab0:	f102 0220 	add.w	r2, r2, #32
 8000ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	}
}
 8000ab8:	f107 071c 	add.w	r7, r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <EXTI_Init>:
 *         parameters in the EXTI_InitStruct.
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
 *         that contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode)); assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger)); assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line)); assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

	tmp = (uint32_t) EXTI_BASE;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ada:	60fb      	str	r3, [r7, #12]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	799b      	ldrb	r3, [r3, #6]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d078      	beq.n	8000bd6 <EXTI_Init+0x112>
		/* Clear EXTI line configuration */
		EXTI ->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	ea6f 0202 	mvn.w	r2, r2
 8000afe:	400a      	ands	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
		EXTI ->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b12:	6851      	ldr	r1, [r2, #4]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	ea6f 0202 	mvn.w	r2, r2
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]

		tmp += EXTI_InitStruct->EXTI_Mode;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	18d3      	adds	r3, r2, r3
 8000b28:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	6811      	ldr	r1, [r2, #0]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b44:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b48:	6891      	ldr	r1, [r2, #8]
				~EXTI_InitStruct->EXTI_Line;
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	ea6f 0202 	mvn.w	r2, r2

		tmp += EXTI_InitStruct->EXTI_Mode;

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 8000b52:	400a      	ands	r2, r1
 8000b54:	609a      	str	r2, [r3, #8]
				~EXTI_InitStruct->EXTI_Line;
		EXTI ->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b62:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b66:	68d1      	ldr	r1, [r2, #12]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	ea6f 0202 	mvn.w	r2, r2
 8000b70:	400a      	ands	r2, r1
 8000b72:	60da      	str	r2, [r3, #12]

		/* Select the trigger for the selected external interrupts */
		if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	2b10      	cmp	r3, #16
 8000b7a:	d11a      	bne.n	8000bb2 <EXTI_Init+0xee>
			/* Rising Falling edge */
			EXTI ->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b88:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b8c:	6891      	ldr	r1, [r2, #8]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	609a      	str	r2, [r3, #8]
			EXTI ->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000ba6:	68d1      	ldr	r1, [r2, #12]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	e01f      	b.n	8000bf2 <EXTI_Init+0x12e>
		} else {
			tmp = (uint32_t) EXTI_BASE;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bba:	60fb      	str	r3, [r7, #12]
			tmp += EXTI_InitStruct->EXTI_Trigger;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	795b      	ldrb	r3, [r3, #5]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	18d3      	adds	r3, r2, r3
 8000bc4:	60fb      	str	r3, [r7, #12]

			*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	6811      	ldr	r1, [r2, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e00d      	b.n	8000bf2 <EXTI_Init+0x12e>
		}
	} else {
		tmp += EXTI_InitStruct->EXTI_Mode;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	60fb      	str	r3, [r7, #12]

		/* Disable the selected external lines */
		*(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	ea6f 0202 	mvn.w	r2, r2
 8000bee:	400a      	ands	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]
	}
}
 8000bf2:	f107 0714 	add.w	r7, r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <EXTI_ClearITPendingBit>:
 * @brief  Clears the EXTI's line pending bits.
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(EXTI_Line));

	EXTI ->PR = EXTI_Line;
 8000c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	615a      	str	r2, [r3, #20]
}
 8000c10:	f107 070c 	add.w	r7, r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <GPIO_Init>:
 * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
 * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
 *         contains the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx)); assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode)); assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

	/*---------------------------- GPIO Mode Configuration -----------------------*/
	currentmode = ((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x0F);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	78db      	ldrb	r3, [r3, #3]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	61fb      	str	r3, [r7, #28]
	if ((((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x10)) != 0x00) {
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	78db      	ldrb	r3, [r3, #3]
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <GPIO_Init+0x4e>
		/* Check the parameters */
		assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
		/* Output mode */
		currentmode |= (uint32_t) GPIO_InitStruct->GPIO_Speed;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	69fa      	ldr	r2, [r7, #28]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61fb      	str	r3, [r7, #28]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d04e      	beq.n	8000d12 <GPIO_Init+0xf6>
		tmpreg = GPIOx->CRL;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	e041      	b.n	8000d06 <GPIO_Init+0xea>
			pos = ((uint32_t) 0x01) << pinpos;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	f04f 0201 	mov.w	r2, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d12d      	bne.n	8000cfe <GPIO_Init+0xe2>
				pos = pinpos << 2;
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ca8:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding low control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f04f 020f 	mov.w	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	ea6f 0303 	mvn.w	r3, r3
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	78db      	ldrb	r3, [r3, #3]
 8000cd4:	2b28      	cmp	r3, #40	; 0x28
 8000cd6:	d107      	bne.n	8000ce8 <GPIO_Init+0xcc>
					GPIOx->BRR = (((uint32_t) 0x01) << pinpos);
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	f04f 0201 	mov.w	r2, #1
 8000cde:	fa02 f203 	lsl.w	r2, r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	e00a      	b.n	8000cfe <GPIO_Init+0xe2>
				} else {
					/* Set the corresponding ODR bit */
					if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	78db      	ldrb	r3, [r3, #3]
 8000cec:	2b48      	cmp	r3, #72	; 0x48
 8000cee:	d106      	bne.n	8000cfe <GPIO_Init+0xe2>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	f04f 0201 	mov.w	r2, #1
 8000cf6:	fa02 f203 	lsl.w	r2, r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
		tmpreg = GPIOx->CRL;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	f103 0301 	add.w	r3, r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d9ba      	bls.n	8000c82 <GPIO_Init+0x66>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
					}
				}
			}
		}
		GPIOx->CRL = tmpreg;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	601a      	str	r2, [r3, #0]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	2bff      	cmp	r3, #255	; 0xff
 8000d18:	d953      	bls.n	8000dc2 <GPIO_Init+0x1a6>
		tmpreg = GPIOx->CRH;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	e046      	b.n	8000db6 <GPIO_Init+0x19a>
			pos = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	f103 0308 	add.w	r3, r3, #8
 8000d2e:	f04f 0201 	mov.w	r2, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d130      	bne.n	8000dae <GPIO_Init+0x192>
				pos = pinpos << 2;
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d52:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding high control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f04f 020f 	mov.w	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	ea6f 0303 	mvn.w	r3, r3
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	78db      	ldrb	r3, [r3, #3]
 8000d7e:	2b28      	cmp	r3, #40	; 0x28
 8000d80:	d108      	bne.n	8000d94 <GPIO_Init+0x178>
					GPIOx->BRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	f103 0308 	add.w	r3, r3, #8
 8000d88:	f04f 0201 	mov.w	r2, #1
 8000d8c:	fa02 f203 	lsl.w	r2, r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	615a      	str	r2, [r3, #20]
				}
				/* Set the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	78db      	ldrb	r3, [r3, #3]
 8000d98:	2b48      	cmp	r3, #72	; 0x48
 8000d9a:	d108      	bne.n	8000dae <GPIO_Init+0x192>
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	f103 0308 	add.w	r3, r3, #8
 8000da2:	f04f 0201 	mov.w	r2, #1
 8000da6:	fa02 f203 	lsl.w	r2, r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
		tmpreg = GPIOx->CRH;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	f103 0301 	add.w	r3, r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2b07      	cmp	r3, #7
 8000dba:	d9b5      	bls.n	8000d28 <GPIO_Init+0x10c>
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
				}
			}
		}
		GPIOx->CRH = tmpreg;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	605a      	str	r2, [r3, #4]
	}
}
 8000dc2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <GPIO_EXTILineConfig>:
 *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).
 * @param  GPIO_PinSource: specifies the EXTI line to be configured.
 *   This parameter can be GPIO_PinSourcex where x can be (0..15).
 * @retval None
 */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource) {
 8000dcc:	b490      	push	{r4, r7}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	71fa      	strb	r2, [r7, #7]
 8000dd8:	71bb      	strb	r3, [r7, #6]
	uint32_t tmp = 0x00;
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000dea:	f04f 020f 	mov.w	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	60fb      	str	r3, [r7, #12]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000dfc:	79ba      	ldrb	r2, [r7, #6]
 8000dfe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	4610      	mov	r0, r2
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000e0e:	79b9      	ldrb	r1, [r7, #6]
 8000e10:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000e14:	b2c9      	uxtb	r1, r1
 8000e16:	f101 0102 	add.w	r1, r1, #2
 8000e1a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	ea6f 0202 	mvn.w	r2, r2
 8000e24:	4011      	ands	r1, r2
 8000e26:	f100 0202 	add.w	r2, r0, #2
 8000e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e36:	79ba      	ldrb	r2, [r7, #6]
 8000e38:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	4610      	mov	r0, r2
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000e48:	79b9      	ldrb	r1, [r7, #6]
 8000e4a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000e4e:	b2c9      	uxtb	r1, r1
 8000e50:	f101 0102 	add.w	r1, r1, #2
 8000e54:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000e58:	79fc      	ldrb	r4, [r7, #7]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
 8000e5a:	79ba      	ldrb	r2, [r7, #6]
 8000e5c:	f002 0203 	and.w	r2, r2, #3
 8000e60:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8000e64:	fa04 f202 	lsl.w	r2, r4, r2
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000e68:	4311      	orrs	r1, r2
 8000e6a:	f100 0202 	add.w	r2, r0, #2
 8000e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
}
 8000e72:	f107 0710 	add.w	r7, r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc90      	pop	{r4, r7}
 8000e7a:	4770      	bx	lr

08000e7c <PWR_BackupAccessCmd>:
 * @brief  Enables or disables access to the RTC and backup registers.
 * @param  NewState: new state of the access to the RTC and backup registers.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void PWR_BackupAccessCmd(FunctionalState NewState) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NewState));
	*(__IO uint32_t *) CR_DBP_BB = (uint32_t) NewState;
 8000e86:	f04f 0320 	mov.w	r3, #32
 8000e8a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8000e8e:	79fa      	ldrb	r2, [r7, #7]
 8000e90:	601a      	str	r2, [r3, #0]
}
 8000e92:	f107 070c 	add.w	r7, r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ebc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ec8:	6859      	ldr	r1, [r3, #4]
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ede:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000eec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ef0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000efa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000efe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f08:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f1a:	6852      	ldr	r2, [r2, #4]
 8000f1c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f20:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000f2e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f62:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f7a:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d003      	beq.n	8000f8c <RCC_HSEConfig+0x48>
 8000f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f88:	d00d      	beq.n	8000fa6 <RCC_HSEConfig+0x62>
 8000f8a:	e019      	b.n	8000fc0 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fa2:	601a      	str	r2, [r3, #0]
      break;
 8000fa4:	e00d      	b.n	8000fc2 <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000fbc:	601a      	str	r2, [r3, #0]
      break;
 8000fbe:	e000      	b.n	8000fc2 <RCC_HSEConfig+0x7e>
      
    default:
      break;
 8000fc0:	bf00      	nop
  }
}
 8000fc2:	f107 070c 	add.w	r7, r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000fee:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	605a      	str	r2, [r3, #4]
}
 8001008:	f107 0714 	add.w	r7, r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800101e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001022:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	601a      	str	r2, [r3, #0]
}
 800102a:	f107 070c 	add.w	r7, r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	605a      	str	r2, [r3, #4]
}
 800106a:	f107 0714 	add.w	r7, r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	b2db      	uxtb	r3, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010b4:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	605a      	str	r2, [r3, #4]
}
 80010ca:	f107 0714 	add.w	r7, r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010f4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	605a      	str	r2, [r3, #4]
}
 800110a:	f107 0714 	add.w	r7, r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001134:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	605a      	str	r2, [r3, #4]
}
 800114e:	f107 0714 	add.w	r7, r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001162:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001170:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001174:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d002      	beq.n	800118a <RCC_LSEConfig+0x32>
 8001184:	2b04      	cmp	r3, #4
 8001186:	d008      	beq.n	800119a <RCC_LSEConfig+0x42>
 8001188:	e00f      	b.n	80011aa <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800118a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800118e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001192:	f04f 0201 	mov.w	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
      break;
 8001198:	e008      	b.n	80011ac <RCC_LSEConfig+0x54>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800119a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800119e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011a2:	f04f 0205 	mov.w	r2, #5
 80011a6:	701a      	strb	r2, [r3, #0]
      break;            
 80011a8:	e000      	b.n	80011ac <RCC_LSEConfig+0x54>
      
    default:
      break;      
 80011aa:	bf00      	nop
  }
}
 80011ac:	f107 070c 	add.w	r7, r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011d0:	6a11      	ldr	r1, [r2, #32]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	621a      	str	r2, [r3, #32]
}
 80011d8:	f107 070c 	add.w	r7, r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80011ee:	f240 433c 	movw	r3, #1084	; 0x43c
 80011f2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	f107 070c 	add.w	r7, r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00a      	beq.n	8001256 <RCC_GetClocksFreq+0x52>
 8001240:	2b08      	cmp	r3, #8
 8001242:	d00f      	beq.n	8001264 <RCC_GetClocksFreq+0x60>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d147      	bne.n	80012d8 <RCC_GetClocksFreq+0xd4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800124e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001252:	6013      	str	r3, [r2, #0]
      break;
 8001254:	e047      	b.n	80012e6 <RCC_GetClocksFreq+0xe2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800125c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001260:	6013      	str	r3, [r2, #0]
      break;
 8001262:	e040      	b.n	80012e6 <RCC_GetClocksFreq+0xe2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001272:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800128a:	f103 0302 	add.w	r3, r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <RCC_GetClocksFreq+0xa6>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800129c:	f2c0 033d 	movt	r3, #61	; 0x3d
 80012a0:	fb03 f202 	mul.w	r2, r3, r2
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80012a8:	e01d      	b.n	80012e6 <RCC_GetClocksFreq+0xe2>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	f103 0301 	add.w	r3, r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 80012be:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80012c2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	fb02 f203 	mul.w	r2, r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80012d6:	e006      	b.n	80012e6 <RCC_GetClocksFreq+0xe2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80012de:	f2c0 037a 	movt	r3, #122	; 0x7a
 80012e2:	6013      	str	r3, [r2, #0]
      break;
 80012e4:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012f4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80012fc:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80012fe:	f240 0300 	movw	r3, #0
 8001302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	189b      	adds	r3, r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	fa22 f203 	lsr.w	r2, r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800132c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001334:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001336:	f240 0300 	movw	r3, #0
 800133a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	189b      	adds	r3, r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	fa22 f203 	lsr.w	r2, r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001364:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800136c:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800136e:	f240 0300 	movw	r3, #0
 8001372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	189b      	adds	r3, r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	fa22 f203 	lsr.w	r2, r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	ea4f 3393 	mov.w	r3, r3, lsr #14
 80013a4:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 80013a6:	f240 0310 	movw	r3, #16
 80013aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	189b      	adds	r3, r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	fbb2 f2f3 	udiv	r2, r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]
}
 80013c6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013f2:	6991      	ldr	r1, [r2, #24]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	619a      	str	r2, [r3, #24]
 80013fa:	e00d      	b.n	8001418 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001408:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800140c:	6991      	ldr	r1, [r2, #24]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	ea6f 0202 	mvn.w	r2, r2
 8001414:	400a      	ands	r2, r1
 8001416:	619a      	str	r2, [r3, #24]
  }
}
 8001418:	f107 070c 	add.w	r7, r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00c      	beq.n	8001450 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800143e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001442:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001446:	69d1      	ldr	r1, [r2, #28]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	430a      	orrs	r2, r1
 800144c:	61da      	str	r2, [r3, #28]
 800144e:	e00d      	b.n	800146c <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800145c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001460:	69d1      	ldr	r1, [r2, #28]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	ea6f 0202 	mvn.w	r2, r2
 8001468:	400a      	ands	r2, r1
 800146a:	61da      	str	r2, [r3, #28]
  }
}
 800146c:	f107 070c 	add.w	r7, r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800149a:	b2db      	uxtb	r3, r3
 800149c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d106      	bne.n	80014b2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00f      	b.n	80014d2 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d106      	bne.n	80014c6 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 80014b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e005      	b.n	80014d2 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80014c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	fa22 f303 	lsr.w	r3, r2, r3
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <RCC_GetFlagStatus+0x7a>
  {
    bitstatus = SET;
 80014ea:	f04f 0301 	mov.w	r3, #1
 80014ee:	74fb      	strb	r3, [r7, #19]
 80014f0:	e002      	b.n	80014f8 <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80014f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	f107 071c 	add.w	r7, r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <RTC_EnterConfigMode>:
/**
 * @brief  Enters the RTC configuration mode.
 * @param  None
 * @retval None
 */
void RTC_EnterConfigMode(void) {
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	/* Set the CNF flag to enter in the Configuration Mode */
	RTC ->CRL |= RTC_CRL_CNF;
 800150c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001510:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001514:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001518:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800151c:	8892      	ldrh	r2, [r2, #4]
 800151e:	b292      	uxth	r2, r2
 8001520:	f042 0210 	orr.w	r2, r2, #16
 8001524:	b292      	uxth	r2, r2
 8001526:	809a      	strh	r2, [r3, #4]
}
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <RTC_ExitConfigMode>:
/**
 * @brief  Exits from the RTC configuration mode.
 * @param  None
 * @retval None
 */
void RTC_ExitConfigMode(void) {
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
	/* Reset the CNF flag to exit from the Configuration Mode */
	RTC ->CRL &= (uint16_t) ~((uint16_t) RTC_CRL_CNF );
 8001534:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001538:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800153c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001540:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001544:	8892      	ldrh	r2, [r2, #4]
 8001546:	b292      	uxth	r2, r2
 8001548:	f022 0210 	bic.w	r2, r2, #16
 800154c:	b292      	uxth	r2, r2
 800154e:	809a      	strh	r2, [r3, #4]
}
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop

08001558 <RTC_GetCounter>:
/**
 * @brief  Gets the RTC counter value.
 * @param  None
 * @retval RTC counter value.
 */
uint32_t RTC_GetCounter(void) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
	uint16_t tmp = 0;
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	80fb      	strh	r3, [r7, #6]
	tmp = RTC ->CNTL;
 8001564:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001568:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800156c:	8b9b      	ldrh	r3, [r3, #28]
 800156e:	80fb      	strh	r3, [r7, #6]
	return (((uint32_t) RTC ->CNTH << 16) | tmp);
 8001570:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001574:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001578:	8b1b      	ldrh	r3, [r3, #24]
 800157a:	b29b      	uxth	r3, r3
 800157c:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	4313      	orrs	r3, r2
}
 8001584:	4618      	mov	r0, r3
 8001586:	f107 070c 	add.w	r7, r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <RTC_SetCounter>:
/**
 * @brief  Sets the RTC counter value.
 * @param  CounterValue: RTC counter new value.
 * @retval None
 */
void RTC_SetCounter(uint32_t CounterValue) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	RTC_EnterConfigMode();
 8001598:	f7ff ffb6 	bl	8001508 <RTC_EnterConfigMode>
	/* Set RTC COUNTER MSB word */RTC ->CNTH = CounterValue >> 16;
 800159c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80015aa:	b292      	uxth	r2, r2
 80015ac:	831a      	strh	r2, [r3, #24]
	/* Set RTC COUNTER LSB word */RTC ->CNTL = (CounterValue & RTC_LSB_MASK );
 80015ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	b292      	uxth	r2, r2
 80015ba:	839a      	strh	r2, [r3, #28]
	RTC_ExitConfigMode();
 80015bc:	f7ff ffb8 	bl	8001530 <RTC_ExitConfigMode>
}
 80015c0:	f107 0708 	add.w	r7, r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <RTC_SetPrescaler>:
/**
 * @brief  Sets the RTC prescaler value.
 * @param  PrescalerValue: RTC prescaler new value.
 * @retval None
 */
void RTC_SetPrescaler(uint32_t PrescalerValue) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_RTC_PRESCALER(PrescalerValue));

	RTC_EnterConfigMode();
 80015d0:	f7ff ff9a 	bl	8001508 <RTC_EnterConfigMode>
	/* Set RTC PRESCALER MSB word */RTC ->PRLH = (PrescalerValue
 80015d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
			& PRLH_MSB_MASK ) >> 16;
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80015e2:	ea4f 4212 	mov.w	r2, r2, lsr #16
void RTC_SetPrescaler(uint32_t PrescalerValue) {
	/* Check the parameters */
	assert_param(IS_RTC_PRESCALER(PrescalerValue));

	RTC_EnterConfigMode();
	/* Set RTC PRESCALER MSB word */RTC ->PRLH = (PrescalerValue
 80015e6:	b292      	uxth	r2, r2
 80015e8:	811a      	strh	r2, [r3, #8]
			& PRLH_MSB_MASK ) >> 16;
	/* Set RTC PRESCALER LSB word */RTC ->PRLL = (PrescalerValue
 80015ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	b292      	uxth	r2, r2
 80015f6:	819a      	strh	r2, [r3, #12]
			& RTC_LSB_MASK );
	RTC_ExitConfigMode();
 80015f8:	f7ff ff9a 	bl	8001530 <RTC_ExitConfigMode>
}
 80015fc:	f107 0708 	add.w	r7, r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <RTC_WaitForLastTask>:
 * @brief  Waits until last write operation on RTC registers has finished.
 * @note   This function must be called before any write to RTC registers.
 * @param  None
 * @retval None
 */
void RTC_WaitForLastTask(void) {
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	/* Loop until RTOFF flag is set */
	while ((RTC ->CRL & RTC_FLAG_RTOFF )== (uint16_t)RESET){
 8001608:	bf00      	nop
 800160a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800160e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	b29b      	uxth	r3, r3
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f5      	beq.n	800160a <RTC_WaitForLastTask+0x6>
}
}
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <RTC_WaitForSynchro>:
	 * @note   This function must be called before any read operation after an APB reset
	 *   or an APB clock stop.
	 * @param  None
	 * @retval None
	 */
void RTC_WaitForSynchro(void) {
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	/* Clear RSF flag */
	RTC ->CRL &= (uint16_t) ~RTC_FLAG_RSF;
 8001628:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800162c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001630:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001634:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001638:	8892      	ldrh	r2, [r2, #4]
 800163a:	b292      	uxth	r2, r2
 800163c:	f022 0208 	bic.w	r2, r2, #8
 8001640:	b292      	uxth	r2, r2
 8001642:	809a      	strh	r2, [r3, #4]
	/* Loop until RSF flag is set */
	while ((RTC ->CRL & RTC_FLAG_RSF )== (uint16_t)RESET){
 8001644:	bf00      	nop
 8001646:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800164a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800164e:	889b      	ldrh	r3, [r3, #4]
 8001650:	b29b      	uxth	r3, r3
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f5      	beq.n	8001646 <RTC_WaitForSynchro+0x22>
}
}
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	801a      	strh	r2, [r3, #0]
 8001682:	e007      	b.n	8001694 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	801a      	strh	r2, [r3, #0]
  }
}
 8001694:	f107 070c 	add.w	r7, r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80016b2:	f107 070c 	add.w	r7, r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	81bb      	strh	r3, [r7, #12]
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	8a1b      	ldrh	r3, [r3, #16]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	899b      	ldrh	r3, [r3, #12]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	4013      	ands	r3, r2
 80016f0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80016f2:	89bb      	ldrh	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <TIM_GetITStatus+0x4a>
 80016f8:	897b      	ldrh	r3, [r7, #10]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80016fe:	f04f 0301 	mov.w	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e002      	b.n	800170c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	f107 0714 	add.w	r7, r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	ea6f 0303 	mvn.w	r3, r3
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	821a      	strh	r2, [r3, #16]
}
 8001734:	f107 070c 	add.w	r7, r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <USART_Init>:
 * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 *         that contains the configuration information for the specified USART 
 *         peripheral.
 * @retval None
 */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0x00, apbclock = 0x00;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t integerdivider = 0x00;
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fractionaldivider = 0x00;
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
	uint32_t usartxbase = 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
	if (USART_InitStruct->USART_HardwareFlowControl
			!= USART_HardwareFlowControl_None ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	61fb      	str	r3, [r7, #28]

	/*---------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = USARTx->CR2;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	8a1b      	ldrh	r3, [r3, #16]
 8001770:	b29b      	uxth	r3, r3
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear STOP[13:12] bits */
	tmpreg &= CR2_STOP_CLEAR_Mask;
 8001774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001776:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800177a:	4013      	ands	r3, r2
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
	/* Set STOP[13:12] bits according to USART_StopBits value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_StopBits;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	88db      	ldrh	r3, [r3, #6]
 8001782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001784:	4313      	orrs	r3, r2
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Write to USART CR2 */
	USARTx->CR2 = (uint16_t) tmpreg;
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	821a      	strh	r2, [r3, #16]

	/*---------------------------- USART CR1 Configuration -----------------------*/
	tmpreg = USARTx->CR1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	899b      	ldrh	r3, [r3, #12]
 8001794:	b29b      	uxth	r3, r3
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear M, PCE, PS, TE and RE bits */
	tmpreg &= CR1_CLEAR_Mask;
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800179e:	4013      	ands	r3, r2
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	889a      	ldrh	r2, [r3, #4]
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	891b      	ldrh	r3, [r3, #8]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	895b      	ldrh	r3, [r3, #10]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b29b      	uxth	r3, r3
	tmpreg &= CR1_CLEAR_Mask;
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 80017b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b8:	4313      	orrs	r3, r2
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
	/* Write to USART CR1 */
	USARTx->CR1 = (uint16_t) tmpreg;
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	819a      	strh	r2, [r3, #12]

	/*---------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = USARTx->CR3;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	8a9b      	ldrh	r3, [r3, #20]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear CTSE and RTSE bits */
	tmpreg &= CR3_CLEAR_Mask;
 80017cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ce:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80017d2:	4013      	ands	r3, r2
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART HFC -------------------------------------------------*/
	/* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
	tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	899b      	ldrh	r3, [r3, #12]
 80017da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017dc:	4313      	orrs	r3, r2
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Write to USART CR3 */
	USARTx->CR3 = (uint16_t) tmpreg;
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	829a      	strh	r2, [r3, #20]

	/*---------------------------- USART BRR Configuration -----------------------*/
	/* Configure the USART Baud Rate -------------------------------------------*/
	RCC_GetClocksFreq(&RCC_ClocksStatus);
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fd09 	bl	8001204 <RCC_GetClocksFreq>
	if (usartxbase == USART1_BASE) {
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d102      	bne.n	8001806 <USART_Init+0xc6>
		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
 8001804:	e001      	b.n	800180a <USART_Init+0xca>
	} else {
		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	899b      	ldrh	r3, [r3, #12]
 800180e:	b29b      	uxth	r3, r3
 8001810:	b29b      	uxth	r3, r3
 8001812:	b21b      	sxth	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	da0f      	bge.n	8001838 <USART_Init+0xf8>
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 8001818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800181a:	4613      	mov	r3, r2
 800181c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001820:	189b      	adds	r3, r3, r2
 8001822:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001826:	189a      	adds	r2, r3, r2
				/ (2 * (USART_InitStruct->USART_BaudRate)));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	ea4f 0343 	mov.w	r3, r3, lsl #1
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	e00e      	b.n	8001856 <USART_Init+0x116>
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 8001838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800183a:	4613      	mov	r3, r2
 800183c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001840:	189b      	adds	r3, r3, r2
 8001842:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001846:	189a      	adds	r2, r3, r2
				/ (4 * (USART_InitStruct->USART_BaudRate)));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	ea4f 0383 	mov.w	r3, r3, lsl #2
		integerdivider = ((25 * apbclock)
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
				/ (4 * (USART_InitStruct->USART_BaudRate)));
	}
	tmpreg = (integerdivider / 100) << 4;
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	f248 531f 	movw	r3, #34079	; 0x851f
 800185c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001860:	fba3 1302 	umull	r1, r3, r3, r2
 8001864:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001868:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Determine the fractional part */
	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001874:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	623b      	str	r3, [r7, #32]

	/* Implement the fractional part in the register */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	899b      	ldrh	r3, [r3, #12]
 8001886:	b29b      	uxth	r3, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	b21b      	sxth	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	da12      	bge.n	80018b6 <USART_Init+0x176>
		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t) 0x07);
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001896:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800189a:	f248 531f 	movw	r3, #34079	; 0x851f
 800189e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80018a2:	fba3 1302 	umull	r1, r3, r3, r2
 80018a6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b0:	4313      	orrs	r3, r2
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b4:	e011      	b.n	80018da <USART_Init+0x19a>
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t) 0x0F);
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80018bc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80018c0:	f248 531f 	movw	r3, #34079	; 0x851f
 80018c4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80018c8:	fba3 1302 	umull	r1, r3, r3, r2
 80018cc:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	4313      	orrs	r3, r2
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write to USART BRR */
	USARTx->BRR = (uint16_t) tmpreg;
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	811a      	strh	r2, [r3, #8]
}
 80018e2:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop

080018ec <USART_Cmd>:
 *           USART1, USART2, USART3, UART4 or UART5.
 * @param  NewState: new state of the USARTx peripheral.
 *         This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <USART_Cmd+0x24>
		/* Enable the selected USART by setting the UE bit in the CR1 register */
		USARTx->CR1 |= CR1_UE_Set;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	899b      	ldrh	r3, [r3, #12]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	819a      	strh	r2, [r3, #12]
 800190e:	e007      	b.n	8001920 <USART_Cmd+0x34>
	} else {
		/* Disable the selected USART by clearing the UE bit in the CR1 register */
		USARTx->CR1 &= CR1_UE_Reset;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	899b      	ldrh	r3, [r3, #12]
 8001914:	b29b      	uxth	r3, r3
 8001916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	819a      	strh	r2, [r3, #12]
	}
}
 8001920:	f107 070c 	add.w	r7, r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <USART_ITConfig>:
 * @param  NewState: new state of the specified USARTx interrupts.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT,
		FunctionalState NewState) {
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	460a      	mov	r2, r1
 8001938:	807a      	strh	r2, [r7, #2]
 800193a:	707b      	strb	r3, [r7, #1]
	uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
	uint32_t usartxbase = 0x00;
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
	/* The CTS interrupt is not available for UART4 and UART5 */
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	617b      	str	r3, [r7, #20]

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	613b      	str	r3, [r7, #16]

	/* Get the interrupt position */
	itpos = USART_IT & IT_Mask;
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	60fb      	str	r3, [r7, #12]
	itmask = (((uint32_t) 0x01) << itpos);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f04f 0201 	mov.w	r2, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	60bb      	str	r3, [r7, #8]

	if (usartreg == 0x01) /* The IT is in CR1 register */
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d104      	bne.n	8001988 <USART_ITConfig+0x5c>
	{
		usartxbase += 0x0C;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f103 030c 	add.w	r3, r3, #12
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e00b      	b.n	80019a0 <USART_ITConfig+0x74>
	} else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d104      	bne.n	8001998 <USART_ITConfig+0x6c>
	{
		usartxbase += 0x10;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f103 0310 	add.w	r3, r3, #16
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e003      	b.n	80019a0 <USART_ITConfig+0x74>
	} else /* The IT is in CR3 register */
	{
		usartxbase += 0x14;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f103 0314 	add.w	r3, r3, #20
 800199e:	617b      	str	r3, [r7, #20]
	}
	if (NewState != DISABLE) {
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <USART_ITConfig+0x88>
		*(__IO uint32_t*) usartxbase |= itmask;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	6811      	ldr	r1, [r2, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e007      	b.n	80019c4 <USART_ITConfig+0x98>
	} else {
		*(__IO uint32_t*) usartxbase &= ~itmask;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	6811      	ldr	r1, [r2, #0]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	ea6f 0202 	mvn.w	r2, r2
 80019c0:	400a      	ands	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
	}
}
 80019c4:	f107 071c 	add.w	r7, r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <USART_SendData>:
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @param  Data: the data to transmit.
 * @retval None
 */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_USART_DATA(Data));

	/* Transmit Data */
	USARTx->DR = (Data & (uint16_t) 0x01FF);
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80019e2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	809a      	strh	r2, [r3, #4]
}
 80019ec:	f107 070c 	add.w	r7, r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <USART_ReceiveData>:
 * @param  USARTx: Select the USART or the UART peripheral. 
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @retval The received data.
 */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx) {
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx));

	/* Receive Data */
	return (uint16_t) (USARTx->DR & (uint16_t) 0x01FF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8001a0a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8001a0e:	b29b      	uxth	r3, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	f107 070c 	add.w	r7, r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <USART_GetFlagStatus>:
 *     @arg USART_FLAG_NE:   Noise Error flag
 *     @arg USART_FLAG_FE:   Framing Error flag
 *     @arg USART_FLAG_PE:   Parity Error flag
 * @retval The new state of USART_FLAG (SET or RESET).
 */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
	FlagStatus bitstatus = RESET;
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
	/* The CTS flag is not available for UART4 and UART5 */
	if (USART_FLAG == USART_FLAG_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	if ((USARTx->SR & USART_FLAG) != (uint16_t) RESET) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4013      	ands	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <USART_GetFlagStatus+0x2a>
		bitstatus = SET;
 8001a3e:	f04f 0301 	mov.w	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e002      	b.n	8001a4c <USART_GetFlagStatus+0x30>
	} else {
		bitstatus = RESET;
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f107 0714 	add.w	r7, r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <USART_GetITStatus>:
 *     @arg USART_IT_NE:   Noise Error interrupt
 *     @arg USART_IT_FE:   Framing Error interrupt
 *     @arg USART_IT_PE:   Parity Error interrupt
 * @retval The new state of USART_IT (SET or RESET).
 */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
	uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
	ITStatus bitstatus = RESET;
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	74fb      	strb	r3, [r7, #19]
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	60bb      	str	r3, [r7, #8]
	/* Get the interrupt position */
	itmask = USART_IT & IT_Mask;
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	617b      	str	r3, [r7, #20]
	itmask = (uint32_t) 0x01 << itmask;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f04f 0201 	mov.w	r2, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]

	if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d106      	bne.n	8001ab4 <USART_GetITStatus+0x58>
	{
		itmask &= USARTx->CR1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	899b      	ldrh	r3, [r3, #12]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e00f      	b.n	8001ad4 <USART_GetITStatus+0x78>
	} else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d106      	bne.n	8001ac8 <USART_GetITStatus+0x6c>
	{
		itmask &= USARTx->CR2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8a1b      	ldrh	r3, [r3, #16]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e005      	b.n	8001ad4 <USART_GetITStatus+0x78>
	} else /* The IT  is in CR3 register */
	{
		itmask &= USARTx->CR3;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	8a9b      	ldrh	r3, [r3, #20]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
	}

	bitpos = USART_IT >> 0x08;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	60fb      	str	r3, [r7, #12]
	bitpos = (uint32_t) 0x01 << bitpos;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f04f 0201 	mov.w	r2, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	60fb      	str	r3, [r7, #12]
	bitpos &= USARTx->SR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
	if ((itmask != (uint16_t) RESET) && (bitpos != (uint16_t) RESET)) {
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <USART_GetITStatus+0xae>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <USART_GetITStatus+0xae>
		bitstatus = SET;
 8001b02:	f04f 0301 	mov.w	r3, #1
 8001b06:	74fb      	strb	r3, [r7, #19]
 8001b08:	e002      	b.n	8001b10 <USART_GetITStatus+0xb4>
	} else {
		bitstatus = RESET;
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	74fb      	strb	r3, [r7, #19]
	}

	return bitstatus;
 8001b10:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	f107 071c 	add.w	r7, r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop

08001b20 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	f103 0308 	add.w	r3, r3, #8
 8001b42:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8001b44:	f000 ff52 	bl	80029ec <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8001b48:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <pvPortMalloc+0xc4>)
 8001b58:	f023 0307 	bic.w	r3, r3, #7
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b66:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001b68:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	18d2      	adds	r2, r2, r3
 8001b76:	f641 33f7 	movw	r3, #7159	; 0x1bf7
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d825      	bhi.n	8001bca <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8001b7e:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	18d2      	adds	r2, r2, r3
 8001b8c:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b94:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d917      	bls.n	8001bca <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8001b9a:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	18d3      	adds	r3, r2, r3
 8001bb0:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8001bb2:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	18d2      	adds	r2, r2, r3
 8001bc0:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bc8:	601a      	str	r2, [r3, #0]
		}
	}
	xTaskResumeAll();
 8001bca:	f000 ff21 	bl	8002a10 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <pvPortMalloc+0xb8>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001bd4:	f002 fc3e 	bl	8004454 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f107 0710 	add.w	r7, r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000002c 	.word	0x2000002c

08001be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <vPortFree+0x14>
 8001bf6:	f000 f97d 	bl	8001ef4 <ulPortSetInterruptMask>
 8001bfa:	e7fe      	b.n	8001bfa <vPortFree+0x12>
}
 8001bfc:	f107 0708 	add.w	r7, r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001c08:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8001c16:	f103 0318 	add.w	r3, r3, #24
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop

08001c24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f103 0208 	add.w	r2, r3, #8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f103 0208 	add.w	r2, r3, #8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f103 0208 	add.w	r2, r3, #8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	f107 070c 	add.w	r7, r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
}
 8001c74:	f107 070c 	add.w	r7, r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop

08001c80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f103 0201 	add.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	601a      	str	r2, [r3, #0]
}
 8001cc6:	f107 0714 	add.w	r7, r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce6:	d103      	bne.n	8001cf0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e00d      	b.n	8001d0c <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f103 0308 	add.w	r3, r3, #8
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e002      	b.n	8001d00 <vListInsert+0x30>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d9f6      	bls.n	8001cfa <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f103 0201 	add.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
}
 8001d3a:	f107 0714 	add.w	r7, r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6892      	ldr	r2, [r2, #8]
 8001d54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6852      	ldr	r2, [r2, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d103      	bne.n	8001d78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f103 32ff 	add.w	r2, r3, #4294967295
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	f107 0714 	add.w	r7, r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f1a3 0304 	sub.w	r3, r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db6:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f1a3 0304 	sub.w	r3, r3, #4
 8001dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1a3 0304 	sub.w	r3, r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1a3 0314 	sub.w	r3, r3, #20
 8001ddc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f1a3 0320 	sub.w	r3, r3, #32
 8001dea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	f107 0714 	add.w	r7, r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <pxCurrentTCBConst2>)
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	6808      	ldr	r0, [r1, #0]
 8001e02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e06:	f380 8809 	msr	PSP, r0
 8001e0a:	f04f 0000 	mov.w	r0, #0
 8001e0e:	f380 8811 	msr	BASEPRI, r0
 8001e12:	f04e 0e0d 	orr.w	lr, lr, #13
 8001e16:	4770      	bx	lr

08001e18 <pxCurrentTCBConst2>:
 8001e18:	20001c2c 	.word	0x20001c2c

08001e1c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <prvPortStartFirstTask+0x10>)
 8001e1e:	6800      	ldr	r0, [r0, #0]
 8001e20:	6800      	ldr	r0, [r0, #0]
 8001e22:	f380 8808 	msr	MSP, r0
 8001e26:	b662      	cpsie	i
 8001e28:	df00      	svc	0
 8001e2a:	bf00      	nop
 8001e2c:	e000ed08 	.word	0xe000ed08

08001e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001e34:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001e38:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e3c:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001e40:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001e4a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001e4c:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001e50:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e54:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001e58:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001e62:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001e64:	f000 f884 	bl	8001f70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001e68:	f240 0314 	movw	r3, #20
 8001e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001e76:	f7ff ffd1 	bl	8001e1c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8001e7a:	f04f 0300 	mov.w	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop

08001e84 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e88:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001e8c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e94:	601a      	str	r2, [r3, #0]
}
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001ea0:	f000 f828 	bl	8001ef4 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001ea4:	f240 0314 	movw	r3, #20
 8001ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f103 0201 	add.w	r2, r3, #1
 8001eb2:	f240 0314 	movw	r3, #20
 8001eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop

08001ec0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8001ec4:	f240 0314 	movw	r3, #20
 8001ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f103 32ff 	add.w	r2, r3, #4294967295
 8001ed2:	f240 0314 	movw	r3, #20
 8001ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eda:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001edc:	f240 0314 	movw	r3, #20
 8001ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8001eea:	f04f 0000 	mov.w	r0, #0
 8001eee:	f000 f80b 	bl	8001f08 <vPortClearInterruptMask>
	}
}
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001ef4:	f3ef 8011 	mrs	r0, BASEPRI
 8001ef8:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001efc:	f381 8811 	msr	BASEPRI, r1
 8001f00:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8001f02:	f04f 0300 	mov.w	r3, #0
}
 8001f06:	4618      	mov	r0, r3

08001f08 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8001f08:	f380 8811 	msr	BASEPRI, r0
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop

08001f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001f10:	f3ef 8009 	mrs	r0, PSP
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <pxCurrentTCBConst>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f1c:	6010      	str	r0, [r2, #0]
 8001f1e:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001f22:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f26:	f380 8811 	msr	BASEPRI, r0
 8001f2a:	f000 ff1d 	bl	8002d68 <vTaskSwitchContext>
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f380 8811 	msr	BASEPRI, r0
 8001f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	6808      	ldr	r0, [r1, #0]
 8001f3e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f42:	f380 8809 	msr	PSP, r0
 8001f46:	4770      	bx	lr

08001f48 <pxCurrentTCBConst>:
 8001f48:	20001c2c 	.word	0x20001c2c

08001f4c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f50:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001f54:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f5c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8001f5e:	f7ff ffc9 	bl	8001ef4 <ulPortSetInterruptMask>
	{
		vTaskIncrementTick();
 8001f62:	f000 fe1b 	bl	8002b9c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001f66:	f04f 0000 	mov.w	r0, #0
 8001f6a:	f7ff ffcd 	bl	8001f08 <vPortClearInterruptMask>
}
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8001f74:	f24e 0314 	movw	r3, #57364	; 0xe014
 8001f78:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f7c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8001f82:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001f86:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f8a:	f04f 0207 	mov.w	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
}
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop

08001f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <xQueueGenericReset+0x1a>
 8001fac:	f7ff ffa2 	bl	8001ef4 <ulPortSetInterruptMask>
 8001fb0:	e7fe      	b.n	8001fb0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001fb2:	f7ff ff73 	bl	8001e9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	18d2      	adds	r2, r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	f103 33ff 	add.w	r3, r3, #4294967295
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	18d2      	adds	r2, r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10f      	bne.n	800202c <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d017      	beq.n	8002044 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f103 0310 	add.w	r3, r3, #16
 800201a:	4618      	mov	r0, r3
 800201c:	f000 ffc0 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10e      	bne.n	8002044 <xQueueGenericReset+0xac>
				{
					portYIELD_WITHIN_API();
 8002026:	f7ff ff2d 	bl	8001e84 <vPortYieldFromISR>
 800202a:	e00b      	b.n	8002044 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f103 0310 	add.w	r3, r3, #16
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fdf6 	bl	8001c24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fdf0 	bl	8001c24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002044:	f7ff ff3c 	bl	8001ec0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002048:	f04f 0301 	mov.w	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	f107 0710 	add.w	r7, r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop

08002058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d029      	beq.n	80020c6 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8002072:	f04f 004c 	mov.w	r0, #76	; 0x4c
 8002076:	f7ff fd53 	bl	8001b20 <pvPortMalloc>
 800207a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d021      	beq.n	80020c6 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	f103 0301 	add.w	r3, r3, #1
 800208e:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8002090:	6978      	ldr	r0, [r7, #20]
 8002092:	f7ff fd45 	bl	8001b20 <pvPortMalloc>
 8002096:	4602      	mov	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 80020b0:	69b8      	ldr	r0, [r7, #24]
 80020b2:	f04f 0101 	mov.w	r1, #1
 80020b6:	f7ff ff6f 	bl	8001f98 <xQueueGenericReset>
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e002      	b.n	80020c6 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80020c0:	69b8      	ldr	r0, [r7, #24]
 80020c2:	f7ff fd91 	bl	8001be8 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <xQueueGenericCreate+0x7a>
 80020cc:	f7ff ff12 	bl	8001ef4 <ulPortSetInterruptMask>
 80020d0:	e7fe      	b.n	80020d0 <xQueueGenericCreate+0x78>

	return xReturn;
 80020d2:	69fb      	ldr	r3, [r7, #28]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	f107 0720 	add.w	r7, r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop

080020e0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <xQueueGenericSend+0x24>
 80020fe:	f7ff fef9 	bl	8001ef4 <ulPortSetInterruptMask>
 8002102:	e7fe      	b.n	8002102 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <xQueueGenericSend+0x32>
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <xQueueGenericSend+0x38>
 8002112:	f04f 0301 	mov.w	r3, #1
 8002116:	e001      	b.n	800211c <xQueueGenericSend+0x3c>
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <xQueueGenericSend+0x48>
 8002120:	f7ff fee8 	bl	8001ef4 <ulPortSetInterruptMask>
 8002124:	e7fe      	b.n	8002124 <xQueueGenericSend+0x44>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8002126:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002128:	f7ff feb8 	bl	8001e9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	429a      	cmp	r2, r3
 8002136:	d218      	bcs.n	800216a <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002138:	69b8      	ldr	r0, [r7, #24]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	f000 f9b1 	bl	80024a4 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <xQueueGenericSend+0x80>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002150:	4618      	mov	r0, r3
 8002152:	f000 ff25 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002156:	4603      	mov	r3, r0
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <xQueueGenericSend+0x80>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 800215c:	f7ff fe92 	bl	8001e84 <vPortYieldFromISR>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002160:	f7ff feae 	bl	8001ec0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8002164:	f04f 0301 	mov.w	r3, #1
 8002168:	e05d      	b.n	8002226 <xQueueGenericSend+0x146>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <xQueueGenericSend+0x9a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002170:	f7ff fea6 	bl	8001ec0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e055      	b.n	8002226 <xQueueGenericSend+0x146>
				}
				else if( xEntryTimeSet == pdFALSE )
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	4618      	mov	r0, r3
 8002186:	f000 ff73 	bl	8003070 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800218a:	f04f 0301 	mov.w	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8002190:	f7ff fe96 	bl	8001ec0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002194:	f000 fc2a 	bl	80029ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002198:	f7ff fe80 	bl	8001e9c <vPortEnterCritical>
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d103      	bne.n	80021ae <xQueueGenericSend+0xce>
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d103      	bne.n	80021c0 <xQueueGenericSend+0xe0>
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	649a      	str	r2, [r3, #72]	; 0x48
 80021c0:	f7ff fe7e 	bl	8001ec0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021c4:	f107 0210 	add.w	r2, r7, #16
 80021c8:	f107 0304 	add.w	r3, r7, #4
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f000 ff6a 	bl	80030a8 <xTaskCheckForTimeOut>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11e      	bne.n	8002218 <xQueueGenericSend+0x138>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021da:	69b8      	ldr	r0, [r7, #24]
 80021dc:	f000 fa56 	bl	800268c <prvIsQueueFull>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f103 0210 	add.w	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f000 fe63 	bl	8002ebc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021f6:	69b8      	ldr	r0, [r7, #24]
 80021f8:	f000 f9de 	bl	80025b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021fc:	f000 fc08 	bl	8002a10 <xTaskResumeAll>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d18f      	bne.n	8002126 <xQueueGenericSend+0x46>
				{
					portYIELD_WITHIN_API();
 8002206:	f7ff fe3d 	bl	8001e84 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 800220a:	e78c      	b.n	8002126 <xQueueGenericSend+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800220c:	69b8      	ldr	r0, [r7, #24]
 800220e:	f000 f9d3 	bl	80025b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002212:	f000 fbfd 	bl	8002a10 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8002216:	e786      	b.n	8002126 <xQueueGenericSend+0x46>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002218:	69b8      	ldr	r0, [r7, #24]
 800221a:	f000 f9cd 	bl	80025b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800221e:	f000 fbf7 	bl	8002a10 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002222:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8002226:	4618      	mov	r0, r3
 8002228:	f107 0720 	add.w	r7, r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <xQueueGenericSendFromISR+0x1e>
 8002248:	f7ff fe54 	bl	8001ef4 <ulPortSetInterruptMask>
 800224c:	e7fe      	b.n	800224c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <xQueueGenericSendFromISR+0x2c>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <xQueueGenericSendFromISR+0x32>
 800225c:	f04f 0301 	mov.w	r3, #1
 8002260:	e001      	b.n	8002266 <xQueueGenericSendFromISR+0x36>
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <xQueueGenericSendFromISR+0x40>
 800226a:	f7ff fe43 	bl	8001ef4 <ulPortSetInterruptMask>
 800226e:	e7fe      	b.n	800226e <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002270:	f7ff fe40 	bl	8001ef4 <ulPortSetInterruptMask>
 8002274:	6178      	str	r0, [r7, #20]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	429a      	cmp	r2, r3
 8002280:	d228      	bcs.n	80022d4 <xQueueGenericSendFromISR+0xa4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002282:	69b8      	ldr	r0, [r7, #24]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	f000 f90c 	bl	80024a4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d114      	bne.n	80022c0 <xQueueGenericSendFromISR+0x90>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fe7b 	bl	8002fa0 <xTaskRemoveFromEventList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f04f 0201 	mov.w	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e005      	b.n	80022cc <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	f103 0201 	add.w	r2, r3, #1
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80022cc:	f04f 0301 	mov.w	r3, #1
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e002      	b.n	80022da <xQueueGenericSendFromISR+0xaa>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff fe14 	bl	8001f08 <vPortClearInterruptMask>

	return xReturn;
 80022e0:	69fb      	ldr	r3, [r7, #28]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	f107 0720 	add.w	r7, r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue );
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <xQueueGenericReceive+0x24>
 800230a:	f7ff fdf3 	bl	8001ef4 <ulPortSetInterruptMask>
 800230e:	e7fe      	b.n	800230e <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <xQueueGenericReceive+0x32>
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <xQueueGenericReceive+0x38>
 800231e:	f04f 0301 	mov.w	r3, #1
 8002322:	e001      	b.n	8002328 <xQueueGenericReceive+0x3c>
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <xQueueGenericReceive+0x48>
 800232c:	f7ff fde2 	bl	8001ef4 <ulPortSetInterruptMask>
 8002330:	e7fe      	b.n	8002330 <xQueueGenericReceive+0x44>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002332:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002334:	f7ff fdb2 	bl	8001e9c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03f      	beq.n	80023c0 <xQueueGenericReceive+0xd4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002346:	6a38      	ldr	r0, [r7, #32]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	f000 f90d 	bl	8002568 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11e      	bne.n	8002392 <xQueueGenericReceive+0xa6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	f103 32ff 	add.w	r2, r3, #4294967295
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <xQueueGenericReceive+0x86>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8002368:	f001 f884 	bl	8003474 <xTaskGetCurrentTaskHandle>
 800236c:	4602      	mov	r2, r0
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01d      	beq.n	80023b6 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f103 0310 	add.w	r3, r3, #16
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fe0d 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d114      	bne.n	80023b6 <xQueueGenericReceive+0xca>
						{
							portYIELD_WITHIN_API();
 800238c:	f7ff fd7a 	bl	8001e84 <vPortYieldFromISR>
 8002390:	e011      	b.n	80023b6 <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <xQueueGenericReceive+0xca>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fdfa 	bl	8002fa0 <xTaskRemoveFromEventList>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80023b2:	f7ff fd67 	bl	8001e84 <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 80023b6:	f7ff fd83 	bl	8001ec0 <vPortExitCritical>
				return pdPASS;
 80023ba:	f04f 0301 	mov.w	r3, #1
 80023be:	e06b      	b.n	8002498 <xQueueGenericReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023c6:	f7ff fd7b 	bl	8001ec0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e063      	b.n	8002498 <xQueueGenericReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fe48 	bl	8003070 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023e0:	f04f 0301 	mov.w	r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		}
		taskEXIT_CRITICAL();
 80023e6:	f7ff fd6b 	bl	8001ec0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023ea:	f000 faff 	bl	80029ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023ee:	f7ff fd55 	bl	8001e9c <vPortEnterCritical>
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d103      	bne.n	8002404 <xQueueGenericReceive+0x118>
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d103      	bne.n	8002416 <xQueueGenericReceive+0x12a>
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	649a      	str	r2, [r3, #72]	; 0x48
 8002416:	f7ff fd53 	bl	8001ec0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800241a:	f107 0214 	add.w	r2, r7, #20
 800241e:	f107 0304 	add.w	r3, r7, #4
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f000 fe3f 	bl	80030a8 <xTaskCheckForTimeOut>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d12c      	bne.n	800248a <xQueueGenericReceive+0x19e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002430:	6a38      	ldr	r0, [r7, #32]
 8002432:	f000 f911 	bl	8002658 <prvIsQueueEmpty>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d108      	bne.n	8002456 <xQueueGenericReceive+0x16a>
					{
						portENTER_CRITICAL();
 8002444:	f7ff fd2a 	bl	8001e9c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	f001 f845 	bl	80034dc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8002452:	f7ff fd35 	bl	8001ec0 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f000 fd2b 	bl	8002ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002466:	6a38      	ldr	r0, [r7, #32]
 8002468:	f000 f8a6 	bl	80025b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800246c:	f000 fad0 	bl	8002a10 <xTaskResumeAll>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f af5d 	bne.w	8002332 <xQueueGenericReceive+0x46>
				{
					portYIELD_WITHIN_API();
 8002478:	f7ff fd04 	bl	8001e84 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800247c:	e759      	b.n	8002332 <xQueueGenericReceive+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800247e:	6a38      	ldr	r0, [r7, #32]
 8002480:	f000 f89a 	bl	80025b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002484:	f000 fac4 	bl	8002a10 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002488:	e753      	b.n	8002332 <xQueueGenericReceive+0x46>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800248a:	6a38      	ldr	r0, [r7, #32]
 800248c:	f000 f894 	bl	80025b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002490:	f000 fabe 	bl	8002a10 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002494:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8002498:	4618      	mov	r0, r3
 800249a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop

080024a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10d      	bne.n	80024d4 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d148      	bne.n	8002552 <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 f877 	bl	80035b8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	e03e      	b.n	8002552 <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11a      	bne.n	8002510 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4610      	mov	r0, r2
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f002 f856 	bl	8004598 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	18d2      	adds	r2, r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d325      	bcc.n	8002552 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	e020      	b.n	8002552 <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4610      	mov	r0, r2
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	461a      	mov	r2, r3
 800251e:	f002 f83b 	bl	8004598 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f1c3 0300 	rsb	r3, r3, #0
 800252e:	18d2      	adds	r2, r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d208      	bcs.n	8002552 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f1c3 0300 	rsb	r3, r3, #0
 800254c:	18d2      	adds	r2, r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	f103 0201 	add.w	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800255e:	f107 0710 	add.w	r7, r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop

08002568 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d019      	beq.n	80025ae <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	18d2      	adds	r2, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d303      	bcc.n	800259c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	f001 fff5 	bl	8004598 <memcpy>
	}
}
 80025ae:	f107 0708 	add.w	r7, r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop

080025b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025c0:	f7ff fc6c 	bl	8001e9c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80025c4:	e014      	b.n	80025f0 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <prvUnlockQueue+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fce3 	bl	8002fa0 <xTaskRemoveFromEventList>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <prvUnlockQueue+0x2c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80025e0:	f000 fdc0 	bl	8003164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	dce6      	bgt.n	80025c6 <prvUnlockQueue+0xe>
 80025f8:	e000      	b.n	80025fc <prvUnlockQueue+0x44>
						vTaskMissedYield();
					}
				}
				else
				{
					break;
 80025fa:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002602:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002604:	f7ff fc5c 	bl	8001ec0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002608:	f7ff fc48 	bl	8001e9c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800260c:	e014      	b.n	8002638 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f103 0310 	add.w	r3, r3, #16
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fcbf 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 8002628:	f000 fd9c 	bl	8003164 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f103 32ff 	add.w	r2, r3, #4294967295
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	2b00      	cmp	r3, #0
 800263e:	dce6      	bgt.n	800260e <prvUnlockQueue+0x56>
 8002640:	e000      	b.n	8002644 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8002642:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f04f 32ff 	mov.w	r2, #4294967295
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800264c:	f7ff fc38 	bl	8001ec0 <vPortExitCritical>
}
 8002650:	f107 0708 	add.w	r7, r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002660:	f7ff fc1c 	bl	8001e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == 0 )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
 800266c:	f04f 0301 	mov.w	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e002      	b.n	800267a <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800267a:	f7ff fc21 	bl	8001ec0 <vPortExitCritical>

	return xReturn;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	f107 0710 	add.w	r7, r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop

0800268c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002694:	f7ff fc02 	bl	8001e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d103      	bne.n	80026ac <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
 80026a4:	f04f 0301 	mov.w	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e002      	b.n	80026b2 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026b2:	f7ff fc05 	bl	8001ec0 <vPortExitCritical>

	return xReturn;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	f107 0710 	add.w	r7, r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop

080026c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	xQUEUE *pxQueue;

		pxQueue = ( xQUEUE * ) xQueue;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80026d2:	f7ff fbe3 	bl	8001e9c <vPortEnterCritical>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026de:	d103      	bne.n	80026e8 <vQueueWaitForMessageRestricted+0x24>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d103      	bne.n	80026fa <vQueueWaitForMessageRestricted+0x36>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	649a      	str	r2, [r3, #72]	; 0x48
 80026fa:	f7ff fbe1 	bl	8001ec0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <vQueueWaitForMessageRestricted+0x50>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800270c:	4618      	mov	r0, r3
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	f000 fc16 	bl	8002f40 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff ff4f 	bl	80025b8 <prvUnlockQueue>
	}
 800271a:	f107 0710 	add.w	r7, r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop

08002724 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <xTaskGenericCreate+0x1c>
 800273a:	f7ff fbdb 	bl	8001ef4 <ulPortSetInterruptMask>
 800273e:	e7fe      	b.n	800273e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	2b04      	cmp	r3, #4
 8002744:	d902      	bls.n	800274c <xTaskGenericCreate+0x28>
 8002746:	f7ff fbd5 	bl	8001ef4 <ulPortSetInterruptMask>
 800274a:	e7fe      	b.n	800274a <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	4618      	mov	r0, r3
 8002750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002752:	f000 fe47 	bl	80033e4 <prvAllocateTCBAndStack>
 8002756:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80b5 	beq.w	80028ca <xTaskGenericCreate+0x1a6>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	f103 33ff 	add.w	r3, r3, #4294967295
 800276a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800276e:	18d3      	adds	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f023 0307 	bic.w	r3, r3, #7
 8002778:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <xTaskGenericCreate+0x66>
 8002784:	f7ff fbb6 	bl	8001ef4 <ulPortSetInterruptMask>
 8002788:	e7fe      	b.n	8002788 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	69b8      	ldr	r0, [r7, #24]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	f000 fd03 	bl	80031a0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	f7ff fafc 	bl	8001d9c <pxPortInitialiseStack>
 80027a4:	4602      	mov	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <xTaskGenericCreate+0x98>
 80027b6:	f7ff fb9d 	bl	8001ef4 <ulPortSetInterruptMask>
 80027ba:	e7fe      	b.n	80027ba <xTaskGenericCreate+0x96>

		if( ( void * ) pxCreatedTask != NULL )
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <xTaskGenericCreate+0xa4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 80027c8:	f7ff fb68 	bl	8001e9c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80027cc:	f641 5304 	movw	r3, #7428	; 0x1d04
 80027d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f103 0201 	add.w	r2, r3, #1
 80027da:	f641 5304 	movw	r3, #7428	; 0x1d04
 80027de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027e2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80027e4:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80027e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <xTaskGenericCreate+0xee>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80027f2:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80027f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80027fe:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d118      	bne.n	800283e <xTaskGenericCreate+0x11a>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800280c:	f000 fd04 	bl	8003218 <prvInitialiseTaskLists>
 8002810:	e015      	b.n	800283e <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002812:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10e      	bne.n	800283e <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002820:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002824:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	429a      	cmp	r2, r3
 8002830:	d805      	bhi.n	800283e <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
 8002832:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8002846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d906      	bls.n	800285e <xTaskGenericCreate+0x13a>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8002858:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800285c:	601a      	str	r2, [r3, #0]
			}

			uxTaskNumber++;
 800285e:	f641 5328 	movw	r3, #7464	; 0x1d28
 8002862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f103 0201 	add.w	r2, r3, #1
 800286c:	f641 5328 	movw	r3, #7464	; 0x1d28
 8002870:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002874:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287a:	f641 5310 	movw	r3, #7440	; 0x1d10
 800287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d906      	bls.n	8002896 <xTaskGenericCreate+0x172>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002890:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4613      	mov	r3, r2
 800289c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028a0:	189b      	adds	r3, r3, r2
 80028a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028a6:	f641 4230 	movw	r2, #7216	; 0x1c30
 80028aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80028ae:	189a      	adds	r2, r3, r2
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f103 0304 	add.w	r3, r3, #4
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7ff f9e1 	bl	8001c80 <vListInsertEnd>

			xReturn = pdPASS;
 80028be:	f04f 0301 	mov.w	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80028c4:	f7ff fafc 	bl	8001ec0 <vPortExitCritical>
 80028c8:	e002      	b.n	80028d0 <xTaskGenericCreate+0x1ac>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d111      	bne.n	80028fa <xTaskGenericCreate+0x1d6>
	{
		if( xSchedulerRunning != pdFALSE )
 80028d6:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <xTaskGenericCreate+0x1d6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80028e4:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80028e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d201      	bcs.n	80028fa <xTaskGenericCreate+0x1d6>
			{
				portYIELD_WITHIN_API();
 80028f6:	f7ff fac5 	bl	8001e84 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 80028fa:	69fb      	ldr	r3, [r7, #28]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	f107 0720 	add.w	r7, r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d019      	beq.n	8002950 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
 800291c:	f000 f866 	bl	80029ec <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002920:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	18d3      	adds	r3, r2, r3
 800292e:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002930:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f103 0304 	add.w	r3, r3, #4
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fa00 	bl	8001d44 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002944:	68b8      	ldr	r0, [r7, #8]
 8002946:	f000 fd07 	bl	8003358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800294a:	f000 f861 	bl	8002a10 <xTaskResumeAll>
 800294e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
 8002956:	f7ff fa95 	bl	8001e84 <vPortYieldFromISR>
		}
	}
 800295a:	f107 0710 	add.w	r7, r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop

08002964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	9302      	str	r3, [sp, #8]
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	9303      	str	r3, [sp, #12]
 8002982:	f243 107d 	movw	r0, #12669	; 0x317d
 8002986:	f6c0 0000 	movt	r0, #2048	; 0x800
 800298a:	f644 114c 	movw	r1, #18764	; 0x494c
 800298e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002992:	f04f 0246 	mov.w	r2, #70	; 0x46
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f7ff fec3 	bl	8002724 <xTaskGenericCreate>
 800299e:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <vTaskStartScheduler+0x48>
		{
			xReturn = xTimerCreateTimerTask();
 80029a6:	f000 fe4f 	bl	8003648 <xTimerCreateTimerTask>
 80029aa:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d112      	bne.n	80029d8 <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 80029b2:	f7ff fa9f 	bl	8001ef4 <ulPortSetInterruptMask>

		xSchedulerRunning = pdTRUE;
 80029b6:	f641 5314 	movw	r3, #7444	; 0x1d14
 80029ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029be:	f04f 0201 	mov.w	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80029c4:	f641 5308 	movw	r3, #7432	; 0x1d08
 80029c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029d2:	f7ff fa2d 	bl	8001e30 <xPortStartScheduler>
 80029d6:	e005      	b.n	80029e4 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <vTaskStartScheduler+0x80>
 80029de:	f7ff fa89 	bl	8001ef4 <ulPortSetInterruptMask>
 80029e2:	e7fe      	b.n	80029e2 <vTaskStartScheduler+0x7e>
	}
}
 80029e4:	f107 0708 	add.w	r7, r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80029f0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80029f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f103 0201 	add.w	r2, r3, #1
 80029fe:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a06:	601a      	str	r2, [r3, #0]
}
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a1c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <xTaskResumeAll+0x20>
 8002a2a:	f7ff fa63 	bl	8001ef4 <ulPortSetInterruptMask>
 8002a2e:	e7fe      	b.n	8002a2e <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a30:	f7ff fa34 	bl	8001e9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a34:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f103 32ff 	add.w	r2, r3, #4294967295
 8002a42:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a4a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002a4c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 8084 	bne.w	8002b64 <xTaskResumeAll+0x154>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002a5c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d07c      	beq.n	8002b64 <xTaskResumeAll+0x154>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002a70:	e03b      	b.n	8002aea <xTaskResumeAll+0xda>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8002a72:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8002a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
 8002a7e:	f104 0318 	add.w	r3, r4, #24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f95e 	bl	8001d44 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8002a88:	f104 0304 	add.w	r3, r4, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f959 	bl	8001d44 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002a92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a94:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d905      	bls.n	8002aae <xTaskResumeAll+0x9e>
 8002aa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002aa4:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ab6:	189b      	adds	r3, r3, r2
 8002ab8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002abc:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002ac0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002ac4:	189a      	adds	r2, r3, r2
 8002ac6:	f104 0304 	add.w	r3, r4, #4
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f7ff f8d7 	bl	8001c80 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ad2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ad4:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <xTaskResumeAll+0xda>
					{
						xYieldRequired = pdTRUE;
 8002ae4:	f04f 0301 	mov.w	r3, #1
 8002ae8:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002aea:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8002aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1bc      	bne.n	8002a72 <xTaskResumeAll+0x62>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002af8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <xTaskResumeAll+0x128>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002b06:	e00d      	b.n	8002b24 <xTaskResumeAll+0x114>
					{
						vTaskIncrementTick();
 8002b08:	f000 f848 	bl	8002b9c <vTaskIncrementTick>
						--uxMissedTicks;
 8002b0c:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f103 32ff 	add.w	r2, r3, #4294967295
 8002b1a:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b22:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002b24:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ea      	bne.n	8002b08 <xTaskResumeAll+0xf8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8002b32:	f04f 0301 	mov.w	r3, #1
 8002b36:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d006      	beq.n	8002b4c <xTaskResumeAll+0x13c>
 8002b3e:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10b      	bne.n	8002b64 <xTaskResumeAll+0x154>
				{
					xAlreadyYielded = pdTRUE;
 8002b4c:	f04f 0301 	mov.w	r3, #1
 8002b50:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8002b52:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8002b60:	f7ff f990 	bl	8001e84 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8002b64:	f7ff f9ac 	bl	8001ec0 <vPortExitCritical>

	return xAlreadyYielded;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f107 070c 	add.w	r7, r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}

08002b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8002b7a:	f7ff f98f 	bl	8001e9c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8002b7e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8002b8a:	f7ff f999 	bl	8001ec0 <vPortExitCritical>

	return xTicks;
 8002b8e:	687b      	ldr	r3, [r7, #4]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	f107 0708 	add.w	r7, r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop

08002b9c <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002ba2:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 80ca 	bne.w	8002d46 <vTaskIncrementTick+0x1aa>
	{
		++xTickCount;
 8002bb2:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f103 0201 	add.w	r2, r3, #1
 8002bc0:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bc8:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8002bca:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d14b      	bne.n	8002c70 <vTaskIncrementTick+0xd4>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8002bd8:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <vTaskIncrementTick+0x52>
 8002be8:	f7ff f984 	bl	8001ef4 <ulPortSetInterruptMask>
 8002bec:	e7fe      	b.n	8002bec <vTaskIncrementTick+0x50>

			pxTemp = pxDelayedTaskList;
 8002bee:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8002bfa:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8002bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c0c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8002c0e:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8002c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8002c1a:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f103 0201 	add.w	r2, r3, #1
 8002c28:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c30:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c32:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <vTaskIncrementTick+0xb6>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8002c42:	f240 0318 	movw	r3, #24
 8002c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e00e      	b.n	8002c70 <vTaskIncrementTick+0xd4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c52:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	f240 0318 	movw	r3, #24
 8002c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c6e:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8002c70:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	f240 0318 	movw	r3, #24
 8002c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d36a      	bcc.n	8002d5e <vTaskIncrementTick+0x1c2>
 8002c88:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <vTaskIncrementTick+0x10c>
 8002c98:	f240 0318 	movw	r3, #24
 8002c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e05a      	b.n	8002d5e <vTaskIncrementTick+0x1c2>
 8002ca8:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d206      	bcs.n	8002cdc <vTaskIncrementTick+0x140>
 8002cce:	f240 0318 	movw	r3, #24
 8002cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e040      	b.n	8002d5e <vTaskIncrementTick+0x1c2>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f103 0304 	add.w	r3, r3, #4
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f82e 	bl	8001d44 <uxListRemove>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <vTaskIncrementTick+0x160>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f103 0318 	add.w	r3, r3, #24
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f824 	bl	8001d44 <uxListRemove>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d906      	bls.n	8002d1c <vTaskIncrementTick+0x180>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	4613      	mov	r3, r2
 8002d22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d2c:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002d30:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002d34:	189a      	adds	r2, r3, r2
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f103 0304 	add.w	r3, r3, #4
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fe ff9e 	bl	8001c80 <vListInsertEnd>
 8002d44:	e7a0      	b.n	8002c88 <vTaskIncrementTick+0xec>
	}
	else
	{
		++uxMissedTicks;
 8002d46:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f103 0201 	add.w	r2, r3, #1
 8002d54:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d5c:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
 8002d5e:	f107 0710 	add.w	r7, r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop

08002d68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8002d6e:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8002d7c:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d84:	f04f 0201 	mov.w	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e093      	b.n	8002eb4 <vTaskSwitchContext+0x14c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8002d8c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d80f      	bhi.n	8002dc8 <vTaskSwitchContext+0x60>
 8002da8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f001 fb4a 	bl	800445c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8002dc8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f644 214c 	movw	r1, #19020	; 0x4a4c
 8002dda:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002dde:	f04f 0214 	mov.w	r2, #20
 8002de2:	f001 fb7d 	bl	80044e0 <memcmp>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d026      	beq.n	8002e3a <vTaskSwitchContext+0xd2>
 8002dec:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f001 fb28 	bl	800445c <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e0c:	e015      	b.n	8002e3a <vTaskSwitchContext+0xd2>
 8002e0e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <vTaskSwitchContext+0xba>
 8002e1c:	f7ff f86a 	bl	8001ef4 <ulPortSetInterruptMask>
 8002e20:	e7fe      	b.n	8002e20 <vTaskSwitchContext+0xb8>
 8002e22:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f103 32ff 	add.w	r2, r3, #4294967295
 8002e30:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002e48:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e52:	185b      	adds	r3, r3, r1
 8002e54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0d6      	beq.n	8002e0e <vTaskSwitchContext+0xa6>
 8002e60:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e70:	189b      	adds	r3, r3, r2
 8002e72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e76:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002e7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f103 0308 	add.w	r3, r3, #8
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d104      	bne.n	8002ea4 <vTaskSwitchContext+0x13c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
 8002eb4:	f107 0708 	add.w	r7, r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <vTaskPlaceOnEventList+0x16>
 8002ecc:	f7ff f812 	bl	8001ef4 <ulPortSetInterruptMask>
 8002ed0:	e7fe      	b.n	8002ed0 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002ed2:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f103 0318 	add.w	r3, r3, #24
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f7fe fef4 	bl	8001cd0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002ee8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f103 0304 	add.w	r3, r3, #4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe ff24 	bl	8001d44 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d10e      	bne.n	8002f22 <vTaskPlaceOnEventList+0x66>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002f04:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f103 0304 	add.w	r3, r3, #4
 8002f12:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 8002f16:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7fe feb0 	bl	8001c80 <vListInsertEnd>
 8002f20:	e00a      	b.n	8002f38 <vTaskPlaceOnEventList+0x7c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002f22:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	18d3      	adds	r3, r2, r3
 8002f30:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fa10 	bl	8003358 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f38:	f107 0710 	add.w	r7, r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <vTaskPlaceOnEventListRestricted+0x16>
 8002f50:	f7fe ffd0 	bl	8001ef4 <ulPortSetInterruptMask>
 8002f54:	e7fe      	b.n	8002f54 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002f56:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f103 0318 	add.w	r3, r3, #24
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7fe fe8a 	bl	8001c80 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002f6c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f103 0304 	add.w	r3, r3, #4
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fee2 	bl	8001d44 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002f80:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	18d3      	adds	r3, r2, r3
 8002f8e:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9e1 	bl	8003358 <prvAddCurrentTaskToDelayedList>
	}
 8002f96:	f107 0710 	add.w	r7, r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop

08002fa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <xTaskRemoveFromEventList+0x1c>
 8002fb6:	f7fe ff9d 	bl	8001ef4 <ulPortSetInterruptMask>
 8002fba:	e7fe      	b.n	8002fba <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f103 0318 	add.w	r3, r3, #24
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe febe 	bl	8001d44 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002fc8:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d12a      	bne.n	800302c <xTaskRemoveFromEventList+0x8c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f103 0304 	add.w	r3, r3, #4
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe feb1 	bl	8001d44 <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe6:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d906      	bls.n	8003002 <xTaskRemoveFromEventList+0x62>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003006:	4613      	mov	r3, r2
 8003008:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800300c:	189b      	adds	r3, r3, r2
 800300e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003012:	f641 4230 	movw	r2, #7216	; 0x1c30
 8003016:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800301a:	189a      	adds	r2, r3, r2
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f103 0304 	add.w	r3, r3, #4
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	f7fe fe2b 	bl	8001c80 <vListInsertEnd>
 800302a:	e009      	b.n	8003040 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f103 0318 	add.w	r3, r3, #24
 8003032:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 8003036:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800303a:	4619      	mov	r1, r3
 800303c:	f7fe fe20 	bl	8001c80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	d303      	bcc.n	800305c <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003054:	f04f 0301 	mov.w	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e002      	b.n	8003062 <xTaskRemoveFromEventList+0xc2>
	}
	else
	{
		xReturn = pdFALSE;
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	f107 0710 	add.w	r7, r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop

08003070 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <vTaskSetTimeOutState+0x14>
 800307e:	f7fe ff39 	bl	8001ef4 <ulPortSetInterruptMask>
 8003082:	e7fe      	b.n	8003082 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003084:	f641 5324 	movw	r3, #7460	; 0x1d24
 8003088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003092:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	605a      	str	r2, [r3, #4]
}
 80030a0:	f107 0708 	add.w	r7, r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <xTaskCheckForTimeOut+0x16>
 80030b8:	f7fe ff1c 	bl	8001ef4 <ulPortSetInterruptMask>
 80030bc:	e7fe      	b.n	80030bc <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <xTaskCheckForTimeOut+0x22>
 80030c4:	f7fe ff16 	bl	8001ef4 <ulPortSetInterruptMask>
 80030c8:	e7fe      	b.n	80030c8 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80030ca:	f7fe fee7 	bl	8001e9c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d103      	bne.n	80030e0 <xTaskCheckForTimeOut+0x38>
			{
				xReturn = pdFALSE;
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e038      	b.n	8003152 <xTaskCheckForTimeOut+0xaa>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	f641 5324 	movw	r3, #7460	; 0x1d24
 80030e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d00c      	beq.n	800310c <xTaskCheckForTimeOut+0x64>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	f641 5308 	movw	r3, #7432	; 0x1d08
 80030fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d803      	bhi.n	800310c <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003104:	f04f 0301 	mov.w	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e022      	b.n	8003152 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 800310c:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d213      	bcs.n	800314c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1acb      	subs	r3, r1, r3
 8003138:	18d2      	adds	r2, r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff96 	bl	8003070 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e002      	b.n	8003152 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800314c:	f04f 0301 	mov.w	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003152:	f7fe feb5 	bl	8001ec0 <vPortExitCritical>

	return xReturn;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	f107 0710 	add.w	r7, r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop

08003164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8003168:	f641 5320 	movw	r3, #7456	; 0x1d20
 800316c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003170:	f04f 0201 	mov.w	r2, #1
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003184:	f000 f89a 	bl	80032bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003188:	f641 4330 	movw	r3, #7216	; 0x1c30
 800318c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d901      	bls.n	800319a <prvIdleTask+0x1e>
			{
				taskYIELD();
 8003196:	f7fe fe75 	bl	8001e84 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800319a:	f001 f965 	bl	8004468 <vApplicationIdleHook>
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800319e:	e7f1      	b.n	8003184 <prvIdleTask+0x8>

080031a0 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80031b4:	4618      	mov	r0, r3
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	f04f 020a 	mov.w	r2, #10
 80031bc:	f001 fb30 	bl	8004820 <strncpy>
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d902      	bls.n	80031d6 <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80031d0:	f04f 0304 	mov.w	r3, #4
 80031d4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f103 0304 	add.w	r3, r3, #4
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fd3b 	bl	8001c64 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f103 0318 	add.w	r3, r3, #24
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fd35 	bl	8001c64 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1c3 0205 	rsb	r2, r3, #5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif /* portUSING_MPU_WRAPPERS */
}
 8003210:	f107 0710 	add.w	r7, r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	e012      	b.n	800324c <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800322e:	189b      	adds	r3, r3, r2
 8003230:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003234:	f641 4230 	movw	r2, #7216	; 0x1c30
 8003238:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800323c:	189b      	adds	r3, r3, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fcf0 	bl	8001c24 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 0301 	add.w	r3, r3, #1
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d9e9      	bls.n	8003226 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8003252:	f641 4094 	movw	r0, #7316	; 0x1c94
 8003256:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800325a:	f7fe fce3 	bl	8001c24 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 800325e:	f641 40a8 	movw	r0, #7336	; 0x1ca8
 8003262:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003266:	f7fe fcdd 	bl	8001c24 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 800326a:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 800326e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003272:	f7fe fcd7 	bl	8001c24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8003276:	f641 40d8 	movw	r0, #7384	; 0x1cd8
 800327a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800327e:	f7fe fcd1 	bl	8001c24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8003282:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 8003286:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800328a:	f7fe fccb 	bl	8001c24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800328e:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8003292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003296:	f641 4294 	movw	r2, #7316	; 0x1c94
 800329a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800329e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032a0:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 80032a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032a8:	f641 42a8 	movw	r2, #7336	; 0x1ca8
 80032ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80032b0:	601a      	str	r2, [r3, #0]
}
 80032b2:	f107 0708 	add.w	r7, r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop

080032bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80032c2:	e03d      	b.n	8003340 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
 80032c4:	f7ff fb92 	bl	80029ec <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80032c8:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 80032cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2300      	movne	r3, #0
 80032d8:	2301      	moveq	r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80032de:	f7ff fb97 	bl	8002a10 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12b      	bne.n	8003340 <prvCheckTasksWaitingTermination+0x84>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80032e8:	f7fe fdd8 	bl	8001e9c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80032ec:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 80032f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f103 0304 	add.w	r3, r3, #4
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fd1f 	bl	8001d44 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003306:	f641 5304 	movw	r3, #7428	; 0x1d04
 800330a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f103 32ff 	add.w	r2, r3, #4294967295
 8003314:	f641 5304 	movw	r3, #7428	; 0x1d04
 8003318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800331c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800331e:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003322:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f103 32ff 	add.w	r2, r3, #4294967295
 800332c:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003330:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003334:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8003336:	f7fe fdc3 	bl	8001ec0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f000 f88a 	bl	8003454 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003340:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003344:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ba      	bne.n	80032c4 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 800334e:	f107 0708 	add.w	r7, r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop

08003358 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003360:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 800336e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	429a      	cmp	r2, r3
 800337c:	d210      	bcs.n	80033a0 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800337e:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8003382:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800338c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f103 0304 	add.w	r3, r3, #4
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	f7fe fc99 	bl	8001cd0 <vListInsert>
 800339e:	e01d      	b.n	80033dc <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80033a0:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 80033a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80033ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f103 0304 	add.w	r3, r3, #4
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fe fc88 	bl	8001cd0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80033c0:	f240 0318 	movw	r3, #24
 80033c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d205      	bcs.n	80033dc <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80033d0:	f240 0318 	movw	r3, #24
 80033d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80033dc:	f107 0708 	add.w	r7, r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80033f0:	f04f 0044 	mov.w	r0, #68	; 0x44
 80033f4:	f7fe fb94 	bl	8001b20 <pvPortMalloc>
 80033f8:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d023      	beq.n	8003448 <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <prvAllocateTCBAndStack+0x32>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fb87 	bl	8001b20 <pvPortMalloc>
 8003412:	4603      	mov	r3, r0
 8003414:	e000      	b.n	8003418 <prvAllocateTCBAndStack+0x34>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7fe fbdf 	bl	8001be8 <vPortFree>
			pxNewTCB = NULL;
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e00a      	b.n	8003448 <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800343c:	4610      	mov	r0, r2
 800343e:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8003442:	461a      	mov	r2, r3
 8003444:	f001 f956 	bl	80046f4 <memset>
		}
	}

	return pxNewTCB;
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	f107 0710 	add.w	r7, r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fbc1 	bl	8001be8 <vPortFree>
		vPortFree( pxTCB );
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe fbbe 	bl	8001be8 <vPortFree>
	}
 800346c:	f107 0708 	add.w	r7, r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800347a:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800347e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003486:	687b      	ldr	r3, [r7, #4]
	}
 8003488:	4618      	mov	r0, r3
 800348a:	f107 070c 	add.w	r7, r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800349a:	f641 5314 	movw	r3, #7444	; 0x1d14
 800349e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	e00d      	b.n	80034cc <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80034b0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80034b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034be:	f04f 0301 	mov.w	r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	e002      	b.n	80034cc <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034c6:	f04f 0302 	mov.w	r3, #2
 80034ca:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034cc:	687b      	ldr	r3, [r7, #4]
	}
 80034ce:	4618      	mov	r0, r3
 80034d0:	f107 070c 	add.w	r7, r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d05f      	beq.n	80035ae <vTaskPriorityInherit+0xd2>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80034f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d255      	bcs.n	80035ae <vTaskPriorityInherit+0xd2>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8003502:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003506:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f1c3 0205 	rsb	r2, r3, #5
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6959      	ldr	r1, [r3, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	4613      	mov	r3, r2
 8003520:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003524:	189b      	adds	r3, r3, r2
 8003526:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800352a:	f641 4230 	movw	r2, #7216	; 0x1c30
 800352e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003532:	189b      	adds	r3, r3, r2
 8003534:	4299      	cmp	r1, r3
 8003536:	d132      	bne.n	800359e <vTaskPriorityInherit+0xc2>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f103 0304 	add.w	r3, r3, #4
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe fc00 	bl	8001d44 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003544:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003548:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	f641 5310 	movw	r3, #7440	; 0x1d10
 800355c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d906      	bls.n	8003574 <vTaskPriorityInherit+0x98>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	f641 5310 	movw	r3, #7440	; 0x1d10
 800356e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4613      	mov	r3, r2
 800357a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800357e:	189b      	adds	r3, r3, r2
 8003580:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003584:	f641 4230 	movw	r2, #7216	; 0x1c30
 8003588:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800358c:	189a      	adds	r2, r3, r2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f103 0304 	add.w	r3, r3, #4
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	f7fe fb72 	bl	8001c80 <vListInsertEnd>
 800359c:	e007      	b.n	80035ae <vTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800359e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80035a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 80035ae:	f107 0710 	add.w	r7, r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop

080035b8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d039      	beq.n	800363e <vTaskPriorityDisinherit+0x86>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d033      	beq.n	800363e <vTaskPriorityDisinherit+0x86>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f103 0304 	add.w	r3, r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fbb1 	bl	8001d44 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f1c3 0205 	rsb	r2, r3, #5
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	f641 5310 	movw	r3, #7440	; 0x1d10
 80035fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d906      	bls.n	8003616 <vTaskPriorityDisinherit+0x5e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	4613      	mov	r3, r2
 800361c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003620:	189b      	adds	r3, r3, r2
 8003622:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003626:	f641 4230 	movw	r2, #7216	; 0x1c30
 800362a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800362e:	189a      	adds	r2, r3, r2
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f103 0304 	add.w	r3, r3, #4
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f7fe fb21 	bl	8001c80 <vListInsertEnd>
			}
		}
	}
 800363e:	f107 0710 	add.w	r7, r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop

08003648 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003654:	f000 faa4 	bl	8003ba0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003658:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800365c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01a      	beq.n	800369c <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8003666:	f04f 0303 	mov.w	r3, #3
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	9302      	str	r3, [sp, #8]
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	9303      	str	r3, [sp, #12]
 800367e:	f243 70dd 	movw	r0, #14301	; 0x37dd
 8003682:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003686:	f644 1154 	movw	r1, #18772	; 0x4954
 800368a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800368e:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	f7ff f845 	bl	8002724 <xTaskGenericCreate>
 800369a:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <xTimerCreateTimerTask+0x60>
 80036a2:	f7fe fc27 	bl	8001ef4 <ulPortSetInterruptMask>
 80036a6:	e7fe      	b.n	80036a6 <xTimerCreateTimerTask+0x5e>
	return xReturn;
 80036a8:	687b      	ldr	r3, [r7, #4]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	f107 0708 	add.w	r7, r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80036c8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80036cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03d      	beq.n	8003752 <xTimerGenericCommand+0x9e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d125      	bne.n	8003734 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036e8:	f7ff fed4 	bl	8003494 <xTaskGetSchedulerState>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10f      	bne.n	8003712 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80036f2:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80036f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f107 0310 	add.w	r3, r7, #16
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	f7fe fce9 	bl	80020e0 <xQueueGenericSend>
 800370e:	61f8      	str	r0, [r7, #28]
 8003710:	e01f      	b.n	8003752 <xTimerGenericCommand+0x9e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003712:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	f7fe fcd8 	bl	80020e0 <xQueueGenericSend>
 8003730:	61f8      	str	r0, [r7, #28]
 8003732:	e00e      	b.n	8003752 <xTimerGenericCommand+0x9e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003734:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f107 0310 	add.w	r3, r7, #16
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	f7fe fd70 	bl	8002230 <xQueueGenericSendFromISR>
 8003750:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8003752:	69fb      	ldr	r3, [r7, #28]
}
 8003754:	4618      	mov	r0, r3
 8003756:	f107 0720 	add.w	r7, r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop

08003760 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800376a:	f641 5354 	movw	r3, #7508	; 0x1d54
 800376e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f103 0304 	add.w	r3, r3, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fadf 	bl	8001d44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d11e      	bne.n	80037cc <prvProcessExpiredTimer+0x6c>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	18d3      	adds	r3, r2, r3
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	4619      	mov	r1, r3
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f000 f8bf 	bl	8003920 <prvInsertTimerInActiveList>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d111      	bne.n	80037cc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	f7ff ff7b 	bl	80036b4 <xTimerGenericCommand>
 80037be:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <prvProcessExpiredTimer+0x6c>
 80037c6:	f7fe fb95 	bl	8001ef4 <ulPortSetInterruptMask>
 80037ca:	e7fe      	b.n	80037ca <prvProcessExpiredTimer+0x6a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	4798      	blx	r3
}
 80037d4:	f107 0710 	add.w	r7, r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037e4:	f107 0308 	add.w	r3, r7, #8
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f843 	bl	8003874 <prvGetNextExpireTime>
 80037ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	4619      	mov	r1, r3
 80037f6:	f000 f803 	bl	8003800 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80037fa:	f000 f8db 	bl	80039b4 <prvProcessReceivedCommands>
	}
 80037fe:	e7f1      	b.n	80037e4 <prvTimerTask+0x8>

08003800 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 800380a:	f7ff f8ef 	bl	80029ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f858 	bl	80038c8 <prvSampleTimeNow>
 8003818:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d121      	bne.n	8003864 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <prvProcessTimerOrBlockTask+0x3c>
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	429a      	cmp	r2, r3
 800382c:	d806      	bhi.n	800383c <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 800382e:	f7ff f8ef 	bl	8002a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	68f9      	ldr	r1, [r7, #12]
 8003836:	f7ff ff93 	bl	8003760 <prvProcessExpiredTimer>
 800383a:	e017      	b.n	800386c <prvProcessTimerOrBlockTask+0x6c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800383c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1acb      	subs	r3, r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f7fe ff38 	bl	80026c4 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8003854:	f7ff f8dc 	bl	8002a10 <xTaskResumeAll>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <prvProcessTimerOrBlockTask+0x6a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800385e:	f7fe fb11 	bl	8001e84 <vPortYieldFromISR>
 8003862:	e002      	b.n	800386a <prvProcessTimerOrBlockTask+0x6a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 8003864:	f7ff f8d4 	bl	8002a10 <xTaskResumeAll>
 8003868:	e000      	b.n	800386c <prvProcessTimerOrBlockTask+0x6c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800386a:	bf00      	nop
		else
		{
			xTaskResumeAll();
		}
	}
}
 800386c:	f107 0710 	add.w	r7, r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800387c:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003880:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf14      	ite	ne
 800388c:	2300      	movne	r3, #0
 800388e:	2301      	moveq	r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <prvGetNextExpireTime+0x3e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038a0:	f641 5354 	movw	r3, #7508	; 0x1d54
 80038a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e002      	b.n	80038b8 <prvGetNextExpireTime+0x44>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	f107 0714 	add.w	r7, r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop

080038c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 80038d0:	f7ff f950 	bl	8002b74 <xTaskGetTickCount>
 80038d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80038d6:	f641 5360 	movw	r3, #7520	; 0x1d60
 80038da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d20c      	bcs.n	8003900 <prvSampleTimeNow+0x38>
	{
		prvSwitchTimerLists( xLastTime );
 80038e6:	f641 5360 	movw	r3, #7520	; 0x1d60
 80038ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f8e1 	bl	8003ab8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f04f 0201 	mov.w	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e003      	b.n	8003908 <prvSampleTimeNow+0x40>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003908:	f641 5360 	movw	r3, #7520	; 0x1d60
 800390c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003914:	68fb      	ldr	r3, [r7, #12]
}
 8003916:	4618      	mov	r0, r3
 8003918:	f107 0710 	add.w	r7, r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d817      	bhi.n	8003978 <prvInsertTimerInActiveList+0x58>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	1ad2      	subs	r2, r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	429a      	cmp	r2, r3
 8003954:	d303      	bcc.n	800395e <prvInsertTimerInActiveList+0x3e>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003956:	f04f 0301 	mov.w	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	e024      	b.n	80039a8 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800395e:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f103 0304 	add.w	r3, r3, #4
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f7fe f9ad 	bl	8001cd0 <vListInsert>
 8003976:	e017      	b.n	80039a8 <prvInsertTimerInActiveList+0x88>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d207      	bcs.n	8003990 <prvInsertTimerInActiveList+0x70>
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d303      	bcc.n	8003990 <prvInsertTimerInActiveList+0x70>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003988:	f04f 0301 	mov.w	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e00b      	b.n	80039a8 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003990:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f103 0304 	add.w	r3, r3, #4
 80039a0:	4610      	mov	r0, r2
 80039a2:	4619      	mov	r1, r3
 80039a4:	f7fe f994 	bl	8001cd0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80039a8:	697b      	ldr	r3, [r7, #20]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	f107 0718 	add.w	r7, r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80039ba:	e066      	b.n	8003a8a <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <prvProcessReceivedCommands+0x20>
		{
			/* The timer is in a list, remove it. */
			uxListRemove( &( pxTimer->xTimerListItem ) );
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f103 0304 	add.w	r3, r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe f9b8 	bl	8001d44 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039d4:	f107 0304 	add.w	r3, r7, #4
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff75 	bl	80038c8 <prvSampleTimeNow>
 80039de:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d84e      	bhi.n	8003a84 <prvProcessReceivedCommands+0xd0>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <prvProcessReceivedCommands+0x38>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a85 	.word	0x08003a85
 80039f4:	08003a53 	.word	0x08003a53
 80039f8:	08003a7d 	.word	0x08003a7d
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	18d2      	adds	r2, r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	69f8      	ldr	r0, [r7, #28]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	f7ff ff88 	bl	8003920 <prvInsertTimerInActiveList>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d138      	bne.n	8003a88 <prvProcessReceivedCommands+0xd4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	69f8      	ldr	r0, [r7, #28]
 8003a1c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d130      	bne.n	8003a88 <prvProcessReceivedCommands+0xd4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	18d3      	adds	r3, r2, r3
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	9200      	str	r2, [sp, #0]
 8003a34:	69f8      	ldr	r0, [r7, #28]
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	f7ff fe38 	bl	80036b4 <xTimerGenericCommand>
 8003a44:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11d      	bne.n	8003a88 <prvProcessReceivedCommands+0xd4>
 8003a4c:	f7fe fa52 	bl	8001ef4 <ulPortSetInterruptMask>
 8003a50:	e7fe      	b.n	8003a50 <prvProcessReceivedCommands+0x9c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <prvProcessReceivedCommands+0xb2>
 8003a60:	f7fe fa48 	bl	8001ef4 <ulPortSetInterruptMask>
 8003a64:	e7fe      	b.n	8003a64 <prvProcessReceivedCommands+0xb0>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	18d3      	adds	r3, r2, r3
 8003a6e:	69f8      	ldr	r0, [r7, #28]
 8003a70:	4619      	mov	r1, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f7ff ff53 	bl	8003920 <prvInsertTimerInActiveList>
				break;
 8003a7a:	e006      	b.n	8003a8a <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8003a7c:	69f8      	ldr	r0, [r7, #28]
 8003a7e:	f7fe f8b3 	bl	8001be8 <vPortFree>
				break;
 8003a82:	e002      	b.n	8003a8a <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <prvProcessReceivedCommands+0xd6>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 8003a88:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003a8a:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	f7fe fc22 	bl	80022ec <xQueueGenericReceive>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d186      	bne.n	80039bc <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8003aae:	f107 0720 	add.w	r7, r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop

08003ab8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ac0:	e04b      	b.n	8003b5a <prvSwitchTimerLists+0xa2>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ac2:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ad2:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f103 0304 	add.w	r3, r3, #4
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe f92b 	bl	8001d44 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	69b8      	ldr	r0, [r7, #24]
 8003af4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d12d      	bne.n	8003b5a <prvSwitchTimerLists+0xa2>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d912      	bls.n	8003b36 <prvSwitchTimerLists+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b1c:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f103 0304 	add.w	r3, r3, #4
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f7fe f8ce 	bl	8001cd0 <vListInsert>
 8003b34:	e011      	b.n	8003b5a <prvSwitchTimerLists+0xa2>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	69b8      	ldr	r0, [r7, #24]
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f7ff fdb4 	bl	80036b4 <xTimerGenericCommand>
 8003b4c:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <prvSwitchTimerLists+0xa2>
 8003b54:	f7fe f9ce 	bl	8001ef4 <ulPortSetInterruptMask>
 8003b58:	e7fe      	b.n	8003b58 <prvSwitchTimerLists+0xa0>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b5a:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ab      	bne.n	8003ac2 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b6a:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b76:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b88:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8003b8a:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	f107 0720 	add.w	r7, r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop

08003ba0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ba4:	f7fe f97a 	bl	8001e9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003ba8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d12b      	bne.n	8003c0e <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
 8003bb6:	f641 502c 	movw	r0, #7468	; 0x1d2c
 8003bba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bbe:	f7fe f831 	bl	8001c24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003bc2:	f641 5040 	movw	r0, #7488	; 0x1d40
 8003bc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bca:	f7fe f82b 	bl	8001c24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003bce:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bd6:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003bda:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003bde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003be0:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003be8:	f641 5240 	movw	r2, #7488	; 0x1d40
 8003bec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003bf0:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8003bf2:	f04f 0005 	mov.w	r0, #5
 8003bf6:	f04f 010c 	mov.w	r1, #12
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f7fe fa2b 	bl	8002058 <xQueueGenericCreate>
 8003c02:	4602      	mov	r2, r0
 8003c04:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c0c:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8003c0e:	f7fe f957 	bl	8001ec0 <vPortExitCritical>
}
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <TIM7_IRQHandler>:
{
	( void )pxMBPortCBTimerExpired(  );
}

void TIM7_IRQHandler()
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8003c18:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003c1c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003c20:	f04f 0101 	mov.w	r1, #1
 8003c24:	f7fd fd7a 	bl	800171c <TIM_ClearITPendingBit>
	( void )pxMBPortCBTimerExpired(  );
 8003c28:	f641 5368 	movw	r3, #7528	; 0x1d68
 8003c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4798      	blx	r3
}
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop

08003c38 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c38:	2100      	movs	r1, #0
  b     LoopCopyDataInit
 8003c3a:	f000 b804 	b.w	8003c46 <LoopCopyDataInit>

08003c3e <CopyDataInit>:

CopyDataInit:
  ldr   r3, =_sidata
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <LoopFillZerobss+0x12>)
  ldr   r3, [r3, r1]
 8003c40:	585b      	ldr	r3, [r3, r1]
  str   r3, [r0, r1]
 8003c42:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c44:	3104      	adds	r1, #4

08003c46 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr   r0, =_sdata
 8003c46:	480b      	ldr	r0, [pc, #44]	; (8003c74 <LoopFillZerobss+0x16>)
  ldr   r3, =_edata
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8003c4a:	1842      	adds	r2, r0, r1
  cmp   r2, r3
 8003c4c:	429a      	cmp	r2, r3
  bcc   CopyDataInit
 8003c4e:	f4ff aff6 	bcc.w	8003c3e <CopyDataInit>
  ldr   r2, =_sbss
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <LoopFillZerobss+0x1e>)
  b     LoopFillZerobss
 8003c54:	f000 b803 	b.w	8003c5e <LoopFillZerobss>

08003c58 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c58:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8003c5a:	f842 3b04 	str.w	r3, [r2], #4

08003c5e <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr   r3, = _ebss
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <LoopFillZerobss+0x22>)
  cmp   r2, r3
 8003c60:	429a      	cmp	r2, r3
  bcc   FillZerobss
 8003c62:	f4ff aff9 	bcc.w	8003c58 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c66:	f000 f80f 	bl	8003c88 <SystemInit>
/* Call the application's entry point.*/
  bl    main
 8003c6a:	f000 fbb7 	bl	80043dc <main>
  bx    lr    
 8003c6e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b     LoopCopyDataInit

CopyDataInit:
  ldr   r3, =_sidata
 8003c70:	08005030 	.word	0x08005030
  ldr   r3, [r3, r1]
  str   r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr   r0, =_sdata
 8003c74:	20000000 	.word	0x20000000
  ldr   r3, =_edata
 8003c78:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp   r2, r3
  bcc   CopyDataInit
  ldr   r2, =_sbss
 8003c7c:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str   r3, [r2], #4
    
LoopFillZerobss:
  ldr   r3, = _ebss
 8003c80:	20001d78 	.word	0x20001d78

08003c84 <ADC1_IRQHandler>:
 * @retval None       
*/
  .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c84:	f7ff bffe 	b.w	8003c84 <ADC1_IRQHandler>

08003c88 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	/* Reset the RCC clock configuration to the default reset state(for debug purpose) */
	/* Set HSION bit */
	RCC ->CR |= (uint32_t) 0x00000001;
 8003c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
	RCC ->CFGR &= (uint32_t) 0xF8FF0000;
 8003ca4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ca8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	6053      	str	r3, [r2, #4]
#else
	RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   

	/* Reset HSEON, CSSON and PLLON bits */RCC ->CR &= (uint32_t) 0xFEF6FFFF;
 8003cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003cd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cdc:	601a      	str	r2, [r3, #0]

	/* Reset HSEBYP bit */RCC ->CR &= (uint32_t) 0xFFFBFFFF;
 8003cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf4:	601a      	str	r2, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */RCC ->CFGR &=
 8003cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d06:	6852      	ldr	r2, [r2, #4]
 8003d08:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003d0c:	605a      	str	r2, [r3, #4]
	RCC->CIR = 0x00FF0000;

	/* Reset CFGR2 register */
	RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
	/* Disable all interrupts and clear pending bits  */RCC ->CIR = 0x009F0000;
 8003d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003d1a:	609a      	str	r2, [r3, #8]

	/* Reset CFGR2 register */RCC ->CFGR2 = 0x00000000;
 8003d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* DATA_IN_ExtSRAM */
#endif 

	/* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
	/* Configure the Flash Latency cycles and enable prefetch buffer */
	SetSysClock();
 8003d2a:	f000 f809 	bl	8003d40 <SetSysClock>

#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB ->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d2e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003d32:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003d36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d3a:	609a      	str	r2, [r3, #8]
#endif 
}
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <SetSysClock>:
/**
 * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 * @param  None
 * @retval None
 */
static void SetSysClock(void) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
	SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
	SetSysClockTo24();
 8003d44:	f000 f802 	bl	8003d4c <SetSysClockTo24>
	SetSysClockTo72();
#endif

	/* If none of the define above is enabled, the HSI is used as System clock
	 source (default after reset) */
}
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop

08003d4c <SetSysClockTo24>:
 *         and PCLK1 prescalers.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
static void SetSysClockTo24(void) {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	603b      	str	r3, [r7, #0]

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	/* Enable HSE */RCC ->CR |= ((uint32_t) RCC_CR_HSEON );
 8003d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d74:	601a      	str	r2, [r3, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do {
		HSEStatus = RCC ->CR & RCC_CR_HSERDY;
 8003d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f103 0301 	add.w	r3, r3, #1
 8003d8c:	607b      	str	r3, [r7, #4]
	} while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT ));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <SetSysClockTo24+0x50>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d9a:	d1ec      	bne.n	8003d76 <SetSysClockTo24+0x2a>

	if ((RCC ->CR & RCC_CR_HSERDY )!= RESET) {
 8003d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <SetSysClockTo24+0x6a>
		HSEStatus = (uint32_t) 0x01;
 8003dae:	f04f 0301 	mov.w	r3, #1
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	e002      	b.n	8003dbc <SetSysClockTo24+0x70>
	} else {
		HSEStatus = (uint32_t) 0x00;
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t) 0x01) {
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d16d      	bne.n	8003e9e <SetSysClockTo24+0x152>
		FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
		FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
#endif

		/* HCLK = SYSCLK */
		RCC ->CFGR |= (uint32_t) RCC_CFGR_HPRE_DIV1;
 8003dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003dd2:	6852      	ldr	r2, [r2, #4]
 8003dd4:	605a      	str	r2, [r3, #4]

		/* PCLK2 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE2_DIV1;
 8003dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003de2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003de6:	6852      	ldr	r2, [r2, #4]
 8003de8:	605a      	str	r2, [r3, #4]

		/* PCLK1 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE1_DIV1;
 8003dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003df6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003dfa:	6852      	ldr	r2, [r2, #4]
 8003dfc:	605a      	str	r2, [r3, #4]
		/* Wait till PLL2 is ready */
		while((RCC->CR & RCC_CR_PLL2RDY) == 0)
		{
		}
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */RCC ->CFGR &=
 8003dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e0e:	6852      	ldr	r2, [r2, #4]
 8003e10:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003e14:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE
						| RCC_CFGR_PLLMULL ));
		RCC ->CFGR |= (uint32_t) (RCC_CFGR_PLLSRC_PREDIV1
 8003e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e26:	6852      	ldr	r2, [r2, #4]
 8003e28:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 8003e2c:	605a      	str	r2, [r3, #4]
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

		/* Enable PLL */RCC ->CR |= RCC_CR_PLLON;
 8003e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003e44:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is ready */
		while ((RCC ->CR & RCC_CR_PLLRDY )== 0){
 8003e46:	bf00      	nop
 8003e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f6      	beq.n	8003e48 <SetSysClockTo24+0xfc>
		}

		/* Select PLL as system clock source */RCC ->CFGR &=
 8003e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e6a:	6852      	ldr	r2, [r2, #4]
 8003e6c:	f022 0203 	bic.w	r2, r2, #3
 8003e70:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_SW ));
		RCC ->CFGR |= (uint32_t) RCC_CFGR_SW_PLL;
 8003e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e82:	6852      	ldr	r2, [r2, #4]
 8003e84:	f042 0202 	orr.w	r2, r2, #2
 8003e88:	605a      	str	r2, [r3, #4]

		/* Wait till PLL is used as system clock source */
		while ((RCC ->CFGR & (uint32_t) RCC_CFGR_SWS )!= (uint32_t)0x08){
 8003e8a:	bf00      	nop
 8003e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d1f6      	bne.n	8003e8c <SetSysClockTo24+0x140>
}
else
{ /* If HSE fails to start-up, the application will have wrong clock 
 configuration. User can add here some code to deal with this error */
}
}
 8003e9e:	f107 070c 	add.w	r7, r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <SetupClock>:
volatile uint16_t counter = 0;

unsigned char error_handle (unsigned char err);

void SetupClock()
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	RCC_DeInit ();                    /* RCC system reset(for debug purpose)*/
 8003eac:	f7fc fff6 	bl	8000e9c <RCC_DeInit>
	RCC_HSEConfig (RCC_HSE_ON);       /* Enable HSE                         */
 8003eb0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003eb4:	f7fd f846 	bl	8000f44 <RCC_HSEConfig>

	/* Wait till HSE is ready                                               */
	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 8003eb8:	bf00      	nop
 8003eba:	f04f 0031 	mov.w	r0, #49	; 0x31
 8003ebe:	f7fd fadb 	bl	8001478 <RCC_GetFlagStatus>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f8      	beq.n	8003eba <SetupClock+0x12>

	RCC_HCLKConfig   (RCC_SYSCLK_Div1);   /* HCLK   = SYSCLK                */
 8003ec8:	f04f 0000 	mov.w	r0, #0
 8003ecc:	f7fd f8e2 	bl	8001094 <RCC_HCLKConfig>
	RCC_PCLK2Config  (RCC_HCLK_Div1);     /* PCLK2  = HCLK                  */
 8003ed0:	f04f 0000 	mov.w	r0, #0
 8003ed4:	f7fd f91e 	bl	8001114 <RCC_PCLK2Config>
	RCC_PCLK1Config  (RCC_HCLK_Div1);     /* PCLK1  = HCLK1                */
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f7fd f8fa 	bl	80010d4 <RCC_PCLK1Config>
	//RCC_ADCCLKConfig (RCC_PCLK2_Div4);    /* ADCCLK = PCLK2/4               */

	/* PLLCLK = 8MHz * 6 = 48 MHz                                           */
	RCC_PLLConfig (RCC_PLLSource_PREDIV1, RCC_PLLMul_6);
 8003ee0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ee4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003ee8:	f7fd f870 	bl	8000fcc <RCC_PLLConfig>

	RCC_PLLCmd (ENABLE);                  /* Enable PLL                     */
 8003eec:	f04f 0001 	mov.w	r0, #1
 8003ef0:	f7fd f890 	bl	8001014 <RCC_PLLCmd>

	/* Wait till PLL is ready                                               */
	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8003ef4:	bf00      	nop
 8003ef6:	f04f 0039 	mov.w	r0, #57	; 0x39
 8003efa:	f7fd fabd 	bl	8001478 <RCC_GetFlagStatus>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f8      	beq.n	8003ef6 <SetupClock+0x4e>

	/* Select PLL as system clock source                                    */
	RCC_SYSCLKConfig (RCC_SYSCLKSource_PLLCLK);
 8003f04:	f04f 0002 	mov.w	r0, #2
 8003f08:	f7fd f894 	bl	8001034 <RCC_SYSCLKConfig>

	/* Wait till PLL is used as system clock source                         */
	while (RCC_GetSYSCLKSource() != 0x08);
 8003f0c:	bf00      	nop
 8003f0e:	f7fd f8b1 	bl	8001074 <RCC_GetSYSCLKSource>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d1fa      	bne.n	8003f0e <SetupClock+0x66>
}
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop

08003f1c <LEDsInit>:

void LEDsInit()
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003f22:	f04f 0010 	mov.w	r0, #16
 8003f26:	f04f 0101 	mov.w	r1, #1
 8003f2a:	f7fd fa51 	bl	80013d0 <RCC_APB2PeriphClockCmd>
   GPIO_InitTypeDef GPIO_InitStructure;
   /* Ñâåòîäèîäû íà PC8, PC9          */
   GPIO_InitStructure.GPIO_Pin   = LED_GREEN | LED_BLUE;
 8003f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f32:	80bb      	strh	r3, [r7, #4]
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003f34:	f04f 0303 	mov.w	r3, #3
 8003f38:	71bb      	strb	r3, [r7, #6]
   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 8003f3a:	f04f 0310 	mov.w	r3, #16
 8003f3e:	71fb      	strb	r3, [r7, #7]
   GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8003f40:	f107 0304 	add.w	r3, r7, #4
 8003f44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f48:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f7fc fe65 	bl	8000c1c <GPIO_Init>
}
 8003f52:	f107 0708 	add.w	r7, r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop

08003f5c <BtnInit>:

void BtnInit()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8003f62:	f04f 0004 	mov.w	r0, #4
 8003f66:	f04f 0101 	mov.w	r1, #1
 8003f6a:	f7fd fa31 	bl	80013d0 <RCC_APB2PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8003f6e:	f04f 0301 	mov.w	r3, #1
 8003f72:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003f74:	f04f 0304 	mov.w	r3, #4
 8003f78:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003f7a:	f107 0304 	add.w	r3, r7, #4
 8003f7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f82:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003f86:	4619      	mov	r1, r3
 8003f88:	f7fc fe48 	bl	8000c1c <GPIO_Init>
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	f7fc ff1a 	bl	8000dcc <GPIO_EXTILineConfig>
}
 8003f98:	f107 0708 	add.w	r7, r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <USART_GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_GPIO_Configuration(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  /* Enable GPIOA clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003fa6:	f04f 0004 	mov.w	r0, #4
 8003faa:	f04f 0101 	mov.w	r1, #1
 8003fae:	f7fd fa0f 	bl	80013d0 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure USART1 Tx (PA.09) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb6:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003fb8:	f04f 0318 	mov.w	r3, #24
 8003fbc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003fbe:	f04f 0303 	mov.w	r3, #3
 8003fc2:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003fc4:	f107 0304 	add.w	r3, r7, #4
 8003fc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fcc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fe23 	bl	8000c1c <GPIO_Init>

  /* Configure USART1 Rx (PA.10) as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fda:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003fdc:	f04f 0304 	mov.w	r3, #4
 8003fe0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003fe2:	f107 0304 	add.w	r3, r7, #4
 8003fe6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fea:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f7fc fe14 	bl	8000c1c <GPIO_Init>
}
 8003ff4:	f107 0708 	add.w	r7, r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <USART_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Configuration(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
  /* Enable USART1 */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8004002:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004006:	f04f 0101 	mov.w	r1, #1
 800400a:	f7fd f9e1 	bl	80013d0 <RCC_APB2PeriphClockCmd>
        - USART CPOL: Clock is active low
        - USART CPHA: Data is captured on the middle
        - USART LastBit: The clock pulse of the last data bit is not output to
                         the SCLK pin
  */
  USART_InitStructure.USART_BaudRate = BAUDRATE;
 800400e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004012:	603b      	str	r3, [r7, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	80bb      	strh	r3, [r7, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	80fb      	strh	r3, [r7, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	813b      	strh	r3, [r7, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	81bb      	strh	r3, [r7, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800402c:	f04f 030c 	mov.w	r3, #12
 8004030:	817b      	strh	r3, [r7, #10]

  USART_Init(USART1, &USART_InitStructure);
 8004032:	463b      	mov	r3, r7
 8004034:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004038:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800403c:	4619      	mov	r1, r3
 800403e:	f7fd fb7f 	bl	8001740 <USART_Init>

  /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
 8004042:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004046:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800404a:	f04f 0101 	mov.w	r1, #1
 800404e:	f7fd fc4d 	bl	80018ec <USART_Cmd>

  uart_print_string(USART1, "\n===== UART1 инициализирован =====",1);
 8004052:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004056:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800405a:	f644 115c 	movw	r1, #18780	; 0x495c
 800405e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004062:	f04f 0201 	mov.w	r2, #1
 8004066:	f7fc fa2d 	bl	80004c4 <uart_print_string>
}
 800406a:	f107 0710 	add.w	r7, r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop

08004074 <EXTI_Configuration>:

void EXTI_Configuration(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800407a:	f04f 0301 	mov.w	r3, #1
 800407e:	603b      	str	r3, [r7, #0]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	713b      	strb	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004086:	f04f 0308 	mov.w	r3, #8
 800408a:	717b      	strb	r3, [r7, #5]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800408c:	f04f 0301 	mov.w	r3, #1
 8004090:	71bb      	strb	r3, [r7, #6]
  EXTI_Init(&EXTI_InitStructure);
 8004092:	463b      	mov	r3, r7
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc fd15 	bl	8000ac4 <EXTI_Init>
}
 800409a:	f107 0708 	add.w	r7, r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop

080040a4 <NVIC_Configuration_USART1>:

void NVIC_Configuration_USART1(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Place the vector table into FLASH */
	//NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80040aa:	f44f 7040 	mov.w	r0, #768	; 0x300
 80040ae:	f7fc fc81 	bl	80009b4 <NVIC_PriorityGroupConfig>

	//select NVIC channel to configure
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80040b2:	f04f 0325 	mov.w	r3, #37	; 0x25
 80040b6:	713b      	strb	r3, [r7, #4]
	//set priority to lowest
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 80040b8:	f04f 030f 	mov.w	r3, #15
 80040bc:	717b      	strb	r3, [r7, #5]
	//set subpriority to lowest
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 80040be:	f04f 030f 	mov.w	r3, #15
 80040c2:	71bb      	strb	r3, [r7, #6]
	//enable IRQ channel
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80040c4:	f04f 0301 	mov.w	r3, #1
 80040c8:	71fb      	strb	r3, [r7, #7]
	//update NVIC registers
	NVIC_Init(&NVIC_InitStructure);
 80040ca:	f107 0304 	add.w	r3, r7, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fc84 	bl	80009dc <NVIC_Init>

	//disable Transmit Data Register empty interrupt
	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80040d4:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80040d8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040dc:	f240 7127 	movw	r1, #1831	; 0x727
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f7fd fc22 	bl	800192c <USART_ITConfig>
	//enable Receive Data register not empty interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80040e8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80040ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040f0:	f240 5125 	movw	r1, #1317	; 0x525
 80040f4:	f04f 0201 	mov.w	r2, #1
 80040f8:	f7fd fc18 	bl	800192c <USART_ITConfig>


}
 80040fc:	f107 0708 	add.w	r7, r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <NVIC_Configuration_USER_BUTTON>:

void NVIC_Configuration_USER_BUTTON(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800410a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800410e:	f7fc fc51 	bl	80009b4 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8004112:	f04f 0306 	mov.w	r3, #6
 8004116:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 8004118:	f04f 030f 	mov.w	r3, #15
 800411c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 800411e:	f04f 030f 	mov.w	r3, #15
 8004122:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004124:	f04f 0301 	mov.w	r3, #1
 8004128:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800412a:	f107 0304 	add.w	r3, r7, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc fc54 	bl	80009dc <NVIC_Init>
}
 8004134:	f107 0708 	add.w	r7, r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
        EXTI_ClearITPendingBit(EXTI_Line0);
 8004140:	f04f 0001 	mov.w	r0, #1
 8004144:	f7fc fd5a 	bl	8000bfc <EXTI_ClearITPendingBit>

        uart_print_string(USART1, "Тынц",1);
 8004148:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800414c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004150:	f644 1190 	movw	r1, #18832	; 0x4990
 8004154:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004158:	f04f 0201 	mov.w	r2, #1
 800415c:	f7fc f9b2 	bl	80004c4 <uart_print_string>
		{
			LED_PORT->ODR |= LED_GREEN;
 8004160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004164:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004168:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800416c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004170:	68d2      	ldr	r2, [r2, #12]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	60da      	str	r2, [r3, #12]
			//vTaskDelay(10);
			delay_ms(10);
 8004178:	f04f 000a 	mov.w	r0, #10
 800417c:	f7fc fad4 	bl	8000728 <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 8004180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004184:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800418c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004190:	68d2      	ldr	r2, [r2, #12]
 8004192:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8004196:	60da      	str	r2, [r3, #12]
		}
}
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop

0800419c <vFreeRTOSInitAll>:

void vFreeRTOSInitAll()
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
	SetupClock();
 80041a0:	f7ff fe82 	bl	8003ea8 <SetupClock>

	LEDsInit();
 80041a4:	f7ff feba 	bl	8003f1c <LEDsInit>
	smallLEDPanel_Init();//LED_PORT, smallLEDPanel_CLK, smallLEDPanel_SDI, smallLEDPanel_LE);
 80041a8:	f7fc fa1c 	bl	80005e4 <smallLEDPanel_Init>

	BtnInit();
 80041ac:	f7ff fed6 	bl	8003f5c <BtnInit>

	EXTI_Configuration();
 80041b0:	f7ff ff60 	bl	8004074 <EXTI_Configuration>

	USART_GPIO_Configuration();
 80041b4:	f7ff fef4 	bl	8003fa0 <USART_GPIO_Configuration>
	USART_Configuration();
 80041b8:	f7ff ff20 	bl	8003ffc <USART_Configuration>

	NVIC_Configuration_USER_BUTTON();
 80041bc:	f7ff ffa2 	bl	8004104 <NVIC_Configuration_USER_BUTTON>
	NVIC_Configuration_USART1();
 80041c0:	f7ff ff70 	bl	80040a4 <NVIC_Configuration_USART1>

	TIM6Init();
 80041c4:	f7fc fa78 	bl	80006b8 <TIM6Init>

	RTC_Config();
 80041c8:	f7fc fb54 	bl	8000874 <RTC_Config>

}
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop

080041d0 <vTaskLED>:

void vTaskLED(void *pvParameters)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

        for (;;) {
        	//delay_ms(500);
        	LED_PORT->ODR ^= LED_BLUE;
 80041d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80041e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80041ee:	60da      	str	r2, [r3, #12]
            vTaskDelay(500);
 80041f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041f4:	f7fe fb88 	bl	8002908 <vTaskDelay>

        }
 80041f8:	e7ee      	b.n	80041d8 <vTaskLED+0x8>
 80041fa:	bf00      	nop

080041fc <USART1_IRQHandler>:
        vTaskDelete(NULL);

}

void USART1_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8004202:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004206:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800420a:	f240 5125 	movw	r1, #1317	; 0x525
 800420e:	f7fd fc25 	bl	8001a5c <USART_GetITStatus>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00e      	beq.n	8004236 <USART1_IRQHandler+0x3a>
	    {
		   // перемырг
		   //LED_PORT->ODR |= LED_BLUE;
		   //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
		   uint16_t i = USART_ReceiveData(USART1);
 8004218:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800421c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004220:	f7fd fbea 	bl	80019f8 <USART_ReceiveData>
 8004224:	4603      	mov	r3, r0
 8004226:	80fb      	strh	r3, [r7, #6]
		   UARTSend(&i, 1);
 8004228:	f107 0306 	add.w	r3, r7, #6
 800422c:	4618      	mov	r0, r3
 800422e:	f04f 0101 	mov.w	r1, #1
 8004232:	f000 f925 	bl	8004480 <UARTSend>
		   //LED_PORT->ODR ^= LED_BLUE;
		   //UARTSend(&i, 1);
          // UARTSend(" <-- data\r\n", 10);
        }
}
 8004236:	f107 0708 	add.w	r7, r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop

08004240 <vTaskDS1821>:

    vTaskDelete(NULL);
}

void vTaskDS1821(void *pvParameters)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	uart_print_string(USART1,"Температура:   ",0);
 8004248:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800424c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004250:	f644 11c0 	movw	r1, #18880	; 0x49c0
 8004254:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f7fc f932 	bl	80004c4 <uart_print_string>
			//error_handle(One_Wire_Reset(One_Wire_Pin));

			//error_handle(DS1821_Write_Status(One_Wire_Pin));

			//error_handle(DS1821_Start_Conversion(One_Wire_Pin));
			DS1821_Start_Conversion(One_Wire_Pin);
 8004260:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004264:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004268:	f04f 0180 	mov.w	r1, #128	; 0x80
 800426c:	f7fb ffb0 	bl	80001d0 <DS1821_Start_Conversion>
			//delay_ms(750);

			//error_handle(DS1821_Stop_Conversion(One_Wire_Pin));
			//error_handle(DS1821_Read_Temp(&t, One_Wire_Pin));
			uart_print_string(USART1, "Температура:   ", 0);
 8004270:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004274:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004278:	f644 11c0 	movw	r1, #18880	; 0x49c0
 800427c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f7fc f91e 	bl	80004c4 <uart_print_string>
			DS1821_Read_Temp(&t, One_Wire_Pin);
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	4618      	mov	r0, r3
 800428e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004292:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004296:	f04f 0280 	mov.w	r2, #128	; 0x80
 800429a:	f7fb ffbb 	bl	8000214 <DS1821_Read_Temp>
			uart_send_char(USART1, 8);
 800429e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042a6:	f04f 0108 	mov.w	r1, #8
 80042aa:	f7fc f8f3 	bl	8000494 <uart_send_char>
			uart_send_char(USART1, 8);
 80042ae:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042b2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042b6:	f04f 0108 	mov.w	r1, #8
 80042ba:	f7fc f8eb 	bl	8000494 <uart_send_char>
			uart_print_value(USART1, t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042c4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fc f91d 	bl	8000508 <uart_print_value>
			uart_print_string(USART1,";",0);
 80042ce:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042d2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042d6:	f644 11dc 	movw	r1, #18908	; 0x49dc
 80042da:	f6c0 0100 	movt	r1, #2048	; 0x800
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f7fc f8ef 	bl	80004c4 <uart_print_string>
			LED_PORT->ODR |= LED_GREEN;
 80042e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80042f6:	68d2      	ldr	r2, [r2, #12]
 80042f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fc:	60da      	str	r2, [r3, #12]
						//vTaskDelay(10);
			delay_ms(10);
 80042fe:	f04f 000a 	mov.w	r0, #10
 8004302:	f7fc fa11 	bl	8000728 <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 8004306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800430a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800430e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004312:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004316:	68d2      	ldr	r2, [r2, #12]
 8004318:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800431c:	60da      	str	r2, [r3, #12]
			uart_print_string(USART1, " Uptime: ", 0);
 800431e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004322:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004326:	f644 11e0 	movw	r1, #18912	; 0x49e0
 800432a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f7fc f8c7 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetHours(GetTime()));
 8004336:	f7fc facb 	bl	80008d0 <GetTime>
 800433a:	4603      	mov	r3, r0
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc fadd 	bl	80008fc <Time_GetHours>
 8004342:	4603      	mov	r3, r0
 8004344:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004348:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800434c:	4619      	mov	r1, r3
 800434e:	f7fc f8db 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, ":", 0);
 8004352:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004356:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800435a:	f644 11ec 	movw	r1, #18924	; 0x49ec
 800435e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f7fc f8ad 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetMinutes(GetTime()));
 800436a:	f7fc fab1 	bl	80008d0 <GetTime>
 800436e:	4603      	mov	r3, r0
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc fad7 	bl	8000924 <Time_GetMinutes>
 8004376:	4603      	mov	r3, r0
 8004378:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800437c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004380:	4619      	mov	r1, r3
 8004382:	f7fc f8c1 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, ":", 0);
 8004386:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800438a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800438e:	f644 11ec 	movw	r1, #18924	; 0x49ec
 8004392:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f7fc f893 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetSeconds(GetTime()));
 800439e:	f7fc fa97 	bl	80008d0 <GetTime>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc fadd 	bl	8000964 <Time_GetSeconds>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80043b0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80043b4:	4619      	mov	r1, r3
 80043b6:	f7fc f8a7 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, "", 1);
 80043ba:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80043be:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80043c2:	f644 11f0 	movw	r1, #18928	; 0x49f0
 80043c6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80043ca:	f04f 0201 	mov.w	r2, #1
 80043ce:	f7fc f879 	bl	80004c4 <uart_print_string>
			//////////////////
			vTaskDelay(1000);
 80043d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043d6:	f7fe fa97 	bl	8002908 <vTaskDelay>
	}
 80043da:	e741      	b.n	8004260 <vTaskDS1821+0x20>

080043dc <main>:
}



int main()
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af04      	add	r7, sp, #16
	vFreeRTOSInitAll();
 80043e2:	f7ff fedb 	bl	800419c <vFreeRTOSInitAll>

	xTaskCreate( vTaskLED, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, NULL, 2,
 80043e6:	f04f 0302 	mov.w	r3, #2
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	9302      	str	r3, [sp, #8]
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	9303      	str	r3, [sp, #12]
 80043fe:	f244 10d1 	movw	r0, #16849	; 0x41d1
 8004402:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004406:	f644 11f4 	movw	r1, #18932	; 0x49f4
 800440a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800440e:	f04f 0246 	mov.w	r2, #70	; 0x46
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	f7fe f985 	bl	8002724 <xTaskGenericCreate>
	                        ( xTaskHandle * ) NULL);
	//xTaskCreate(vTaskUSART_TX, (signed char*)"USART_TX", configMINIMAL_STACK_SIZE, NULL, 2,
      //      				( xTaskHandle * ) NULL);
	xTaskCreate( vTaskDS1821, ( signed char * ) "DS1821", configMINIMAL_STACK_SIZE, NULL, 2,
 800441a:	f04f 0302 	mov.w	r3, #2
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	9302      	str	r3, [sp, #8]
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	9303      	str	r3, [sp, #12]
 8004432:	f244 2041 	movw	r0, #16961	; 0x4241
 8004436:	f6c0 0000 	movt	r0, #2048	; 0x800
 800443a:	f644 11f8 	movw	r1, #18936	; 0x49f8
 800443e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004442:	f04f 0246 	mov.w	r2, #70	; 0x46
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	f7fe f96b 	bl	8002724 <xTaskGenericCreate>
		                    ( xTaskHandle * ) NULL);
	vTaskStartScheduler();
 800444e:	f7fe fa89 	bl	8002964 <vTaskStartScheduler>


	for(;;)
	{
//
	}
 8004452:	e7fe      	b.n	8004452 <main+0x76>

08004454 <vApplicationMallocFailedHook>:
		}
		if (err==One_Wire_Success) return 0; else return 1;//uart_print_string(USART1, "GoodLuck!",1);
}

void vApplicationMallocFailedHook( void )
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004458:	e7fe      	b.n	8004458 <vApplicationMallocFailedHook+0x4>
 800445a:	bf00      	nop

0800445c <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8004466:	e7fe      	b.n	8004466 <vApplicationStackOverflowHook+0xa>

08004468 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 800446e:	f7fd fbc9 	bl	8001c04 <xPortGetFreeHeapSize>
 8004472:	4603      	mov	r3, r0
 8004474:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8004476:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8004478:	f107 0708 	add.w	r7, r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UARTSend>:
*                : - ulCount  : buffer's length
* Output         : None
* Return         : None
*******************************************************************************/
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 800448a:	e018      	b.n	80044be <UARTSend+0x3e>
    {
        USART_SendData(USART1, (uint16_t) *pucBuffer++);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	f102 0201 	add.w	r2, r2, #1
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800449c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044a0:	4619      	mov	r1, r3
 80044a2:	f7fd fa95 	bl	80019d0 <USART_SendData>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 80044a6:	bf00      	nop
 80044a8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80044ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044b0:	f04f 0140 	mov.w	r1, #64	; 0x40
 80044b4:	f7fd fab2 	bl	8001a1c <USART_GetFlagStatus>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f4      	beq.n	80044a8 <UARTSend+0x28>
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2300      	moveq	r3, #0
 80044c6:	2301      	movne	r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80044d0:	603a      	str	r2, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1da      	bne.n	800448c <UARTSend+0xc>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
        {
        }
    }
}
 80044d6:	f107 0708 	add.w	r7, r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop

080044e0 <memcmp>:
 80044e0:	2a03      	cmp	r2, #3
 80044e2:	b4f0      	push	{r4, r5, r6, r7}
 80044e4:	d931      	bls.n	800454a <memcmp+0x6a>
 80044e6:	ea41 0300 	orr.w	r3, r1, r0
 80044ea:	079c      	lsls	r4, r3, #30
 80044ec:	d12e      	bne.n	800454c <memcmp+0x6c>
 80044ee:	6806      	ldr	r6, [r0, #0]
 80044f0:	680f      	ldr	r7, [r1, #0]
 80044f2:	1f15      	subs	r5, r2, #4
 80044f4:	1d03      	adds	r3, r0, #4
 80044f6:	1d0c      	adds	r4, r1, #4
 80044f8:	42be      	cmp	r6, r7
 80044fa:	f3c5 0c80 	ubfx	ip, r5, #2, #1
 80044fe:	d124      	bne.n	800454a <memcmp+0x6a>
 8004500:	2d03      	cmp	r5, #3
 8004502:	462a      	mov	r2, r5
 8004504:	d91f      	bls.n	8004546 <memcmp+0x66>
 8004506:	f1bc 0f00 	cmp.w	ip, #0
 800450a:	d008      	beq.n	800451e <memcmp+0x3e>
 800450c:	681e      	ldr	r6, [r3, #0]
 800450e:	6825      	ldr	r5, [r4, #0]
 8004510:	4621      	mov	r1, r4
 8004512:	4618      	mov	r0, r3
 8004514:	3404      	adds	r4, #4
 8004516:	3304      	adds	r3, #4
 8004518:	42ae      	cmp	r6, r5
 800451a:	d011      	beq.n	8004540 <memcmp+0x60>
 800451c:	e015      	b.n	800454a <memcmp+0x6a>
 800451e:	4621      	mov	r1, r4
 8004520:	4618      	mov	r0, r3
 8004522:	681c      	ldr	r4, [r3, #0]
 8004524:	680b      	ldr	r3, [r1, #0]
 8004526:	1d05      	adds	r5, r0, #4
 8004528:	1d0e      	adds	r6, r1, #4
 800452a:	429c      	cmp	r4, r3
 800452c:	d10d      	bne.n	800454a <memcmp+0x6a>
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	682e      	ldr	r6, [r5, #0]
 8004534:	680d      	ldr	r5, [r1, #0]
 8004536:	3a04      	subs	r2, #4
 8004538:	1d03      	adds	r3, r0, #4
 800453a:	1d0c      	adds	r4, r1, #4
 800453c:	42ae      	cmp	r6, r5
 800453e:	d104      	bne.n	800454a <memcmp+0x6a>
 8004540:	3a04      	subs	r2, #4
 8004542:	2a03      	cmp	r2, #3
 8004544:	d8eb      	bhi.n	800451e <memcmp+0x3e>
 8004546:	4621      	mov	r1, r4
 8004548:	4618      	mov	r0, r3
 800454a:	b31a      	cbz	r2, 8004594 <memcmp+0xb4>
 800454c:	7803      	ldrb	r3, [r0, #0]
 800454e:	780c      	ldrb	r4, [r1, #0]
 8004550:	42a3      	cmp	r3, r4
 8004552:	d10a      	bne.n	800456a <memcmp+0x8a>
 8004554:	1e55      	subs	r5, r2, #1
 8004556:	2200      	movs	r2, #0
 8004558:	07eb      	lsls	r3, r5, #31
 800455a:	d514      	bpl.n	8004586 <memcmp+0xa6>
 800455c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004560:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004564:	2201      	movs	r2, #1
 8004566:	42a3      	cmp	r3, r4
 8004568:	d00d      	beq.n	8004586 <memcmp+0xa6>
 800456a:	1b18      	subs	r0, r3, r4
 800456c:	e010      	b.n	8004590 <memcmp+0xb0>
 800456e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004572:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004576:	42a3      	cmp	r3, r4
 8004578:	d1f7      	bne.n	800456a <memcmp+0x8a>
 800457a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800457e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004582:	42a3      	cmp	r3, r4
 8004584:	d1f1      	bne.n	800456a <memcmp+0x8a>
 8004586:	42aa      	cmp	r2, r5
 8004588:	f102 0202 	add.w	r2, r2, #2
 800458c:	d1ef      	bne.n	800456e <memcmp+0x8e>
 800458e:	2000      	movs	r0, #0
 8004590:	bcf0      	pop	{r4, r5, r6, r7}
 8004592:	4770      	bx	lr
 8004594:	4610      	mov	r0, r2
 8004596:	e7fb      	b.n	8004590 <memcmp+0xb0>

08004598 <memcpy>:
 8004598:	2a0f      	cmp	r2, #15
 800459a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800459e:	f240 80a1 	bls.w	80046e4 <memcpy+0x14c>
 80045a2:	ea41 0300 	orr.w	r3, r1, r0
 80045a6:	079b      	lsls	r3, r3, #30
 80045a8:	f040 809e 	bne.w	80046e8 <memcpy+0x150>
 80045ac:	680c      	ldr	r4, [r1, #0]
 80045ae:	f1a2 0510 	sub.w	r5, r2, #16
 80045b2:	6004      	str	r4, [r0, #0]
 80045b4:	684b      	ldr	r3, [r1, #4]
 80045b6:	46ac      	mov	ip, r5
 80045b8:	6043      	str	r3, [r0, #4]
 80045ba:	688c      	ldr	r4, [r1, #8]
 80045bc:	f1bc 0f0f 	cmp.w	ip, #15
 80045c0:	6084      	str	r4, [r0, #8]
 80045c2:	68cc      	ldr	r4, [r1, #12]
 80045c4:	f3c5 1500 	ubfx	r5, r5, #4, #1
 80045c8:	60c4      	str	r4, [r0, #12]
 80045ca:	f100 0310 	add.w	r3, r0, #16
 80045ce:	f101 0410 	add.w	r4, r1, #16
 80045d2:	d92b      	bls.n	800462c <memcpy+0x94>
 80045d4:	b175      	cbz	r5, 80045f4 <memcpy+0x5c>
 80045d6:	6825      	ldr	r5, [r4, #0]
 80045d8:	f1ac 0c10 	sub.w	ip, ip, #16
 80045dc:	601d      	str	r5, [r3, #0]
 80045de:	6865      	ldr	r5, [r4, #4]
 80045e0:	605d      	str	r5, [r3, #4]
 80045e2:	68a5      	ldr	r5, [r4, #8]
 80045e4:	609d      	str	r5, [r3, #8]
 80045e6:	68e5      	ldr	r5, [r4, #12]
 80045e8:	3410      	adds	r4, #16
 80045ea:	60dd      	str	r5, [r3, #12]
 80045ec:	3310      	adds	r3, #16
 80045ee:	f1bc 0f0f 	cmp.w	ip, #15
 80045f2:	d91b      	bls.n	800462c <memcpy+0x94>
 80045f4:	6827      	ldr	r7, [r4, #0]
 80045f6:	f104 0610 	add.w	r6, r4, #16
 80045fa:	601f      	str	r7, [r3, #0]
 80045fc:	6867      	ldr	r7, [r4, #4]
 80045fe:	f103 0510 	add.w	r5, r3, #16
 8004602:	605f      	str	r7, [r3, #4]
 8004604:	68a7      	ldr	r7, [r4, #8]
 8004606:	f1ac 0c20 	sub.w	ip, ip, #32
 800460a:	609f      	str	r7, [r3, #8]
 800460c:	68e7      	ldr	r7, [r4, #12]
 800460e:	60df      	str	r7, [r3, #12]
 8004610:	6924      	ldr	r4, [r4, #16]
 8004612:	611c      	str	r4, [r3, #16]
 8004614:	6877      	ldr	r7, [r6, #4]
 8004616:	f106 0410 	add.w	r4, r6, #16
 800461a:	606f      	str	r7, [r5, #4]
 800461c:	68b7      	ldr	r7, [r6, #8]
 800461e:	3320      	adds	r3, #32
 8004620:	60af      	str	r7, [r5, #8]
 8004622:	68f6      	ldr	r6, [r6, #12]
 8004624:	f1bc 0f0f 	cmp.w	ip, #15
 8004628:	60ee      	str	r6, [r5, #12]
 800462a:	d8e3      	bhi.n	80045f4 <memcpy+0x5c>
 800462c:	f1a2 0810 	sub.w	r8, r2, #16
 8004630:	f028 030f 	bic.w	r3, r8, #15
 8004634:	f002 040f 	and.w	r4, r2, #15
 8004638:	f103 0c10 	add.w	ip, r3, #16
 800463c:	2c03      	cmp	r4, #3
 800463e:	eb00 030c 	add.w	r3, r0, ip
 8004642:	eb01 080c 	add.w	r8, r1, ip
 8004646:	d951      	bls.n	80046ec <memcpy+0x154>
 8004648:	1f21      	subs	r1, r4, #4
 800464a:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800464e:	4644      	mov	r4, r8
 8004650:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 8004654:	f854 6b04 	ldr.w	r6, [r4], #4
 8004658:	ebc8 010c 	rsb	r1, r8, ip
 800465c:	f10c 0c04 	add.w	ip, ip, #4
 8004660:	461d      	mov	r5, r3
 8004662:	4564      	cmp	r4, ip
 8004664:	f845 6b04 	str.w	r6, [r5], #4
 8004668:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800466c:	d012      	beq.n	8004694 <memcpy+0xfc>
 800466e:	b129      	cbz	r1, 800467c <memcpy+0xe4>
 8004670:	f854 1b04 	ldr.w	r1, [r4], #4
 8004674:	4564      	cmp	r4, ip
 8004676:	f845 1b04 	str.w	r1, [r5], #4
 800467a:	d00b      	beq.n	8004694 <memcpy+0xfc>
 800467c:	4627      	mov	r7, r4
 800467e:	f857 1b04 	ldr.w	r1, [r7], #4
 8004682:	462e      	mov	r6, r5
 8004684:	f846 1b04 	str.w	r1, [r6], #4
 8004688:	6864      	ldr	r4, [r4, #4]
 800468a:	606c      	str	r4, [r5, #4]
 800468c:	1d3c      	adds	r4, r7, #4
 800468e:	1d35      	adds	r5, r6, #4
 8004690:	4564      	cmp	r4, ip
 8004692:	d1f3      	bne.n	800467c <memcpy+0xe4>
 8004694:	f109 0c01 	add.w	ip, r9, #1
 8004698:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800469c:	f002 0203 	and.w	r2, r2, #3
 80046a0:	eb08 0109 	add.w	r1, r8, r9
 80046a4:	444b      	add	r3, r9
 80046a6:	b1d2      	cbz	r2, 80046de <memcpy+0x146>
 80046a8:	780d      	ldrb	r5, [r1, #0]
 80046aa:	189a      	adds	r2, r3, r2
 80046ac:	43dc      	mvns	r4, r3
 80046ae:	f803 5b01 	strb.w	r5, [r3], #1
 80046b2:	1914      	adds	r4, r2, r4
 80046b4:	4293      	cmp	r3, r2
 80046b6:	f004 0401 	and.w	r4, r4, #1
 80046ba:	d010      	beq.n	80046de <memcpy+0x146>
 80046bc:	b12c      	cbz	r4, 80046ca <memcpy+0x132>
 80046be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80046c2:	f803 4b01 	strb.w	r4, [r3], #1
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <memcpy+0x146>
 80046ca:	784d      	ldrb	r5, [r1, #1]
 80046cc:	461c      	mov	r4, r3
 80046ce:	f804 5b01 	strb.w	r5, [r4], #1
 80046d2:	788d      	ldrb	r5, [r1, #2]
 80046d4:	3102      	adds	r1, #2
 80046d6:	705d      	strb	r5, [r3, #1]
 80046d8:	1c63      	adds	r3, r4, #1
 80046da:	4293      	cmp	r3, r2
 80046dc:	d1f5      	bne.n	80046ca <memcpy+0x132>
 80046de:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80046e2:	4770      	bx	lr
 80046e4:	4603      	mov	r3, r0
 80046e6:	e7de      	b.n	80046a6 <memcpy+0x10e>
 80046e8:	4603      	mov	r3, r0
 80046ea:	e7dd      	b.n	80046a8 <memcpy+0x110>
 80046ec:	4641      	mov	r1, r8
 80046ee:	4622      	mov	r2, r4
 80046f0:	e7d9      	b.n	80046a6 <memcpy+0x10e>
 80046f2:	bf00      	nop

080046f4 <memset>:
 80046f4:	b4f0      	push	{r4, r5, r6, r7}
 80046f6:	0784      	lsls	r4, r0, #30
 80046f8:	4603      	mov	r3, r0
 80046fa:	f000 808d 	beq.w	8004818 <memset+0x124>
 80046fe:	1e54      	subs	r4, r2, #1
 8004700:	2a00      	cmp	r2, #0
 8004702:	f000 8087 	beq.w	8004814 <memset+0x120>
 8004706:	07e5      	lsls	r5, r4, #31
 8004708:	b2ce      	uxtb	r6, r1
 800470a:	d411      	bmi.n	8004730 <memset+0x3c>
 800470c:	461a      	mov	r2, r3
 800470e:	f802 6b01 	strb.w	r6, [r2], #1
 8004712:	4613      	mov	r3, r2
 8004714:	4615      	mov	r5, r2
 8004716:	0792      	lsls	r2, r2, #30
 8004718:	d010      	beq.n	800473c <memset+0x48>
 800471a:	1e62      	subs	r2, r4, #1
 800471c:	2c00      	cmp	r4, #0
 800471e:	d079      	beq.n	8004814 <memset+0x120>
 8004720:	f803 6b01 	strb.w	r6, [r3], #1
 8004724:	4614      	mov	r4, r2
 8004726:	079a      	lsls	r2, r3, #30
 8004728:	461d      	mov	r5, r3
 800472a:	d007      	beq.n	800473c <memset+0x48>
 800472c:	3c01      	subs	r4, #1
 800472e:	e7ed      	b.n	800470c <memset+0x18>
 8004730:	4603      	mov	r3, r0
 8004732:	f803 6b01 	strb.w	r6, [r3], #1
 8004736:	079a      	lsls	r2, r3, #30
 8004738:	461d      	mov	r5, r3
 800473a:	d1f7      	bne.n	800472c <memset+0x38>
 800473c:	2c03      	cmp	r4, #3
 800473e:	d952      	bls.n	80047e6 <memset+0xf2>
 8004740:	b2ce      	uxtb	r6, r1
 8004742:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8004746:	2c0f      	cmp	r4, #15
 8004748:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 800474c:	d92d      	bls.n	80047aa <memset+0xb6>
 800474e:	f1a4 0210 	sub.w	r2, r4, #16
 8004752:	4617      	mov	r7, r2
 8004754:	2f0f      	cmp	r7, #15
 8004756:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800475a:	602b      	str	r3, [r5, #0]
 800475c:	606b      	str	r3, [r5, #4]
 800475e:	60ab      	str	r3, [r5, #8]
 8004760:	60eb      	str	r3, [r5, #12]
 8004762:	f105 0210 	add.w	r2, r5, #16
 8004766:	d916      	bls.n	8004796 <memset+0xa2>
 8004768:	b13e      	cbz	r6, 800477a <memset+0x86>
 800476a:	3f10      	subs	r7, #16
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	6053      	str	r3, [r2, #4]
 8004770:	6093      	str	r3, [r2, #8]
 8004772:	60d3      	str	r3, [r2, #12]
 8004774:	3210      	adds	r2, #16
 8004776:	2f0f      	cmp	r7, #15
 8004778:	d90d      	bls.n	8004796 <memset+0xa2>
 800477a:	3f20      	subs	r7, #32
 800477c:	f102 0610 	add.w	r6, r2, #16
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	6053      	str	r3, [r2, #4]
 8004784:	6093      	str	r3, [r2, #8]
 8004786:	60d3      	str	r3, [r2, #12]
 8004788:	6113      	str	r3, [r2, #16]
 800478a:	6153      	str	r3, [r2, #20]
 800478c:	6193      	str	r3, [r2, #24]
 800478e:	61d3      	str	r3, [r2, #28]
 8004790:	3220      	adds	r2, #32
 8004792:	2f0f      	cmp	r7, #15
 8004794:	d8f1      	bhi.n	800477a <memset+0x86>
 8004796:	f1a4 0210 	sub.w	r2, r4, #16
 800479a:	f022 020f 	bic.w	r2, r2, #15
 800479e:	f004 040f 	and.w	r4, r4, #15
 80047a2:	3210      	adds	r2, #16
 80047a4:	2c03      	cmp	r4, #3
 80047a6:	4415      	add	r5, r2
 80047a8:	d91d      	bls.n	80047e6 <memset+0xf2>
 80047aa:	1f27      	subs	r7, r4, #4
 80047ac:	463e      	mov	r6, r7
 80047ae:	462a      	mov	r2, r5
 80047b0:	2e03      	cmp	r6, #3
 80047b2:	f842 3b04 	str.w	r3, [r2], #4
 80047b6:	f3c7 0780 	ubfx	r7, r7, #2, #1
 80047ba:	d90d      	bls.n	80047d8 <memset+0xe4>
 80047bc:	b127      	cbz	r7, 80047c8 <memset+0xd4>
 80047be:	3e04      	subs	r6, #4
 80047c0:	2e03      	cmp	r6, #3
 80047c2:	f842 3b04 	str.w	r3, [r2], #4
 80047c6:	d907      	bls.n	80047d8 <memset+0xe4>
 80047c8:	4617      	mov	r7, r2
 80047ca:	f847 3b04 	str.w	r3, [r7], #4
 80047ce:	3e08      	subs	r6, #8
 80047d0:	6053      	str	r3, [r2, #4]
 80047d2:	1d3a      	adds	r2, r7, #4
 80047d4:	2e03      	cmp	r6, #3
 80047d6:	d8f7      	bhi.n	80047c8 <memset+0xd4>
 80047d8:	1f23      	subs	r3, r4, #4
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	1d13      	adds	r3, r2, #4
 80047e0:	f004 0403 	and.w	r4, r4, #3
 80047e4:	18ed      	adds	r5, r5, r3
 80047e6:	b1ac      	cbz	r4, 8004814 <memset+0x120>
 80047e8:	b2c9      	uxtb	r1, r1
 80047ea:	43ea      	mvns	r2, r5
 80047ec:	192c      	adds	r4, r5, r4
 80047ee:	f805 1b01 	strb.w	r1, [r5], #1
 80047f2:	18a3      	adds	r3, r4, r2
 80047f4:	42a5      	cmp	r5, r4
 80047f6:	f003 0201 	and.w	r2, r3, #1
 80047fa:	d00b      	beq.n	8004814 <memset+0x120>
 80047fc:	b11a      	cbz	r2, 8004806 <memset+0x112>
 80047fe:	f805 1b01 	strb.w	r1, [r5], #1
 8004802:	42a5      	cmp	r5, r4
 8004804:	d006      	beq.n	8004814 <memset+0x120>
 8004806:	462b      	mov	r3, r5
 8004808:	f803 1b01 	strb.w	r1, [r3], #1
 800480c:	7069      	strb	r1, [r5, #1]
 800480e:	1c5d      	adds	r5, r3, #1
 8004810:	42a5      	cmp	r5, r4
 8004812:	d1f8      	bne.n	8004806 <memset+0x112>
 8004814:	bcf0      	pop	{r4, r5, r6, r7}
 8004816:	4770      	bx	lr
 8004818:	4605      	mov	r5, r0
 800481a:	4614      	mov	r4, r2
 800481c:	e78e      	b.n	800473c <memset+0x48>
 800481e:	bf00      	nop

08004820 <strncpy>:
 8004820:	ea41 0300 	orr.w	r3, r1, r0
 8004824:	079b      	lsls	r3, r3, #30
 8004826:	b4f0      	push	{r4, r5, r6, r7}
 8004828:	d174      	bne.n	8004914 <strncpy+0xf4>
 800482a:	2a03      	cmp	r2, #3
 800482c:	d972      	bls.n	8004914 <strncpy+0xf4>
 800482e:	460c      	mov	r4, r1
 8004830:	f854 5b04 	ldr.w	r5, [r4], #4
 8004834:	1f16      	subs	r6, r2, #4
 8004836:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 800483a:	ea27 0705 	bic.w	r7, r7, r5
 800483e:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8004842:	4603      	mov	r3, r0
 8004844:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 8004848:	d131      	bne.n	80048ae <strncpy+0x8e>
 800484a:	4603      	mov	r3, r0
 800484c:	2e03      	cmp	r6, #3
 800484e:	4632      	mov	r2, r6
 8004850:	f843 5b04 	str.w	r5, [r3], #4
 8004854:	d92a      	bls.n	80048ac <strncpy+0x8c>
 8004856:	f1bc 0f00 	cmp.w	ip, #0
 800485a:	d00a      	beq.n	8004872 <strncpy+0x52>
 800485c:	4621      	mov	r1, r4
 800485e:	f854 5b04 	ldr.w	r5, [r4], #4
 8004862:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8004866:	ea26 0605 	bic.w	r6, r6, r5
 800486a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800486e:	d018      	beq.n	80048a2 <strncpy+0x82>
 8004870:	e01d      	b.n	80048ae <strncpy+0x8e>
 8004872:	4626      	mov	r6, r4
 8004874:	f856 5b04 	ldr.w	r5, [r6], #4
 8004878:	4621      	mov	r1, r4
 800487a:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 800487e:	ea27 0705 	bic.w	r7, r7, r5
 8004882:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8004886:	d112      	bne.n	80048ae <strncpy+0x8e>
 8004888:	f843 5b04 	str.w	r5, [r3], #4
 800488c:	6865      	ldr	r5, [r4, #4]
 800488e:	4631      	mov	r1, r6
 8004890:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8004894:	ea26 0605 	bic.w	r6, r6, r5
 8004898:	3a04      	subs	r2, #4
 800489a:	1d0c      	adds	r4, r1, #4
 800489c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80048a0:	d105      	bne.n	80048ae <strncpy+0x8e>
 80048a2:	3a04      	subs	r2, #4
 80048a4:	2a03      	cmp	r2, #3
 80048a6:	f843 5b04 	str.w	r5, [r3], #4
 80048aa:	d8e2      	bhi.n	8004872 <strncpy+0x52>
 80048ac:	4621      	mov	r1, r4
 80048ae:	b37a      	cbz	r2, 8004910 <strncpy+0xf0>
 80048b0:	780d      	ldrb	r5, [r1, #0]
 80048b2:	3a01      	subs	r2, #1
 80048b4:	f803 5b01 	strb.w	r5, [r3], #1
 80048b8:	b19d      	cbz	r5, 80048e2 <strncpy+0xc2>
 80048ba:	f012 0f01 	tst.w	r2, #1
 80048be:	461c      	mov	r4, r3
 80048c0:	d12a      	bne.n	8004918 <strncpy+0xf8>
 80048c2:	4623      	mov	r3, r4
 80048c4:	b322      	cbz	r2, 8004910 <strncpy+0xf0>
 80048c6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80048ca:	3a01      	subs	r2, #1
 80048cc:	f803 5b01 	strb.w	r5, [r3], #1
 80048d0:	b13d      	cbz	r5, 80048e2 <strncpy+0xc2>
 80048d2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80048d6:	3a01      	subs	r2, #1
 80048d8:	7065      	strb	r5, [r4, #1]
 80048da:	1c5c      	adds	r4, r3, #1
 80048dc:	4623      	mov	r3, r4
 80048de:	2d00      	cmp	r5, #0
 80048e0:	d1ef      	bne.n	80048c2 <strncpy+0xa2>
 80048e2:	b1aa      	cbz	r2, 8004910 <strncpy+0xf0>
 80048e4:	2100      	movs	r1, #0
 80048e6:	189c      	adds	r4, r3, r2
 80048e8:	43da      	mvns	r2, r3
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	18a2      	adds	r2, r4, r2
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	f002 0201 	and.w	r2, r2, #1
 80048f6:	d00b      	beq.n	8004910 <strncpy+0xf0>
 80048f8:	b11a      	cbz	r2, 8004902 <strncpy+0xe2>
 80048fa:	f803 1b01 	strb.w	r1, [r3], #1
 80048fe:	42a3      	cmp	r3, r4
 8004900:	d006      	beq.n	8004910 <strncpy+0xf0>
 8004902:	461a      	mov	r2, r3
 8004904:	f802 1b01 	strb.w	r1, [r2], #1
 8004908:	7059      	strb	r1, [r3, #1]
 800490a:	1c53      	adds	r3, r2, #1
 800490c:	42a3      	cmp	r3, r4
 800490e:	d1f8      	bne.n	8004902 <strncpy+0xe2>
 8004910:	bcf0      	pop	{r4, r5, r6, r7}
 8004912:	4770      	bx	lr
 8004914:	4603      	mov	r3, r0
 8004916:	e7ca      	b.n	80048ae <strncpy+0x8e>
 8004918:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800491c:	461c      	mov	r4, r3
 800491e:	f804 5b01 	strb.w	r5, [r4], #1
 8004922:	3a01      	subs	r2, #1
 8004924:	4623      	mov	r3, r4
 8004926:	2d00      	cmp	r5, #0
 8004928:	d1cb      	bne.n	80048c2 <strncpy+0xa2>
 800492a:	e7da      	b.n	80048e2 <strncpy+0xc2>
 800492c:	33323130 	.word	0x33323130
 8004930:	37363534 	.word	0x37363534
 8004934:	00003938 	.word	0x00003938
 8004938:	33323130 	.word	0x33323130
 800493c:	37363534 	.word	0x37363534
 8004940:	42413938 	.word	0x42413938
 8004944:	46454443 	.word	0x46454443
 8004948:	00000000 	.word	0x00000000
 800494c:	454c4449 	.word	0x454c4449
 8004950:	00000000 	.word	0x00000000
 8004954:	20726d54 	.word	0x20726d54
 8004958:	00637653 	.word	0x00637653
 800495c:	3d3d3d0a 	.word	0x3d3d3d0a
 8004960:	55203d3d 	.word	0x55203d3d
 8004964:	31545241 	.word	0x31545241
 8004968:	d0b8d020 	.word	0xd0b8d020
 800496c:	d1b8d0bd 	.word	0xd1b8d0bd
 8004970:	d0b8d086 	.word	0xd0b8d086
 8004974:	d0bbd0b0 	.word	0xd0bbd0b0
 8004978:	d0b7d0b8 	.word	0xd0b7d0b8
 800497c:	d080d1b8 	.word	0xd080d1b8
 8004980:	d0b2d0be 	.word	0xd0b2d0be
 8004984:	20bdd0b0 	.word	0x20bdd0b0
 8004988:	3d3d3d3d 	.word	0x3d3d3d3d
 800498c:	0000003d 	.word	0x0000003d
 8004990:	8bd1a2d0 	.word	0x8bd1a2d0
 8004994:	86d1bdd0 	.word	0x86d1bdd0
 8004998:	00000000 	.word	0x00000000
 800499c:	86d1a1d0 	.word	0x86d1a1d0
 80049a0:	bad083d1 	.word	0xbad083d1
 80049a4:	202cbed0 	.word	0x202cbed0
 80049a8:	82d1bed0 	.word	0x82d1bed0
 80049ac:	b0d0bbd0 	.word	0xb0d0bbd0
 80049b0:	8cd1b4d0 	.word	0x8cd1b4d0
 80049b4:	d0bcd020 	.word	0xd0bcd020
 80049b8:	d1bdd0b5 	.word	0xd1bdd0b5
 80049bc:	002e2e8f 	.word	0x002e2e8f
 80049c0:	b5d0a2d0 	.word	0xb5d0a2d0
 80049c4:	bfd0bcd0 	.word	0xbfd0bcd0
 80049c8:	80d1b5d0 	.word	0x80d1b5d0
 80049cc:	82d1b0d0 	.word	0x82d1b0d0
 80049d0:	80d183d1 	.word	0x80d183d1
 80049d4:	203ab0d0 	.word	0x203ab0d0
 80049d8:	00002020 	.word	0x00002020
 80049dc:	0000003b 	.word	0x0000003b
 80049e0:	74705520 	.word	0x74705520
 80049e4:	3a656d69 	.word	0x3a656d69
 80049e8:	00000020 	.word	0x00000020
 80049ec:	0000003a 	.word	0x0000003a
 80049f0:	00000000 	.word	0x00000000
 80049f4:	0044454c 	.word	0x0044454c
 80049f8:	38315344 	.word	0x38315344
 80049fc:	00003132 	.word	0x00003132
 8004a00:	63637553 	.word	0x63637553
 8004a04:	21737365 	.word	0x21737365
 8004a08:	6f6f4720 	.word	0x6f6f4720
 8004a0c:	63754c64 	.word	0x63754c64
 8004a10:	0000216b 	.word	0x0000216b
 8004a14:	65206f4e 	.word	0x65206f4e
 8004a18:	206f6863 	.word	0x206f6863
 8004a1c:	6d6f7266 	.word	0x6d6f7266
 8004a20:	76656420 	.word	0x76656420
 8004a24:	21656369 	.word	0x21656369
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	206e6950 	.word	0x206e6950
 8004a30:	20574f4c 	.word	0x20574f4c
 8004a34:	6f727265 	.word	0x6f727265
 8004a38:	00002172 	.word	0x00002172
 8004a3c:	20435243 	.word	0x20435243
 8004a40:	20746f6e 	.word	0x20746f6e
 8004a44:	6374616d 	.word	0x6374616d
 8004a48:	00002168 	.word	0x00002168

08004a4c <ucExpectedStackBytes.5898>:
 8004a4c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8004a5c:	a5a5a5a5                                ....
