
stm32vld_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b4  080001d0  080001d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000031  08004b84  08004b84  00010020  2**0
                  CONTENTS, READONLY
  3 .data         00000020  20000000  08005154  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001d5c  20000020  08005174  00010020  2**2
                  ALLOC
  5 ._user_heap_stack 00000100  20001d7c  08006ed0  00010020  2**0
                  ALLOC
  6 .debug_info   00009fb7  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002281  00000000  00000000  0001a008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004e44  00000000  00000000  0001c289  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e20  00000000  00000000  000210d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c88  00000000  00000000  00021ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004e0b  00000000  00000000  00022b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0004225e  00000000  00000000  00027983  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  00069be1  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00002ca8  00000000  00000000  00069c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000ab92  00000000  00000000  0006c8fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <DS1821_Start_Conversion>:
 *      Author: frolls
 */
#include "ds1821.h"

unsigned char DS1821_Start_Conversion (GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
	unsigned char cnt;
	cnt=One_Wire_Reset(GPIOx, PINx);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	4619      	mov	r1, r3
 80001e2:	f000 f843 	bl	800026c <One_Wire_Reset>
 80001e6:	4603      	mov	r3, r0
 80001e8:	73fb      	strb	r3, [r7, #15]
	if (cnt!=One_Wire_Success) return cnt;
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <DS1821_Start_Conversion+0x24>
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	e009      	b.n	8000208 <DS1821_Start_Conversion+0x38>
	One_Wire_Write_Byte(DS1821_START_CONVERT_T,GPIOx, PINx);
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	f04f 00ee 	mov.w	r0, #238	; 0xee
 80001fc:	6879      	ldr	r1, [r7, #4]
 80001fe:	461a      	mov	r2, r3
 8000200:	f000 f880 	bl	8000304 <One_Wire_Write_Byte>
	return One_Wire_Success;
 8000204:	f04f 0300 	mov.w	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	f107 0710 	add.w	r7, r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop

08000214 <DS1821_Read_Temp>:
	One_Wire_Write_Byte(DS1821_STOP_CONVERT_T,GPIOx, PINx);
	return One_Wire_Success;
}

unsigned char DS1821_Read_Temp(unsigned int * temperature, GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
	unsigned char tmp;
	tmp=One_Wire_Reset(GPIOx, PINx);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	b29b      	uxth	r3, r3
 8000224:	68b8      	ldr	r0, [r7, #8]
 8000226:	4619      	mov	r1, r3
 8000228:	f000 f820 	bl	800026c <One_Wire_Reset>
 800022c:	4603      	mov	r3, r0
 800022e:	75fb      	strb	r3, [r7, #23]
	if (tmp!=One_Wire_Success) return tmp;
 8000230:	7dfb      	ldrb	r3, [r7, #23]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <DS1821_Read_Temp+0x26>
 8000236:	7dfb      	ldrb	r3, [r7, #23]
 8000238:	e013      	b.n	8000262 <DS1821_Read_Temp+0x4e>
	One_Wire_Write_Byte(DS1821_READ_TEMPERATURE, GPIOx, PINx);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	b29b      	uxth	r3, r3
 800023e:	f04f 00aa 	mov.w	r0, #170	; 0xaa
 8000242:	68b9      	ldr	r1, [r7, #8]
 8000244:	461a      	mov	r2, r3
 8000246:	f000 f85d 	bl	8000304 <One_Wire_Write_Byte>
	* temperature = One_Wire_Read_Byte(GPIOx, PINx);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	b29b      	uxth	r3, r3
 800024e:	68b8      	ldr	r0, [r7, #8]
 8000250:	4619      	mov	r1, r3
 8000252:	f000 f8b9 	bl	80003c8 <One_Wire_Read_Byte>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]
	return One_Wire_Success;
 800025e:	f04f 0300 	mov.w	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	f107 0718 	add.w	r7, r7, #24
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <One_Wire_Reset>:
 */

#include "oneWire.h"

unsigned int One_Wire_Reset(GPIO_TypeDef * GPIOx, u16 PINx)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	unsigned int tmp;
	PIN_IN(GPIOx, PINx);
 8000278:	887b      	ldrh	r3, [r7, #2]
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	4619      	mov	r1, r3
 800027e:	f000 fa55 	bl	800072c <PIN_IN>
	if ((PIN_SYG(GPIOx, PINx))==0)	return One_Wire_Bus_Low_Error;
 8000282:	887b      	ldrh	r3, [r7, #2]
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	4619      	mov	r1, r3
 8000288:	f000 fa38 	bl	80006fc <PIN_SYG>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d102      	bne.n	8000298 <One_Wire_Reset+0x2c>
 8000292:	f04f 0302 	mov.w	r3, #2
 8000296:	e02f      	b.n	80002f8 <One_Wire_Reset+0x8c>
	PIN_OUT_PP(GPIOx, PINx);
 8000298:	887b      	ldrh	r3, [r7, #2]
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	4619      	mov	r1, r3
 800029e:	f000 fa5d 	bl	800075c <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 80002a2:	887b      	ldrh	r3, [r7, #2]
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	4619      	mov	r1, r3
 80002a8:	f000 fa1a 	bl	80006e0 <PIN_OFF>
	delay_us(Time_Reset_Low);
 80002ac:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80002b0:	f000 fafc 	bl	80008ac <delay_us>
	PIN_ON(GPIOx, PINx);
 80002b4:	887b      	ldrh	r3, [r7, #2]
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	4619      	mov	r1, r3
 80002ba:	f000 fa03 	bl	80006c4 <PIN_ON>
	PIN_IN(GPIOx, PINx);
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	4619      	mov	r1, r3
 80002c4:	f000 fa32 	bl	800072c <PIN_IN>
	delay_us(Time_Pulse_Delay_High);
 80002c8:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80002cc:	f000 faee 	bl	80008ac <delay_us>
	if ((PIN_SYG(GPIOx, PINx))==0) tmp=One_Wire_Success;
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	4619      	mov	r1, r3
 80002d6:	f000 fa11 	bl	80006fc <PIN_SYG>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <One_Wire_Reset+0x7c>
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	e002      	b.n	80002ee <One_Wire_Reset+0x82>
		else tmp=One_Wire_Error_No_Echo;
 80002e8:	f04f 0301 	mov.w	r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
	delay_us(Time_After_Reset);
 80002ee:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80002f2:	f000 fadb 	bl	80008ac <delay_us>
	return tmp;
 80002f6:	68fb      	ldr	r3, [r7, #12]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	f107 0710 	add.w	r7, r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop

08000304 <One_Wire_Write_Byte>:

void One_Wire_Write_Byte(unsigned char Byte,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6039      	str	r1, [r7, #0]
 800030c:	4613      	mov	r3, r2
 800030e:	4602      	mov	r2, r0
 8000310:	71fa      	strb	r2, [r7, #7]
 8000312:	80bb      	strh	r3, [r7, #4]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++) One_Wire_Write_Bit(Byte&(1<<cnt),GPIOx, PINx);
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e013      	b.n	8000344 <One_Wire_Write_Byte+0x40>
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f04f 0201 	mov.w	r2, #1
 8000322:	fa02 f303 	lsl.w	r3, r2, r3
 8000326:	b2da      	uxtb	r2, r3
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4013      	ands	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	b2da      	uxtb	r2, r3
 8000330:	88bb      	ldrh	r3, [r7, #4]
 8000332:	4610      	mov	r0, r2
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	f000 f80c 	bl	8000354 <One_Wire_Write_Bit>
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	f103 0301 	add.w	r3, r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	2b08      	cmp	r3, #8
 8000348:	d1e8      	bne.n	800031c <One_Wire_Write_Byte+0x18>
}
 800034a:	f107 0710 	add.w	r7, r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop

08000354 <One_Wire_Write_Bit>:

void One_Wire_Write_Bit (unsigned char Bit,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6039      	str	r1, [r7, #0]
 800035c:	4613      	mov	r3, r2
 800035e:	4602      	mov	r2, r0
 8000360:	71fa      	strb	r2, [r7, #7]
 8000362:	80bb      	strh	r3, [r7, #4]
	PIN_OUT_PP(GPIOx, PINx);
 8000364:	88bb      	ldrh	r3, [r7, #4]
 8000366:	6838      	ldr	r0, [r7, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	f000 f9f7 	bl	800075c <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	6838      	ldr	r0, [r7, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	f000 f9b4 	bl	80006e0 <PIN_OFF>
	if (Bit==0)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d10d      	bne.n	800039a <One_Wire_Write_Bit+0x46>
	{
		delay_us(Time_Pulse_Delay_High);
 800037e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000382:	f000 fa93 	bl	80008ac <delay_us>
		PIN_ON(GPIOx, PINx);
 8000386:	88bb      	ldrh	r3, [r7, #4]
 8000388:	6838      	ldr	r0, [r7, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	f000 f99a 	bl	80006c4 <PIN_ON>
		delay_us(Time_Pulse_Delay_Low);
 8000390:	f04f 000a 	mov.w	r0, #10
 8000394:	f000 fa8a 	bl	80008ac <delay_us>
 8000398:	e00c      	b.n	80003b4 <One_Wire_Write_Bit+0x60>
	}
	else
	{
		delay_us(Time_Pulse_Delay_Low);
 800039a:	f04f 000a 	mov.w	r0, #10
 800039e:	f000 fa85 	bl	80008ac <delay_us>
		PIN_ON(GPIOx, PINx);
 80003a2:	88bb      	ldrh	r3, [r7, #4]
 80003a4:	6838      	ldr	r0, [r7, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	f000 f98c 	bl	80006c4 <PIN_ON>
		delay_us(Time_Pulse_Delay_High);
 80003ac:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80003b0:	f000 fa7c 	bl	80008ac <delay_us>
	}
	PIN_IN(GPIOx, PINx);
 80003b4:	88bb      	ldrh	r3, [r7, #4]
 80003b6:	6838      	ldr	r0, [r7, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	f000 f9b7 	bl	800072c <PIN_IN>
}
 80003be:	f107 0708 	add.w	r7, r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop

080003c8 <One_Wire_Read_Byte>:

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
	unsigned char tmp=0;
 80003d4:	f04f 0300 	mov.w	r3, #0
 80003d8:	73fb      	strb	r3, [r7, #15]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 80003da:	f04f 0300 	mov.w	r3, #0
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	e015      	b.n	800040e <One_Wire_Read_Byte+0x46>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
 80003e2:	887b      	ldrh	r3, [r7, #2]
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	4619      	mov	r1, r3
 80003e8:	f000 f81e 	bl	8000428 <One_Wire_Read_Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d009      	beq.n	8000406 <One_Wire_Read_Byte+0x3e>
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	f04f 0201 	mov.w	r2, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	4313      	orrs	r3, r2
 8000402:	b2db      	uxtb	r3, r3
 8000404:	73fb      	strb	r3, [r7, #15]

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
	unsigned char tmp=0;
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	f103 0301 	add.w	r3, r3, #1
 800040c:	73bb      	strb	r3, [r7, #14]
 800040e:	7bbb      	ldrb	r3, [r7, #14]
 8000410:	2b08      	cmp	r3, #8
 8000412:	d1e6      	bne.n	80003e2 <One_Wire_Read_Byte+0x1a>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
	delay_us(Time_Pulse_Delay_High);
 8000414:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000418:	f000 fa48 	bl	80008ac <delay_us>
	return tmp;
 800041c:	7bfb      	ldrb	r3, [r7, #15]
}
 800041e:	4618      	mov	r0, r3
 8000420:	f107 0710 	add.w	r7, r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <One_Wire_Read_Bit>:

unsigned char One_Wire_Read_Bit (GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	807b      	strh	r3, [r7, #2]
		unsigned char tmp;
	 	PIN_OUT_PP(GPIOx, PINx);
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	4619      	mov	r1, r3
 800043a:	f000 f98f 	bl	800075c <PIN_OUT_PP>
		PIN_OFF(GPIOx, PINx);
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	f000 f94c 	bl	80006e0 <PIN_OFF>
		delay_us(Time_Hold_Down);
 8000448:	f04f 0002 	mov.w	r0, #2
 800044c:	f000 fa2e 	bl	80008ac <delay_us>
		PIN_IN(GPIOx, PINx);
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	4619      	mov	r1, r3
 8000456:	f000 f969 	bl	800072c <PIN_IN>
		delay_us(Time_Pulse_Delay_Low);
 800045a:	f04f 000a 	mov.w	r0, #10
 800045e:	f000 fa25 	bl	80008ac <delay_us>
		if ((PIN_SYG(GPIOx, PINx))!=0)	tmp = 1;
 8000462:	887b      	ldrh	r3, [r7, #2]
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	4619      	mov	r1, r3
 8000468:	f000 f948 	bl	80006fc <PIN_SYG>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d003      	beq.n	800047a <One_Wire_Read_Bit+0x52>
 8000472:	f04f 0301 	mov.w	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e002      	b.n	8000480 <One_Wire_Read_Bit+0x58>
			else tmp = 0;
 800047a:	f04f 0300 	mov.w	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
		delay_us(Time_Pulse_Delay_High);
 8000480:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000484:	f000 fa12 	bl	80008ac <delay_us>
		return tmp;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	f107 0710 	add.w	r7, r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <uart_send_char>:
 *  Created on: 22.03.2013
 *      Author: frolls
 */
#include "serial.h"
void uart_send_char (USART_TypeDef * USARTx, char dat)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	while (!(USARTx->SR & USART_SR_TXE)) {}
 80004a0:	bf00      	nop
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f8      	beq.n	80004a2 <uart_send_char+0xe>
  	USART_SendData(USARTx,dat);
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4619      	mov	r1, r3
 80004b8:	f001 faf4 	bl	8001aa4 <USART_SendData>
}
 80004bc:	f107 0708 	add.w	r7, r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <uart_print_string>:

void uart_print_string(USART_TypeDef * USARTx, char * string, char newline)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	4613      	mov	r3, r2
 80004d0:	71fb      	strb	r3, [r7, #7]
	while (*string != 0x00){ uart_send_char(USARTx, *string++);}
 80004d2:	e009      	b.n	80004e8 <uart_print_string+0x24>
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	f102 0201 	add.w	r2, r2, #1
 80004de:	60ba      	str	r2, [r7, #8]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	4619      	mov	r1, r3
 80004e4:	f7ff ffd6 	bl	8000494 <uart_send_char>
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1f1      	bne.n	80004d4 <uart_print_string+0x10>
	if (newline !=0 ){
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d004      	beq.n	8000500 <uart_print_string+0x3c>
		uart_send_char(USARTx, '\n');
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f04f 010a 	mov.w	r1, #10
 80004fc:	f7ff ffca 	bl	8000494 <uart_send_char>
		//uart_send_char(USARTx, 13);
	}
}
 8000500:	f107 0710 	add.w	r7, r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <uart_print_value>:

void uart_print_value(USART_TypeDef * USARTx, long val)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	char buffer[10] = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	f103 0304 	add.w	r3, r3, #4
 8000520:	f04f 0200 	mov.w	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	f103 0304 	add.w	r3, r3, #4
 800052a:	f04f 0200 	mov.w	r2, #0
 800052e:	801a      	strh	r2, [r3, #0]
 8000530:	f103 0302 	add.w	r3, r3, #2
	char * head = buffer;
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	617b      	str	r3, [r7, #20]
	char cnt=0;
 800053a:	f04f 0300 	mov.w	r3, #0
 800053e:	74fb      	strb	r3, [r7, #19]
	if (val!=0)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d045      	beq.n	80005d2 <uart_print_value+0xca>
	{
		while( val )
 8000546:	e02e      	b.n	80005a6 <uart_print_value+0x9e>
		{
    		*head++ = (val % 10)["0123456789"];
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	f246 6367 	movw	r3, #26215	; 0x6667
 800054e:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000552:	fb83 2301 	smull	r2, r3, r3, r1
 8000556:	ea4f 02a3 	mov.w	r2, r3, asr #2
 800055a:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800055e:	1ad2      	subs	r2, r2, r3
 8000560:	4613      	mov	r3, r2
 8000562:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000566:	189b      	adds	r3, r3, r2
 8000568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	f644 2344 	movw	r3, #19012	; 0x4a44
 8000572:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000576:	5c9a      	ldrb	r2, [r3, r2]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	f103 0301 	add.w	r3, r3, #1
 8000582:	617b      	str	r3, [r7, #20]
    		val /= 10;
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	f246 6367 	movw	r3, #26215	; 0x6667
 800058a:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800058e:	fb83 1302 	smull	r1, r3, r3, r2
 8000592:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000596:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800059a:	1acb      	subs	r3, r1, r3
 800059c:	603b      	str	r3, [r7, #0]
			cnt++;
 800059e:	7cfb      	ldrb	r3, [r7, #19]
 80005a0:	f103 0301 	add.w	r3, r3, #1
 80005a4:	74fb      	strb	r3, [r7, #19]
	char buffer[10] = {0};
	char * head = buffer;
	char cnt=0;
	if (val!=0)
	{
		while( val )
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1cd      	bne.n	8000548 <uart_print_value+0x40>
		{
    		*head++ = (val % 10)["0123456789"];
    		val /= 10;
			cnt++;
		}
		while (cnt!=0){ cnt--; uart_send_char(USARTx, (buffer[cnt])); }
 80005ac:	e00d      	b.n	80005ca <uart_print_value+0xc2>
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
 80005b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80005b4:	74fb      	strb	r3, [r7, #19]
 80005b6:	7cfb      	ldrb	r3, [r7, #19]
 80005b8:	f107 0218 	add.w	r2, r7, #24
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f7ff ff65 	bl	8000494 <uart_send_char>
 80005ca:	7cfb      	ldrb	r3, [r7, #19]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1ee      	bne.n	80005ae <uart_print_value+0xa6>
 80005d0:	e004      	b.n	80005dc <uart_print_value+0xd4>
	}
	else
	{
		uart_send_char(USARTx, ('0'));
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f04f 0130 	mov.w	r1, #48	; 0x30
 80005d8:	f7ff ff5c 	bl	8000494 <uart_send_char>
	}
}
 80005dc:	f107 0718 	add.w	r7, r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <smallLEDPanel_Init>:
 *      Author: frolls
 */
#include "smallLEDPanel.h"

void smallLEDPanel_Init(void)//GPIO_TypeDef * GPIOx, u16 PIN_CLK, u16 PIN_SDI, u16 PIN_LE)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	PIN_OUT_PP(smallLEDPanel_Port, smallLEDPanel_CLK);
 80005e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	f000 f8b2 	bl	800075c <PIN_OUT_PP>
	PIN_OUT_PP(smallLEDPanel_Port, smallLEDPanel_SDI);
 80005f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000600:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000604:	f000 f8aa 	bl	800075c <PIN_OUT_PP>
	PIN_OUT_PP(smallLEDPanel_Port, smallLEDPanel_LE);
 8000608:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800060c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000614:	f000 f8a2 	bl	800075c <PIN_OUT_PP>
	//GPIO_InitTypeDef GPIO_InitStructure;
	//GPIO_InitStructure.GPIO_Pin   = PIN_CLK ;//| PIN_SDI;// | PIN_LE;
	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
	//GPIO_Init(GPIOx, &GPIO_InitStructure);
}
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop

0800061c <smallLEDPanel_Set>:
	}
	PIN_ON(smallLEDPanel_Port, smallLEDPanel_LE);
}

void smallLEDPanel_Set(unsigned short val)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
	volatile unsigned char i;

	PIN_OFF(smallLEDPanel_Port, smallLEDPanel_LE);
 8000626:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800062a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	f000 f855 	bl	80006e0 <PIN_OFF>

	for (i=0; i<16; i++)
 8000636:	f04f 0300 	mov.w	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	e031      	b.n	80006a2 <smallLEDPanel_Set+0x86>
	{
		if ((val >> (15-i)) & 1)
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f1c3 030f 	rsb	r3, r3, #15
 8000648:	fa42 f303 	asr.w	r3, r2, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d008      	beq.n	8000666 <smallLEDPanel_Set+0x4a>
			PIN_ON(smallLEDPanel_Port, smallLEDPanel_SDI);
 8000654:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000658:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800065c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000660:	f000 f830 	bl	80006c4 <PIN_ON>
 8000664:	e007      	b.n	8000676 <smallLEDPanel_Set+0x5a>
		else
			PIN_OFF(smallLEDPanel_Port, smallLEDPanel_SDI);
 8000666:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800066a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	f000 f835 	bl	80006e0 <PIN_OFF>

		PIN_OFF(smallLEDPanel_Port, smallLEDPanel_CLK);
 8000676:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800067a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	f000 f82d 	bl	80006e0 <PIN_OFF>
		PIN_ON(smallLEDPanel_Port, smallLEDPanel_CLK);
 8000686:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800068a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800068e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000692:	f000 f817 	bl	80006c4 <PIN_ON>
{
	volatile unsigned char i;

	PIN_OFF(smallLEDPanel_Port, smallLEDPanel_LE);

	for (i=0; i<16; i++)
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f103 0301 	add.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b0f      	cmp	r3, #15
 80006a8:	d9c9      	bls.n	800063e <smallLEDPanel_Set+0x22>

		PIN_OFF(smallLEDPanel_Port, smallLEDPanel_CLK);
		PIN_ON(smallLEDPanel_Port, smallLEDPanel_CLK);
	}

	PIN_ON(smallLEDPanel_Port, smallLEDPanel_LE);
 80006aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006ae:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	f000 f805 	bl	80006c4 <PIN_ON>
}
 80006ba:	f107 0710 	add.w	r7, r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop

080006c4 <PIN_ON>:

#include "stm32_GPIO.h"
#include "stm32f10x_gpio.h"

void PIN_ON(GPIO_TypeDef * GPIOx,u16 PINx)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR=PINx;
 80006d0:	887a      	ldrh	r2, [r7, #2]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	611a      	str	r2, [r3, #16]
	//GPIOx->ODR=GPIOx->IDR|(PINx);
}
 80006d6:	f107 070c 	add.w	r7, r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <PIN_OFF>:

void PIN_OFF(GPIO_TypeDef * GPIOx,u16 PINx)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
	GPIOx->BRR=PINx;
 80006ec:	887a      	ldrh	r2, [r7, #2]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	615a      	str	r2, [r3, #20]
	//GPIOx->ODR=GPIOx->IDR&(~(PINx));
}
 80006f2:	f107 070c 	add.w	r7, r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <PIN_SYG>:

u8 PIN_SYG(GPIO_TypeDef * GPIOx, u16 PINx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR&PINx)!=0)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	887b      	ldrh	r3, [r7, #2]
 800070e:	4013      	ands	r3, r2
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <PIN_SYG+0x1e>
	{return 1;}
 8000714:	f04f 0301 	mov.w	r3, #1
 8000718:	e001      	b.n	800071e <PIN_SYG+0x22>
	else
	{return 0;}
 800071a:	f04f 0300 	mov.w	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	f107 070c 	add.w	r7, r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <PIN_IN>:

void PIN_IN (GPIO_TypeDef * GPIOx,u16 PINx)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 800073c:	f04f 0303 	mov.w	r3, #3
 8000740:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 8000742:	f04f 0304 	mov.w	r3, #4
 8000746:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	f000 face 	bl	8000cf0 <GPIO_Init>
}
 8000754:	f107 0710 	add.w	r7, r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <PIN_OUT_PP>:

void PIN_OUT_PP (GPIO_TypeDef * GPIOx,u16 PINx)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 800076c:	f04f 0303 	mov.w	r3, #3
 8000770:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_Out_PP;
 8000772:	f04f 0310 	mov.w	r3, #16
 8000776:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	4619      	mov	r1, r3
 8000780:	f000 fab6 	bl	8000cf0 <GPIO_Init>
}
 8000784:	f107 0710 	add.w	r7, r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <TIM6Init>:
 *      Author: frolls
 */
#include "timer6.h"

void TIM6Init()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Не забываем затактировать таймер */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000790:	f04f 0010 	mov.w	r0, #16
 8000794:	f04f 0101 	mov.w	r1, #1
 8000798:	f000 feae 	bl	80014f8 <RCC_APB1PeriphClockCmd>

  //uart_print_string(USART1, "TIM6 initialized!", 1);
  //uart_print_string(USART1, "TIM_TimeBaseStructure.TIM_Prescaler: ", 0);
  //uart_print_value(USART1, TIM_TimeBaseStructure.TIM_Prescaler);
  //uart_print_string(USART1, "", 1);
}
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop

080007a0 <TIM6_DAC_IRQHandler>:
}

volatile uint8_t delay_end = 0;

void TIM6_DAC_IRQHandler()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Так как этот обработчик вызывается и для ЦАП, нужно проверять,
   * произошло ли прерывание по переполнению счётчика таймера TIM6.
   */
	if(TIM_GetITStatus(TIM6, TIM_FLAG_Update)!=RESET)
 80007a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007ac:	f04f 0101 	mov.w	r1, #1
 80007b0:	f000 ffee 	bl	8001790 <TIM_GetITStatus>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d01e      	beq.n	80007f8 <TIM6_DAC_IRQHandler+0x58>
	  {
	   TIM_ClearITPendingBit(TIM6, TIM_FLAG_Update);
 80007ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007c2:	f04f 0101 	mov.w	r1, #1
 80007c6:	f001 f813 	bl	80017f0 <TIM_ClearITPendingBit>
	   TIM_Cmd(TIM6, DISABLE);
 80007ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007d2:	f04f 0100 	mov.w	r1, #0
 80007d6:	f000 ffad 	bl	8001734 <TIM_Cmd>
	   TIM_SetCounter(TIM6, 0);
 80007da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007e2:	f04f 0100 	mov.w	r1, #0
 80007e6:	f000 ffc5 	bl	8001774 <TIM_SetCounter>
	   delay_end = 1;
 80007ea:	f240 0320 	movw	r3, #32
 80007ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007f2:	f04f 0201 	mov.w	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
	  }
}
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop

080007fc <delay_ms>:

void delay_ms(uint16_t delay)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	 TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY)*1000 - 1;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800080e:	f240 021c 	movw	r2, #28
 8000812:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000816:	6811      	ldr	r1, [r2, #0]
 8000818:	f64d 6283 	movw	r2, #56963	; 0xde83
 800081c:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000820:	fba2 0201 	umull	r0, r2, r2, r1
 8000824:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000828:	b292      	uxth	r2, r2
 800082a:	4611      	mov	r1, r2
 800082c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8000830:	1a89      	subs	r1, r1, r2
 8000832:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8000836:	188a      	adds	r2, r1, r2
 8000838:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083c:	b292      	uxth	r2, r2
 800083e:	f102 32ff 	add.w	r2, r2, #4294967295
 8000842:	b292      	uxth	r2, r2
 8000844:	851a      	strh	r2, [r3, #40]	; 0x28
	 TIM6->ARR = delay;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800084e:	88fa      	ldrh	r2, [r7, #6]
 8000850:	859a      	strh	r2, [r3, #44]	; 0x2c
	 TIM6->EGR |= TIM_EGR_UG;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800085a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000862:	8a92      	ldrh	r2, [r2, #20]
 8000864:	b292      	uxth	r2, r2
 8000866:	f042 0201 	orr.w	r2, r2, #1
 800086a:	b292      	uxth	r2, r2
 800086c:	829a      	strh	r2, [r3, #20]
     TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000876:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800087a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	b292      	uxth	r2, r2
 8000882:	f042 0209 	orr.w	r2, r2, #9
 8000886:	b292      	uxth	r2, r2
 8000888:	801a      	strh	r2, [r3, #0]
     while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 800088a:	bf00      	nop
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b29b      	uxth	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f5      	bne.n	800088c <delay_ms+0x90>
}
 80008a0:	f107 070c 	add.w	r7, r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <delay_us>:

void delay_us(uint16_t delay)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
	TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY) - 1;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80008be:	f240 021c 	movw	r2, #28
 80008c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80008c6:	6811      	ldr	r1, [r2, #0]
 80008c8:	f64d 6283 	movw	r2, #56963	; 0xde83
 80008cc:	f2c4 321b 	movt	r2, #17179	; 0x431b
 80008d0:	fba2 0201 	umull	r0, r2, r2, r1
 80008d4:	ea4f 4292 	mov.w	r2, r2, lsr #18
 80008d8:	b292      	uxth	r2, r2
 80008da:	f102 32ff 	add.w	r2, r2, #4294967295
 80008de:	b292      	uxth	r2, r2
 80008e0:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM6->ARR = delay;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM6->EGR |= TIM_EGR_UG;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80008f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008fa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80008fe:	8a92      	ldrh	r2, [r2, #20]
 8000900:	b292      	uxth	r2, r2
 8000902:	f042 0201 	orr.w	r2, r2, #1
 8000906:	b292      	uxth	r2, r2
 8000908:	829a      	strh	r2, [r3, #20]
	TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000916:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800091a:	8812      	ldrh	r2, [r2, #0]
 800091c:	b292      	uxth	r2, r2
 800091e:	f042 0209 	orr.w	r2, r2, #9
 8000922:	b292      	uxth	r2, r2
 8000924:	801a      	strh	r2, [r3, #0]
    while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 8000926:	bf00      	nop
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	b29b      	uxth	r3, r3
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1f5      	bne.n	8000928 <delay_us+0x7c>
}
 800093c:	f107 070c 	add.w	r7, r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <RTC_Config>:
 */

#include <rtc.h>

void RTC_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
        //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
        //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
        //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        //NVIC_Init(&NVIC_InitStructure);

        RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 800094c:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8000950:	f04f 0101 	mov.w	r1, #1
 8000954:	f000 fdd0 	bl	80014f8 <RCC_APB1PeriphClockCmd>

        PWR_BackupAccessCmd(ENABLE);
 8000958:	f04f 0001 	mov.w	r0, #1
 800095c:	f000 faf8 	bl	8000f50 <PWR_BackupAccessCmd>
        RCC_LSEConfig(RCC_LSE_ON);
 8000960:	f04f 0001 	mov.w	r0, #1
 8000964:	f000 fc62 	bl	800122c <RCC_LSEConfig>
        while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
 8000968:	bf00      	nop
 800096a:	f04f 0041 	mov.w	r0, #65	; 0x41
 800096e:	f000 fded 	bl	800154c <RCC_GetFlagStatus>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f8      	beq.n	800096a <RTC_Config+0x22>
        RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8000978:	f44f 7080 	mov.w	r0, #256	; 0x100
 800097c:	f000 fc86 	bl	800128c <RCC_RTCCLKConfig>
        RCC_RTCCLKCmd(ENABLE);
 8000980:	f04f 0001 	mov.w	r0, #1
 8000984:	f000 fc98 	bl	80012b8 <RCC_RTCCLKCmd>

        RTC_WaitForSynchro();
 8000988:	f000 feb6 	bl	80016f8 <RTC_WaitForSynchro>
        RTC_WaitForLastTask();
 800098c:	f000 fea4 	bl	80016d8 <RTC_WaitForLastTask>
        //RTC_ITConfig(RTC_IT_SEC, ENABLE);
        RTC_WaitForLastTask();
 8000990:	f000 fea2 	bl	80016d8 <RTC_WaitForLastTask>
        RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
 8000994:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8000998:	f000 fe80 	bl	800169c <RTC_SetPrescaler>
        RTC_WaitForLastTask();
 800099c:	f000 fe9c 	bl	80016d8 <RTC_WaitForLastTask>
}
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop

080009a4 <GetTime>:

uint32_t GetTime(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	/* Reset RTC Counter when Time is 23:59:59 */
	    if (RTC_GetCounter() == 0x0001517F)
 80009a8:	f000 fe40 	bl	800162c <RTC_GetCounter>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f245 137f 	movw	r3, #20863	; 0x517f
 80009b2:	f2c0 0301 	movt	r3, #1
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d105      	bne.n	80009c6 <GetTime+0x22>
	    {
	        RTC_SetCounter(0x0);
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f000 fe51 	bl	8001664 <RTC_SetCounter>
	        /* Wait until last write operation on RTC registers has finished */
	        RTC_WaitForLastTask();
 80009c2:	f000 fe89 	bl	80016d8 <RTC_WaitForLastTask>
	    }
	return RTC_GetCounter();
 80009c6:	f000 fe31 	bl	800162c <RTC_GetCounter>
 80009ca:	4603      	mov	r3, r0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <Time_GetHours>:

uint32_t Time_GetHours(uint32_t TimeVar)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    /* Compute  hours */
    return TimeVar / 3600;
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 80009de:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 80009e2:	fba3 1302 	umull	r1, r3, r3, r2
 80009e6:	ea4f 23d3 	mov.w	r3, r3, lsr #11
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	f107 070c 	add.w	r7, r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <Time_GetMinutes>:

uint32_t Time_GetMinutes(uint32_t TimeVar)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	return (TimeVar % 3600) / 60;
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 8000a06:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 8000a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8000a0e:	ea4f 22d3 	mov.w	r2, r3, lsr #11
 8000a12:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000a16:	fb03 f302 	mul.w	r3, r3, r2
 8000a1a:	1aca      	subs	r2, r1, r3
 8000a1c:	f648 0389 	movw	r3, #34953	; 0x8889
 8000a20:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8000a24:	fba3 1302 	umull	r1, r3, r3, r2
 8000a28:	ea4f 1353 	mov.w	r3, r3, lsr #5
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f107 070c 	add.w	r7, r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Time_GetSeconds>:

uint32_t Time_GetSeconds(uint32_t TimeVar)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	return (TimeVar % 3600) % 60;
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	f24b 33c5 	movw	r3, #46021	; 0xb3c5
 8000a46:	f2c9 13a2 	movt	r3, #37282	; 0x91a2
 8000a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4e:	ea4f 21d3 	mov.w	r1, r3, lsr #11
 8000a52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000a56:	fb03 f301 	mul.w	r3, r3, r1
 8000a5a:	1ad1      	subs	r1, r2, r3
 8000a5c:	f648 0389 	movw	r3, #34953	; 0x8889
 8000a60:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8000a64:	fba3 2301 	umull	r2, r3, r3, r1
 8000a68:	ea4f 1253 	mov.w	r2, r3, lsr #5
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a78:	1aca      	subs	r2, r1, r3
 8000a7a:	4613      	mov	r3, r2
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f107 070c 	add.w	r7, r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <NVIC_PriorityGroupConfig>:
 *                                1 bits for subpriority
 *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
 *                                0 bits for subpriority
 * @retval None
 */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
	SCB ->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000a90:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000a94:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8000a9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000aa2:	60da      	str	r2, [r3, #12]
}
 8000aa4:	f107 070c 	add.w	r7, r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <NVIC_Init>:
 *         parameters in the NVIC_InitStruct.
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	f04f 0300 	mov.w	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	f04f 030f 	mov.w	r3, #15
 8000ac8:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd)); assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority)); assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

	if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	78db      	ldrb	r3, [r3, #3]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d047      	beq.n	8000b62 <NVIC_Init+0xb2>
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
 8000ad2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000ad6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	ea6f 0303 	mvn.w	r3, r3
 8000ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ae4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000ae8:	617b      	str	r3, [r7, #20]
		tmppre = (0x4 - tmppriority);
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f1c3 0304 	rsb	r3, r3, #4
 8000af0:	613b      	str	r3, [r7, #16]
		tmpsub = tmpsub >> tmppriority;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	fa22 f303 	lsr.w	r3, r2, r3
 8000afa:	60fb      	str	r3, [r7, #12]

		tmppriority =
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	461a      	mov	r2, r3
						<< tmppre;
 8000b02:	693b      	ldr	r3, [r7, #16]
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
		tmppre = (0x4 - tmppriority);
		tmpsub = tmpsub >> tmppriority;

		tmppriority =
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	617b      	str	r3, [r7, #20]
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
						<< tmppre;
		tmppriority |= NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	789b      	ldrb	r3, [r3, #2]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4013      	ands	r3, r2
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]
		tmppriority = tmppriority << 0x04;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000b20:	617b      	str	r3, [r7, #20]

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b22:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	185b      	adds	r3, r3, r1
 8000b36:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000b3a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000b4a:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	7809      	ldrb	r1, [r1, #0]
 8000b50:	f001 011f 	and.w	r1, r1, #31
 8000b54:	f04f 0001 	mov.w	r0, #1
 8000b58:	fa00 f101 	lsl.w	r1, r0, r1
		tmppriority = tmppriority << 0x04;

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000b60:	e014      	b.n	8000b8c <NVIC_Init+0xdc>
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000b62:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b66:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000b72:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	7809      	ldrb	r1, [r1, #0]
 8000b78:	f001 011f 	and.w	r1, r1, #31
 8000b7c:	f04f 0001 	mov.w	r0, #1
 8000b80:	fa00 f101 	lsl.w	r1, r0, r1
		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	}
}
 8000b8c:	f107 071c 	add.w	r7, r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <EXTI_Init>:
 *         parameters in the EXTI_InitStruct.
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
 *         that contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode)); assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger)); assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line)); assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

	tmp = (uint32_t) EXTI_BASE;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bae:	60fb      	str	r3, [r7, #12]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	799b      	ldrb	r3, [r3, #6]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d078      	beq.n	8000caa <EXTI_Init+0x112>
		/* Clear EXTI line configuration */
		EXTI ->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000bc8:	6811      	ldr	r1, [r2, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	ea6f 0202 	mvn.w	r2, r2
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
		EXTI ->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bda:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000be6:	6851      	ldr	r1, [r2, #4]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	ea6f 0202 	mvn.w	r2, r2
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	605a      	str	r2, [r3, #4]

		tmp += EXTI_InitStruct->EXTI_Mode;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	791b      	ldrb	r3, [r3, #4]
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	18d3      	adds	r3, r2, r3
 8000bfc:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	6811      	ldr	r1, [r2, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 8000c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c18:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000c1c:	6891      	ldr	r1, [r2, #8]
				~EXTI_InitStruct->EXTI_Line;
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	ea6f 0202 	mvn.w	r2, r2

		tmp += EXTI_InitStruct->EXTI_Mode;

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 8000c26:	400a      	ands	r2, r1
 8000c28:	609a      	str	r2, [r3, #8]
				~EXTI_InitStruct->EXTI_Line;
		EXTI ->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000c3a:	68d1      	ldr	r1, [r2, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	6812      	ldr	r2, [r2, #0]
 8000c40:	ea6f 0202 	mvn.w	r2, r2
 8000c44:	400a      	ands	r2, r1
 8000c46:	60da      	str	r2, [r3, #12]

		/* Select the trigger for the selected external interrupts */
		if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	795b      	ldrb	r3, [r3, #5]
 8000c4c:	2b10      	cmp	r3, #16
 8000c4e:	d11a      	bne.n	8000c86 <EXTI_Init+0xee>
			/* Rising Falling edge */
			EXTI ->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000c60:	6891      	ldr	r1, [r2, #8]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	609a      	str	r2, [r3, #8]
			EXTI ->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c76:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000c7a:	68d1      	ldr	r1, [r2, #12]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	e01f      	b.n	8000cc6 <EXTI_Init+0x12e>
		} else {
			tmp = (uint32_t) EXTI_BASE;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c8e:	60fb      	str	r3, [r7, #12]
			tmp += EXTI_InitStruct->EXTI_Trigger;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	18d3      	adds	r3, r2, r3
 8000c98:	60fb      	str	r3, [r7, #12]

			*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	6811      	ldr	r1, [r2, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e00d      	b.n	8000cc6 <EXTI_Init+0x12e>
		}
	} else {
		tmp += EXTI_InitStruct->EXTI_Mode;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	791b      	ldrb	r3, [r3, #4]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	60fb      	str	r3, [r7, #12]

		/* Disable the selected external lines */
		*(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	6811      	ldr	r1, [r2, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	ea6f 0202 	mvn.w	r2, r2
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
	}
}
 8000cc6:	f107 0714 	add.w	r7, r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <EXTI_ClearITPendingBit>:
 * @brief  Clears the EXTI's line pending bits.
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(EXTI_Line));

	EXTI ->PR = EXTI_Line;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	615a      	str	r2, [r3, #20]
}
 8000ce4:	f107 070c 	add.w	r7, r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <GPIO_Init>:
 * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
 * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
 *         contains the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000cfa:	f04f 0300 	mov.w	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx)); assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode)); assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

	/*---------------------------- GPIO Mode Configuration -----------------------*/
	currentmode = ((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x0F);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	61fb      	str	r3, [r7, #28]
	if ((((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x10)) != 0x00) {
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	78db      	ldrb	r3, [r3, #3]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d004      	beq.n	8000d3e <GPIO_Init+0x4e>
		/* Check the parameters */
		assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
		/* Output mode */
		currentmode |= (uint32_t) GPIO_InitStruct->GPIO_Speed;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	789b      	ldrb	r3, [r3, #2]
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61fb      	str	r3, [r7, #28]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d04e      	beq.n	8000de6 <GPIO_Init+0xf6>
		tmpreg = GPIOx->CRL;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000d4e:	f04f 0300 	mov.w	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	e041      	b.n	8000dda <GPIO_Init+0xea>
			pos = ((uint32_t) 0x01) << pinpos;
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	f04f 0201 	mov.w	r2, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d12d      	bne.n	8000dd2 <GPIO_Init+0xe2>
				pos = pinpos << 2;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d7c:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding low control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f04f 020f 	mov.w	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	ea6f 0303 	mvn.w	r3, r3
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	4013      	ands	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	78db      	ldrb	r3, [r3, #3]
 8000da8:	2b28      	cmp	r3, #40	; 0x28
 8000daa:	d107      	bne.n	8000dbc <GPIO_Init+0xcc>
					GPIOx->BRR = (((uint32_t) 0x01) << pinpos);
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	f04f 0201 	mov.w	r2, #1
 8000db2:	fa02 f203 	lsl.w	r2, r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	e00a      	b.n	8000dd2 <GPIO_Init+0xe2>
				} else {
					/* Set the corresponding ODR bit */
					if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	78db      	ldrb	r3, [r3, #3]
 8000dc0:	2b48      	cmp	r3, #72	; 0x48
 8000dc2:	d106      	bne.n	8000dd2 <GPIO_Init+0xe2>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	f04f 0201 	mov.w	r2, #1
 8000dca:	fa02 f203 	lsl.w	r2, r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
		tmpreg = GPIOx->CRL;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	f103 0301 	add.w	r3, r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	d9ba      	bls.n	8000d56 <GPIO_Init+0x66>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
					}
				}
			}
		}
		GPIOx->CRL = tmpreg;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	601a      	str	r2, [r3, #0]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	2bff      	cmp	r3, #255	; 0xff
 8000dec:	d953      	bls.n	8000e96 <GPIO_Init+0x1a6>
		tmpreg = GPIOx->CRH;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	e046      	b.n	8000e8a <GPIO_Init+0x19a>
			pos = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	f103 0308 	add.w	r3, r3, #8
 8000e02:	f04f 0201 	mov.w	r2, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d130      	bne.n	8000e82 <GPIO_Init+0x192>
				pos = pinpos << 2;
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e26:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding high control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f04f 020f 	mov.w	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	ea6f 0303 	mvn.w	r3, r3
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	78db      	ldrb	r3, [r3, #3]
 8000e52:	2b28      	cmp	r3, #40	; 0x28
 8000e54:	d108      	bne.n	8000e68 <GPIO_Init+0x178>
					GPIOx->BRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	f103 0308 	add.w	r3, r3, #8
 8000e5c:	f04f 0201 	mov.w	r2, #1
 8000e60:	fa02 f203 	lsl.w	r2, r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	615a      	str	r2, [r3, #20]
				}
				/* Set the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	78db      	ldrb	r3, [r3, #3]
 8000e6c:	2b48      	cmp	r3, #72	; 0x48
 8000e6e:	d108      	bne.n	8000e82 <GPIO_Init+0x192>
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	f103 0308 	add.w	r3, r3, #8
 8000e76:	f04f 0201 	mov.w	r2, #1
 8000e7a:	fa02 f203 	lsl.w	r2, r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
		tmpreg = GPIOx->CRH;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	f103 0301 	add.w	r3, r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b07      	cmp	r3, #7
 8000e8e:	d9b5      	bls.n	8000dfc <GPIO_Init+0x10c>
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
				}
			}
		}
		GPIOx->CRH = tmpreg;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	605a      	str	r2, [r3, #4]
	}
}
 8000e96:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <GPIO_EXTILineConfig>:
 *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).
 * @param  GPIO_PinSource: specifies the EXTI line to be configured.
 *   This parameter can be GPIO_PinSourcex where x can be (0..15).
 * @retval None
 */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource) {
 8000ea0:	b490      	push	{r4, r7}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	71fa      	strb	r2, [r7, #7]
 8000eac:	71bb      	strb	r3, [r7, #6]
	uint32_t tmp = 0x00;
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ebe:	f04f 020f 	mov.w	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	60fb      	str	r3, [r7, #12]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ed0:	79ba      	ldrb	r2, [r7, #6]
 8000ed2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000ee2:	79b9      	ldrb	r1, [r7, #6]
 8000ee4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000ee8:	b2c9      	uxtb	r1, r1
 8000eea:	f101 0102 	add.w	r1, r1, #2
 8000eee:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	ea6f 0202 	mvn.w	r2, r2
 8000ef8:	4011      	ands	r1, r2
 8000efa:	f100 0202 	add.w	r2, r0, #2
 8000efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f0a:	79ba      	ldrb	r2, [r7, #6]
 8000f0c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	4610      	mov	r0, r2
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000f1c:	79b9      	ldrb	r1, [r7, #6]
 8000f1e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000f22:	b2c9      	uxtb	r1, r1
 8000f24:	f101 0102 	add.w	r1, r1, #2
 8000f28:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000f2c:	79fc      	ldrb	r4, [r7, #7]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8000f38:	fa04 f202 	lsl.w	r2, r4, r2
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000f3c:	4311      	orrs	r1, r2
 8000f3e:	f100 0202 	add.w	r2, r0, #2
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
}
 8000f46:	f107 0710 	add.w	r7, r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc90      	pop	{r4, r7}
 8000f4e:	4770      	bx	lr

08000f50 <PWR_BackupAccessCmd>:
 * @brief  Enables or disables access to the RTC and backup registers.
 * @param  NewState: new state of the access to the RTC and backup registers.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void PWR_BackupAccessCmd(FunctionalState NewState) {
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NewState));
	*(__IO uint32_t *) CR_DBP_BB = (uint32_t) NewState;
 8000f5a:	f04f 0320 	mov.w	r3, #32
 8000f5e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	f107 070c 	add.w	r7, r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f9c:	6859      	ldr	r1, [r3, #4]
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000fc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fc4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fdc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fee:	6852      	ldr	r2, [r2, #4]
 8000ff0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000ff4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ffe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001002:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001036:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001044:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800104e:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001056:	d003      	beq.n	8001060 <RCC_HSEConfig+0x48>
 8001058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800105c:	d00d      	beq.n	800107a <RCC_HSEConfig+0x62>
 800105e:	e019      	b.n	8001094 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001076:	601a      	str	r2, [r3, #0]
      break;
 8001078:	e00d      	b.n	8001096 <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001086:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001090:	601a      	str	r2, [r3, #0]
      break;
 8001092:	e000      	b.n	8001096 <RCC_HSEConfig+0x7e>
      
    default:
      break;
 8001094:	bf00      	nop
  }
}
 8001096:	f107 070c 	add.w	r7, r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80010c2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	605a      	str	r2, [r3, #4]
}
 80010dc:	f107 0714 	add.w	r7, r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80010f2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80010f6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80010fa:	79fa      	ldrb	r2, [r7, #7]
 80010fc:	601a      	str	r2, [r3, #0]
}
 80010fe:	f107 070c 	add.w	r7, r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f023 0303 	bic.w	r3, r3, #3
 8001128:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	605a      	str	r2, [r3, #4]
}
 800113e:	f107 0714 	add.w	r7, r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	b2db      	uxtb	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001188:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	605a      	str	r2, [r3, #4]
}
 800119e:	f107 0714 	add.w	r7, r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	605a      	str	r2, [r3, #4]
}
 80011de:	f107 0714 	add.w	r7, r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001208:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	605a      	str	r2, [r3, #4]
}
 8001222:	f107 0714 	add.w	r7, r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001236:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800123a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001244:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001248:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d002      	beq.n	800125e <RCC_LSEConfig+0x32>
 8001258:	2b04      	cmp	r3, #4
 800125a:	d008      	beq.n	800126e <RCC_LSEConfig+0x42>
 800125c:	e00f      	b.n	800127e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800125e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001262:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001266:	f04f 0201 	mov.w	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
      break;
 800126c:	e008      	b.n	8001280 <RCC_LSEConfig+0x54>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800126e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001272:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001276:	f04f 0205 	mov.w	r2, #5
 800127a:	701a      	strb	r2, [r3, #0]
      break;            
 800127c:	e000      	b.n	8001280 <RCC_LSEConfig+0x54>
      
    default:
      break;      
 800127e:	bf00      	nop
  }
}
 8001280:	f107 070c 	add.w	r7, r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop

0800128c <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800129c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012a4:	6a11      	ldr	r1, [r2, #32]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	621a      	str	r2, [r3, #32]
}
 80012ac:	f107 070c 	add.w	r7, r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80012c2:	f240 433c 	movw	r3, #1084	; 0x43c
 80012c6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	f107 070c 	add.w	r7, r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d00a      	beq.n	800132a <RCC_GetClocksFreq+0x52>
 8001314:	2b08      	cmp	r3, #8
 8001316:	d00f      	beq.n	8001338 <RCC_GetClocksFreq+0x60>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d147      	bne.n	80013ac <RCC_GetClocksFreq+0xd4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001322:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001326:	6013      	str	r3, [r2, #0]
      break;
 8001328:	e047      	b.n	80013ba <RCC_GetClocksFreq+0xe2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001330:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001334:	6013      	str	r3, [r2, #0]
      break;
 8001336:	e040      	b.n	80013ba <RCC_GetClocksFreq+0xe2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001346:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800135e:	f103 0302 	add.w	r3, r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <RCC_GetClocksFreq+0xa6>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001370:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001374:	fb03 f202 	mul.w	r2, r3, r2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800137c:	e01d      	b.n	80013ba <RCC_GetClocksFreq+0xe2>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	f103 0301 	add.w	r3, r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8001392:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001396:	f2c0 037a 	movt	r3, #122	; 0x7a
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	fbb3 f3f2 	udiv	r3, r3, r2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	fb02 f203 	mul.w	r2, r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80013aa:	e006      	b.n	80013ba <RCC_GetClocksFreq+0xe2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80013b2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80013b6:	6013      	str	r3, [r2, #0]
      break;
 80013b8:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80013d0:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80013d2:	f240 0300 	movw	r3, #0
 80013d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	189b      	adds	r3, r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	fa22 f203 	lsr.w	r2, r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80013f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001400:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001408:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800140a:	f240 0300 	movw	r3, #0
 800140e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	189b      	adds	r3, r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	fa22 f203 	lsr.w	r2, r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001438:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001440:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001442:	f240 0300 	movw	r3, #0
 8001446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	189b      	adds	r3, r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	fa22 f203 	lsr.w	r2, r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001470:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8001478:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 800147a:	f240 0310 	movw	r3, #16
 800147e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	189b      	adds	r3, r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	fbb2 f2f3 	udiv	r2, r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	611a      	str	r2, [r3, #16]
}
 800149a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00c      	beq.n	80014d0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014c6:	6991      	ldr	r1, [r2, #24]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	619a      	str	r2, [r3, #24]
 80014ce:	e00d      	b.n	80014ec <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014e0:	6991      	ldr	r1, [r2, #24]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	ea6f 0202 	mvn.w	r2, r2
 80014e8:	400a      	ands	r2, r1
 80014ea:	619a      	str	r2, [r3, #24]
  }
}
 80014ec:	f107 070c 	add.w	r7, r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001516:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800151a:	69d1      	ldr	r1, [r2, #28]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	430a      	orrs	r2, r1
 8001520:	61da      	str	r2, [r3, #28]
 8001522:	e00d      	b.n	8001540 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800152c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001530:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001534:	69d1      	ldr	r1, [r2, #28]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	ea6f 0202 	mvn.w	r2, r2
 800153c:	400a      	ands	r2, r1
 800153e:	61da      	str	r2, [r3, #28]
  }
}
 8001540:	f107 070c 	add.w	r7, r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop

0800154c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800156e:	b2db      	uxtb	r3, r3
 8001570:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00f      	b.n	80015a6 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d106      	bne.n	800159a <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e005      	b.n	80015a6 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <RCC_GetFlagStatus+0x7a>
  {
    bitstatus = SET;
 80015be:	f04f 0301 	mov.w	r3, #1
 80015c2:	74fb      	strb	r3, [r7, #19]
 80015c4:	e002      	b.n	80015cc <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80015cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	f107 071c 	add.w	r7, r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <RTC_EnterConfigMode>:
/**
 * @brief  Enters the RTC configuration mode.
 * @param  None
 * @retval None
 */
void RTC_EnterConfigMode(void) {
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	/* Set the CNF flag to enter in the Configuration Mode */
	RTC ->CRL |= RTC_CRL_CNF;
 80015e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80015ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80015f0:	8892      	ldrh	r2, [r2, #4]
 80015f2:	b292      	uxth	r2, r2
 80015f4:	f042 0210 	orr.w	r2, r2, #16
 80015f8:	b292      	uxth	r2, r2
 80015fa:	809a      	strh	r2, [r3, #4]
}
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <RTC_ExitConfigMode>:
/**
 * @brief  Exits from the RTC configuration mode.
 * @param  None
 * @retval None
 */
void RTC_ExitConfigMode(void) {
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	/* Reset the CNF flag to exit from the Configuration Mode */
	RTC ->CRL &= (uint16_t) ~((uint16_t) RTC_CRL_CNF );
 8001608:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800160c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001610:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001614:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001618:	8892      	ldrh	r2, [r2, #4]
 800161a:	b292      	uxth	r2, r2
 800161c:	f022 0210 	bic.w	r2, r2, #16
 8001620:	b292      	uxth	r2, r2
 8001622:	809a      	strh	r2, [r3, #4]
}
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop

0800162c <RTC_GetCounter>:
/**
 * @brief  Gets the RTC counter value.
 * @param  None
 * @retval RTC counter value.
 */
uint32_t RTC_GetCounter(void) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
	uint16_t tmp = 0;
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	80fb      	strh	r3, [r7, #6]
	tmp = RTC ->CNTL;
 8001638:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800163c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001640:	8b9b      	ldrh	r3, [r3, #28]
 8001642:	80fb      	strh	r3, [r7, #6]
	return (((uint32_t) RTC ->CNTH << 16) | tmp);
 8001644:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001648:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800164c:	8b1b      	ldrh	r3, [r3, #24]
 800164e:	b29b      	uxth	r3, r3
 8001650:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4313      	orrs	r3, r2
}
 8001658:	4618      	mov	r0, r3
 800165a:	f107 070c 	add.w	r7, r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <RTC_SetCounter>:
/**
 * @brief  Sets the RTC counter value.
 * @param  CounterValue: RTC counter new value.
 * @retval None
 */
void RTC_SetCounter(uint32_t CounterValue) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	RTC_EnterConfigMode();
 800166c:	f7ff ffb6 	bl	80015dc <RTC_EnterConfigMode>
	/* Set RTC COUNTER MSB word */RTC ->CNTH = CounterValue >> 16;
 8001670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001674:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800167e:	b292      	uxth	r2, r2
 8001680:	831a      	strh	r2, [r3, #24]
	/* Set RTC COUNTER LSB word */RTC ->CNTL = (CounterValue & RTC_LSB_MASK );
 8001682:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001686:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	b292      	uxth	r2, r2
 800168e:	839a      	strh	r2, [r3, #28]
	RTC_ExitConfigMode();
 8001690:	f7ff ffb8 	bl	8001604 <RTC_ExitConfigMode>
}
 8001694:	f107 0708 	add.w	r7, r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <RTC_SetPrescaler>:
/**
 * @brief  Sets the RTC prescaler value.
 * @param  PrescalerValue: RTC prescaler new value.
 * @retval None
 */
void RTC_SetPrescaler(uint32_t PrescalerValue) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_RTC_PRESCALER(PrescalerValue));

	RTC_EnterConfigMode();
 80016a4:	f7ff ff9a 	bl	80015dc <RTC_EnterConfigMode>
	/* Set RTC PRESCALER MSB word */RTC ->PRLH = (PrescalerValue
 80016a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
			& PRLH_MSB_MASK ) >> 16;
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80016b6:	ea4f 4212 	mov.w	r2, r2, lsr #16
void RTC_SetPrescaler(uint32_t PrescalerValue) {
	/* Check the parameters */
	assert_param(IS_RTC_PRESCALER(PrescalerValue));

	RTC_EnterConfigMode();
	/* Set RTC PRESCALER MSB word */RTC ->PRLH = (PrescalerValue
 80016ba:	b292      	uxth	r2, r2
 80016bc:	811a      	strh	r2, [r3, #8]
			& PRLH_MSB_MASK ) >> 16;
	/* Set RTC PRESCALER LSB word */RTC ->PRLL = (PrescalerValue
 80016be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	b292      	uxth	r2, r2
 80016ca:	819a      	strh	r2, [r3, #12]
			& RTC_LSB_MASK );
	RTC_ExitConfigMode();
 80016cc:	f7ff ff9a 	bl	8001604 <RTC_ExitConfigMode>
}
 80016d0:	f107 0708 	add.w	r7, r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <RTC_WaitForLastTask>:
 * @brief  Waits until last write operation on RTC registers has finished.
 * @note   This function must be called before any write to RTC registers.
 * @param  None
 * @retval None
 */
void RTC_WaitForLastTask(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	/* Loop until RTOFF flag is set */
	while ((RTC ->CRL & RTC_FLAG_RTOFF )== (uint16_t)RESET){
 80016dc:	bf00      	nop
 80016de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016e6:	889b      	ldrh	r3, [r3, #4]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f003 0320 	and.w	r3, r3, #32
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f5      	beq.n	80016de <RTC_WaitForLastTask+0x6>
}
}
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <RTC_WaitForSynchro>:
	 * @note   This function must be called before any read operation after an APB reset
	 *   or an APB clock stop.
	 * @param  None
	 * @retval None
	 */
void RTC_WaitForSynchro(void) {
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	/* Clear RSF flag */
	RTC ->CRL &= (uint16_t) ~RTC_FLAG_RSF;
 80016fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001700:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001704:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001708:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800170c:	8892      	ldrh	r2, [r2, #4]
 800170e:	b292      	uxth	r2, r2
 8001710:	f022 0208 	bic.w	r2, r2, #8
 8001714:	b292      	uxth	r2, r2
 8001716:	809a      	strh	r2, [r3, #4]
	/* Loop until RSF flag is set */
	while ((RTC ->CRL & RTC_FLAG_RSF )== (uint16_t)RESET){
 8001718:	bf00      	nop
 800171a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800171e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001722:	889b      	ldrh	r3, [r3, #4]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f5      	beq.n	800171a <RTC_WaitForSynchro+0x22>
}
}
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d008      	beq.n	8001758 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	801a      	strh	r2, [r3, #0]
 8001756:	e007      	b.n	8001768 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	801a      	strh	r2, [r3, #0]
  }
}
 8001768:	f107 070c 	add.w	r7, r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001786:	f107 070c 	add.w	r7, r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	81bb      	strh	r3, [r7, #12]
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	8a1b      	ldrh	r3, [r3, #16]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	4013      	ands	r3, r2
 80017b8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	899b      	ldrh	r3, [r3, #12]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80017c6:	89bb      	ldrh	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <TIM_GetITStatus+0x4a>
 80017cc:	897b      	ldrh	r3, [r7, #10]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80017d2:	f04f 0301 	mov.w	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e002      	b.n	80017e0 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	f107 0714 	add.w	r7, r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	ea6f 0303 	mvn.w	r3, r3
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	821a      	strh	r2, [r3, #16]
}
 8001808:	f107 070c 	add.w	r7, r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <USART_Init>:
 * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 *         that contains the configuration information for the specified USART 
 *         peripheral.
 * @retval None
 */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0x00, apbclock = 0x00;
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t integerdivider = 0x00;
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fractionaldivider = 0x00;
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
	uint32_t usartxbase = 0;
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
	if (USART_InitStruct->USART_HardwareFlowControl
			!= USART_HardwareFlowControl_None ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	61fb      	str	r3, [r7, #28]

	/*---------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = USARTx->CR2;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8a1b      	ldrh	r3, [r3, #16]
 8001844:	b29b      	uxth	r3, r3
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear STOP[13:12] bits */
	tmpreg &= CR2_STOP_CLEAR_Mask;
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800184e:	4013      	ands	r3, r2
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
	/* Set STOP[13:12] bits according to USART_StopBits value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_StopBits;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	88db      	ldrh	r3, [r3, #6]
 8001856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001858:	4313      	orrs	r3, r2
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Write to USART CR2 */
	USARTx->CR2 = (uint16_t) tmpreg;
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	b29a      	uxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	821a      	strh	r2, [r3, #16]

	/*---------------------------- USART CR1 Configuration -----------------------*/
	tmpreg = USARTx->CR1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	899b      	ldrh	r3, [r3, #12]
 8001868:	b29b      	uxth	r3, r3
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear M, PCE, PS, TE and RE bits */
	tmpreg &= CR1_CLEAR_Mask;
 800186c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001872:	4013      	ands	r3, r2
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	889a      	ldrh	r2, [r3, #4]
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	891b      	ldrh	r3, [r3, #8]
 800187e:	4313      	orrs	r3, r2
 8001880:	b29a      	uxth	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	895b      	ldrh	r3, [r3, #10]
 8001886:	4313      	orrs	r3, r2
 8001888:	b29b      	uxth	r3, r3
	tmpreg &= CR1_CLEAR_Mask;
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 800188a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188c:	4313      	orrs	r3, r2
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
	/* Write to USART CR1 */
	USARTx->CR1 = (uint16_t) tmpreg;
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	819a      	strh	r2, [r3, #12]

	/*---------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = USARTx->CR3;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	8a9b      	ldrh	r3, [r3, #20]
 800189c:	b29b      	uxth	r3, r3
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear CTSE and RTSE bits */
	tmpreg &= CR3_CLEAR_Mask;
 80018a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a2:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80018a6:	4013      	ands	r3, r2
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART HFC -------------------------------------------------*/
	/* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
	tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	899b      	ldrh	r3, [r3, #12]
 80018ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b0:	4313      	orrs	r3, r2
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Write to USART CR3 */
	USARTx->CR3 = (uint16_t) tmpreg;
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	829a      	strh	r2, [r3, #20]

	/*---------------------------- USART BRR Configuration -----------------------*/
	/* Configure the USART Baud Rate -------------------------------------------*/
	RCC_GetClocksFreq(&RCC_ClocksStatus);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fd09 	bl	80012d8 <RCC_GetClocksFreq>
	if (usartxbase == USART1_BASE) {
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d102      	bne.n	80018da <USART_Init+0xc6>
		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d8:	e001      	b.n	80018de <USART_Init+0xca>
	} else {
		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	899b      	ldrh	r3, [r3, #12]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da0f      	bge.n	800190c <USART_Init+0xf8>
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 80018ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ee:	4613      	mov	r3, r2
 80018f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80018f4:	189b      	adds	r3, r3, r2
 80018f6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80018fa:	189a      	adds	r2, r3, r2
				/ (2 * (USART_InitStruct->USART_BaudRate)));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	ea4f 0343 	mov.w	r3, r3, lsl #1
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	e00e      	b.n	800192a <USART_Init+0x116>
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 800190c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190e:	4613      	mov	r3, r2
 8001910:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001914:	189b      	adds	r3, r3, r2
 8001916:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800191a:	189a      	adds	r2, r3, r2
				/ (4 * (USART_InitStruct->USART_BaudRate)));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	ea4f 0383 	mov.w	r3, r3, lsl #2
		integerdivider = ((25 * apbclock)
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
				/ (4 * (USART_InitStruct->USART_BaudRate)));
	}
	tmpreg = (integerdivider / 100) << 4;
 800192a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192c:	f248 531f 	movw	r3, #34079	; 0x851f
 8001930:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001934:	fba3 1302 	umull	r1, r3, r3, r2
 8001938:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800193c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Determine the fractional part */
	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001948:	f04f 0264 	mov.w	r2, #100	; 0x64
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	623b      	str	r3, [r7, #32]

	/* Implement the fractional part in the register */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	899b      	ldrh	r3, [r3, #12]
 800195a:	b29b      	uxth	r3, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	b21b      	sxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	da12      	bge.n	800198a <USART_Init+0x176>
		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t) 0x07);
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800196a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800196e:	f248 531f 	movw	r3, #34079	; 0x851f
 8001972:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001976:	fba3 1302 	umull	r1, r3, r3, r2
 800197a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001984:	4313      	orrs	r3, r2
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001988:	e011      	b.n	80019ae <USART_Init+0x19a>
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t) 0x0F);
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001990:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001994:	f248 531f 	movw	r3, #34079	; 0x851f
 8001998:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800199c:	fba3 1302 	umull	r1, r3, r3, r2
 80019a0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019aa:	4313      	orrs	r3, r2
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write to USART BRR */
	USARTx->BRR = (uint16_t) tmpreg;
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	811a      	strh	r2, [r3, #8]
}
 80019b6:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop

080019c0 <USART_Cmd>:
 *           USART1, USART2, USART3, UART4 or UART5.
 * @param  NewState: new state of the USARTx peripheral.
 *         This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState) {
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <USART_Cmd+0x24>
		/* Enable the selected USART by setting the UE bit in the CR1 register */
		USARTx->CR1 |= CR1_UE_Set;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	899b      	ldrh	r3, [r3, #12]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	819a      	strh	r2, [r3, #12]
 80019e2:	e007      	b.n	80019f4 <USART_Cmd+0x34>
	} else {
		/* Disable the selected USART by clearing the UE bit in the CR1 register */
		USARTx->CR1 &= CR1_UE_Reset;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	899b      	ldrh	r3, [r3, #12]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	819a      	strh	r2, [r3, #12]
	}
}
 80019f4:	f107 070c 	add.w	r7, r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <USART_ITConfig>:
 * @param  NewState: new state of the specified USARTx interrupts.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT,
		FunctionalState NewState) {
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	807a      	strh	r2, [r7, #2]
 8001a0e:	707b      	strb	r3, [r7, #1]
	uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
	uint32_t usartxbase = 0x00;
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
	/* The CTS interrupt is not available for UART4 and UART5 */
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	617b      	str	r3, [r7, #20]

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	613b      	str	r3, [r7, #16]

	/* Get the interrupt position */
	itpos = USART_IT & IT_Mask;
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	60fb      	str	r3, [r7, #12]
	itmask = (((uint32_t) 0x01) << itpos);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f04f 0201 	mov.w	r2, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	60bb      	str	r3, [r7, #8]

	if (usartreg == 0x01) /* The IT is in CR1 register */
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d104      	bne.n	8001a5c <USART_ITConfig+0x5c>
	{
		usartxbase += 0x0C;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f103 030c 	add.w	r3, r3, #12
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e00b      	b.n	8001a74 <USART_ITConfig+0x74>
	} else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d104      	bne.n	8001a6c <USART_ITConfig+0x6c>
	{
		usartxbase += 0x10;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f103 0310 	add.w	r3, r3, #16
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e003      	b.n	8001a74 <USART_ITConfig+0x74>
	} else /* The IT is in CR3 register */
	{
		usartxbase += 0x14;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f103 0314 	add.w	r3, r3, #20
 8001a72:	617b      	str	r3, [r7, #20]
	}
	if (NewState != DISABLE) {
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <USART_ITConfig+0x88>
		*(__IO uint32_t*) usartxbase |= itmask;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	6811      	ldr	r1, [r2, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e007      	b.n	8001a98 <USART_ITConfig+0x98>
	} else {
		*(__IO uint32_t*) usartxbase &= ~itmask;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	6811      	ldr	r1, [r2, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	ea6f 0202 	mvn.w	r2, r2
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
	}
}
 8001a98:	f107 071c 	add.w	r7, r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <USART_SendData>:
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @param  Data: the data to transmit.
 * @retval None
 */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_USART_DATA(Data));

	/* Transmit Data */
	USARTx->DR = (Data & (uint16_t) 0x01FF);
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8001ab6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	809a      	strh	r2, [r3, #4]
}
 8001ac0:	f107 070c 	add.w	r7, r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <USART_ReceiveData>:
 * @param  USARTx: Select the USART or the UART peripheral. 
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @retval The received data.
 */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx));

	/* Receive Data */
	return (uint16_t) (USARTx->DR & (uint16_t) 0x01FF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	889b      	ldrh	r3, [r3, #4]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8001ade:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8001ae2:	b29b      	uxth	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f107 070c 	add.w	r7, r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <USART_GetFlagStatus>:
 *     @arg USART_FLAG_NE:   Noise Error flag
 *     @arg USART_FLAG_FE:   Framing Error flag
 *     @arg USART_FLAG_PE:   Parity Error flag
 * @retval The new state of USART_FLAG (SET or RESET).
 */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG) {
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
	FlagStatus bitstatus = RESET;
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
	/* The CTS flag is not available for UART4 and UART5 */
	if (USART_FLAG == USART_FLAG_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	if ((USARTx->SR & USART_FLAG) != (uint16_t) RESET) {
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <USART_GetFlagStatus+0x2a>
		bitstatus = SET;
 8001b12:	f04f 0301 	mov.w	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e002      	b.n	8001b20 <USART_GetFlagStatus+0x30>
	} else {
		bitstatus = RESET;
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	f107 0714 	add.w	r7, r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <USART_GetITStatus>:
 *     @arg USART_IT_NE:   Noise Error interrupt
 *     @arg USART_IT_FE:   Framing Error interrupt
 *     @arg USART_IT_PE:   Parity Error interrupt
 * @retval The new state of USART_IT (SET or RESET).
 */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT) {
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
	uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
	ITStatus bitstatus = RESET;
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	74fb      	strb	r3, [r7, #19]
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	60bb      	str	r3, [r7, #8]
	/* Get the interrupt position */
	itmask = USART_IT & IT_Mask;
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	617b      	str	r3, [r7, #20]
	itmask = (uint32_t) 0x01 << itmask;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f04f 0201 	mov.w	r2, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]

	if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d106      	bne.n	8001b88 <USART_GetITStatus+0x58>
	{
		itmask &= USARTx->CR1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	899b      	ldrh	r3, [r3, #12]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4013      	ands	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e00f      	b.n	8001ba8 <USART_GetITStatus+0x78>
	} else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d106      	bne.n	8001b9c <USART_GetITStatus+0x6c>
	{
		itmask &= USARTx->CR2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8a1b      	ldrh	r3, [r3, #16]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4013      	ands	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e005      	b.n	8001ba8 <USART_GetITStatus+0x78>
	} else /* The IT  is in CR3 register */
	{
		itmask &= USARTx->CR3;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	8a9b      	ldrh	r3, [r3, #20]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
	}

	bitpos = USART_IT >> 0x08;
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	60fb      	str	r3, [r7, #12]
	bitpos = (uint32_t) 0x01 << bitpos;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f04f 0201 	mov.w	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
	bitpos &= USARTx->SR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
	if ((itmask != (uint16_t) RESET) && (bitpos != (uint16_t) RESET)) {
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <USART_GetITStatus+0xae>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <USART_GetITStatus+0xae>
		bitstatus = SET;
 8001bd6:	f04f 0301 	mov.w	r3, #1
 8001bda:	74fb      	strb	r3, [r7, #19]
 8001bdc:	e002      	b.n	8001be4 <USART_GetITStatus+0xb4>
	} else {
		bitstatus = RESET;
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	74fb      	strb	r3, [r7, #19]
	}

	return bitstatus;
 8001be4:	7cfb      	ldrb	r3, [r7, #19]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	f107 071c 	add.w	r7, r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f023 0307 	bic.w	r3, r3, #7
 8001c12:	f103 0308 	add.w	r3, r3, #8
 8001c16:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8001c18:	f000 ff52 	bl	8002ac0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8001c1c:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d108      	bne.n	8001c3c <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <pvPortMalloc+0xc4>)
 8001c2c:	f023 0307 	bic.w	r3, r3, #7
 8001c30:	461a      	mov	r2, r3
 8001c32:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c3a:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001c3c:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	18d2      	adds	r2, r2, r3
 8001c4a:	f641 33f7 	movw	r3, #7159	; 0x1bf7
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d825      	bhi.n	8001c9e <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8001c52:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	18d2      	adds	r2, r2, r3
 8001c60:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c68:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d917      	bls.n	8001c9e <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8001c6e:	f641 4328 	movw	r3, #7208	; 0x1c28
 8001c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	18d3      	adds	r3, r2, r3
 8001c84:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8001c86:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	18d2      	adds	r2, r2, r3
 8001c94:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c9c:	601a      	str	r2, [r3, #0]
		}
	}
	xTaskResumeAll();
 8001c9e:	f000 ff21 	bl	8002ae4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <pvPortMalloc+0xb8>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001ca8:	f002 fc60 	bl	800456c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f107 0710 	add.w	r7, r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000002c 	.word	0x2000002c

08001cbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <vPortFree+0x14>
 8001cca:	f000 f97d 	bl	8001fc8 <ulPortSetInterruptMask>
 8001cce:	e7fe      	b.n	8001cce <vPortFree+0x12>
}
 8001cd0:	f107 0708 	add.w	r7, r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001cdc:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8001cea:	f103 0318 	add.w	r3, r3, #24
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f103 0208 	add.w	r2, r3, #8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f103 0208 	add.w	r2, r3, #8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f103 0208 	add.w	r2, r3, #8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	f107 070c 	add.w	r7, r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
}
 8001d48:	f107 070c 	add.w	r7, r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f103 0201 	add.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	601a      	str	r2, [r3, #0]
}
 8001d9a:	f107 0714 	add.w	r7, r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dba:	d103      	bne.n	8001dc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e00d      	b.n	8001de0 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0308 	add.w	r3, r3, #8
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e002      	b.n	8001dd4 <vListInsert+0x30>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d9f6      	bls.n	8001dce <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f103 0201 	add.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	f107 0714 	add.w	r7, r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6892      	ldr	r2, [r2, #8]
 8001e28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6852      	ldr	r2, [r2, #4]
 8001e32:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d103      	bne.n	8001e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f103 32ff 	add.w	r2, r3, #4294967295
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	f107 0714 	add.w	r7, r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f1a3 0304 	sub.w	r3, r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e8a:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f1a3 0304 	sub.w	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1a3 0304 	sub.w	r3, r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1a3 0314 	sub.w	r3, r3, #20
 8001eb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f1a3 0320 	sub.w	r3, r3, #32
 8001ebe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f107 0714 	add.w	r7, r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <pxCurrentTCBConst2>)
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	6808      	ldr	r0, [r1, #0]
 8001ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001eda:	f380 8809 	msr	PSP, r0
 8001ede:	f04f 0000 	mov.w	r0, #0
 8001ee2:	f380 8811 	msr	BASEPRI, r0
 8001ee6:	f04e 0e0d 	orr.w	lr, lr, #13
 8001eea:	4770      	bx	lr

08001eec <pxCurrentTCBConst2>:
 8001eec:	20001c2c 	.word	0x20001c2c

08001ef0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <prvPortStartFirstTask+0x10>)
 8001ef2:	6800      	ldr	r0, [r0, #0]
 8001ef4:	6800      	ldr	r0, [r0, #0]
 8001ef6:	f380 8808 	msr	MSP, r0
 8001efa:	b662      	cpsie	i
 8001efc:	df00      	svc	0
 8001efe:	bf00      	nop
 8001f00:	e000ed08 	.word	0xe000ed08

08001f04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001f08:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001f0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f10:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001f14:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f1e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001f20:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001f24:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f28:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001f2c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001f36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001f38:	f000 f884 	bl	8002044 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001f3c:	f240 0314 	movw	r3, #20
 8001f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001f4a:	f7ff ffd1 	bl	8001ef0 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8001f4e:	f04f 0300 	mov.w	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop

08001f58 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f5c:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001f60:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001f74:	f000 f828 	bl	8001fc8 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001f78:	f240 0314 	movw	r3, #20
 8001f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f103 0201 	add.w	r2, r3, #1
 8001f86:	f240 0314 	movw	r3, #20
 8001f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f8e:	601a      	str	r2, [r3, #0]
}
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop

08001f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8001f98:	f240 0314 	movw	r3, #20
 8001f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f103 32ff 	add.w	r2, r3, #4294967295
 8001fa6:	f240 0314 	movw	r3, #20
 8001faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fae:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001fb0:	f240 0314 	movw	r3, #20
 8001fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f000 f80b 	bl	8001fdc <vPortClearInterruptMask>
	}
}
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001fc8:	f3ef 8011 	mrs	r0, BASEPRI
 8001fcc:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001fd0:	f381 8811 	msr	BASEPRI, r1
 8001fd4:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8001fd6:	f04f 0300 	mov.w	r3, #0
}
 8001fda:	4618      	mov	r0, r3

08001fdc <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8001fdc:	f380 8811 	msr	BASEPRI, r0
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop

08001fe4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001fe4:	f3ef 8009 	mrs	r0, PSP
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <pxCurrentTCBConst>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ff0:	6010      	str	r0, [r2, #0]
 8001ff2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001ff6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ffa:	f380 8811 	msr	BASEPRI, r0
 8001ffe:	f000 ff1d 	bl	8002e3c <vTaskSwitchContext>
 8002002:	f04f 0000 	mov.w	r0, #0
 8002006:	f380 8811 	msr	BASEPRI, r0
 800200a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	6808      	ldr	r0, [r1, #0]
 8002012:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002016:	f380 8809 	msr	PSP, r0
 800201a:	4770      	bx	lr

0800201c <pxCurrentTCBConst>:
 800201c:	20001c2c 	.word	0x20001c2c

08002020 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002024:	f64e 5304 	movw	r3, #60676	; 0xed04
 8002028:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800202c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002030:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002032:	f7ff ffc9 	bl	8001fc8 <ulPortSetInterruptMask>
	{
		vTaskIncrementTick();
 8002036:	f000 fe1b 	bl	8002c70 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f7ff ffcd 	bl	8001fdc <vPortClearInterruptMask>
}
 8002042:	bd80      	pop	{r7, pc}

08002044 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8002048:	f24e 0314 	movw	r3, #57364	; 0xe014
 800204c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002050:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002056:	f24e 0310 	movw	r3, #57360	; 0xe010
 800205a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800205e:	f04f 0207 	mov.w	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
}
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <xQueueGenericReset+0x1a>
 8002080:	f7ff ffa2 	bl	8001fc8 <ulPortSetInterruptMask>
 8002084:	e7fe      	b.n	8002084 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8002086:	f7ff ff73 	bl	8001f70 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	18d2      	adds	r2, r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	18d2      	adds	r2, r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10f      	bne.n	8002100 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d017      	beq.n	8002118 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f103 0310 	add.w	r3, r3, #16
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 ffc0 	bl	8003074 <xTaskRemoveFromEventList>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10e      	bne.n	8002118 <xQueueGenericReset+0xac>
				{
					portYIELD_WITHIN_API();
 80020fa:	f7ff ff2d 	bl	8001f58 <vPortYieldFromISR>
 80020fe:	e00b      	b.n	8002118 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f103 0310 	add.w	r3, r3, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fdf6 	bl	8001cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fdf0 	bl	8001cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002118:	f7ff ff3c 	bl	8001f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800211c:	f04f 0301 	mov.w	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	f107 0710 	add.w	r7, r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop

0800212c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d029      	beq.n	800219a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8002146:	f04f 004c 	mov.w	r0, #76	; 0x4c
 800214a:	f7ff fd53 	bl	8001bf4 <pvPortMalloc>
 800214e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d021      	beq.n	800219a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	f103 0301 	add.w	r3, r3, #1
 8002162:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8002164:	6978      	ldr	r0, [r7, #20]
 8002166:	f7ff fd45 	bl	8001bf4 <pvPortMalloc>
 800216a:	4602      	mov	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 8002184:	69b8      	ldr	r0, [r7, #24]
 8002186:	f04f 0101 	mov.w	r1, #1
 800218a:	f7ff ff6f 	bl	800206c <xQueueGenericReset>
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e002      	b.n	800219a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8002194:	69b8      	ldr	r0, [r7, #24]
 8002196:	f7ff fd91 	bl	8001cbc <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <xQueueGenericCreate+0x7a>
 80021a0:	f7ff ff12 	bl	8001fc8 <ulPortSetInterruptMask>
 80021a4:	e7fe      	b.n	80021a4 <xQueueGenericCreate+0x78>

	return xReturn;
 80021a6:	69fb      	ldr	r3, [r7, #28]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	f107 0720 	add.w	r7, r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop

080021b4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <xQueueGenericSend+0x24>
 80021d2:	f7ff fef9 	bl	8001fc8 <ulPortSetInterruptMask>
 80021d6:	e7fe      	b.n	80021d6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <xQueueGenericSend+0x32>
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <xQueueGenericSend+0x38>
 80021e6:	f04f 0301 	mov.w	r3, #1
 80021ea:	e001      	b.n	80021f0 <xQueueGenericSend+0x3c>
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <xQueueGenericSend+0x48>
 80021f4:	f7ff fee8 	bl	8001fc8 <ulPortSetInterruptMask>
 80021f8:	e7fe      	b.n	80021f8 <xQueueGenericSend+0x44>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80021fa:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021fc:	f7ff feb8 	bl	8001f70 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	429a      	cmp	r2, r3
 800220a:	d218      	bcs.n	800223e <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800220c:	69b8      	ldr	r0, [r7, #24]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	f000 f9b1 	bl	8002578 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <xQueueGenericSend+0x80>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002224:	4618      	mov	r0, r3
 8002226:	f000 ff25 	bl	8003074 <xTaskRemoveFromEventList>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <xQueueGenericSend+0x80>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8002230:	f7ff fe92 	bl	8001f58 <vPortYieldFromISR>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002234:	f7ff feae 	bl	8001f94 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8002238:	f04f 0301 	mov.w	r3, #1
 800223c:	e05d      	b.n	80022fa <xQueueGenericSend+0x146>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <xQueueGenericSend+0x9a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002244:	f7ff fea6 	bl	8001f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e055      	b.n	80022fa <xQueueGenericSend+0x146>
				}
				else if( xEntryTimeSet == pdFALSE )
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	4618      	mov	r0, r3
 800225a:	f000 ff73 	bl	8003144 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800225e:	f04f 0301 	mov.w	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8002264:	f7ff fe96 	bl	8001f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002268:	f000 fc2a 	bl	8002ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800226c:	f7ff fe80 	bl	8001f70 <vPortEnterCritical>
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d103      	bne.n	8002282 <xQueueGenericSend+0xce>
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d103      	bne.n	8002294 <xQueueGenericSend+0xe0>
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	649a      	str	r2, [r3, #72]	; 0x48
 8002294:	f7ff fe7e 	bl	8001f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002298:	f107 0210 	add.w	r2, r7, #16
 800229c:	f107 0304 	add.w	r3, r7, #4
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f000 ff6a 	bl	800317c <xTaskCheckForTimeOut>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11e      	bne.n	80022ec <xQueueGenericSend+0x138>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022ae:	69b8      	ldr	r0, [r7, #24]
 80022b0:	f000 fa56 	bl	8002760 <prvIsQueueFull>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f103 0210 	add.w	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f000 fe63 	bl	8002f90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022ca:	69b8      	ldr	r0, [r7, #24]
 80022cc:	f000 f9de 	bl	800268c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022d0:	f000 fc08 	bl	8002ae4 <xTaskResumeAll>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d18f      	bne.n	80021fa <xQueueGenericSend+0x46>
				{
					portYIELD_WITHIN_API();
 80022da:	f7ff fe3d 	bl	8001f58 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80022de:	e78c      	b.n	80021fa <xQueueGenericSend+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022e0:	69b8      	ldr	r0, [r7, #24]
 80022e2:	f000 f9d3 	bl	800268c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022e6:	f000 fbfd 	bl	8002ae4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80022ea:	e786      	b.n	80021fa <xQueueGenericSend+0x46>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022ec:	69b8      	ldr	r0, [r7, #24]
 80022ee:	f000 f9cd 	bl	800268c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022f2:	f000 fbf7 	bl	8002ae4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022f6:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	f107 0720 	add.w	r7, r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <xQueueGenericSendFromISR+0x1e>
 800231c:	f7ff fe54 	bl	8001fc8 <ulPortSetInterruptMask>
 8002320:	e7fe      	b.n	8002320 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <xQueueGenericSendFromISR+0x2c>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <xQueueGenericSendFromISR+0x32>
 8002330:	f04f 0301 	mov.w	r3, #1
 8002334:	e001      	b.n	800233a <xQueueGenericSendFromISR+0x36>
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <xQueueGenericSendFromISR+0x40>
 800233e:	f7ff fe43 	bl	8001fc8 <ulPortSetInterruptMask>
 8002342:	e7fe      	b.n	8002342 <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002344:	f7ff fe40 	bl	8001fc8 <ulPortSetInterruptMask>
 8002348:	6178      	str	r0, [r7, #20]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	429a      	cmp	r2, r3
 8002354:	d228      	bcs.n	80023a8 <xQueueGenericSendFromISR+0xa4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002356:	69b8      	ldr	r0, [r7, #24]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	f000 f90c 	bl	8002578 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d114      	bne.n	8002394 <xQueueGenericSendFromISR+0x90>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fe7b 	bl	8003074 <xTaskRemoveFromEventList>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f04f 0201 	mov.w	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e005      	b.n	80023a0 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	f103 0201 	add.w	r2, r3, #1
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80023a0:	f04f 0301 	mov.w	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e002      	b.n	80023ae <xQueueGenericSendFromISR+0xaa>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff fe14 	bl	8001fdc <vPortClearInterruptMask>

	return xReturn;
 80023b4:	69fb      	ldr	r3, [r7, #28]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	f107 0720 	add.w	r7, r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue );
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <xQueueGenericReceive+0x24>
 80023de:	f7ff fdf3 	bl	8001fc8 <ulPortSetInterruptMask>
 80023e2:	e7fe      	b.n	80023e2 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <xQueueGenericReceive+0x32>
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <xQueueGenericReceive+0x38>
 80023f2:	f04f 0301 	mov.w	r3, #1
 80023f6:	e001      	b.n	80023fc <xQueueGenericReceive+0x3c>
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <xQueueGenericReceive+0x48>
 8002400:	f7ff fde2 	bl	8001fc8 <ulPortSetInterruptMask>
 8002404:	e7fe      	b.n	8002404 <xQueueGenericReceive+0x44>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002406:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002408:	f7ff fdb2 	bl	8001f70 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03f      	beq.n	8002494 <xQueueGenericReceive+0xd4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800241a:	6a38      	ldr	r0, [r7, #32]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	f000 f90d 	bl	800263c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d11e      	bne.n	8002466 <xQueueGenericReceive+0xa6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	f103 32ff 	add.w	r2, r3, #4294967295
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <xQueueGenericReceive+0x86>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 800243c:	f001 f884 	bl	8003548 <xTaskGetCurrentTaskHandle>
 8002440:	4602      	mov	r2, r0
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01d      	beq.n	800248a <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f103 0310 	add.w	r3, r3, #16
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fe0d 	bl	8003074 <xTaskRemoveFromEventList>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d114      	bne.n	800248a <xQueueGenericReceive+0xca>
						{
							portYIELD_WITHIN_API();
 8002460:	f7ff fd7a 	bl	8001f58 <vPortYieldFromISR>
 8002464:	e011      	b.n	800248a <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <xQueueGenericReceive+0xca>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fdfa 	bl	8003074 <xTaskRemoveFromEventList>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8002486:	f7ff fd67 	bl	8001f58 <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 800248a:	f7ff fd83 	bl	8001f94 <vPortExitCritical>
				return pdPASS;
 800248e:	f04f 0301 	mov.w	r3, #1
 8002492:	e06b      	b.n	800256c <xQueueGenericReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800249a:	f7ff fd7b 	bl	8001f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e063      	b.n	800256c <xQueueGenericReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fe48 	bl	8003144 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024b4:	f04f 0301 	mov.w	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		}
		taskEXIT_CRITICAL();
 80024ba:	f7ff fd6b 	bl	8001f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024be:	f000 faff 	bl	8002ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024c2:	f7ff fd55 	bl	8001f70 <vPortEnterCritical>
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d103      	bne.n	80024d8 <xQueueGenericReceive+0x118>
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d103      	bne.n	80024ea <xQueueGenericReceive+0x12a>
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	649a      	str	r2, [r3, #72]	; 0x48
 80024ea:	f7ff fd53 	bl	8001f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024ee:	f107 0214 	add.w	r2, r7, #20
 80024f2:	f107 0304 	add.w	r3, r7, #4
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f000 fe3f 	bl	800317c <xTaskCheckForTimeOut>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d12c      	bne.n	800255e <xQueueGenericReceive+0x19e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002504:	6a38      	ldr	r0, [r7, #32]
 8002506:	f000 f911 	bl	800272c <prvIsQueueEmpty>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d108      	bne.n	800252a <xQueueGenericReceive+0x16a>
					{
						portENTER_CRITICAL();
 8002518:	f7ff fd2a 	bl	8001f70 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	f001 f845 	bl	80035b0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8002526:	f7ff fd35 	bl	8001f94 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f000 fd2b 	bl	8002f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800253a:	6a38      	ldr	r0, [r7, #32]
 800253c:	f000 f8a6 	bl	800268c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002540:	f000 fad0 	bl	8002ae4 <xTaskResumeAll>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	f47f af5d 	bne.w	8002406 <xQueueGenericReceive+0x46>
				{
					portYIELD_WITHIN_API();
 800254c:	f7ff fd04 	bl	8001f58 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002550:	e759      	b.n	8002406 <xQueueGenericReceive+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002552:	6a38      	ldr	r0, [r7, #32]
 8002554:	f000 f89a 	bl	800268c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002558:	f000 fac4 	bl	8002ae4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800255c:	e753      	b.n	8002406 <xQueueGenericReceive+0x46>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800255e:	6a38      	ldr	r0, [r7, #32]
 8002560:	f000 f894 	bl	800268c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002564:	f000 fabe 	bl	8002ae4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002568:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 800256c:	4618      	mov	r0, r3
 800256e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop

08002578 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10d      	bne.n	80025a8 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d148      	bne.n	8002626 <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f001 f877 	bl	800368c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	e03e      	b.n	8002626 <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11a      	bne.n	80025e4 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4610      	mov	r0, r2
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f002 f878 	bl	80046b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	18d2      	adds	r2, r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d325      	bcc.n	8002626 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	e020      	b.n	8002626 <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	4610      	mov	r0, r2
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f002 f85d 	bl	80046b0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f1c3 0300 	rsb	r3, r3, #0
 8002602:	18d2      	adds	r2, r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d208      	bcs.n	8002626 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f1c3 0300 	rsb	r3, r3, #0
 8002620:	18d2      	adds	r2, r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	f103 0201 	add.w	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002632:	f107 0710 	add.w	r7, r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop

0800263c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d019      	beq.n	8002682 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	18d2      	adds	r2, r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	d303      	bcc.n	8002670 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	f002 f817 	bl	80046b0 <memcpy>
	}
}
 8002682:	f107 0708 	add.w	r7, r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop

0800268c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002694:	f7ff fc6c 	bl	8001f70 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002698:	e014      	b.n	80026c4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d015      	beq.n	80026ce <prvUnlockQueue+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fce3 	bl	8003074 <xTaskRemoveFromEventList>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <prvUnlockQueue+0x2c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80026b4:	f000 fdc0 	bl	8003238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	f103 32ff 	add.w	r2, r3, #4294967295
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dce6      	bgt.n	800269a <prvUnlockQueue+0xe>
 80026cc:	e000      	b.n	80026d0 <prvUnlockQueue+0x44>
						vTaskMissedYield();
					}
				}
				else
				{
					break;
 80026ce:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 32ff 	mov.w	r2, #4294967295
 80026d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80026d8:	f7ff fc5c 	bl	8001f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80026dc:	f7ff fc48 	bl	8001f70 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80026e0:	e014      	b.n	800270c <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d015      	beq.n	8002716 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f103 0310 	add.w	r3, r3, #16
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fcbf 	bl	8003074 <xTaskRemoveFromEventList>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 80026fc:	f000 fd9c 	bl	8003238 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f103 32ff 	add.w	r2, r3, #4294967295
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	2b00      	cmp	r3, #0
 8002712:	dce6      	bgt.n	80026e2 <prvUnlockQueue+0x56>
 8002714:	e000      	b.n	8002718 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8002716:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f04f 32ff 	mov.w	r2, #4294967295
 800271e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002720:	f7ff fc38 	bl	8001f94 <vPortExitCritical>
}
 8002724:	f107 0708 	add.w	r7, r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002734:	f7ff fc1c 	bl	8001f70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == 0 )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
 8002740:	f04f 0301 	mov.w	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e002      	b.n	800274e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800274e:	f7ff fc21 	bl	8001f94 <vPortExitCritical>

	return xReturn;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	f107 0710 	add.w	r7, r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002768:	f7ff fc02 	bl	8001f70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	429a      	cmp	r2, r3
 8002776:	d103      	bne.n	8002780 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
 8002778:	f04f 0301 	mov.w	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e002      	b.n	8002786 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002786:	f7ff fc05 	bl	8001f94 <vPortExitCritical>

	return xReturn;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	f107 0710 	add.w	r7, r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop

08002798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	xQUEUE *pxQueue;

		pxQueue = ( xQUEUE * ) xQueue;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80027a6:	f7ff fbe3 	bl	8001f70 <vPortEnterCritical>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d103      	bne.n	80027bc <vQueueWaitForMessageRestricted+0x24>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d103      	bne.n	80027ce <vQueueWaitForMessageRestricted+0x36>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	649a      	str	r2, [r3, #72]	; 0x48
 80027ce:	f7ff fbe1 	bl	8001f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <vQueueWaitForMessageRestricted+0x50>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	f000 fc16 	bl	8003014 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff ff4f 	bl	800268c <prvUnlockQueue>
	}
 80027ee:	f107 0710 	add.w	r7, r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop

080027f8 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <xTaskGenericCreate+0x1c>
 800280e:	f7ff fbdb 	bl	8001fc8 <ulPortSetInterruptMask>
 8002812:	e7fe      	b.n	8002812 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	2b04      	cmp	r3, #4
 8002818:	d902      	bls.n	8002820 <xTaskGenericCreate+0x28>
 800281a:	f7ff fbd5 	bl	8001fc8 <ulPortSetInterruptMask>
 800281e:	e7fe      	b.n	800281e <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	4618      	mov	r0, r3
 8002824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002826:	f000 fe47 	bl	80034b8 <prvAllocateTCBAndStack>
 800282a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80b5 	beq.w	800299e <xTaskGenericCreate+0x1a6>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f103 33ff 	add.w	r3, r3, #4294967295
 800283e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002842:	18d3      	adds	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f023 0307 	bic.w	r3, r3, #7
 800284c:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <xTaskGenericCreate+0x66>
 8002858:	f7ff fbb6 	bl	8001fc8 <ulPortSetInterruptMask>
 800285c:	e7fe      	b.n	800285c <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	69b8      	ldr	r0, [r7, #24]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286a:	f000 fd03 	bl	8003274 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	f7ff fafc 	bl	8001e70 <pxPortInitialiseStack>
 8002878:	4602      	mov	r2, r0
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <xTaskGenericCreate+0x98>
 800288a:	f7ff fb9d 	bl	8001fc8 <ulPortSetInterruptMask>
 800288e:	e7fe      	b.n	800288e <xTaskGenericCreate+0x96>

		if( ( void * ) pxCreatedTask != NULL )
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <xTaskGenericCreate+0xa4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 800289c:	f7ff fb68 	bl	8001f70 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80028a0:	f641 5304 	movw	r3, #7428	; 0x1d04
 80028a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f103 0201 	add.w	r2, r3, #1
 80028ae:	f641 5304 	movw	r3, #7428	; 0x1d04
 80028b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80028b8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80028bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <xTaskGenericCreate+0xee>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80028c6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80028ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80028d2:	f641 5304 	movw	r3, #7428	; 0x1d04
 80028d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d118      	bne.n	8002912 <xTaskGenericCreate+0x11a>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80028e0:	f000 fd04 	bl	80032ec <prvInitialiseTaskLists>
 80028e4:	e015      	b.n	8002912 <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80028e6:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10e      	bne.n	8002912 <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80028f4:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80028f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	429a      	cmp	r2, r3
 8002904:	d805      	bhi.n	8002912 <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
 8002906:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800290a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002916:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d906      	bls.n	8002932 <xTaskGenericCreate+0x13a>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002928:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800292c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002930:	601a      	str	r2, [r3, #0]
			}

			uxTaskNumber++;
 8002932:	f641 5328 	movw	r3, #7464	; 0x1d28
 8002936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f103 0201 	add.w	r2, r3, #1
 8002940:	f641 5328 	movw	r3, #7464	; 0x1d28
 8002944:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002952:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d906      	bls.n	800296a <xTaskGenericCreate+0x172>
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296e:	4613      	mov	r3, r2
 8002970:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002974:	189b      	adds	r3, r3, r2
 8002976:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800297a:	f641 4230 	movw	r2, #7216	; 0x1c30
 800297e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002982:	189a      	adds	r2, r3, r2
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f103 0304 	add.w	r3, r3, #4
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f7ff f9e1 	bl	8001d54 <vListInsertEnd>

			xReturn = pdPASS;
 8002992:	f04f 0301 	mov.w	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002998:	f7ff fafc 	bl	8001f94 <vPortExitCritical>
 800299c:	e002      	b.n	80029a4 <xTaskGenericCreate+0x1ac>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d111      	bne.n	80029ce <xTaskGenericCreate+0x1d6>
	{
		if( xSchedulerRunning != pdFALSE )
 80029aa:	f641 5314 	movw	r3, #7444	; 0x1d14
 80029ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <xTaskGenericCreate+0x1d6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80029b8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80029bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d201      	bcs.n	80029ce <xTaskGenericCreate+0x1d6>
			{
				portYIELD_WITHIN_API();
 80029ca:	f7ff fac5 	bl	8001f58 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 80029ce:	69fb      	ldr	r3, [r7, #28]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	f107 0720 	add.w	r7, r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop

080029dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d019      	beq.n	8002a24 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
 80029f0:	f000 f866 	bl	8002ac0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80029f4:	f641 5308 	movw	r3, #7432	; 0x1d08
 80029f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002a04:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f103 0304 	add.w	r3, r3, #4
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fa00 	bl	8001e18 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f000 fd07 	bl	800342c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a1e:	f000 f861 	bl	8002ae4 <xTaskResumeAll>
 8002a22:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
 8002a2a:	f7ff fa95 	bl	8001f58 <vPortYieldFromISR>
		}
	}
 8002a2e:	f107 0710 	add.w	r7, r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop

08002a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	9303      	str	r3, [sp, #12]
 8002a56:	f243 2051 	movw	r0, #12881	; 0x3251
 8002a5a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002a5e:	f644 2164 	movw	r1, #19044	; 0x4a64
 8002a62:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002a66:	f04f 0246 	mov.w	r2, #70	; 0x46
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f7ff fec3 	bl	80027f8 <xTaskGenericCreate>
 8002a72:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <vTaskStartScheduler+0x48>
		{
			xReturn = xTimerCreateTimerTask();
 8002a7a:	f000 fe4f 	bl	800371c <xTimerCreateTimerTask>
 8002a7e:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d112      	bne.n	8002aac <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8002a86:	f7ff fa9f 	bl	8001fc8 <ulPortSetInterruptMask>

		xSchedulerRunning = pdTRUE;
 8002a8a:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a92:	f04f 0201 	mov.w	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8002a98:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002aa6:	f7ff fa2d 	bl	8001f04 <xPortStartScheduler>
 8002aaa:	e005      	b.n	8002ab8 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <vTaskStartScheduler+0x80>
 8002ab2:	f7ff fa89 	bl	8001fc8 <ulPortSetInterruptMask>
 8002ab6:	e7fe      	b.n	8002ab6 <vTaskStartScheduler+0x7e>
	}
}
 8002ab8:	f107 0708 	add.w	r7, r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8002ac4:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f103 0201 	add.w	r2, r3, #1
 8002ad2:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ada:	601a      	str	r2, [r3, #0]
}
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002af0:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <xTaskResumeAll+0x20>
 8002afe:	f7ff fa63 	bl	8001fc8 <ulPortSetInterruptMask>
 8002b02:	e7fe      	b.n	8002b02 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b04:	f7ff fa34 	bl	8001f70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b08:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f103 32ff 	add.w	r2, r3, #4294967295
 8002b16:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b1e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002b20:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 8084 	bne.w	8002c38 <xTaskResumeAll+0x154>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002b30:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d07c      	beq.n	8002c38 <xTaskResumeAll+0x154>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002b44:	e03b      	b.n	8002bbe <xTaskResumeAll+0xda>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8002b46:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8002b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
 8002b52:	f104 0318 	add.w	r3, r4, #24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f95e 	bl	8001e18 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8002b5c:	f104 0304 	add.w	r3, r4, #4
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f959 	bl	8001e18 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002b66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b68:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d905      	bls.n	8002b82 <xTaskResumeAll+0x9e>
 8002b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b78:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b84:	4613      	mov	r3, r2
 8002b86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b90:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002b94:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b98:	189a      	adds	r2, r3, r2
 8002b9a:	f104 0304 	add.w	r3, r4, #4
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7ff f8d7 	bl	8001d54 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ba8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <xTaskResumeAll+0xda>
					{
						xYieldRequired = pdTRUE;
 8002bb8:	f04f 0301 	mov.w	r3, #1
 8002bbc:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002bbe:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8002bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1bc      	bne.n	8002b46 <xTaskResumeAll+0x62>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002bcc:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d018      	beq.n	8002c0c <xTaskResumeAll+0x128>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002bda:	e00d      	b.n	8002bf8 <xTaskResumeAll+0x114>
					{
						vTaskIncrementTick();
 8002bdc:	f000 f848 	bl	8002c70 <vTaskIncrementTick>
						--uxMissedTicks;
 8002be0:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f103 32ff 	add.w	r2, r3, #4294967295
 8002bee:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bf6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002bf8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ea      	bne.n	8002bdc <xTaskResumeAll+0xf8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8002c06:	f04f 0301 	mov.w	r3, #1
 8002c0a:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d006      	beq.n	8002c20 <xTaskResumeAll+0x13c>
 8002c12:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10b      	bne.n	8002c38 <xTaskResumeAll+0x154>
				{
					xAlreadyYielded = pdTRUE;
 8002c20:	f04f 0301 	mov.w	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8002c26:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8002c34:	f7ff f990 	bl	8001f58 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8002c38:	f7ff f9ac 	bl	8001f94 <vPortExitCritical>

	return xAlreadyYielded;
 8002c3c:	687b      	ldr	r3, [r7, #4]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f107 070c 	add.w	r7, r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}

08002c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8002c4e:	f7ff f98f 	bl	8001f70 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8002c52:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8002c5e:	f7ff f999 	bl	8001f94 <vPortExitCritical>

	return xTicks;
 8002c62:	687b      	ldr	r3, [r7, #4]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	f107 0708 	add.w	r7, r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop

08002c70 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002c76:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 80ca 	bne.w	8002e1a <vTaskIncrementTick+0x1aa>
	{
		++xTickCount;
 8002c86:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f103 0201 	add.w	r2, r3, #1
 8002c94:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c9c:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8002c9e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d14b      	bne.n	8002d44 <vTaskIncrementTick+0xd4>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8002cac:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <vTaskIncrementTick+0x52>
 8002cbc:	f7ff f984 	bl	8001fc8 <ulPortSetInterruptMask>
 8002cc0:	e7fe      	b.n	8002cc0 <vTaskIncrementTick+0x50>

			pxTemp = pxDelayedTaskList;
 8002cc2:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8002cce:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8002cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ce0:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8002ce2:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8002ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8002cee:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f103 0201 	add.w	r2, r3, #1
 8002cfc:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d04:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d06:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <vTaskIncrementTick+0xb6>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8002d16:	f240 0318 	movw	r3, #24
 8002d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e00e      	b.n	8002d44 <vTaskIncrementTick+0xd4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d26:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	f240 0318 	movw	r3, #24
 8002d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d42:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8002d44:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	f240 0318 	movw	r3, #24
 8002d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d36a      	bcc.n	8002e32 <vTaskIncrementTick+0x1c2>
 8002d5c:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <vTaskIncrementTick+0x10c>
 8002d6c:	f240 0318 	movw	r3, #24
 8002d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e05a      	b.n	8002e32 <vTaskIncrementTick+0x1c2>
 8002d7c:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d206      	bcs.n	8002db0 <vTaskIncrementTick+0x140>
 8002da2:	f240 0318 	movw	r3, #24
 8002da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e040      	b.n	8002e32 <vTaskIncrementTick+0x1c2>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f103 0304 	add.w	r3, r3, #4
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f82e 	bl	8001e18 <uxListRemove>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <vTaskIncrementTick+0x160>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f103 0318 	add.w	r3, r3, #24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f824 	bl	8001e18 <uxListRemove>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d906      	bls.n	8002df0 <vTaskIncrementTick+0x180>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de6:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4613      	mov	r3, r2
 8002df6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e00:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002e04:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e08:	189a      	adds	r2, r3, r2
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f103 0304 	add.w	r3, r3, #4
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fe ff9e 	bl	8001d54 <vListInsertEnd>
 8002e18:	e7a0      	b.n	8002d5c <vTaskIncrementTick+0xec>
	}
	else
	{
		++uxMissedTicks;
 8002e1a:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f103 0201 	add.w	r2, r3, #1
 8002e28:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e30:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
 8002e32:	f107 0710 	add.w	r7, r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop

08002e3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8002e42:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8002e50:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e58:	f04f 0201 	mov.w	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e093      	b.n	8002f88 <vTaskSwitchContext+0x14c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8002e60:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d80f      	bhi.n	8002e9c <vTaskSwitchContext+0x60>
 8002e7c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f001 fb6c 	bl	8004574 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8002e9c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f644 3170 	movw	r1, #19312	; 0x4b70
 8002eae:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002eb2:	f04f 0214 	mov.w	r2, #20
 8002eb6:	f001 fb9f 	bl	80045f8 <memcmp>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d026      	beq.n	8002f0e <vTaskSwitchContext+0xd2>
 8002ec0:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f001 fb4a 	bl	8004574 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ee0:	e015      	b.n	8002f0e <vTaskSwitchContext+0xd2>
 8002ee2:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <vTaskSwitchContext+0xba>
 8002ef0:	f7ff f86a 	bl	8001fc8 <ulPortSetInterruptMask>
 8002ef4:	e7fe      	b.n	8002ef4 <vTaskSwitchContext+0xb8>
 8002ef6:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f103 32ff 	add.w	r2, r3, #4294967295
 8002f04:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002f1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f20:	460b      	mov	r3, r1
 8002f22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f26:	185b      	adds	r3, r3, r1
 8002f28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f2c:	18d3      	adds	r3, r2, r3
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0d6      	beq.n	8002ee2 <vTaskSwitchContext+0xa6>
 8002f34:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f4a:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002f4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 0308 	add.w	r3, r3, #8
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d104      	bne.n	8002f78 <vTaskSwitchContext+0x13c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
 8002f88:	f107 0708 	add.w	r7, r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <vTaskPlaceOnEventList+0x16>
 8002fa0:	f7ff f812 	bl	8001fc8 <ulPortSetInterruptMask>
 8002fa4:	e7fe      	b.n	8002fa4 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002fa6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f103 0318 	add.w	r3, r3, #24
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7fe fef4 	bl	8001da4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002fbc:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f103 0304 	add.w	r3, r3, #4
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe ff24 	bl	8001e18 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d10e      	bne.n	8002ff6 <vTaskPlaceOnEventList+0x66>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002fd8:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f103 0304 	add.w	r3, r3, #4
 8002fe6:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 8002fea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f7fe feb0 	bl	8001d54 <vListInsertEnd>
 8002ff4:	e00a      	b.n	800300c <vTaskPlaceOnEventList+0x7c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002ff6:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fa10 	bl	800342c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800300c:	f107 0710 	add.w	r7, r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <vTaskPlaceOnEventListRestricted+0x16>
 8003024:	f7fe ffd0 	bl	8001fc8 <ulPortSetInterruptMask>
 8003028:	e7fe      	b.n	8003028 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 800302a:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800302e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f103 0318 	add.w	r3, r3, #24
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	f7fe fe8a 	bl	8001d54 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8003040:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003044:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f103 0304 	add.w	r3, r3, #4
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fee2 	bl	8001e18 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8003054:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	18d3      	adds	r3, r2, r3
 8003062:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f9e1 	bl	800342c <prvAddCurrentTaskToDelayedList>
	}
 800306a:	f107 0710 	add.w	r7, r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop

08003074 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <xTaskRemoveFromEventList+0x1c>
 800308a:	f7fe ff9d 	bl	8001fc8 <ulPortSetInterruptMask>
 800308e:	e7fe      	b.n	800308e <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f103 0318 	add.w	r3, r3, #24
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe febe 	bl	8001e18 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800309c:	f641 5318 	movw	r3, #7448	; 0x1d18
 80030a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12a      	bne.n	8003100 <xTaskRemoveFromEventList+0x8c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f103 0304 	add.w	r3, r3, #4
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe feb1 	bl	8001e18 <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ba:	f641 5310 	movw	r3, #7440	; 0x1d10
 80030be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d906      	bls.n	80030d6 <xTaskRemoveFromEventList+0x62>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	f641 5310 	movw	r3, #7440	; 0x1d10
 80030d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030da:	4613      	mov	r3, r2
 80030dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030e6:	f641 4230 	movw	r2, #7216	; 0x1c30
 80030ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80030ee:	189a      	adds	r2, r3, r2
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f103 0304 	add.w	r3, r3, #4
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fe fe2b 	bl	8001d54 <vListInsertEnd>
 80030fe:	e009      	b.n	8003114 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f103 0318 	add.w	r3, r3, #24
 8003106:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 800310a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800310e:	4619      	mov	r1, r3
 8003110:	f7fe fe20 	bl	8001d54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800311c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	429a      	cmp	r2, r3
 8003126:	d303      	bcc.n	8003130 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003128:	f04f 0301 	mov.w	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e002      	b.n	8003136 <xTaskRemoveFromEventList+0xc2>
	}
	else
	{
		xReturn = pdFALSE;
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003136:	68fb      	ldr	r3, [r7, #12]
}
 8003138:	4618      	mov	r0, r3
 800313a:	f107 0710 	add.w	r7, r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop

08003144 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <vTaskSetTimeOutState+0x14>
 8003152:	f7fe ff39 	bl	8001fc8 <ulPortSetInterruptMask>
 8003156:	e7fe      	b.n	8003156 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003158:	f641 5324 	movw	r3, #7460	; 0x1d24
 800315c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003166:	f641 5308 	movw	r3, #7432	; 0x1d08
 800316a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]
}
 8003174:	f107 0708 	add.w	r7, r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <xTaskCheckForTimeOut+0x16>
 800318c:	f7fe ff1c 	bl	8001fc8 <ulPortSetInterruptMask>
 8003190:	e7fe      	b.n	8003190 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <xTaskCheckForTimeOut+0x22>
 8003198:	f7fe ff16 	bl	8001fc8 <ulPortSetInterruptMask>
 800319c:	e7fe      	b.n	800319c <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800319e:	f7fe fee7 	bl	8001f70 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d103      	bne.n	80031b4 <xTaskCheckForTimeOut+0x38>
			{
				xReturn = pdFALSE;
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e038      	b.n	8003226 <xTaskCheckForTimeOut+0xaa>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	f641 5324 	movw	r3, #7460	; 0x1d24
 80031bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d00c      	beq.n	80031e0 <xTaskCheckForTimeOut+0x64>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	f641 5308 	movw	r3, #7432	; 0x1d08
 80031ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d803      	bhi.n	80031e0 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80031d8:	f04f 0301 	mov.w	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e022      	b.n	8003226 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80031e0:	f641 5308 	movw	r3, #7432	; 0x1d08
 80031e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d213      	bcs.n	8003220 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003204:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1acb      	subs	r3, r1, r3
 800320c:	18d2      	adds	r2, r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ff96 	bl	8003144 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e002      	b.n	8003226 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 8003220:	f04f 0301 	mov.w	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003226:	f7fe feb5 	bl	8001f94 <vPortExitCritical>

	return xReturn;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	f107 0710 	add.w	r7, r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop

08003238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 800323c:	f641 5320 	movw	r3, #7456	; 0x1d20
 8003240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003244:	f04f 0201 	mov.w	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
}
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003258:	f000 f89a 	bl	8003390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800325c:	f641 4330 	movw	r3, #7216	; 0x1c30
 8003260:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d901      	bls.n	800326e <prvIdleTask+0x1e>
			{
				taskYIELD();
 800326a:	f7fe fe75 	bl	8001f58 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800326e:	f001 f987 	bl	8004580 <vApplicationIdleHook>
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003272:	e7f1      	b.n	8003258 <prvIdleTask+0x8>

08003274 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8003288:	4618      	mov	r0, r3
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	f04f 020a 	mov.w	r2, #10
 8003290:	f001 fb52 	bl	8004938 <strncpy>
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d902      	bls.n	80032aa <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80032a4:	f04f 0304 	mov.w	r3, #4
 80032a8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f103 0304 	add.w	r3, r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fd3b 	bl	8001d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f103 0318 	add.w	r3, r3, #24
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fd35 	bl	8001d38 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1c3 0205 	rsb	r2, r3, #5
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif /* portUSING_MPU_WRAPPERS */
}
 80032e4:	f107 0710 	add.w	r7, r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	e012      	b.n	8003320 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003302:	189b      	adds	r3, r3, r2
 8003304:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003308:	f641 4230 	movw	r2, #7216	; 0x1c30
 800330c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003310:	189b      	adds	r3, r3, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fcf0 	bl	8001cf8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0301 	add.w	r3, r3, #1
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b04      	cmp	r3, #4
 8003324:	d9e9      	bls.n	80032fa <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8003326:	f641 4094 	movw	r0, #7316	; 0x1c94
 800332a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800332e:	f7fe fce3 	bl	8001cf8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8003332:	f641 40a8 	movw	r0, #7336	; 0x1ca8
 8003336:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800333a:	f7fe fcdd 	bl	8001cf8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 800333e:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 8003342:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003346:	f7fe fcd7 	bl	8001cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 800334a:	f641 40d8 	movw	r0, #7384	; 0x1cd8
 800334e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003352:	f7fe fcd1 	bl	8001cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8003356:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 800335a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800335e:	f7fe fccb 	bl	8001cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003362:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8003366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800336a:	f641 4294 	movw	r2, #7316	; 0x1c94
 800336e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003372:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003374:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8003378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800337c:	f641 42a8 	movw	r2, #7336	; 0x1ca8
 8003380:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	f107 0708 	add.w	r7, r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop

08003390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003396:	e03d      	b.n	8003414 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
 8003398:	f7ff fb92 	bl	8002ac0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800339c:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 80033a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf14      	ite	ne
 80033aa:	2300      	movne	r3, #0
 80033ac:	2301      	moveq	r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80033b2:	f7ff fb97 	bl	8002ae4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d12b      	bne.n	8003414 <prvCheckTasksWaitingTermination+0x84>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80033bc:	f7fe fdd8 	bl	8001f70 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80033c0:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 80033c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f103 0304 	add.w	r3, r3, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe fd1f 	bl	8001e18 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80033da:	f641 5304 	movw	r3, #7428	; 0x1d04
 80033de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f103 32ff 	add.w	r2, r3, #4294967295
 80033e8:	f641 5304 	movw	r3, #7428	; 0x1d04
 80033ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033f0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80033f2:	f641 43ec 	movw	r3, #7404	; 0x1cec
 80033f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f103 32ff 	add.w	r2, r3, #4294967295
 8003400:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003404:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 800340a:	f7fe fdc3 	bl	8001f94 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800340e:	6838      	ldr	r0, [r7, #0]
 8003410:	f000 f88a 	bl	8003528 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003414:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8003418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ba      	bne.n	8003398 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8003422:	f107 0708 	add.w	r7, r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop

0800342c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003434:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003438:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8003442:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d210      	bcs.n	8003474 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003452:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8003456:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f103 0304 	add.w	r3, r3, #4
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fe fc99 	bl	8001da4 <vListInsert>
 8003472:	e01d      	b.n	80034b0 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003474:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8003478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003482:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f103 0304 	add.w	r3, r3, #4
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	f7fe fc88 	bl	8001da4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8003494:	f240 0318 	movw	r3, #24
 8003498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d205      	bcs.n	80034b0 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80034a4:	f240 0318 	movw	r3, #24
 80034a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
		}
	}
}
 80034b0:	f107 0708 	add.w	r7, r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80034c4:	f04f 0044 	mov.w	r0, #68	; 0x44
 80034c8:	f7fe fb94 	bl	8001bf4 <pvPortMalloc>
 80034cc:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d023      	beq.n	800351c <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <prvAllocateTCBAndStack+0x32>
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fb87 	bl	8001bf4 <pvPortMalloc>
 80034e6:	4603      	mov	r3, r0
 80034e8:	e000      	b.n	80034ec <prvAllocateTCBAndStack+0x34>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7fe fbdf 	bl	8001cbc <vPortFree>
			pxNewTCB = NULL;
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e00a      	b.n	800351c <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003510:	4610      	mov	r0, r2
 8003512:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8003516:	461a      	mov	r2, r3
 8003518:	f001 f978 	bl	800480c <memset>
		}
	}

	return pxNewTCB;
 800351c:	68fb      	ldr	r3, [r7, #12]
}
 800351e:	4618      	mov	r0, r3
 8003520:	f107 0710 	add.w	r7, r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fbc1 	bl	8001cbc <vPortFree>
		vPortFree( pxTCB );
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe fbbe 	bl	8001cbc <vPortFree>
	}
 8003540:	f107 0708 	add.w	r7, r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800354e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003552:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	607b      	str	r3, [r7, #4]

		return xReturn;
 800355a:	687b      	ldr	r3, [r7, #4]
	}
 800355c:	4618      	mov	r0, r3
 800355e:	f107 070c 	add.w	r7, r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800356e:	f641 5314 	movw	r3, #7444	; 0x1d14
 8003572:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d103      	bne.n	8003584 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	e00d      	b.n	80035a0 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003584:	f641 5318 	movw	r3, #7448	; 0x1d18
 8003588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003592:	f04f 0301 	mov.w	r3, #1
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	e002      	b.n	80035a0 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800359a:	f04f 0302 	mov.w	r3, #2
 800359e:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035a0:	687b      	ldr	r3, [r7, #4]
	}
 80035a2:	4618      	mov	r0, r3
 80035a4:	f107 070c 	add.w	r7, r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d05f      	beq.n	8003682 <vTaskPriorityInherit+0xd2>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80035ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d255      	bcs.n	8003682 <vTaskPriorityInherit+0xd2>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 80035d6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80035da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f1c3 0205 	rsb	r2, r3, #5
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6959      	ldr	r1, [r3, #20]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f2:	4613      	mov	r3, r2
 80035f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80035fe:	f641 4230 	movw	r2, #7216	; 0x1c30
 8003602:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003606:	189b      	adds	r3, r3, r2
 8003608:	4299      	cmp	r1, r3
 800360a:	d132      	bne.n	8003672 <vTaskPriorityInherit+0xc2>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f103 0304 	add.w	r3, r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fc00 	bl	8001e18 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003618:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800361c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d906      	bls.n	8003648 <vTaskPriorityInherit+0x98>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003642:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4613      	mov	r3, r2
 800364e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003652:	189b      	adds	r3, r3, r2
 8003654:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003658:	f641 4230 	movw	r2, #7216	; 0x1c30
 800365c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003660:	189a      	adds	r2, r3, r2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f103 0304 	add.w	r3, r3, #4
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7fe fb72 	bl	8001d54 <vListInsertEnd>
 8003670:	e007      	b.n	8003682 <vTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003672:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003676:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8003682:	f107 0710 	add.w	r7, r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop

0800368c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d039      	beq.n	8003712 <vTaskPriorityDisinherit+0x86>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d033      	beq.n	8003712 <vTaskPriorityDisinherit+0x86>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f103 0304 	add.w	r3, r3, #4
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fbb1 	bl	8001e18 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	f1c3 0205 	rsb	r2, r3, #5
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	f641 5310 	movw	r3, #7440	; 0x1d10
 80036d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d906      	bls.n	80036ea <vTaskPriorityDisinherit+0x5e>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	f641 5310 	movw	r3, #7440	; 0x1d10
 80036e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036f4:	189b      	adds	r3, r3, r2
 80036f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036fa:	f641 4230 	movw	r2, #7216	; 0x1c30
 80036fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003702:	189a      	adds	r2, r3, r2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f103 0304 	add.w	r3, r3, #4
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f7fe fb21 	bl	8001d54 <vListInsertEnd>
			}
		}
	}
 8003712:	f107 0710 	add.w	r7, r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop

0800371c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003728:	f000 faa4 	bl	8003c74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800372c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003730:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01a      	beq.n	8003770 <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800373a:	f04f 0303 	mov.w	r3, #3
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	9303      	str	r3, [sp, #12]
 8003752:	f643 00b1 	movw	r0, #14513	; 0x38b1
 8003756:	f6c0 0000 	movt	r0, #2048	; 0x800
 800375a:	f644 216c 	movw	r1, #19052	; 0x4a6c
 800375e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003762:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	f7ff f845 	bl	80027f8 <xTaskGenericCreate>
 800376e:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <xTimerCreateTimerTask+0x60>
 8003776:	f7fe fc27 	bl	8001fc8 <ulPortSetInterruptMask>
 800377a:	e7fe      	b.n	800377a <xTimerCreateTimerTask+0x5e>
	return xReturn;
 800377c:	687b      	ldr	r3, [r7, #4]
}
 800377e:	4618      	mov	r0, r3
 8003780:	f107 0708 	add.w	r7, r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800379c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80037a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d03d      	beq.n	8003826 <xTimerGenericCommand+0x9e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d125      	bne.n	8003808 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037bc:	f7ff fed4 	bl	8003568 <xTaskGetSchedulerState>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d10f      	bne.n	80037e6 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80037c6:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80037ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	f7fe fce9 	bl	80021b4 <xQueueGenericSend>
 80037e2:	61f8      	str	r0, [r7, #28]
 80037e4:	e01f      	b.n	8003826 <xTimerGenericCommand+0x9e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037e6:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80037ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	f7fe fcd8 	bl	80021b4 <xQueueGenericSend>
 8003804:	61f8      	str	r0, [r7, #28]
 8003806:	e00e      	b.n	8003826 <xTimerGenericCommand+0x9e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003808:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800380c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f107 0310 	add.w	r3, r7, #16
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	f7fe fd70 	bl	8002304 <xQueueGenericSendFromISR>
 8003824:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8003826:	69fb      	ldr	r3, [r7, #28]
}
 8003828:	4618      	mov	r0, r3
 800382a:	f107 0720 	add.w	r7, r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop

08003834 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800383e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f103 0304 	add.w	r3, r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fadf 	bl	8001e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d11e      	bne.n	80038a0 <prvProcessExpiredTimer+0x6c>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	4619      	mov	r1, r3
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f000 f8bf 	bl	80039f4 <prvInsertTimerInActiveList>
 8003876:	4603      	mov	r3, r0
 8003878:	2b01      	cmp	r3, #1
 800387a:	d111      	bne.n	80038a0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	f7ff ff7b 	bl	8003788 <xTimerGenericCommand>
 8003892:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <prvProcessExpiredTimer+0x6c>
 800389a:	f7fe fb95 	bl	8001fc8 <ulPortSetInterruptMask>
 800389e:	e7fe      	b.n	800389e <prvProcessExpiredTimer+0x6a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	4798      	blx	r3
}
 80038a8:	f107 0710 	add.w	r7, r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038b8:	f107 0308 	add.w	r3, r7, #8
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f843 	bl	8003948 <prvGetNextExpireTime>
 80038c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f000 f803 	bl	80038d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80038ce:	f000 f8db 	bl	8003a88 <prvProcessReceivedCommands>
	}
 80038d2:	e7f1      	b.n	80038b8 <prvTimerTask+0x8>

080038d4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80038de:	f7ff f8ef 	bl	8002ac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038e2:	f107 0308 	add.w	r3, r7, #8
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f858 	bl	800399c <prvSampleTimeNow>
 80038ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d121      	bne.n	8003938 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <prvProcessTimerOrBlockTask+0x3c>
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d806      	bhi.n	8003910 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 8003902:	f7ff f8ef 	bl	8002ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	68f9      	ldr	r1, [r7, #12]
 800390a:	f7ff ff93 	bl	8003834 <prvProcessExpiredTimer>
 800390e:	e017      	b.n	8003940 <prvProcessTimerOrBlockTask+0x6c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8003910:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1acb      	subs	r3, r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f7fe ff38 	bl	8002798 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8003928:	f7ff f8dc 	bl	8002ae4 <xTaskResumeAll>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <prvProcessTimerOrBlockTask+0x6a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8003932:	f7fe fb11 	bl	8001f58 <vPortYieldFromISR>
 8003936:	e002      	b.n	800393e <prvProcessTimerOrBlockTask+0x6a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 8003938:	f7ff f8d4 	bl	8002ae4 <xTaskResumeAll>
 800393c:	e000      	b.n	8003940 <prvProcessTimerOrBlockTask+0x6c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800393e:	bf00      	nop
		else
		{
			xTaskResumeAll();
		}
	}
}
 8003940:	f107 0710 	add.w	r7, r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003950:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003954:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf14      	ite	ne
 8003960:	2300      	movne	r3, #0
 8003962:	2301      	moveq	r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d108      	bne.n	8003986 <prvGetNextExpireTime+0x3e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003974:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003978:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e002      	b.n	800398c <prvGetNextExpireTime+0x44>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800398c:	68fb      	ldr	r3, [r7, #12]
}
 800398e:	4618      	mov	r0, r3
 8003990:	f107 0714 	add.w	r7, r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop

0800399c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 80039a4:	f7ff f950 	bl	8002c48 <xTaskGetTickCount>
 80039a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80039aa:	f641 5360 	movw	r3, #7520	; 0x1d60
 80039ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d20c      	bcs.n	80039d4 <prvSampleTimeNow+0x38>
	{
		prvSwitchTimerLists( xLastTime );
 80039ba:	f641 5360 	movw	r3, #7520	; 0x1d60
 80039be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f8e1 	bl	8003b8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f04f 0201 	mov.w	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e003      	b.n	80039dc <prvSampleTimeNow+0x40>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80039dc:	f641 5360 	movw	r3, #7520	; 0x1d60
 80039e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80039e8:	68fb      	ldr	r3, [r7, #12]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	f107 0710 	add.w	r7, r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d817      	bhi.n	8003a4c <prvInsertTimerInActiveList+0x58>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d303      	bcc.n	8003a32 <prvInsertTimerInActiveList+0x3e>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a2a:	f04f 0301 	mov.w	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e024      	b.n	8003a7c <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a32:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f103 0304 	add.w	r3, r3, #4
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	f7fe f9ad 	bl	8001da4 <vListInsert>
 8003a4a:	e017      	b.n	8003a7c <prvInsertTimerInActiveList+0x88>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d207      	bcs.n	8003a64 <prvInsertTimerInActiveList+0x70>
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d303      	bcc.n	8003a64 <prvInsertTimerInActiveList+0x70>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a5c:	f04f 0301 	mov.w	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e00b      	b.n	8003a7c <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a64:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f103 0304 	add.w	r3, r3, #4
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f7fe f994 	bl	8001da4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a7c:	697b      	ldr	r3, [r7, #20]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f107 0718 	add.w	r7, r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003a8e:	e066      	b.n	8003b5e <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <prvProcessReceivedCommands+0x20>
		{
			/* The timer is in a list, remove it. */
			uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f103 0304 	add.w	r3, r3, #4
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe f9b8 	bl	8001e18 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003aa8:	f107 0304 	add.w	r3, r7, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff75 	bl	800399c <prvSampleTimeNow>
 8003ab2:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d84e      	bhi.n	8003b58 <prvProcessReceivedCommands+0xd0>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <prvProcessReceivedCommands+0x38>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003b59 	.word	0x08003b59
 8003ac8:	08003b27 	.word	0x08003b27
 8003acc:	08003b51 	.word	0x08003b51
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	18d2      	adds	r2, r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	69f8      	ldr	r0, [r7, #28]
 8003adc:	4611      	mov	r1, r2
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	f7ff ff88 	bl	80039f4 <prvInsertTimerInActiveList>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d138      	bne.n	8003b5c <prvProcessReceivedCommands+0xd4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	69f8      	ldr	r0, [r7, #28]
 8003af0:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d130      	bne.n	8003b5c <prvProcessReceivedCommands+0xd4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	9200      	str	r2, [sp, #0]
 8003b08:	69f8      	ldr	r0, [r7, #28]
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	f7ff fe38 	bl	8003788 <xTimerGenericCommand>
 8003b18:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11d      	bne.n	8003b5c <prvProcessReceivedCommands+0xd4>
 8003b20:	f7fe fa52 	bl	8001fc8 <ulPortSetInterruptMask>
 8003b24:	e7fe      	b.n	8003b24 <prvProcessReceivedCommands+0x9c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <prvProcessReceivedCommands+0xb2>
 8003b34:	f7fe fa48 	bl	8001fc8 <ulPortSetInterruptMask>
 8003b38:	e7fe      	b.n	8003b38 <prvProcessReceivedCommands+0xb0>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	18d3      	adds	r3, r2, r3
 8003b42:	69f8      	ldr	r0, [r7, #28]
 8003b44:	4619      	mov	r1, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f7ff ff53 	bl	80039f4 <prvInsertTimerInActiveList>
				break;
 8003b4e:	e006      	b.n	8003b5e <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8003b50:	69f8      	ldr	r0, [r7, #28]
 8003b52:	f7fe f8b3 	bl	8001cbc <vPortFree>
				break;
 8003b56:	e002      	b.n	8003b5e <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <prvProcessReceivedCommands+0xd6>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 8003b5c:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003b5e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	f7fe fc22 	bl	80023c0 <xQueueGenericReceive>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d186      	bne.n	8003a90 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8003b82:	f107 0720 	add.w	r7, r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop

08003b8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b94:	e04b      	b.n	8003c2e <prvSwitchTimerLists+0xa2>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b96:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ba6:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f103 0304 	add.w	r3, r3, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe f92b 	bl	8001e18 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	69b8      	ldr	r0, [r7, #24]
 8003bc8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d12d      	bne.n	8003c2e <prvSwitchTimerLists+0xa2>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d912      	bls.n	8003c0a <prvSwitchTimerLists+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bf0:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f103 0304 	add.w	r3, r3, #4
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7fe f8ce 	bl	8001da4 <vListInsert>
 8003c08:	e011      	b.n	8003c2e <prvSwitchTimerLists+0xa2>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	69b8      	ldr	r0, [r7, #24]
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	f7ff fdb4 	bl	8003788 <xTimerGenericCommand>
 8003c20:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <prvSwitchTimerLists+0xa2>
 8003c28:	f7fe f9ce 	bl	8001fc8 <ulPortSetInterruptMask>
 8003c2c:	e7fe      	b.n	8003c2c <prvSwitchTimerLists+0xa0>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c2e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ab      	bne.n	8003b96 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c3e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c4a:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c5c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8003c5e:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	f107 0720 	add.w	r7, r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop

08003c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003c78:	f7fe f97a 	bl	8001f70 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003c7c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d12b      	bne.n	8003ce2 <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
 8003c8a:	f641 502c 	movw	r0, #7468	; 0x1d2c
 8003c8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c92:	f7fe f831 	bl	8001cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003c96:	f641 5040 	movw	r0, #7488	; 0x1d40
 8003c9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c9e:	f7fe f82b 	bl	8001cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ca2:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003caa:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003cae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003cb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003cb4:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cbc:	f641 5240 	movw	r2, #7488	; 0x1d40
 8003cc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003cc4:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8003cc6:	f04f 0005 	mov.w	r0, #5
 8003cca:	f04f 010c 	mov.w	r1, #12
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f7fe fa2b 	bl	800212c <xQueueGenericCreate>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ce0:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8003ce2:	f7fe f957 	bl	8001f94 <vPortExitCritical>
}
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <TIM7_IRQHandler>:
{
	( void )pxMBPortCBTimerExpired(  );
}

void TIM7_IRQHandler()
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8003cec:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003cf0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003cf4:	f04f 0101 	mov.w	r1, #1
 8003cf8:	f7fd fd7a 	bl	80017f0 <TIM_ClearITPendingBit>
	( void )pxMBPortCBTimerExpired(  );
 8003cfc:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4798      	blx	r3
}
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop

08003d0c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d0c:	2100      	movs	r1, #0
  b     LoopCopyDataInit
 8003d0e:	f000 b804 	b.w	8003d1a <LoopCopyDataInit>

08003d12 <CopyDataInit>:

CopyDataInit:
  ldr   r3, =_sidata
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <LoopFillZerobss+0x12>)
  ldr   r3, [r3, r1]
 8003d14:	585b      	ldr	r3, [r3, r1]
  str   r3, [r0, r1]
 8003d16:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d18:	3104      	adds	r1, #4

08003d1a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr   r0, =_sdata
 8003d1a:	480b      	ldr	r0, [pc, #44]	; (8003d48 <LoopFillZerobss+0x16>)
  ldr   r3, =_edata
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8003d1e:	1842      	adds	r2, r0, r1
  cmp   r2, r3
 8003d20:	429a      	cmp	r2, r3
  bcc   CopyDataInit
 8003d22:	f4ff aff6 	bcc.w	8003d12 <CopyDataInit>
  ldr   r2, =_sbss
 8003d26:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <LoopFillZerobss+0x1e>)
  b     LoopFillZerobss
 8003d28:	f000 b803 	b.w	8003d32 <LoopFillZerobss>

08003d2c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d2c:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8003d2e:	f842 3b04 	str.w	r3, [r2], #4

08003d32 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr   r3, = _ebss
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <LoopFillZerobss+0x22>)
  cmp   r2, r3
 8003d34:	429a      	cmp	r2, r3
  bcc   FillZerobss
 8003d36:	f4ff aff9 	bcc.w	8003d2c <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d3a:	f000 f80f 	bl	8003d5c <SystemInit>
/* Call the application's entry point.*/
  bl    main
 8003d3e:	f000 fbd9 	bl	80044f4 <main>
  bx    lr    
 8003d42:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b     LoopCopyDataInit

CopyDataInit:
  ldr   r3, =_sidata
 8003d44:	08005154 	.word	0x08005154
  ldr   r3, [r3, r1]
  str   r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr   r0, =_sdata
 8003d48:	20000000 	.word	0x20000000
  ldr   r3, =_edata
 8003d4c:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp   r2, r3
  bcc   CopyDataInit
  ldr   r2, =_sbss
 8003d50:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str   r3, [r2], #4
    
LoopFillZerobss:
  ldr   r3, = _ebss
 8003d54:	20001d7c 	.word	0x20001d7c

08003d58 <ADC1_IRQHandler>:
 * @retval None       
*/
  .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d58:	f7ff bffe 	b.w	8003d58 <ADC1_IRQHandler>

08003d5c <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	/* Reset the RCC clock configuration to the default reset state(for debug purpose) */
	/* Set HSION bit */
	RCC ->CR |= (uint32_t) 0x00000001;
 8003d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
	RCC ->CFGR &= (uint32_t) 0xF8FF0000;
 8003d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8003d92:	400b      	ands	r3, r1
 8003d94:	6053      	str	r3, [r2, #4]
#else
	RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   

	/* Reset HSEON, CSSON and PLLON bits */RCC ->CR &= (uint32_t) 0xFEF6FFFF;
 8003d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003da2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003dac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003db0:	601a      	str	r2, [r3, #0]

	/* Reset HSEBYP bit */RCC ->CR &= (uint32_t) 0xFFFBFFFF;
 8003db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc8:	601a      	str	r2, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */RCC ->CFGR &=
 8003dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003dda:	6852      	ldr	r2, [r2, #4]
 8003ddc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003de0:	605a      	str	r2, [r3, #4]
	RCC->CIR = 0x00FF0000;

	/* Reset CFGR2 register */
	RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
	/* Disable all interrupts and clear pending bits  */RCC ->CIR = 0x009F0000;
 8003de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003dee:	609a      	str	r2, [r3, #8]

	/* Reset CFGR2 register */RCC ->CFGR2 = 0x00000000;
 8003df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* DATA_IN_ExtSRAM */
#endif 

	/* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
	/* Configure the Flash Latency cycles and enable prefetch buffer */
	SetSysClock();
 8003dfe:	f000 f809 	bl	8003e14 <SetSysClock>

#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB ->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003e02:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003e06:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop

08003e14 <SetSysClock>:
/**
 * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 * @param  None
 * @retval None
 */
static void SetSysClock(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
	SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
	SetSysClockTo24();
 8003e18:	f000 f802 	bl	8003e20 <SetSysClockTo24>
	SetSysClockTo72();
#endif

	/* If none of the define above is enabled, the HSI is used as System clock
	 source (default after reset) */
}
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop

08003e20 <SetSysClockTo24>:
 *         and PCLK1 prescalers.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
static void SetSysClockTo24(void) {
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	603b      	str	r3, [r7, #0]

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	/* Enable HSE */RCC ->CR |= ((uint32_t) RCC_CR_HSEON );
 8003e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e48:	601a      	str	r2, [r3, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do {
		HSEStatus = RCC ->CR & RCC_CR_HSERDY;
 8003e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f103 0301 	add.w	r3, r3, #1
 8003e60:	607b      	str	r3, [r7, #4]
	} while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT ));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <SetSysClockTo24+0x50>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e6e:	d1ec      	bne.n	8003e4a <SetSysClockTo24+0x2a>

	if ((RCC ->CR & RCC_CR_HSERDY )!= RESET) {
 8003e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <SetSysClockTo24+0x6a>
		HSEStatus = (uint32_t) 0x01;
 8003e82:	f04f 0301 	mov.w	r3, #1
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	e002      	b.n	8003e90 <SetSysClockTo24+0x70>
	} else {
		HSEStatus = (uint32_t) 0x00;
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t) 0x01) {
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d16d      	bne.n	8003f72 <SetSysClockTo24+0x152>
		FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
		FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
#endif

		/* HCLK = SYSCLK */
		RCC ->CFGR |= (uint32_t) RCC_CFGR_HPRE_DIV1;
 8003e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ea6:	6852      	ldr	r2, [r2, #4]
 8003ea8:	605a      	str	r2, [r3, #4]

		/* PCLK2 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE2_DIV1;
 8003eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003eb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003eba:	6852      	ldr	r2, [r2, #4]
 8003ebc:	605a      	str	r2, [r3, #4]

		/* PCLK1 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE1_DIV1;
 8003ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ece:	6852      	ldr	r2, [r2, #4]
 8003ed0:	605a      	str	r2, [r3, #4]
		/* Wait till PLL2 is ready */
		while((RCC->CR & RCC_CR_PLL2RDY) == 0)
		{
		}
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */RCC ->CFGR &=
 8003ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ede:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ee2:	6852      	ldr	r2, [r2, #4]
 8003ee4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003ee8:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE
						| RCC_CFGR_PLLMULL ));
		RCC ->CFGR |= (uint32_t) (RCC_CFGR_PLLSRC_PREDIV1
 8003eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ef6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003efa:	6852      	ldr	r2, [r2, #4]
 8003efc:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 8003f00:	605a      	str	r2, [r3, #4]
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

		/* Enable PLL */RCC ->CR |= RCC_CR_PLLON;
 8003f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f18:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is ready */
		while ((RCC ->CR & RCC_CR_PLLRDY )== 0){
 8003f1a:	bf00      	nop
 8003f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f6      	beq.n	8003f1c <SetSysClockTo24+0xfc>
		}

		/* Select PLL as system clock source */RCC ->CFGR &=
 8003f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003f3e:	6852      	ldr	r2, [r2, #4]
 8003f40:	f022 0203 	bic.w	r2, r2, #3
 8003f44:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_SW ));
		RCC ->CFGR |= (uint32_t) RCC_CFGR_SW_PLL;
 8003f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003f56:	6852      	ldr	r2, [r2, #4]
 8003f58:	f042 0202 	orr.w	r2, r2, #2
 8003f5c:	605a      	str	r2, [r3, #4]

		/* Wait till PLL is used as system clock source */
		while ((RCC ->CFGR & (uint32_t) RCC_CFGR_SWS )!= (uint32_t)0x08){
 8003f5e:	bf00      	nop
 8003f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d1f6      	bne.n	8003f60 <SetSysClockTo24+0x140>
}
else
{ /* If HSE fails to start-up, the application will have wrong clock 
 configuration. User can add here some code to deal with this error */
}
}
 8003f72:	f107 070c 	add.w	r7, r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <SetupClock>:
volatile uint16_t counter = 0;

unsigned char error_handle (unsigned char err);

void SetupClock()
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
	RCC_DeInit ();                    /* RCC system reset(for debug purpose)*/
 8003f80:	f7fc fff6 	bl	8000f70 <RCC_DeInit>
	RCC_HSEConfig (RCC_HSE_ON);       /* Enable HSE                         */
 8003f84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003f88:	f7fd f846 	bl	8001018 <RCC_HSEConfig>

	/* Wait till HSE is ready                                               */
	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 8003f8c:	bf00      	nop
 8003f8e:	f04f 0031 	mov.w	r0, #49	; 0x31
 8003f92:	f7fd fadb 	bl	800154c <RCC_GetFlagStatus>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f8      	beq.n	8003f8e <SetupClock+0x12>

	RCC_HCLKConfig   (RCC_SYSCLK_Div1);   /* HCLK   = SYSCLK                */
 8003f9c:	f04f 0000 	mov.w	r0, #0
 8003fa0:	f7fd f8e2 	bl	8001168 <RCC_HCLKConfig>
	RCC_PCLK2Config  (RCC_HCLK_Div1);     /* PCLK2  = HCLK                  */
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f7fd f91e 	bl	80011e8 <RCC_PCLK2Config>
	RCC_PCLK1Config  (RCC_HCLK_Div1);     /* PCLK1  = HCLK1                */
 8003fac:	f04f 0000 	mov.w	r0, #0
 8003fb0:	f7fd f8fa 	bl	80011a8 <RCC_PCLK1Config>
	//RCC_ADCCLKConfig (RCC_PCLK2_Div4);    /* ADCCLK = PCLK2/4               */

	/* PLLCLK = 8MHz * 6 = 48 MHz                                           */
	RCC_PLLConfig (RCC_PLLSource_PREDIV1, RCC_PLLMul_6);
 8003fb4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003fb8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003fbc:	f7fd f870 	bl	80010a0 <RCC_PLLConfig>

	RCC_PLLCmd (ENABLE);                  /* Enable PLL                     */
 8003fc0:	f04f 0001 	mov.w	r0, #1
 8003fc4:	f7fd f890 	bl	80010e8 <RCC_PLLCmd>

	/* Wait till PLL is ready                                               */
	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8003fc8:	bf00      	nop
 8003fca:	f04f 0039 	mov.w	r0, #57	; 0x39
 8003fce:	f7fd fabd 	bl	800154c <RCC_GetFlagStatus>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f8      	beq.n	8003fca <SetupClock+0x4e>

	/* Select PLL as system clock source                                    */
	RCC_SYSCLKConfig (RCC_SYSCLKSource_PLLCLK);
 8003fd8:	f04f 0002 	mov.w	r0, #2
 8003fdc:	f7fd f894 	bl	8001108 <RCC_SYSCLKConfig>

	/* Wait till PLL is used as system clock source                         */
	while (RCC_GetSYSCLKSource() != 0x08);
 8003fe0:	bf00      	nop
 8003fe2:	f7fd f8b1 	bl	8001148 <RCC_GetSYSCLKSource>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d1fa      	bne.n	8003fe2 <SetupClock+0x66>
}
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop

08003ff0 <LEDsInit>:

void LEDsInit()
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
   PIN_OUT_PP(LED_PORT, LED_BLUE);
 8003ff4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ff8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004000:	f7fc fbac 	bl	800075c <PIN_OUT_PP>
   PIN_OUT_PP(LED_PORT, LED_GREEN);
 8004004:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004008:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800400c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004010:	f7fc fba4 	bl	800075c <PIN_OUT_PP>
}
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop

08004018 <BtnInit>:

void BtnInit()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 800401e:	f04f 0004 	mov.w	r0, #4
 8004022:	f04f 0101 	mov.w	r1, #1
 8004026:	f7fd fa3d 	bl	80014a4 <RCC_APB2PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800402a:	f04f 0301 	mov.w	r3, #1
 800402e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004030:	f04f 0304 	mov.w	r3, #4
 8004034:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004036:	f107 0304 	add.w	r3, r7, #4
 800403a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800403e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004042:	4619      	mov	r1, r3
 8004044:	f7fc fe54 	bl	8000cf0 <GPIO_Init>
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	f7fc ff26 	bl	8000ea0 <GPIO_EXTILineConfig>
}
 8004054:	f107 0708 	add.w	r7, r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <USART_GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_GPIO_Configuration(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
  /* Enable GPIOA clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8004062:	f04f 0004 	mov.w	r0, #4
 8004066:	f04f 0101 	mov.w	r1, #1
 800406a:	f7fd fa1b 	bl	80014a4 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure USART1 Tx (PA.09) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 800406e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004072:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004074:	f04f 0318 	mov.w	r3, #24
 8004078:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800407a:	f04f 0303 	mov.w	r3, #3
 800407e:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004080:	f107 0304 	add.w	r3, r7, #4
 8004084:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004088:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800408c:	4619      	mov	r1, r3
 800408e:	f7fc fe2f 	bl	8000cf0 <GPIO_Init>

  /* Configure USART1 Rx (PA.10) as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004096:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004098:	f04f 0304 	mov.w	r3, #4
 800409c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800409e:	f107 0304 	add.w	r3, r7, #4
 80040a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80040a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7fc fe20 	bl	8000cf0 <GPIO_Init>
}
 80040b0:	f107 0708 	add.w	r7, r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <USART_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Configuration(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
  /* Enable USART1 */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80040be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80040c2:	f04f 0101 	mov.w	r1, #1
 80040c6:	f7fd f9ed 	bl	80014a4 <RCC_APB2PeriphClockCmd>
        - USART CPOL: Clock is active low
        - USART CPHA: Data is captured on the middle
        - USART LastBit: The clock pulse of the last data bit is not output to
                         the SCLK pin
  */
  USART_InitStructure.USART_BaudRate = BAUDRATE;
 80040ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80040ce:	603b      	str	r3, [r7, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	80bb      	strh	r3, [r7, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	80fb      	strh	r3, [r7, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	813b      	strh	r3, [r7, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	81bb      	strh	r3, [r7, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80040e8:	f04f 030c 	mov.w	r3, #12
 80040ec:	817b      	strh	r3, [r7, #10]

  USART_Init(USART1, &USART_InitStructure);
 80040ee:	463b      	mov	r3, r7
 80040f0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80040f4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040f8:	4619      	mov	r1, r3
 80040fa:	f7fd fb8b 	bl	8001814 <USART_Init>

  /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
 80040fe:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004102:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004106:	f04f 0101 	mov.w	r1, #1
 800410a:	f7fd fc59 	bl	80019c0 <USART_Cmd>

  uart_print_string(USART1, "\n===== UART1 инициализирован =====",1);
 800410e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004112:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004116:	f644 2174 	movw	r1, #19060	; 0x4a74
 800411a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800411e:	f04f 0201 	mov.w	r2, #1
 8004122:	f7fc f9cf 	bl	80004c4 <uart_print_string>
}
 8004126:	f107 0710 	add.w	r7, r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop

08004130 <EXTI_Configuration>:

void EXTI_Configuration(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8004136:	f04f 0301 	mov.w	r3, #1
 800413a:	603b      	str	r3, [r7, #0]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	713b      	strb	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004142:	f04f 0308 	mov.w	r3, #8
 8004146:	717b      	strb	r3, [r7, #5]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004148:	f04f 0301 	mov.w	r3, #1
 800414c:	71bb      	strb	r3, [r7, #6]
  EXTI_Init(&EXTI_InitStructure);
 800414e:	463b      	mov	r3, r7
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc fd21 	bl	8000b98 <EXTI_Init>
}
 8004156:	f107 0708 	add.w	r7, r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop

08004160 <NVIC_Configuration_USART1>:

void NVIC_Configuration_USART1(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Place the vector table into FLASH */
	//NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8004166:	f44f 7040 	mov.w	r0, #768	; 0x300
 800416a:	f7fc fc8d 	bl	8000a88 <NVIC_PriorityGroupConfig>

	//select NVIC channel to configure
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800416e:	f04f 0325 	mov.w	r3, #37	; 0x25
 8004172:	713b      	strb	r3, [r7, #4]
	//set priority to lowest
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 8004174:	f04f 030f 	mov.w	r3, #15
 8004178:	717b      	strb	r3, [r7, #5]
	//set subpriority to lowest
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 800417a:	f04f 030f 	mov.w	r3, #15
 800417e:	71bb      	strb	r3, [r7, #6]
	//enable IRQ channel
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004180:	f04f 0301 	mov.w	r3, #1
 8004184:	71fb      	strb	r3, [r7, #7]
	//update NVIC registers
	NVIC_Init(&NVIC_InitStructure);
 8004186:	f107 0304 	add.w	r3, r7, #4
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc fc90 	bl	8000ab0 <NVIC_Init>

	//disable Transmit Data Register empty interrupt
	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8004190:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004194:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004198:	f240 7127 	movw	r1, #1831	; 0x727
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f7fd fc2e 	bl	8001a00 <USART_ITConfig>
	//enable Receive Data register not empty interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80041a4:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80041a8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80041ac:	f240 5125 	movw	r1, #1317	; 0x525
 80041b0:	f04f 0201 	mov.w	r2, #1
 80041b4:	f7fd fc24 	bl	8001a00 <USART_ITConfig>


}
 80041b8:	f107 0708 	add.w	r7, r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <NVIC_Configuration_USER_BUTTON>:

void NVIC_Configuration_USER_BUTTON(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80041c6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80041ca:	f7fc fc5d 	bl	8000a88 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 80041ce:	f04f 0306 	mov.w	r3, #6
 80041d2:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 80041d4:	f04f 030f 	mov.w	r3, #15
 80041d8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 80041da:	f04f 030f 	mov.w	r3, #15
 80041de:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80041e0:	f04f 0301 	mov.w	r3, #1
 80041e4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80041e6:	f107 0304 	add.w	r3, r7, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc fc60 	bl	8000ab0 <NVIC_Init>
}
 80041f0:	f107 0708 	add.w	r7, r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
        EXTI_ClearITPendingBit(EXTI_Line0);
 80041fc:	f04f 0001 	mov.w	r0, #1
 8004200:	f7fc fd66 	bl	8000cd0 <EXTI_ClearITPendingBit>

        uart_print_string(USART1, "Тынц",1);
 8004204:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004208:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800420c:	f644 21a8 	movw	r1, #19112	; 0x4aa8
 8004210:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004214:	f04f 0201 	mov.w	r2, #1
 8004218:	f7fc f954 	bl	80004c4 <uart_print_string>
		{
			LED_PORT->ODR |= LED_GREEN;
 800421c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004220:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004228:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004232:	60da      	str	r2, [r3, #12]
			//vTaskDelay(10);
			delay_ms(10);
 8004234:	f04f 000a 	mov.w	r0, #10
 8004238:	f7fc fae0 	bl	80007fc <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 800423c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004240:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004248:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8004252:	60da      	str	r2, [r3, #12]
		}
}
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop

08004258 <vFreeRTOSInitAll>:

void vFreeRTOSInitAll()
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
	SetupClock();
 800425c:	f7ff fe8e 	bl	8003f7c <SetupClock>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004260:	f04f 0010 	mov.w	r0, #16
 8004264:	f04f 0101 	mov.w	r1, #1
 8004268:	f7fd f91c 	bl	80014a4 <RCC_APB2PeriphClockCmd>
	LEDsInit();
 800426c:	f7ff fec0 	bl	8003ff0 <LEDsInit>

	smallLEDPanel_Init();
 8004270:	f7fc f9b8 	bl	80005e4 <smallLEDPanel_Init>

	BtnInit();
 8004274:	f7ff fed0 	bl	8004018 <BtnInit>

	EXTI_Configuration();
 8004278:	f7ff ff5a 	bl	8004130 <EXTI_Configuration>

	USART_GPIO_Configuration();
 800427c:	f7ff feee 	bl	800405c <USART_GPIO_Configuration>
	USART_Configuration();
 8004280:	f7ff ff1a 	bl	80040b8 <USART_Configuration>

	NVIC_Configuration_USER_BUTTON();
 8004284:	f7ff ff9c 	bl	80041c0 <NVIC_Configuration_USER_BUTTON>
	NVIC_Configuration_USART1();
 8004288:	f7ff ff6a 	bl	8004160 <NVIC_Configuration_USART1>

	TIM6Init();
 800428c:	f7fc fa7e 	bl	800078c <TIM6Init>

	RTC_Config();
 8004290:	f7fc fb5a 	bl	8000948 <RTC_Config>

}
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop

08004298 <vTaskLED>:

void vTaskLED(void *pvParameters)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

        for (;;) {
        	//delay_ms(500);
        	LED_PORT->ODR ^= LED_BLUE;
 80042a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042ac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80042b6:	60da      	str	r2, [r3, #12]
            vTaskDelay(500);
 80042b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042bc:	f7fe fb8e 	bl	80029dc <vTaskDelay>

            smallLEDPanel_Set(counter);
 80042c0:	f641 5364 	movw	r3, #7524	; 0x1d64
 80042c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fc f9a5 	bl	800061c <smallLEDPanel_Set>
            //smallLEDPanel_Inc(1);
            //smallLEDPanel_All_On();
            //smallLEDPanel_Clear();
            //smallLEDPanel_Inc();
            //counter++;
        }
 80042d2:	e7e5      	b.n	80042a0 <vTaskLED+0x8>

080042d4 <USART1_IRQHandler>:
        vTaskDelete(NULL);

}

void USART1_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 80042da:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042de:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042e2:	f240 5125 	movw	r1, #1317	; 0x525
 80042e6:	f7fd fc23 	bl	8001b30 <USART_GetITStatus>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d014      	beq.n	800431a <USART1_IRQHandler+0x46>
	    {
		   // перемырг
		   //LED_PORT->ODR |= LED_BLUE;
		   //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
		   uint16_t i = USART_ReceiveData(USART1);
 80042f0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80042f4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80042f8:	f7fd fbe8 	bl	8001acc <USART_ReceiveData>
 80042fc:	4603      	mov	r3, r0
 80042fe:	80fb      	strh	r3, [r7, #6]
		   UARTSend(&i, 1);
 8004300:	f107 0306 	add.w	r3, r7, #6
 8004304:	4618      	mov	r0, r3
 8004306:	f04f 0101 	mov.w	r1, #1
 800430a:	f000 f945 	bl	8004598 <UARTSend>
		   counter = i;
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f641 5364 	movw	r3, #7524	; 0x1d64
 8004314:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004318:	801a      	strh	r2, [r3, #0]
		   //LED_PORT->ODR ^= LED_BLUE;
		   //UARTSend(&i, 1);
          // UARTSend(" <-- data\r\n", 10);
        }
}
 800431a:	f107 0708 	add.w	r7, r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop

08004324 <vTaskDS1821>:

    vTaskDelete(NULL);
}

void vTaskDS1821(void *pvParameters)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	uart_print_string(USART1,"Температура:   ",0);
 800432c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004330:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004334:	f644 21d8 	movw	r1, #19160	; 0x4ad8
 8004338:	f6c0 0100 	movt	r1, #2048	; 0x800
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f7fc f8c0 	bl	80004c4 <uart_print_string>
			//error_handle(One_Wire_Reset(One_Wire_Pin));

			//error_handle(DS1821_Write_Status(One_Wire_Pin));

			//error_handle(DS1821_Start_Conversion(One_Wire_Pin));
			DS1821_Start_Conversion(One_Wire_Pin);
 8004344:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004348:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800434c:	f04f 0180 	mov.w	r1, #128	; 0x80
 8004350:	f7fb ff3e 	bl	80001d0 <DS1821_Start_Conversion>
			//delay_ms(750);

			//error_handle(DS1821_Stop_Conversion(One_Wire_Pin));
			//error_handle(DS1821_Read_Temp(&t, One_Wire_Pin));
			uart_print_string(USART1, "Температура:   ", 0);
 8004354:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004358:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800435c:	f644 21d8 	movw	r1, #19160	; 0x4ad8
 8004360:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f7fc f8ac 	bl	80004c4 <uart_print_string>
			DS1821_Read_Temp(&t, One_Wire_Pin);
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	4618      	mov	r0, r3
 8004372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004376:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800437a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800437e:	f7fb ff49 	bl	8000214 <DS1821_Read_Temp>
			uart_send_char(USART1, 8);
 8004382:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004386:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800438a:	f04f 0108 	mov.w	r1, #8
 800438e:	f7fc f881 	bl	8000494 <uart_send_char>
			uart_send_char(USART1, 8);
 8004392:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004396:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800439a:	f04f 0108 	mov.w	r1, #8
 800439e:	f7fc f879 	bl	8000494 <uart_send_char>
			uart_print_value(USART1, t);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80043a8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80043ac:	4619      	mov	r1, r3
 80043ae:	f7fc f8ab 	bl	8000508 <uart_print_value>
			uart_print_string(USART1,";",0);
 80043b2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80043b6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80043ba:	f644 21f4 	movw	r1, #19188	; 0x4af4
 80043be:	f6c0 0100 	movt	r1, #2048	; 0x800
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f7fc f87d 	bl	80004c4 <uart_print_string>
			LED_PORT->ODR |= LED_GREEN;
 80043ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80043d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80043da:	68d2      	ldr	r2, [r2, #12]
 80043dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e0:	60da      	str	r2, [r3, #12]
						//vTaskDelay(10);
			delay_ms(10);
 80043e2:	f04f 000a 	mov.w	r0, #10
 80043e6:	f7fc fa09 	bl	80007fc <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 80043ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80043f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043f6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80043fa:	68d2      	ldr	r2, [r2, #12]
 80043fc:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8004400:	60da      	str	r2, [r3, #12]
			uart_print_string(USART1, " Uptime: ", 0);
 8004402:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004406:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800440a:	f644 21f8 	movw	r1, #19192	; 0x4af8
 800440e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f7fc f855 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetHours(GetTime()));
 800441a:	f7fc fac3 	bl	80009a4 <GetTime>
 800441e:	4603      	mov	r3, r0
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc fad5 	bl	80009d0 <Time_GetHours>
 8004426:	4603      	mov	r3, r0
 8004428:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800442c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004430:	4619      	mov	r1, r3
 8004432:	f7fc f869 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, ":", 0);
 8004436:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800443a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800443e:	f644 3104 	movw	r1, #19204	; 0x4b04
 8004442:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f7fc f83b 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetMinutes(GetTime()));
 800444e:	f7fc faa9 	bl	80009a4 <GetTime>
 8004452:	4603      	mov	r3, r0
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc facf 	bl	80009f8 <Time_GetMinutes>
 800445a:	4603      	mov	r3, r0
 800445c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004460:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004464:	4619      	mov	r1, r3
 8004466:	f7fc f84f 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, ":", 0);
 800446a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800446e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004472:	f644 3104 	movw	r1, #19204	; 0x4b04
 8004476:	f6c0 0100 	movt	r1, #2048	; 0x800
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f7fc f821 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, Time_GetSeconds(GetTime()));
 8004482:	f7fc fa8f 	bl	80009a4 <GetTime>
 8004486:	4603      	mov	r3, r0
 8004488:	4618      	mov	r0, r3
 800448a:	f7fc fad5 	bl	8000a38 <Time_GetSeconds>
 800448e:	4603      	mov	r3, r0
 8004490:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004494:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004498:	4619      	mov	r1, r3
 800449a:	f7fc f835 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, " Counter: ", 0);
 800449e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80044a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044a6:	f644 3108 	movw	r1, #19208	; 0x4b08
 80044aa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f7fc f807 	bl	80004c4 <uart_print_string>
			uart_print_value(USART1, counter);
 80044b6:	f641 5364 	movw	r3, #7524	; 0x1d64
 80044ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80044c6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044ca:	4619      	mov	r1, r3
 80044cc:	f7fc f81c 	bl	8000508 <uart_print_value>
			uart_print_string(USART1, "", 1);
 80044d0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80044d4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044d8:	f644 3114 	movw	r1, #19220	; 0x4b14
 80044dc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80044e0:	f04f 0201 	mov.w	r2, #1
 80044e4:	f7fb ffee 	bl	80004c4 <uart_print_string>
			//////////////////
			vTaskDelay(1000);
 80044e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044ec:	f7fe fa76 	bl	80029dc <vTaskDelay>
	}
 80044f0:	e728      	b.n	8004344 <vTaskDS1821+0x20>
 80044f2:	bf00      	nop

080044f4 <main>:
}



int main()
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af04      	add	r7, sp, #16
	vFreeRTOSInitAll();
 80044fa:	f7ff fead 	bl	8004258 <vFreeRTOSInitAll>

	xTaskCreate( vTaskLED, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, NULL, 2,
 80044fe:	f04f 0302 	mov.w	r3, #2
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	9302      	str	r3, [sp, #8]
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	9303      	str	r3, [sp, #12]
 8004516:	f244 2099 	movw	r0, #17049	; 0x4299
 800451a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800451e:	f644 3118 	movw	r1, #19224	; 0x4b18
 8004522:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004526:	f04f 0246 	mov.w	r2, #70	; 0x46
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	f7fe f963 	bl	80027f8 <xTaskGenericCreate>
	                        ( xTaskHandle * ) NULL);
	//xTaskCreate(vTaskUSART_TX, (signed char*)"USART_TX", configMINIMAL_STACK_SIZE, NULL, 2,
      //      				( xTaskHandle * ) NULL);
	xTaskCreate( vTaskDS1821, ( signed char * ) "DS1821", configMINIMAL_STACK_SIZE, NULL, 2,
 8004532:	f04f 0302 	mov.w	r3, #2
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	9302      	str	r3, [sp, #8]
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	9303      	str	r3, [sp, #12]
 800454a:	f244 3025 	movw	r0, #17189	; 0x4325
 800454e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004552:	f644 311c 	movw	r1, #19228	; 0x4b1c
 8004556:	f6c0 0100 	movt	r1, #2048	; 0x800
 800455a:	f04f 0246 	mov.w	r2, #70	; 0x46
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	f7fe f949 	bl	80027f8 <xTaskGenericCreate>
		                    ( xTaskHandle * ) NULL);
	vTaskStartScheduler();
 8004566:	f7fe fa67 	bl	8002a38 <vTaskStartScheduler>


	for(;;)
	{
//
	}
 800456a:	e7fe      	b.n	800456a <main+0x76>

0800456c <vApplicationMallocFailedHook>:
		}
		if (err==One_Wire_Success) return 0; else return 1;//uart_print_string(USART1, "GoodLuck!",1);
}

void vApplicationMallocFailedHook( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004570:	e7fe      	b.n	8004570 <vApplicationMallocFailedHook+0x4>
 8004572:	bf00      	nop

08004574 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 800457e:	e7fe      	b.n	800457e <vApplicationStackOverflowHook+0xa>

08004580 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004586:	f7fd fba7 	bl	8001cd8 <xPortGetFreeHeapSize>
 800458a:	4603      	mov	r3, r0
 800458c:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800458e:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8004590:	f107 0708 	add.w	r7, r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UARTSend>:
*                : - ulCount  : buffer's length
* Output         : None
* Return         : None
*******************************************************************************/
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 80045a2:	e018      	b.n	80045d6 <UARTSend+0x3e>
    {
        USART_SendData(USART1, (uint16_t) *pucBuffer++);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	f102 0201 	add.w	r2, r2, #1
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80045b4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80045b8:	4619      	mov	r1, r3
 80045ba:	f7fd fa73 	bl	8001aa4 <USART_SendData>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 80045be:	bf00      	nop
 80045c0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80045c4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80045c8:	f04f 0140 	mov.w	r1, #64	; 0x40
 80045cc:	f7fd fa90 	bl	8001af0 <USART_GetFlagStatus>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f4      	beq.n	80045c0 <UARTSend+0x28>
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2300      	moveq	r3, #0
 80045de:	2301      	movne	r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80045e8:	603a      	str	r2, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1da      	bne.n	80045a4 <UARTSend+0xc>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
        {
        }
    }
}
 80045ee:	f107 0708 	add.w	r7, r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop

080045f8 <memcmp>:
 80045f8:	2a03      	cmp	r2, #3
 80045fa:	b4f0      	push	{r4, r5, r6, r7}
 80045fc:	d931      	bls.n	8004662 <memcmp+0x6a>
 80045fe:	ea41 0300 	orr.w	r3, r1, r0
 8004602:	079c      	lsls	r4, r3, #30
 8004604:	d12e      	bne.n	8004664 <memcmp+0x6c>
 8004606:	6806      	ldr	r6, [r0, #0]
 8004608:	680f      	ldr	r7, [r1, #0]
 800460a:	1f15      	subs	r5, r2, #4
 800460c:	1d03      	adds	r3, r0, #4
 800460e:	1d0c      	adds	r4, r1, #4
 8004610:	42be      	cmp	r6, r7
 8004612:	f3c5 0c80 	ubfx	ip, r5, #2, #1
 8004616:	d124      	bne.n	8004662 <memcmp+0x6a>
 8004618:	2d03      	cmp	r5, #3
 800461a:	462a      	mov	r2, r5
 800461c:	d91f      	bls.n	800465e <memcmp+0x66>
 800461e:	f1bc 0f00 	cmp.w	ip, #0
 8004622:	d008      	beq.n	8004636 <memcmp+0x3e>
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	4621      	mov	r1, r4
 800462a:	4618      	mov	r0, r3
 800462c:	3404      	adds	r4, #4
 800462e:	3304      	adds	r3, #4
 8004630:	42ae      	cmp	r6, r5
 8004632:	d011      	beq.n	8004658 <memcmp+0x60>
 8004634:	e015      	b.n	8004662 <memcmp+0x6a>
 8004636:	4621      	mov	r1, r4
 8004638:	4618      	mov	r0, r3
 800463a:	681c      	ldr	r4, [r3, #0]
 800463c:	680b      	ldr	r3, [r1, #0]
 800463e:	1d05      	adds	r5, r0, #4
 8004640:	1d0e      	adds	r6, r1, #4
 8004642:	429c      	cmp	r4, r3
 8004644:	d10d      	bne.n	8004662 <memcmp+0x6a>
 8004646:	4631      	mov	r1, r6
 8004648:	4628      	mov	r0, r5
 800464a:	682e      	ldr	r6, [r5, #0]
 800464c:	680d      	ldr	r5, [r1, #0]
 800464e:	3a04      	subs	r2, #4
 8004650:	1d03      	adds	r3, r0, #4
 8004652:	1d0c      	adds	r4, r1, #4
 8004654:	42ae      	cmp	r6, r5
 8004656:	d104      	bne.n	8004662 <memcmp+0x6a>
 8004658:	3a04      	subs	r2, #4
 800465a:	2a03      	cmp	r2, #3
 800465c:	d8eb      	bhi.n	8004636 <memcmp+0x3e>
 800465e:	4621      	mov	r1, r4
 8004660:	4618      	mov	r0, r3
 8004662:	b31a      	cbz	r2, 80046ac <memcmp+0xb4>
 8004664:	7803      	ldrb	r3, [r0, #0]
 8004666:	780c      	ldrb	r4, [r1, #0]
 8004668:	42a3      	cmp	r3, r4
 800466a:	d10a      	bne.n	8004682 <memcmp+0x8a>
 800466c:	1e55      	subs	r5, r2, #1
 800466e:	2200      	movs	r2, #0
 8004670:	07eb      	lsls	r3, r5, #31
 8004672:	d514      	bpl.n	800469e <memcmp+0xa6>
 8004674:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004678:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800467c:	2201      	movs	r2, #1
 800467e:	42a3      	cmp	r3, r4
 8004680:	d00d      	beq.n	800469e <memcmp+0xa6>
 8004682:	1b18      	subs	r0, r3, r4
 8004684:	e010      	b.n	80046a8 <memcmp+0xb0>
 8004686:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800468a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800468e:	42a3      	cmp	r3, r4
 8004690:	d1f7      	bne.n	8004682 <memcmp+0x8a>
 8004692:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004696:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800469a:	42a3      	cmp	r3, r4
 800469c:	d1f1      	bne.n	8004682 <memcmp+0x8a>
 800469e:	42aa      	cmp	r2, r5
 80046a0:	f102 0202 	add.w	r2, r2, #2
 80046a4:	d1ef      	bne.n	8004686 <memcmp+0x8e>
 80046a6:	2000      	movs	r0, #0
 80046a8:	bcf0      	pop	{r4, r5, r6, r7}
 80046aa:	4770      	bx	lr
 80046ac:	4610      	mov	r0, r2
 80046ae:	e7fb      	b.n	80046a8 <memcmp+0xb0>

080046b0 <memcpy>:
 80046b0:	2a0f      	cmp	r2, #15
 80046b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80046b6:	f240 80a1 	bls.w	80047fc <memcpy+0x14c>
 80046ba:	ea41 0300 	orr.w	r3, r1, r0
 80046be:	079b      	lsls	r3, r3, #30
 80046c0:	f040 809e 	bne.w	8004800 <memcpy+0x150>
 80046c4:	680c      	ldr	r4, [r1, #0]
 80046c6:	f1a2 0510 	sub.w	r5, r2, #16
 80046ca:	6004      	str	r4, [r0, #0]
 80046cc:	684b      	ldr	r3, [r1, #4]
 80046ce:	46ac      	mov	ip, r5
 80046d0:	6043      	str	r3, [r0, #4]
 80046d2:	688c      	ldr	r4, [r1, #8]
 80046d4:	f1bc 0f0f 	cmp.w	ip, #15
 80046d8:	6084      	str	r4, [r0, #8]
 80046da:	68cc      	ldr	r4, [r1, #12]
 80046dc:	f3c5 1500 	ubfx	r5, r5, #4, #1
 80046e0:	60c4      	str	r4, [r0, #12]
 80046e2:	f100 0310 	add.w	r3, r0, #16
 80046e6:	f101 0410 	add.w	r4, r1, #16
 80046ea:	d92b      	bls.n	8004744 <memcpy+0x94>
 80046ec:	b175      	cbz	r5, 800470c <memcpy+0x5c>
 80046ee:	6825      	ldr	r5, [r4, #0]
 80046f0:	f1ac 0c10 	sub.w	ip, ip, #16
 80046f4:	601d      	str	r5, [r3, #0]
 80046f6:	6865      	ldr	r5, [r4, #4]
 80046f8:	605d      	str	r5, [r3, #4]
 80046fa:	68a5      	ldr	r5, [r4, #8]
 80046fc:	609d      	str	r5, [r3, #8]
 80046fe:	68e5      	ldr	r5, [r4, #12]
 8004700:	3410      	adds	r4, #16
 8004702:	60dd      	str	r5, [r3, #12]
 8004704:	3310      	adds	r3, #16
 8004706:	f1bc 0f0f 	cmp.w	ip, #15
 800470a:	d91b      	bls.n	8004744 <memcpy+0x94>
 800470c:	6827      	ldr	r7, [r4, #0]
 800470e:	f104 0610 	add.w	r6, r4, #16
 8004712:	601f      	str	r7, [r3, #0]
 8004714:	6867      	ldr	r7, [r4, #4]
 8004716:	f103 0510 	add.w	r5, r3, #16
 800471a:	605f      	str	r7, [r3, #4]
 800471c:	68a7      	ldr	r7, [r4, #8]
 800471e:	f1ac 0c20 	sub.w	ip, ip, #32
 8004722:	609f      	str	r7, [r3, #8]
 8004724:	68e7      	ldr	r7, [r4, #12]
 8004726:	60df      	str	r7, [r3, #12]
 8004728:	6924      	ldr	r4, [r4, #16]
 800472a:	611c      	str	r4, [r3, #16]
 800472c:	6877      	ldr	r7, [r6, #4]
 800472e:	f106 0410 	add.w	r4, r6, #16
 8004732:	606f      	str	r7, [r5, #4]
 8004734:	68b7      	ldr	r7, [r6, #8]
 8004736:	3320      	adds	r3, #32
 8004738:	60af      	str	r7, [r5, #8]
 800473a:	68f6      	ldr	r6, [r6, #12]
 800473c:	f1bc 0f0f 	cmp.w	ip, #15
 8004740:	60ee      	str	r6, [r5, #12]
 8004742:	d8e3      	bhi.n	800470c <memcpy+0x5c>
 8004744:	f1a2 0810 	sub.w	r8, r2, #16
 8004748:	f028 030f 	bic.w	r3, r8, #15
 800474c:	f002 040f 	and.w	r4, r2, #15
 8004750:	f103 0c10 	add.w	ip, r3, #16
 8004754:	2c03      	cmp	r4, #3
 8004756:	eb00 030c 	add.w	r3, r0, ip
 800475a:	eb01 080c 	add.w	r8, r1, ip
 800475e:	d951      	bls.n	8004804 <memcpy+0x154>
 8004760:	1f21      	subs	r1, r4, #4
 8004762:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8004766:	4644      	mov	r4, r8
 8004768:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 800476c:	f854 6b04 	ldr.w	r6, [r4], #4
 8004770:	ebc8 010c 	rsb	r1, r8, ip
 8004774:	f10c 0c04 	add.w	ip, ip, #4
 8004778:	461d      	mov	r5, r3
 800477a:	4564      	cmp	r4, ip
 800477c:	f845 6b04 	str.w	r6, [r5], #4
 8004780:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8004784:	d012      	beq.n	80047ac <memcpy+0xfc>
 8004786:	b129      	cbz	r1, 8004794 <memcpy+0xe4>
 8004788:	f854 1b04 	ldr.w	r1, [r4], #4
 800478c:	4564      	cmp	r4, ip
 800478e:	f845 1b04 	str.w	r1, [r5], #4
 8004792:	d00b      	beq.n	80047ac <memcpy+0xfc>
 8004794:	4627      	mov	r7, r4
 8004796:	f857 1b04 	ldr.w	r1, [r7], #4
 800479a:	462e      	mov	r6, r5
 800479c:	f846 1b04 	str.w	r1, [r6], #4
 80047a0:	6864      	ldr	r4, [r4, #4]
 80047a2:	606c      	str	r4, [r5, #4]
 80047a4:	1d3c      	adds	r4, r7, #4
 80047a6:	1d35      	adds	r5, r6, #4
 80047a8:	4564      	cmp	r4, ip
 80047aa:	d1f3      	bne.n	8004794 <memcpy+0xe4>
 80047ac:	f109 0c01 	add.w	ip, r9, #1
 80047b0:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80047b4:	f002 0203 	and.w	r2, r2, #3
 80047b8:	eb08 0109 	add.w	r1, r8, r9
 80047bc:	444b      	add	r3, r9
 80047be:	b1d2      	cbz	r2, 80047f6 <memcpy+0x146>
 80047c0:	780d      	ldrb	r5, [r1, #0]
 80047c2:	189a      	adds	r2, r3, r2
 80047c4:	43dc      	mvns	r4, r3
 80047c6:	f803 5b01 	strb.w	r5, [r3], #1
 80047ca:	1914      	adds	r4, r2, r4
 80047cc:	4293      	cmp	r3, r2
 80047ce:	f004 0401 	and.w	r4, r4, #1
 80047d2:	d010      	beq.n	80047f6 <memcpy+0x146>
 80047d4:	b12c      	cbz	r4, 80047e2 <memcpy+0x132>
 80047d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80047da:	f803 4b01 	strb.w	r4, [r3], #1
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <memcpy+0x146>
 80047e2:	784d      	ldrb	r5, [r1, #1]
 80047e4:	461c      	mov	r4, r3
 80047e6:	f804 5b01 	strb.w	r5, [r4], #1
 80047ea:	788d      	ldrb	r5, [r1, #2]
 80047ec:	3102      	adds	r1, #2
 80047ee:	705d      	strb	r5, [r3, #1]
 80047f0:	1c63      	adds	r3, r4, #1
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d1f5      	bne.n	80047e2 <memcpy+0x132>
 80047f6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80047fa:	4770      	bx	lr
 80047fc:	4603      	mov	r3, r0
 80047fe:	e7de      	b.n	80047be <memcpy+0x10e>
 8004800:	4603      	mov	r3, r0
 8004802:	e7dd      	b.n	80047c0 <memcpy+0x110>
 8004804:	4641      	mov	r1, r8
 8004806:	4622      	mov	r2, r4
 8004808:	e7d9      	b.n	80047be <memcpy+0x10e>
 800480a:	bf00      	nop

0800480c <memset>:
 800480c:	b4f0      	push	{r4, r5, r6, r7}
 800480e:	0784      	lsls	r4, r0, #30
 8004810:	4603      	mov	r3, r0
 8004812:	f000 808d 	beq.w	8004930 <memset+0x124>
 8004816:	1e54      	subs	r4, r2, #1
 8004818:	2a00      	cmp	r2, #0
 800481a:	f000 8087 	beq.w	800492c <memset+0x120>
 800481e:	07e5      	lsls	r5, r4, #31
 8004820:	b2ce      	uxtb	r6, r1
 8004822:	d411      	bmi.n	8004848 <memset+0x3c>
 8004824:	461a      	mov	r2, r3
 8004826:	f802 6b01 	strb.w	r6, [r2], #1
 800482a:	4613      	mov	r3, r2
 800482c:	4615      	mov	r5, r2
 800482e:	0792      	lsls	r2, r2, #30
 8004830:	d010      	beq.n	8004854 <memset+0x48>
 8004832:	1e62      	subs	r2, r4, #1
 8004834:	2c00      	cmp	r4, #0
 8004836:	d079      	beq.n	800492c <memset+0x120>
 8004838:	f803 6b01 	strb.w	r6, [r3], #1
 800483c:	4614      	mov	r4, r2
 800483e:	079a      	lsls	r2, r3, #30
 8004840:	461d      	mov	r5, r3
 8004842:	d007      	beq.n	8004854 <memset+0x48>
 8004844:	3c01      	subs	r4, #1
 8004846:	e7ed      	b.n	8004824 <memset+0x18>
 8004848:	4603      	mov	r3, r0
 800484a:	f803 6b01 	strb.w	r6, [r3], #1
 800484e:	079a      	lsls	r2, r3, #30
 8004850:	461d      	mov	r5, r3
 8004852:	d1f7      	bne.n	8004844 <memset+0x38>
 8004854:	2c03      	cmp	r4, #3
 8004856:	d952      	bls.n	80048fe <memset+0xf2>
 8004858:	b2ce      	uxtb	r6, r1
 800485a:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 800485e:	2c0f      	cmp	r4, #15
 8004860:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8004864:	d92d      	bls.n	80048c2 <memset+0xb6>
 8004866:	f1a4 0210 	sub.w	r2, r4, #16
 800486a:	4617      	mov	r7, r2
 800486c:	2f0f      	cmp	r7, #15
 800486e:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	606b      	str	r3, [r5, #4]
 8004876:	60ab      	str	r3, [r5, #8]
 8004878:	60eb      	str	r3, [r5, #12]
 800487a:	f105 0210 	add.w	r2, r5, #16
 800487e:	d916      	bls.n	80048ae <memset+0xa2>
 8004880:	b13e      	cbz	r6, 8004892 <memset+0x86>
 8004882:	3f10      	subs	r7, #16
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	6053      	str	r3, [r2, #4]
 8004888:	6093      	str	r3, [r2, #8]
 800488a:	60d3      	str	r3, [r2, #12]
 800488c:	3210      	adds	r2, #16
 800488e:	2f0f      	cmp	r7, #15
 8004890:	d90d      	bls.n	80048ae <memset+0xa2>
 8004892:	3f20      	subs	r7, #32
 8004894:	f102 0610 	add.w	r6, r2, #16
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	6053      	str	r3, [r2, #4]
 800489c:	6093      	str	r3, [r2, #8]
 800489e:	60d3      	str	r3, [r2, #12]
 80048a0:	6113      	str	r3, [r2, #16]
 80048a2:	6153      	str	r3, [r2, #20]
 80048a4:	6193      	str	r3, [r2, #24]
 80048a6:	61d3      	str	r3, [r2, #28]
 80048a8:	3220      	adds	r2, #32
 80048aa:	2f0f      	cmp	r7, #15
 80048ac:	d8f1      	bhi.n	8004892 <memset+0x86>
 80048ae:	f1a4 0210 	sub.w	r2, r4, #16
 80048b2:	f022 020f 	bic.w	r2, r2, #15
 80048b6:	f004 040f 	and.w	r4, r4, #15
 80048ba:	3210      	adds	r2, #16
 80048bc:	2c03      	cmp	r4, #3
 80048be:	4415      	add	r5, r2
 80048c0:	d91d      	bls.n	80048fe <memset+0xf2>
 80048c2:	1f27      	subs	r7, r4, #4
 80048c4:	463e      	mov	r6, r7
 80048c6:	462a      	mov	r2, r5
 80048c8:	2e03      	cmp	r6, #3
 80048ca:	f842 3b04 	str.w	r3, [r2], #4
 80048ce:	f3c7 0780 	ubfx	r7, r7, #2, #1
 80048d2:	d90d      	bls.n	80048f0 <memset+0xe4>
 80048d4:	b127      	cbz	r7, 80048e0 <memset+0xd4>
 80048d6:	3e04      	subs	r6, #4
 80048d8:	2e03      	cmp	r6, #3
 80048da:	f842 3b04 	str.w	r3, [r2], #4
 80048de:	d907      	bls.n	80048f0 <memset+0xe4>
 80048e0:	4617      	mov	r7, r2
 80048e2:	f847 3b04 	str.w	r3, [r7], #4
 80048e6:	3e08      	subs	r6, #8
 80048e8:	6053      	str	r3, [r2, #4]
 80048ea:	1d3a      	adds	r2, r7, #4
 80048ec:	2e03      	cmp	r6, #3
 80048ee:	d8f7      	bhi.n	80048e0 <memset+0xd4>
 80048f0:	1f23      	subs	r3, r4, #4
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	1d13      	adds	r3, r2, #4
 80048f8:	f004 0403 	and.w	r4, r4, #3
 80048fc:	18ed      	adds	r5, r5, r3
 80048fe:	b1ac      	cbz	r4, 800492c <memset+0x120>
 8004900:	b2c9      	uxtb	r1, r1
 8004902:	43ea      	mvns	r2, r5
 8004904:	192c      	adds	r4, r5, r4
 8004906:	f805 1b01 	strb.w	r1, [r5], #1
 800490a:	18a3      	adds	r3, r4, r2
 800490c:	42a5      	cmp	r5, r4
 800490e:	f003 0201 	and.w	r2, r3, #1
 8004912:	d00b      	beq.n	800492c <memset+0x120>
 8004914:	b11a      	cbz	r2, 800491e <memset+0x112>
 8004916:	f805 1b01 	strb.w	r1, [r5], #1
 800491a:	42a5      	cmp	r5, r4
 800491c:	d006      	beq.n	800492c <memset+0x120>
 800491e:	462b      	mov	r3, r5
 8004920:	f803 1b01 	strb.w	r1, [r3], #1
 8004924:	7069      	strb	r1, [r5, #1]
 8004926:	1c5d      	adds	r5, r3, #1
 8004928:	42a5      	cmp	r5, r4
 800492a:	d1f8      	bne.n	800491e <memset+0x112>
 800492c:	bcf0      	pop	{r4, r5, r6, r7}
 800492e:	4770      	bx	lr
 8004930:	4605      	mov	r5, r0
 8004932:	4614      	mov	r4, r2
 8004934:	e78e      	b.n	8004854 <memset+0x48>
 8004936:	bf00      	nop

08004938 <strncpy>:
 8004938:	ea41 0300 	orr.w	r3, r1, r0
 800493c:	079b      	lsls	r3, r3, #30
 800493e:	b4f0      	push	{r4, r5, r6, r7}
 8004940:	d174      	bne.n	8004a2c <strncpy+0xf4>
 8004942:	2a03      	cmp	r2, #3
 8004944:	d972      	bls.n	8004a2c <strncpy+0xf4>
 8004946:	460c      	mov	r4, r1
 8004948:	f854 5b04 	ldr.w	r5, [r4], #4
 800494c:	1f16      	subs	r6, r2, #4
 800494e:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8004952:	ea27 0705 	bic.w	r7, r7, r5
 8004956:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800495a:	4603      	mov	r3, r0
 800495c:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 8004960:	d131      	bne.n	80049c6 <strncpy+0x8e>
 8004962:	4603      	mov	r3, r0
 8004964:	2e03      	cmp	r6, #3
 8004966:	4632      	mov	r2, r6
 8004968:	f843 5b04 	str.w	r5, [r3], #4
 800496c:	d92a      	bls.n	80049c4 <strncpy+0x8c>
 800496e:	f1bc 0f00 	cmp.w	ip, #0
 8004972:	d00a      	beq.n	800498a <strncpy+0x52>
 8004974:	4621      	mov	r1, r4
 8004976:	f854 5b04 	ldr.w	r5, [r4], #4
 800497a:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800497e:	ea26 0605 	bic.w	r6, r6, r5
 8004982:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8004986:	d018      	beq.n	80049ba <strncpy+0x82>
 8004988:	e01d      	b.n	80049c6 <strncpy+0x8e>
 800498a:	4626      	mov	r6, r4
 800498c:	f856 5b04 	ldr.w	r5, [r6], #4
 8004990:	4621      	mov	r1, r4
 8004992:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8004996:	ea27 0705 	bic.w	r7, r7, r5
 800499a:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800499e:	d112      	bne.n	80049c6 <strncpy+0x8e>
 80049a0:	f843 5b04 	str.w	r5, [r3], #4
 80049a4:	6865      	ldr	r5, [r4, #4]
 80049a6:	4631      	mov	r1, r6
 80049a8:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 80049ac:	ea26 0605 	bic.w	r6, r6, r5
 80049b0:	3a04      	subs	r2, #4
 80049b2:	1d0c      	adds	r4, r1, #4
 80049b4:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80049b8:	d105      	bne.n	80049c6 <strncpy+0x8e>
 80049ba:	3a04      	subs	r2, #4
 80049bc:	2a03      	cmp	r2, #3
 80049be:	f843 5b04 	str.w	r5, [r3], #4
 80049c2:	d8e2      	bhi.n	800498a <strncpy+0x52>
 80049c4:	4621      	mov	r1, r4
 80049c6:	b37a      	cbz	r2, 8004a28 <strncpy+0xf0>
 80049c8:	780d      	ldrb	r5, [r1, #0]
 80049ca:	3a01      	subs	r2, #1
 80049cc:	f803 5b01 	strb.w	r5, [r3], #1
 80049d0:	b19d      	cbz	r5, 80049fa <strncpy+0xc2>
 80049d2:	f012 0f01 	tst.w	r2, #1
 80049d6:	461c      	mov	r4, r3
 80049d8:	d12a      	bne.n	8004a30 <strncpy+0xf8>
 80049da:	4623      	mov	r3, r4
 80049dc:	b322      	cbz	r2, 8004a28 <strncpy+0xf0>
 80049de:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80049e2:	3a01      	subs	r2, #1
 80049e4:	f803 5b01 	strb.w	r5, [r3], #1
 80049e8:	b13d      	cbz	r5, 80049fa <strncpy+0xc2>
 80049ea:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80049ee:	3a01      	subs	r2, #1
 80049f0:	7065      	strb	r5, [r4, #1]
 80049f2:	1c5c      	adds	r4, r3, #1
 80049f4:	4623      	mov	r3, r4
 80049f6:	2d00      	cmp	r5, #0
 80049f8:	d1ef      	bne.n	80049da <strncpy+0xa2>
 80049fa:	b1aa      	cbz	r2, 8004a28 <strncpy+0xf0>
 80049fc:	2100      	movs	r1, #0
 80049fe:	189c      	adds	r4, r3, r2
 8004a00:	43da      	mvns	r2, r3
 8004a02:	f803 1b01 	strb.w	r1, [r3], #1
 8004a06:	18a2      	adds	r2, r4, r2
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	f002 0201 	and.w	r2, r2, #1
 8004a0e:	d00b      	beq.n	8004a28 <strncpy+0xf0>
 8004a10:	b11a      	cbz	r2, 8004a1a <strncpy+0xe2>
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	d006      	beq.n	8004a28 <strncpy+0xf0>
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f802 1b01 	strb.w	r1, [r2], #1
 8004a20:	7059      	strb	r1, [r3, #1]
 8004a22:	1c53      	adds	r3, r2, #1
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	d1f8      	bne.n	8004a1a <strncpy+0xe2>
 8004a28:	bcf0      	pop	{r4, r5, r6, r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	e7ca      	b.n	80049c6 <strncpy+0x8e>
 8004a30:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8004a34:	461c      	mov	r4, r3
 8004a36:	f804 5b01 	strb.w	r5, [r4], #1
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	2d00      	cmp	r5, #0
 8004a40:	d1cb      	bne.n	80049da <strncpy+0xa2>
 8004a42:	e7da      	b.n	80049fa <strncpy+0xc2>
 8004a44:	33323130 	.word	0x33323130
 8004a48:	37363534 	.word	0x37363534
 8004a4c:	00003938 	.word	0x00003938
 8004a50:	33323130 	.word	0x33323130
 8004a54:	37363534 	.word	0x37363534
 8004a58:	42413938 	.word	0x42413938
 8004a5c:	46454443 	.word	0x46454443
 8004a60:	00000000 	.word	0x00000000
 8004a64:	454c4449 	.word	0x454c4449
 8004a68:	00000000 	.word	0x00000000
 8004a6c:	20726d54 	.word	0x20726d54
 8004a70:	00637653 	.word	0x00637653
 8004a74:	3d3d3d0a 	.word	0x3d3d3d0a
 8004a78:	55203d3d 	.word	0x55203d3d
 8004a7c:	31545241 	.word	0x31545241
 8004a80:	d0b8d020 	.word	0xd0b8d020
 8004a84:	d1b8d0bd 	.word	0xd1b8d0bd
 8004a88:	d0b8d086 	.word	0xd0b8d086
 8004a8c:	d0bbd0b0 	.word	0xd0bbd0b0
 8004a90:	d0b7d0b8 	.word	0xd0b7d0b8
 8004a94:	d080d1b8 	.word	0xd080d1b8
 8004a98:	d0b2d0be 	.word	0xd0b2d0be
 8004a9c:	20bdd0b0 	.word	0x20bdd0b0
 8004aa0:	3d3d3d3d 	.word	0x3d3d3d3d
 8004aa4:	0000003d 	.word	0x0000003d
 8004aa8:	8bd1a2d0 	.word	0x8bd1a2d0
 8004aac:	86d1bdd0 	.word	0x86d1bdd0
 8004ab0:	00000000 	.word	0x00000000
 8004ab4:	86d1a1d0 	.word	0x86d1a1d0
 8004ab8:	bad083d1 	.word	0xbad083d1
 8004abc:	202cbed0 	.word	0x202cbed0
 8004ac0:	82d1bed0 	.word	0x82d1bed0
 8004ac4:	b0d0bbd0 	.word	0xb0d0bbd0
 8004ac8:	8cd1b4d0 	.word	0x8cd1b4d0
 8004acc:	d0bcd020 	.word	0xd0bcd020
 8004ad0:	d1bdd0b5 	.word	0xd1bdd0b5
 8004ad4:	002e2e8f 	.word	0x002e2e8f
 8004ad8:	b5d0a2d0 	.word	0xb5d0a2d0
 8004adc:	bfd0bcd0 	.word	0xbfd0bcd0
 8004ae0:	80d1b5d0 	.word	0x80d1b5d0
 8004ae4:	82d1b0d0 	.word	0x82d1b0d0
 8004ae8:	80d183d1 	.word	0x80d183d1
 8004aec:	203ab0d0 	.word	0x203ab0d0
 8004af0:	00002020 	.word	0x00002020
 8004af4:	0000003b 	.word	0x0000003b
 8004af8:	74705520 	.word	0x74705520
 8004afc:	3a656d69 	.word	0x3a656d69
 8004b00:	00000020 	.word	0x00000020
 8004b04:	0000003a 	.word	0x0000003a
 8004b08:	756f4320 	.word	0x756f4320
 8004b0c:	7265746e 	.word	0x7265746e
 8004b10:	0000203a 	.word	0x0000203a
 8004b14:	00000000 	.word	0x00000000
 8004b18:	0044454c 	.word	0x0044454c
 8004b1c:	38315344 	.word	0x38315344
 8004b20:	00003132 	.word	0x00003132
 8004b24:	63637553 	.word	0x63637553
 8004b28:	21737365 	.word	0x21737365
 8004b2c:	6f6f4720 	.word	0x6f6f4720
 8004b30:	63754c64 	.word	0x63754c64
 8004b34:	0000216b 	.word	0x0000216b
 8004b38:	65206f4e 	.word	0x65206f4e
 8004b3c:	206f6863 	.word	0x206f6863
 8004b40:	6d6f7266 	.word	0x6d6f7266
 8004b44:	76656420 	.word	0x76656420
 8004b48:	21656369 	.word	0x21656369
 8004b4c:	00000000 	.word	0x00000000
 8004b50:	206e6950 	.word	0x206e6950
 8004b54:	20574f4c 	.word	0x20574f4c
 8004b58:	6f727265 	.word	0x6f727265
 8004b5c:	00002172 	.word	0x00002172
 8004b60:	20435243 	.word	0x20435243
 8004b64:	20746f6e 	.word	0x20746f6e
 8004b68:	6374616d 	.word	0x6374616d
 8004b6c:	00002168 	.word	0x00002168

08004b70 <ucExpectedStackBytes.5898>:
 8004b70:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8004b80:	a5a5a5a5                                ....
