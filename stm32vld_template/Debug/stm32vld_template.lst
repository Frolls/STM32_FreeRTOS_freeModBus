
stm32vld_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000441c  080001d0  080001d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000031  080045ec  080045ec  00010020  2**0
                  CONTENTS, READONLY
  3 .data         00000020  20000000  08004af0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001d58  20000020  08004b10  00010020  2**2
                  ALLOC
  5 ._user_heap_stack 00000100  20001d78  08006868  00010020  2**0
                  ALLOC
  6 .debug_info   00009378  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dd2  00000000  00000000  000193c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000472c  00000000  00000000  0001b19b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ca8  00000000  00000000  0001f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b50  00000000  00000000  00020570  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000ce9f  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000064dc  00000000  00000000  0002df5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00046ee7  00000000  00000000  0003443b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000070  00000000  00000000  0007b322  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002878  00000000  00000000  0007b394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <DS1821_Start_Conversion>:
 *      Author: frolls
 */
#include "ds1821.h"

unsigned char DS1821_Start_Conversion (GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
	unsigned char cnt;
	cnt=One_Wire_Reset(GPIOx, PINx);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	4619      	mov	r1, r3
 80001e2:	f000 f843 	bl	800026c <One_Wire_Reset>
 80001e6:	4603      	mov	r3, r0
 80001e8:	73fb      	strb	r3, [r7, #15]
	if (cnt!=One_Wire_Success) return cnt;
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <DS1821_Start_Conversion+0x24>
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	e009      	b.n	8000208 <DS1821_Start_Conversion+0x38>
	One_Wire_Write_Byte(DS1821_START_CONVERT_T,GPIOx, PINx);
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	f04f 00ee 	mov.w	r0, #238	; 0xee
 80001fc:	6879      	ldr	r1, [r7, #4]
 80001fe:	461a      	mov	r2, r3
 8000200:	f000 f880 	bl	8000304 <One_Wire_Write_Byte>
	return One_Wire_Success;
 8000204:	f04f 0300 	mov.w	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	f107 0710 	add.w	r7, r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop

08000214 <DS1821_Read_Temp>:
	One_Wire_Write_Byte(DS1821_STOP_CONVERT_T,GPIOx, PINx);
	return One_Wire_Success;
}

unsigned char DS1821_Read_Temp(unsigned int * temperature, GPIO_TypeDef * GPIOx, unsigned long PINx)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
	unsigned char tmp;
	tmp=One_Wire_Reset(GPIOx, PINx);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	b29b      	uxth	r3, r3
 8000224:	68b8      	ldr	r0, [r7, #8]
 8000226:	4619      	mov	r1, r3
 8000228:	f000 f820 	bl	800026c <One_Wire_Reset>
 800022c:	4603      	mov	r3, r0
 800022e:	75fb      	strb	r3, [r7, #23]
	if (tmp!=One_Wire_Success) return tmp;
 8000230:	7dfb      	ldrb	r3, [r7, #23]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <DS1821_Read_Temp+0x26>
 8000236:	7dfb      	ldrb	r3, [r7, #23]
 8000238:	e013      	b.n	8000262 <DS1821_Read_Temp+0x4e>
	One_Wire_Write_Byte(DS1821_READ_TEMPERATURE, GPIOx, PINx);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	b29b      	uxth	r3, r3
 800023e:	f04f 00aa 	mov.w	r0, #170	; 0xaa
 8000242:	68b9      	ldr	r1, [r7, #8]
 8000244:	461a      	mov	r2, r3
 8000246:	f000 f85d 	bl	8000304 <One_Wire_Write_Byte>
	* temperature = One_Wire_Read_Byte(GPIOx, PINx);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	b29b      	uxth	r3, r3
 800024e:	68b8      	ldr	r0, [r7, #8]
 8000250:	4619      	mov	r1, r3
 8000252:	f000 f8b9 	bl	80003c8 <One_Wire_Read_Byte>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]
	return One_Wire_Success;
 800025e:	f04f 0300 	mov.w	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	f107 0718 	add.w	r7, r7, #24
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <One_Wire_Reset>:
 */

#include "oneWire.h"

unsigned int One_Wire_Reset(GPIO_TypeDef * GPIOx, u16 PINx)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	unsigned int tmp;
	PIN_IN(GPIOx, PINx);
 8000278:	887b      	ldrh	r3, [r7, #2]
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	4619      	mov	r1, r3
 800027e:	f000 f9e5 	bl	800064c <PIN_IN>
	if ((PIN_SYG(GPIOx, PINx))==0)	return One_Wire_Bus_Low_Error;
 8000282:	887b      	ldrh	r3, [r7, #2]
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	4619      	mov	r1, r3
 8000288:	f000 f9c8 	bl	800061c <PIN_SYG>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d102      	bne.n	8000298 <One_Wire_Reset+0x2c>
 8000292:	f04f 0302 	mov.w	r3, #2
 8000296:	e02f      	b.n	80002f8 <One_Wire_Reset+0x8c>
	PIN_OUT_PP(GPIOx, PINx);
 8000298:	887b      	ldrh	r3, [r7, #2]
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	4619      	mov	r1, r3
 800029e:	f000 f9ed 	bl	800067c <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 80002a2:	887b      	ldrh	r3, [r7, #2]
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	4619      	mov	r1, r3
 80002a8:	f000 f9aa 	bl	8000600 <PIN_OFF>
	delay_us(Time_Reset_Low);
 80002ac:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80002b0:	f000 fa8c 	bl	80007cc <delay_us>
	PIN_ON(GPIOx, PINx);
 80002b4:	887b      	ldrh	r3, [r7, #2]
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	4619      	mov	r1, r3
 80002ba:	f000 f993 	bl	80005e4 <PIN_ON>
	PIN_IN(GPIOx, PINx);
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	4619      	mov	r1, r3
 80002c4:	f000 f9c2 	bl	800064c <PIN_IN>
	delay_us(Time_Pulse_Delay_High);
 80002c8:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80002cc:	f000 fa7e 	bl	80007cc <delay_us>
	if ((PIN_SYG(GPIOx, PINx))==0) tmp=One_Wire_Success;
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	4619      	mov	r1, r3
 80002d6:	f000 f9a1 	bl	800061c <PIN_SYG>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <One_Wire_Reset+0x7c>
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	e002      	b.n	80002ee <One_Wire_Reset+0x82>
		else tmp=One_Wire_Error_No_Echo;
 80002e8:	f04f 0301 	mov.w	r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
	delay_us(Time_After_Reset);
 80002ee:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80002f2:	f000 fa6b 	bl	80007cc <delay_us>
	return tmp;
 80002f6:	68fb      	ldr	r3, [r7, #12]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	f107 0710 	add.w	r7, r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop

08000304 <One_Wire_Write_Byte>:

void One_Wire_Write_Byte(unsigned char Byte,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6039      	str	r1, [r7, #0]
 800030c:	4613      	mov	r3, r2
 800030e:	4602      	mov	r2, r0
 8000310:	71fa      	strb	r2, [r7, #7]
 8000312:	80bb      	strh	r3, [r7, #4]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++) One_Wire_Write_Bit(Byte&(1<<cnt),GPIOx, PINx);
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e013      	b.n	8000344 <One_Wire_Write_Byte+0x40>
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f04f 0201 	mov.w	r2, #1
 8000322:	fa02 f303 	lsl.w	r3, r2, r3
 8000326:	b2da      	uxtb	r2, r3
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4013      	ands	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	b2da      	uxtb	r2, r3
 8000330:	88bb      	ldrh	r3, [r7, #4]
 8000332:	4610      	mov	r0, r2
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	f000 f80c 	bl	8000354 <One_Wire_Write_Bit>
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	f103 0301 	add.w	r3, r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	2b08      	cmp	r3, #8
 8000348:	d1e8      	bne.n	800031c <One_Wire_Write_Byte+0x18>
}
 800034a:	f107 0710 	add.w	r7, r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop

08000354 <One_Wire_Write_Bit>:

void One_Wire_Write_Bit (unsigned char Bit,GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6039      	str	r1, [r7, #0]
 800035c:	4613      	mov	r3, r2
 800035e:	4602      	mov	r2, r0
 8000360:	71fa      	strb	r2, [r7, #7]
 8000362:	80bb      	strh	r3, [r7, #4]
	PIN_OUT_PP(GPIOx, PINx);
 8000364:	88bb      	ldrh	r3, [r7, #4]
 8000366:	6838      	ldr	r0, [r7, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	f000 f987 	bl	800067c <PIN_OUT_PP>
	PIN_OFF(GPIOx, PINx);
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	6838      	ldr	r0, [r7, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	f000 f944 	bl	8000600 <PIN_OFF>
	if (Bit==0)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d10d      	bne.n	800039a <One_Wire_Write_Bit+0x46>
	{
		delay_us(Time_Pulse_Delay_High);
 800037e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000382:	f000 fa23 	bl	80007cc <delay_us>
		PIN_ON(GPIOx, PINx);
 8000386:	88bb      	ldrh	r3, [r7, #4]
 8000388:	6838      	ldr	r0, [r7, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	f000 f92a 	bl	80005e4 <PIN_ON>
		delay_us(Time_Pulse_Delay_Low);
 8000390:	f04f 000a 	mov.w	r0, #10
 8000394:	f000 fa1a 	bl	80007cc <delay_us>
 8000398:	e00c      	b.n	80003b4 <One_Wire_Write_Bit+0x60>
	}
	else
	{
		delay_us(Time_Pulse_Delay_Low);
 800039a:	f04f 000a 	mov.w	r0, #10
 800039e:	f000 fa15 	bl	80007cc <delay_us>
		PIN_ON(GPIOx, PINx);
 80003a2:	88bb      	ldrh	r3, [r7, #4]
 80003a4:	6838      	ldr	r0, [r7, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	f000 f91c 	bl	80005e4 <PIN_ON>
		delay_us(Time_Pulse_Delay_High);
 80003ac:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80003b0:	f000 fa0c 	bl	80007cc <delay_us>
	}
	PIN_IN(GPIOx, PINx);
 80003b4:	88bb      	ldrh	r3, [r7, #4]
 80003b6:	6838      	ldr	r0, [r7, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	f000 f947 	bl	800064c <PIN_IN>
}
 80003be:	f107 0708 	add.w	r7, r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop

080003c8 <One_Wire_Read_Byte>:

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
	unsigned char tmp=0;
 80003d4:	f04f 0300 	mov.w	r3, #0
 80003d8:	73fb      	strb	r3, [r7, #15]
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 80003da:	f04f 0300 	mov.w	r3, #0
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	e015      	b.n	800040e <One_Wire_Read_Byte+0x46>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
 80003e2:	887b      	ldrh	r3, [r7, #2]
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	4619      	mov	r1, r3
 80003e8:	f000 f81e 	bl	8000428 <One_Wire_Read_Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d009      	beq.n	8000406 <One_Wire_Read_Byte+0x3e>
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	f04f 0201 	mov.w	r2, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	4313      	orrs	r3, r2
 8000402:	b2db      	uxtb	r3, r3
 8000404:	73fb      	strb	r3, [r7, #15]

unsigned char One_Wire_Read_Byte(GPIO_TypeDef * GPIOx, u16 PINx)
{
	unsigned char tmp=0;
	unsigned char cnt;
	for (cnt=0;cnt!=8;cnt++)
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	f103 0301 	add.w	r3, r3, #1
 800040c:	73bb      	strb	r3, [r7, #14]
 800040e:	7bbb      	ldrb	r3, [r7, #14]
 8000410:	2b08      	cmp	r3, #8
 8000412:	d1e6      	bne.n	80003e2 <One_Wire_Read_Byte+0x1a>
		if (One_Wire_Read_Bit(GPIOx, PINx)!=0)	tmp|=(1<<cnt);
	delay_us(Time_Pulse_Delay_High);
 8000414:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000418:	f000 f9d8 	bl	80007cc <delay_us>
	return tmp;
 800041c:	7bfb      	ldrb	r3, [r7, #15]
}
 800041e:	4618      	mov	r0, r3
 8000420:	f107 0710 	add.w	r7, r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <One_Wire_Read_Bit>:

unsigned char One_Wire_Read_Bit (GPIO_TypeDef * GPIOx, u16 PINx)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	807b      	strh	r3, [r7, #2]
		unsigned char tmp;
	 	PIN_OUT_PP(GPIOx, PINx);
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	4619      	mov	r1, r3
 800043a:	f000 f91f 	bl	800067c <PIN_OUT_PP>
		PIN_OFF(GPIOx, PINx);
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	f000 f8dc 	bl	8000600 <PIN_OFF>
		delay_us(Time_Hold_Down);
 8000448:	f04f 0002 	mov.w	r0, #2
 800044c:	f000 f9be 	bl	80007cc <delay_us>
		PIN_IN(GPIOx, PINx);
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	4619      	mov	r1, r3
 8000456:	f000 f8f9 	bl	800064c <PIN_IN>
		delay_us(Time_Pulse_Delay_Low);
 800045a:	f04f 000a 	mov.w	r0, #10
 800045e:	f000 f9b5 	bl	80007cc <delay_us>
		if ((PIN_SYG(GPIOx, PINx))!=0)	tmp = 1;
 8000462:	887b      	ldrh	r3, [r7, #2]
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	4619      	mov	r1, r3
 8000468:	f000 f8d8 	bl	800061c <PIN_SYG>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d003      	beq.n	800047a <One_Wire_Read_Bit+0x52>
 8000472:	f04f 0301 	mov.w	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e002      	b.n	8000480 <One_Wire_Read_Bit+0x58>
			else tmp = 0;
 800047a:	f04f 0300 	mov.w	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
		delay_us(Time_Pulse_Delay_High);
 8000480:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8000484:	f000 f9a2 	bl	80007cc <delay_us>
		return tmp;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	f107 0710 	add.w	r7, r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <uart_send_char>:
 *  Created on: 22.03.2013
 *      Author: frolls
 */
#include "serial.h"
void uart_send_char (USART_TypeDef * USARTx, char dat)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	while (!(USARTx->SR & USART_SR_TXE)) {}
 80004a0:	bf00      	nop
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f8      	beq.n	80004a2 <uart_send_char+0xe>
  	USART_SendData(USARTx,dat);
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4619      	mov	r1, r3
 80004b8:	f001 f8d2 	bl	8001660 <USART_SendData>
}
 80004bc:	f107 0708 	add.w	r7, r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <uart_print_string>:

void uart_print_string(USART_TypeDef * USARTx, char * string, char newline)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	4613      	mov	r3, r2
 80004d0:	71fb      	strb	r3, [r7, #7]
	while (*string != 0x00){ uart_send_char(USARTx, *string++);}
 80004d2:	e009      	b.n	80004e8 <uart_print_string+0x24>
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	f102 0201 	add.w	r2, r2, #1
 80004de:	60ba      	str	r2, [r7, #8]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	4619      	mov	r1, r3
 80004e4:	f7ff ffd6 	bl	8000494 <uart_send_char>
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1f1      	bne.n	80004d4 <uart_print_string+0x10>
	if (newline !=0 ){
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d004      	beq.n	8000500 <uart_print_string+0x3c>
		uart_send_char(USARTx, '\n');
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f04f 010a 	mov.w	r1, #10
 80004fc:	f7ff ffca 	bl	8000494 <uart_send_char>
		//uart_send_char(USARTx, 13);
	}
}
 8000500:	f107 0710 	add.w	r7, r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <uart_print_value>:

void uart_print_value(USART_TypeDef * USARTx, long val)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	char buffer[10] = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	f103 0304 	add.w	r3, r3, #4
 8000520:	f04f 0200 	mov.w	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	f103 0304 	add.w	r3, r3, #4
 800052a:	f04f 0200 	mov.w	r2, #0
 800052e:	801a      	strh	r2, [r3, #0]
 8000530:	f103 0302 	add.w	r3, r3, #2
	char * head = buffer;
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	617b      	str	r3, [r7, #20]
	char cnt=0;
 800053a:	f04f 0300 	mov.w	r3, #0
 800053e:	74fb      	strb	r3, [r7, #19]
	if (val!=0)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d045      	beq.n	80005d2 <uart_print_value+0xca>
	{
		while( val )
 8000546:	e02e      	b.n	80005a6 <uart_print_value+0x9e>
		{
    		*head++ = (val % 10)["0123456789"];
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	f246 6367 	movw	r3, #26215	; 0x6667
 800054e:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000552:	fb83 2301 	smull	r2, r3, r3, r1
 8000556:	ea4f 02a3 	mov.w	r2, r3, asr #2
 800055a:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800055e:	1ad2      	subs	r2, r2, r3
 8000560:	4613      	mov	r3, r2
 8000562:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000566:	189b      	adds	r3, r3, r2
 8000568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	f244 43d0 	movw	r3, #17616	; 0x44d0
 8000572:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000576:	5c9a      	ldrb	r2, [r3, r2]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	f103 0301 	add.w	r3, r3, #1
 8000582:	617b      	str	r3, [r7, #20]
    		val /= 10;
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	f246 6367 	movw	r3, #26215	; 0x6667
 800058a:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800058e:	fb83 1302 	smull	r1, r3, r3, r2
 8000592:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000596:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800059a:	1acb      	subs	r3, r1, r3
 800059c:	603b      	str	r3, [r7, #0]
			cnt++;
 800059e:	7cfb      	ldrb	r3, [r7, #19]
 80005a0:	f103 0301 	add.w	r3, r3, #1
 80005a4:	74fb      	strb	r3, [r7, #19]
	char buffer[10] = {0};
	char * head = buffer;
	char cnt=0;
	if (val!=0)
	{
		while( val )
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1cd      	bne.n	8000548 <uart_print_value+0x40>
		{
    		*head++ = (val % 10)["0123456789"];
    		val /= 10;
			cnt++;
		}
		while (cnt!=0){ cnt--; uart_send_char(USARTx, (buffer[cnt])); }
 80005ac:	e00d      	b.n	80005ca <uart_print_value+0xc2>
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
 80005b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80005b4:	74fb      	strb	r3, [r7, #19]
 80005b6:	7cfb      	ldrb	r3, [r7, #19]
 80005b8:	f107 0218 	add.w	r2, r7, #24
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f7ff ff65 	bl	8000494 <uart_send_char>
 80005ca:	7cfb      	ldrb	r3, [r7, #19]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1ee      	bne.n	80005ae <uart_print_value+0xa6>
 80005d0:	e004      	b.n	80005dc <uart_print_value+0xd4>
	}
	else
	{
		uart_send_char(USARTx, ('0'));
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f04f 0130 	mov.w	r1, #48	; 0x30
 80005d8:	f7ff ff5c 	bl	8000494 <uart_send_char>
	}
}
 80005dc:	f107 0718 	add.w	r7, r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <PIN_ON>:

#include "stm32_GPIO.h"
#include "stm32f10x_gpio.h"

void PIN_ON(GPIO_TypeDef * GPIOx,u16 PINx)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR=PINx;
 80005f0:	887a      	ldrh	r2, [r7, #2]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	611a      	str	r2, [r3, #16]
	//GPIOx->ODR=GPIOx->IDR|(PINx);
}
 80005f6:	f107 070c 	add.w	r7, r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <PIN_OFF>:

void PIN_OFF(GPIO_TypeDef * GPIOx,u16 PINx)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	GPIOx->BRR=PINx;
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	615a      	str	r2, [r3, #20]
	//GPIOx->ODR=GPIOx->IDR&(~(PINx));
}
 8000612:	f107 070c 	add.w	r7, r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <PIN_SYG>:

u8 PIN_SYG(GPIO_TypeDef * GPIOx, u16 PINx)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR&PINx)!=0)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	887b      	ldrh	r3, [r7, #2]
 800062e:	4013      	ands	r3, r2
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <PIN_SYG+0x1e>
	{return 1;}
 8000634:	f04f 0301 	mov.w	r3, #1
 8000638:	e001      	b.n	800063e <PIN_SYG+0x22>
	else
	{return 0;}
 800063a:	f04f 0300 	mov.w	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	f107 070c 	add.w	r7, r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <PIN_IN>:

void PIN_IN (GPIO_TypeDef * GPIOx,u16 PINx)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 800065c:	f04f 0303 	mov.w	r3, #3
 8000660:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 8000662:	f04f 0304 	mov.w	r3, #4
 8000666:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	4619      	mov	r1, r3
 8000670:	f000 fa2e 	bl	8000ad0 <GPIO_Init>
}
 8000674:	f107 0710 	add.w	r7, r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <PIN_OUT_PP>:

void PIN_OUT_PP (GPIO_TypeDef * GPIOx,u16 PINx)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin=PINx;
 8000688:	887b      	ldrh	r3, [r7, #2]
 800068a:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 800068c:	f04f 0303 	mov.w	r3, #3
 8000690:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_Out_PP;
 8000692:	f04f 0310 	mov.w	r3, #16
 8000696:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	4619      	mov	r1, r3
 80006a0:	f000 fa16 	bl	8000ad0 <GPIO_Init>
}
 80006a4:	f107 0710 	add.w	r7, r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <TIM6Init>:
 *      Author: frolls
 */
#include "timer6.h"

void TIM6Init()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Не забываем затактировать таймер */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80006b0:	f04f 0010 	mov.w	r0, #16
 80006b4:	f04f 0101 	mov.w	r1, #1
 80006b8:	f000 fda8 	bl	800120c <RCC_APB1PeriphClockCmd>

  //uart_print_string(USART1, "TIM6 initialized!", 1);
  //uart_print_string(USART1, "TIM_TimeBaseStructure.TIM_Prescaler: ", 0);
  //uart_print_value(USART1, TIM_TimeBaseStructure.TIM_Prescaler);
  //uart_print_string(USART1, "", 1);
}
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop

080006c0 <TIM6_DAC_IRQHandler>:
}

volatile uint8_t delay_end = 0;

void TIM6_DAC_IRQHandler()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Так как этот обработчик вызывается и для ЦАП, нужно проверять,
   * произошло ли прерывание по переполнению счётчика таймера TIM6.
   */
	if(TIM_GetITStatus(TIM6, TIM_FLAG_Update)!=RESET)
 80006c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006cc:	f04f 0101 	mov.w	r1, #1
 80006d0:	f000 fe3c 	bl	800134c <TIM_GetITStatus>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d01e      	beq.n	8000718 <TIM6_DAC_IRQHandler+0x58>
	  {
	   TIM_ClearITPendingBit(TIM6, TIM_FLAG_Update);
 80006da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006e2:	f04f 0101 	mov.w	r1, #1
 80006e6:	f000 fe61 	bl	80013ac <TIM_ClearITPendingBit>
	   TIM_Cmd(TIM6, DISABLE);
 80006ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006ee:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006f2:	f04f 0100 	mov.w	r1, #0
 80006f6:	f000 fdfb 	bl	80012f0 <TIM_Cmd>
	   TIM_SetCounter(TIM6, 0);
 80006fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006fe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000702:	f04f 0100 	mov.w	r1, #0
 8000706:	f000 fe13 	bl	8001330 <TIM_SetCounter>
	   delay_end = 1;
 800070a:	f240 0320 	movw	r3, #32
 800070e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000712:	f04f 0201 	mov.w	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
	  }
}
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop

0800071c <delay_ms>:

void delay_ms(uint16_t delay)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	 TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY)*1000 - 1;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800072e:	f240 021c 	movw	r2, #28
 8000732:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000736:	6811      	ldr	r1, [r2, #0]
 8000738:	f64d 6283 	movw	r2, #56963	; 0xde83
 800073c:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000740:	fba2 0201 	umull	r0, r2, r2, r1
 8000744:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000748:	b292      	uxth	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8000750:	1a89      	subs	r1, r1, r2
 8000752:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8000756:	188a      	adds	r2, r1, r2
 8000758:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800075c:	b292      	uxth	r2, r2
 800075e:	f102 32ff 	add.w	r2, r2, #4294967295
 8000762:	b292      	uxth	r2, r2
 8000764:	851a      	strh	r2, [r3, #40]	; 0x28
	 TIM6->ARR = delay;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800076e:	88fa      	ldrh	r2, [r7, #6]
 8000770:	859a      	strh	r2, [r3, #44]	; 0x2c
	 TIM6->EGR |= TIM_EGR_UG;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800077a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800077e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000782:	8a92      	ldrh	r2, [r2, #20]
 8000784:	b292      	uxth	r2, r2
 8000786:	f042 0201 	orr.w	r2, r2, #1
 800078a:	b292      	uxth	r2, r2
 800078c:	829a      	strh	r2, [r3, #20]
     TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800079a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800079e:	8812      	ldrh	r2, [r2, #0]
 80007a0:	b292      	uxth	r2, r2
 80007a2:	f042 0209 	orr.w	r2, r2, #9
 80007a6:	b292      	uxth	r2, r2
 80007a8:	801a      	strh	r2, [r3, #0]
     while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 80007aa:	bf00      	nop
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f5      	bne.n	80007ac <delay_ms+0x90>
}
 80007c0:	f107 070c 	add.w	r7, r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <delay_us>:

void delay_us(uint16_t delay)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
	TIM6->PSC = (SYS_CLK / PRESCALER_TIM_FREQUENCY) - 1;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007de:	f240 021c 	movw	r2, #28
 80007e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007e6:	6811      	ldr	r1, [r2, #0]
 80007e8:	f64d 6283 	movw	r2, #56963	; 0xde83
 80007ec:	f2c4 321b 	movt	r2, #17179	; 0x431b
 80007f0:	fba2 0201 	umull	r0, r2, r2, r1
 80007f4:	ea4f 4292 	mov.w	r2, r2, lsr #18
 80007f8:	b292      	uxth	r2, r2
 80007fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80007fe:	b292      	uxth	r2, r2
 8000800:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM6->ARR = delay;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800080a:	88fa      	ldrh	r2, [r7, #6]
 800080c:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM6->EGR |= TIM_EGR_UG;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800081e:	8a92      	ldrh	r2, [r2, #20]
 8000820:	b292      	uxth	r2, r2
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	b292      	uxth	r2, r2
 8000828:	829a      	strh	r2, [r3, #20]
	TIM6->CR1 |= TIM_CR1_CEN|TIM_CR1_OPM;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000836:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800083a:	8812      	ldrh	r2, [r2, #0]
 800083c:	b292      	uxth	r2, r2
 800083e:	f042 0209 	orr.w	r2, r2, #9
 8000842:	b292      	uxth	r2, r2
 8000844:	801a      	strh	r2, [r3, #0]
    while ((TIM6->CR1 & TIM_CR1_CEN)!=0);
 8000846:	bf00      	nop
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f5      	bne.n	8000848 <delay_us+0x7c>
}
 800085c:	f107 070c 	add.w	r7, r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <NVIC_PriorityGroupConfig>:
 *                                1 bits for subpriority
 *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
 *                                0 bits for subpriority
 * @retval None
 */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
	SCB ->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000870:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000874:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 800087e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000882:	60da      	str	r2, [r3, #12]
}
 8000884:	f107 070c 	add.w	r7, r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop

08000890 <NVIC_Init>:
 *         parameters in the NVIC_InitStruct.
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct) {
 8000890:	b480      	push	{r7}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000898:	f04f 0300 	mov.w	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	f04f 0300 	mov.w	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	f04f 030f 	mov.w	r3, #15
 80008a8:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd)); assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority)); assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

	if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	78db      	ldrb	r3, [r3, #3]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d047      	beq.n	8000942 <NVIC_Init+0xb2>
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
 80008b2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	ea6f 0303 	mvn.w	r3, r3
 80008c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008c4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80008c8:	617b      	str	r3, [r7, #20]
		tmppre = (0x4 - tmppriority);
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f1c3 0304 	rsb	r3, r3, #4
 80008d0:	613b      	str	r3, [r7, #16]
		tmpsub = tmpsub >> tmppriority;
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	fa22 f303 	lsr.w	r3, r2, r3
 80008da:	60fb      	str	r3, [r7, #12]

		tmppriority =
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	461a      	mov	r2, r3
						<< tmppre;
 80008e2:	693b      	ldr	r3, [r7, #16]
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = (0x700 - ((SCB ->AIRCR) & (uint32_t) 0x700)) >> 0x08;
		tmppre = (0x4 - tmppriority);
		tmpsub = tmpsub >> tmppriority;

		tmppriority =
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	617b      	str	r3, [r7, #20]
				(uint32_t) NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority
						<< tmppre;
		tmppriority |= NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	789b      	ldrb	r3, [r3, #2]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4013      	ands	r3, r2
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	617b      	str	r3, [r7, #20]
		tmppriority = tmppriority << 0x04;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000900:	617b      	str	r3, [r7, #20]

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000902:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000906:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	4611      	mov	r1, r2
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	185b      	adds	r3, r3, r1
 8000916:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 800091a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800091e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800092a:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	7809      	ldrb	r1, [r1, #0]
 8000930:	f001 011f 	and.w	r1, r1, #31
 8000934:	f04f 0001 	mov.w	r0, #1
 8000938:	fa00 f101 	lsl.w	r1, r0, r1
		tmppriority = tmppriority << 0x04;

		NVIC ->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 800093c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000940:	e014      	b.n	800096c <NVIC_Init+0xdc>
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000942:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000946:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000952:	b2d2      	uxtb	r2, r2
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	7809      	ldrb	r1, [r1, #0]
 8000958:	f001 011f 	and.w	r1, r1, #31
 800095c:	f04f 0001 	mov.w	r0, #1
 8000960:	fa00 f101 	lsl.w	r1, r0, r1
		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC ->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC ->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t) 0x01
 8000964:	f102 0220 	add.w	r2, r2, #32
 8000968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	}
}
 800096c:	f107 071c 	add.w	r7, r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <EXTI_Init>:
 *         parameters in the EXTI_InitStruct.
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
 *         that contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct) {
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode)); assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger)); assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line)); assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

	tmp = (uint32_t) EXTI_BASE;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800098e:	60fb      	str	r3, [r7, #12]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	799b      	ldrb	r3, [r3, #6]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d078      	beq.n	8000a8a <EXTI_Init+0x112>
		/* Clear EXTI line configuration */
		EXTI ->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80009a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80009a8:	6811      	ldr	r1, [r2, #0]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	ea6f 0202 	mvn.w	r2, r2
 80009b2:	400a      	ands	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
		EXTI ->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80009be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80009c6:	6851      	ldr	r1, [r2, #4]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	ea6f 0202 	mvn.w	r2, r2
 80009d0:	400a      	ands	r2, r1
 80009d2:	605a      	str	r2, [r3, #4]

		tmp += EXTI_InitStruct->EXTI_Mode;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	6811      	ldr	r1, [r2, #0]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 80009ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80009f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80009fc:	6891      	ldr	r1, [r2, #8]
				~EXTI_InitStruct->EXTI_Line;
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	ea6f 0202 	mvn.w	r2, r2

		tmp += EXTI_InitStruct->EXTI_Mode;

		*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

		/* Clear Rising Falling edge configuration */EXTI ->RTSR &=
 8000a06:	400a      	ands	r2, r1
 8000a08:	609a      	str	r2, [r3, #8]
				~EXTI_InitStruct->EXTI_Line;
		EXTI ->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a16:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000a1a:	68d1      	ldr	r1, [r2, #12]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	ea6f 0202 	mvn.w	r2, r2
 8000a24:	400a      	ands	r2, r1
 8000a26:	60da      	str	r2, [r3, #12]

		/* Select the trigger for the selected external interrupts */
		if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	795b      	ldrb	r3, [r3, #5]
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	d11a      	bne.n	8000a66 <EXTI_Init+0xee>
			/* Rising Falling edge */
			EXTI ->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000a40:	6891      	ldr	r1, [r2, #8]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	609a      	str	r2, [r3, #8]
			EXTI ->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a56:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000a5a:	68d1      	ldr	r1, [r2, #12]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	e01f      	b.n	8000aa6 <EXTI_Init+0x12e>
		} else {
			tmp = (uint32_t) EXTI_BASE;
 8000a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000a6e:	60fb      	str	r3, [r7, #12]
			tmp += EXTI_InitStruct->EXTI_Trigger;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	795b      	ldrb	r3, [r3, #5]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	18d3      	adds	r3, r2, r3
 8000a78:	60fb      	str	r3, [r7, #12]

			*(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	6811      	ldr	r1, [r2, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	e00d      	b.n	8000aa6 <EXTI_Init+0x12e>
		}
	} else {
		tmp += EXTI_InitStruct->EXTI_Mode;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	60fb      	str	r3, [r7, #12]

		/* Disable the selected external lines */
		*(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	6811      	ldr	r1, [r2, #0]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	ea6f 0202 	mvn.w	r2, r2
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]
	}
}
 8000aa6:	f107 0714 	add.w	r7, r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <EXTI_ClearITPendingBit>:
 * @brief  Clears the EXTI's line pending bits.
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(EXTI_Line));

	EXTI ->PR = EXTI_Line;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	615a      	str	r2, [r3, #20]
}
 8000ac4:	f107 070c 	add.w	r7, r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <GPIO_Init>:
 * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
 * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
 *         contains the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000ada:	f04f 0300 	mov.w	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx)); assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode)); assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

	/*---------------------------- GPIO Mode Configuration -----------------------*/
	currentmode = ((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x0F);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	78db      	ldrb	r3, [r3, #3]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	61fb      	str	r3, [r7, #28]
	if ((((uint32_t) GPIO_InitStruct->GPIO_Mode) & ((uint32_t) 0x10)) != 0x00) {
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	78db      	ldrb	r3, [r3, #3]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d004      	beq.n	8000b1e <GPIO_Init+0x4e>
		/* Check the parameters */
		assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
		/* Output mode */
		currentmode |= (uint32_t) GPIO_InitStruct->GPIO_Speed;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	61fb      	str	r3, [r7, #28]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d04e      	beq.n	8000bc6 <GPIO_Init+0xf6>
		tmpreg = GPIOx->CRL;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	e041      	b.n	8000bba <GPIO_Init+0xea>
			pos = ((uint32_t) 0x01) << pinpos;
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f04f 0201 	mov.w	r2, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d12d      	bne.n	8000bb2 <GPIO_Init+0xe2>
				pos = pinpos << 2;
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b5c:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding low control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f04f 020f 	mov.w	r2, #15
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	ea6f 0303 	mvn.w	r3, r3
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	4013      	ands	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	78db      	ldrb	r3, [r3, #3]
 8000b88:	2b28      	cmp	r3, #40	; 0x28
 8000b8a:	d107      	bne.n	8000b9c <GPIO_Init+0xcc>
					GPIOx->BRR = (((uint32_t) 0x01) << pinpos);
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	f04f 0201 	mov.w	r2, #1
 8000b92:	fa02 f203 	lsl.w	r2, r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	615a      	str	r2, [r3, #20]
 8000b9a:	e00a      	b.n	8000bb2 <GPIO_Init+0xe2>
				} else {
					/* Set the corresponding ODR bit */
					if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	2b48      	cmp	r3, #72	; 0x48
 8000ba2:	d106      	bne.n	8000bb2 <GPIO_Init+0xe2>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	f04f 0201 	mov.w	r2, #1
 8000baa:	fa02 f203 	lsl.w	r2, r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRL Configuration ------------------------*/
	/* Configure the eight low port pins */
	if (((uint32_t) GPIO_InitStruct->GPIO_Pin & ((uint32_t) 0x00FF)) != 0x00) {
		tmpreg = GPIOx->CRL;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	f103 0301 	add.w	r3, r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	d9ba      	bls.n	8000b36 <GPIO_Init+0x66>
						GPIOx->BSRR = (((uint32_t) 0x01) << pinpos);
					}
				}
			}
		}
		GPIOx->CRL = tmpreg;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	601a      	str	r2, [r3, #0]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d953      	bls.n	8000c76 <GPIO_Init+0x1a6>
		tmpreg = GPIOx->CRH;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	617b      	str	r3, [r7, #20]
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	e046      	b.n	8000c6a <GPIO_Init+0x19a>
			pos = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	f103 0308 	add.w	r3, r3, #8
 8000be2:	f04f 0201 	mov.w	r2, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	60fb      	str	r3, [r7, #12]
			/* Get the port pins position */
			currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
			if (currentpin == pos) {
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d130      	bne.n	8000c62 <GPIO_Init+0x192>
				pos = pinpos << 2;
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c06:	60fb      	str	r3, [r7, #12]
				/* Clear the corresponding high control register bits */
				pinmask = ((uint32_t) 0x0F) << pos;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f04f 020f 	mov.w	r2, #15
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	60bb      	str	r3, [r7, #8]
				tmpreg &= ~pinmask;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	ea6f 0303 	mvn.w	r3, r3
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]
				/* Write the mode configuration in the corresponding bits */
				tmpreg |= (currentmode << pos);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	617b      	str	r3, [r7, #20]
				/* Reset the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD) {
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	78db      	ldrb	r3, [r3, #3]
 8000c32:	2b28      	cmp	r3, #40	; 0x28
 8000c34:	d108      	bne.n	8000c48 <GPIO_Init+0x178>
					GPIOx->BRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	f103 0308 	add.w	r3, r3, #8
 8000c3c:	f04f 0201 	mov.w	r2, #1
 8000c40:	fa02 f203 	lsl.w	r2, r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	615a      	str	r2, [r3, #20]
				}
				/* Set the corresponding ODR bit */
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	78db      	ldrb	r3, [r3, #3]
 8000c4c:	2b48      	cmp	r3, #72	; 0x48
 8000c4e:	d108      	bne.n	8000c62 <GPIO_Init+0x192>
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	f103 0308 	add.w	r3, r3, #8
 8000c56:	f04f 0201 	mov.w	r2, #1
 8000c5a:	fa02 f203 	lsl.w	r2, r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	611a      	str	r2, [r3, #16]
	}
	/*---------------------------- GPIO CRH Configuration ------------------------*/
	/* Configure the eight high port pins */
	if (GPIO_InitStruct->GPIO_Pin > 0x00FF) {
		tmpreg = GPIOx->CRH;
		for (pinpos = 0x00; pinpos < 0x08; pinpos++) {
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	f103 0301 	add.w	r3, r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	d9b5      	bls.n	8000bdc <GPIO_Init+0x10c>
				if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU) {
					GPIOx->BSRR = (((uint32_t) 0x01) << (pinpos + 0x08));
				}
			}
		}
		GPIOx->CRH = tmpreg;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	605a      	str	r2, [r3, #4]
	}
}
 8000c76:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <GPIO_EXTILineConfig>:
 *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).
 * @param  GPIO_PinSource: specifies the EXTI line to be configured.
 *   This parameter can be GPIO_PinSourcex where x can be (0..15).
 * @retval None
 */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource) {
 8000c80:	b490      	push	{r4, r7}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	71fa      	strb	r2, [r7, #7]
 8000c8c:	71bb      	strb	r3, [r7, #6]
	uint32_t tmp = 0x00;
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c9e:	f04f 020f 	mov.w	r2, #15
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	60fb      	str	r3, [r7, #12]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cb0:	79ba      	ldrb	r2, [r7, #6]
 8000cb2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	4610      	mov	r0, r2
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000cc2:	79b9      	ldrb	r1, [r7, #6]
 8000cc4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000cc8:	b2c9      	uxtb	r1, r1
 8000cca:	f101 0102 	add.w	r1, r1, #2
 8000cce:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	ea6f 0202 	mvn.w	r2, r2
 8000cd8:	4011      	ands	r1, r2
 8000cda:	f100 0202 	add.w	r2, r0, #2
 8000cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000cfc:	79b9      	ldrb	r1, [r7, #6]
 8000cfe:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8000d02:	b2c9      	uxtb	r1, r1
 8000d04:	f101 0102 	add.w	r1, r1, #2
 8000d08:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000d0c:	79fc      	ldrb	r4, [r7, #7]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
 8000d0e:	79ba      	ldrb	r2, [r7, #6]
 8000d10:	f002 0203 	and.w	r2, r2, #3
 8000d14:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8000d18:	fa04 f202 	lsl.w	r2, r4, r2
	/* Check the parameters */
	assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource)); assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

	tmp = ((uint32_t) 0x0F) << (0x04 * (GPIO_PinSource & (uint8_t) 0x03));
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
	AFIO ->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t) GPIO_PortSource)
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	f100 0202 	add.w	r2, r0, #2
 8000d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			<< (0x04 * (GPIO_PinSource & (uint8_t) 0x03)));
}
 8000d26:	f107 0710 	add.w	r7, r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc90      	pop	{r4, r7}
 8000d2e:	4770      	bx	lr

08000d30 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d44:	6812      	ldr	r2, [r2, #0]
 8000d46:	f042 0201 	orr.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d5c:	6859      	ldr	r1, [r3, #4]
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000d66:	400b      	ands	r3, r1
 8000d68:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d84:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d9c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000da6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000daa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dae:	6852      	ldr	r2, [r2, #4]
 8000db0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000db4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dc2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000df6:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e0e:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e16:	d003      	beq.n	8000e20 <RCC_HSEConfig+0x48>
 8000e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e1c:	d00d      	beq.n	8000e3a <RCC_HSEConfig+0x62>
 8000e1e:	e019      	b.n	8000e54 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e36:	601a      	str	r2, [r3, #0]
      break;
 8000e38:	e00d      	b.n	8000e56 <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000e50:	601a      	str	r2, [r3, #0]
      break;
 8000e52:	e000      	b.n	8000e56 <RCC_HSEConfig+0x7e>
      
    default:
      break;
 8000e54:	bf00      	nop
  }
}
 8000e56:	f107 070c 	add.w	r7, r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000e82:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	605a      	str	r2, [r3, #4]
}
 8000e9c:	f107 0714 	add.w	r7, r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000eb2:	f04f 0360 	mov.w	r3, #96	; 0x60
 8000eb6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	f107 070c 	add.w	r7, r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f023 0303 	bic.w	r3, r3, #3
 8000ee8:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	605a      	str	r2, [r3, #4]
}
 8000efe:	f107 0714 	add.w	r7, r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	b2db      	uxtb	r3, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f48:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	605a      	str	r2, [r3, #4]
}
 8000f5e:	f107 0714 	add.w	r7, r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f88:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	605a      	str	r2, [r3, #4]
}
 8000f9e:	f107 0714 	add.w	r7, r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fc8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	605a      	str	r2, [r3, #4]
}
 8000fe2:	f107 0714 	add.w	r7, r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	2b04      	cmp	r3, #4
 8001026:	d00a      	beq.n	800103e <RCC_GetClocksFreq+0x52>
 8001028:	2b08      	cmp	r3, #8
 800102a:	d00f      	beq.n	800104c <RCC_GetClocksFreq+0x60>
 800102c:	2b00      	cmp	r3, #0
 800102e:	d147      	bne.n	80010c0 <RCC_GetClocksFreq+0xd4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001036:	f2c0 037a 	movt	r3, #122	; 0x7a
 800103a:	6013      	str	r3, [r2, #0]
      break;
 800103c:	e047      	b.n	80010ce <RCC_GetClocksFreq+0xe2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001044:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001048:	6013      	str	r3, [r2, #0]
      break;
 800104a:	e040      	b.n	80010ce <RCC_GetClocksFreq+0xe2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800105a:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001072:	f103 0302 	add.w	r3, r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <RCC_GetClocksFreq+0xa6>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001084:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001088:	fb03 f202 	mul.w	r2, r3, r2
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001090:	e01d      	b.n	80010ce <RCC_GetClocksFreq+0xe2>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	f103 0301 	add.w	r3, r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 80010a6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80010aa:	f2c0 037a 	movt	r3, #122	; 0x7a
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	fb02 f203 	mul.w	r2, r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80010be:	e006      	b.n	80010ce <RCC_GetClocksFreq+0xe2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80010c6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80010ca:	6013      	str	r3, [r2, #0]
      break;
 80010cc:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010dc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80010e4:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80010e6:	f240 0300 	movw	r3, #0
 80010ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	189b      	adds	r3, r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	fa22 f203 	lsr.w	r2, r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001114:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800111c:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800111e:	f240 0300 	movw	r3, #0
 8001122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	189b      	adds	r3, r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fa22 f203 	lsr.w	r2, r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800114c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001154:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001156:	f240 0300 	movw	r3, #0
 800115a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	189b      	adds	r3, r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	fa22 f203 	lsr.w	r2, r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	ea4f 3393 	mov.w	r3, r3, lsr #14
 800118c:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 800118e:	f240 0310 	movw	r3, #16
 8001192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	189b      	adds	r3, r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	611a      	str	r2, [r3, #16]
}
 80011ae:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00c      	beq.n	80011e4 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011da:	6991      	ldr	r1, [r2, #24]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	430a      	orrs	r2, r1
 80011e0:	619a      	str	r2, [r3, #24]
 80011e2:	e00d      	b.n	8001200 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011f4:	6991      	ldr	r1, [r2, #24]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	ea6f 0202 	mvn.w	r2, r2
 80011fc:	400a      	ands	r2, r1
 80011fe:	619a      	str	r2, [r3, #24]
  }
}
 8001200:	f107 070c 	add.w	r7, r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00c      	beq.n	8001238 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800122e:	69d1      	ldr	r1, [r2, #28]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	430a      	orrs	r2, r1
 8001234:	61da      	str	r2, [r3, #28]
 8001236:	e00d      	b.n	8001254 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001244:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001248:	69d1      	ldr	r1, [r2, #28]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	ea6f 0202 	mvn.w	r2, r2
 8001250:	400a      	ands	r2, r1
 8001252:	61da      	str	r2, [r3, #28]
  }
}
 8001254:	f107 070c 	add.w	r7, r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001282:	b2db      	uxtb	r3, r3
 8001284:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d106      	bne.n	800129a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 800128c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001290:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00f      	b.n	80012ba <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d106      	bne.n	80012ae <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e005      	b.n	80012ba <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <RCC_GetFlagStatus+0x7a>
  {
    bitstatus = SET;
 80012d2:	f04f 0301 	mov.w	r3, #1
 80012d6:	74fb      	strb	r3, [r7, #19]
 80012d8:	e002      	b.n	80012e0 <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80012e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	f107 071c 	add.w	r7, r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	e007      	b.n	8001324 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	801a      	strh	r2, [r3, #0]
  }
}
 8001324:	f107 070c 	add.w	r7, r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001342:	f107 070c 	add.w	r7, r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	81bb      	strh	r3, [r7, #12]
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8a1b      	ldrh	r3, [r3, #16]
 800136e:	b29a      	uxth	r2, r3
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	899b      	ldrh	r3, [r3, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	4013      	ands	r3, r2
 8001380:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001382:	89bb      	ldrh	r3, [r7, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <TIM_GetITStatus+0x4a>
 8001388:	897b      	ldrh	r3, [r7, #10]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800138e:	f04f 0301 	mov.w	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e002      	b.n	800139c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	f107 0714 	add.w	r7, r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	ea6f 0303 	mvn.w	r3, r3
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	821a      	strh	r2, [r3, #16]
}
 80013c4:	f107 070c 	add.w	r7, r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <USART_Init>:
 * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 *         that contains the configuration information for the specified USART 
 *         peripheral.
 * @retval None
 */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0x00, apbclock = 0x00;
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t integerdivider = 0x00;
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fractionaldivider = 0x00;
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
	uint32_t usartxbase = 0;
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
	if (USART_InitStruct->USART_HardwareFlowControl
			!= USART_HardwareFlowControl_None ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	61fb      	str	r3, [r7, #28]

	/*---------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = USARTx->CR2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	8a1b      	ldrh	r3, [r3, #16]
 8001400:	b29b      	uxth	r3, r3
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear STOP[13:12] bits */
	tmpreg &= CR2_STOP_CLEAR_Mask;
 8001404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001406:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800140a:	4013      	ands	r3, r2
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
	/* Set STOP[13:12] bits according to USART_StopBits value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_StopBits;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	88db      	ldrh	r3, [r3, #6]
 8001412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001414:	4313      	orrs	r3, r2
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Write to USART CR2 */
	USARTx->CR2 = (uint16_t) tmpreg;
 8001418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	821a      	strh	r2, [r3, #16]

	/*---------------------------- USART CR1 Configuration -----------------------*/
	tmpreg = USARTx->CR1;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	899b      	ldrh	r3, [r3, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear M, PCE, PS, TE and RE bits */
	tmpreg &= CR1_CLEAR_Mask;
 8001428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800142a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800142e:	4013      	ands	r3, r2
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	889a      	ldrh	r2, [r3, #4]
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	891b      	ldrh	r3, [r3, #8]
 800143a:	4313      	orrs	r3, r2
 800143c:	b29a      	uxth	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	895b      	ldrh	r3, [r3, #10]
 8001442:	4313      	orrs	r3, r2
 8001444:	b29b      	uxth	r3, r3
	tmpreg &= CR1_CLEAR_Mask;
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t) USART_InitStruct->USART_WordLength
 8001446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001448:	4313      	orrs	r3, r2
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
			| USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
	/* Write to USART CR1 */
	USARTx->CR1 = (uint16_t) tmpreg;
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	819a      	strh	r2, [r3, #12]

	/*---------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = USARTx->CR3;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	8a9b      	ldrh	r3, [r3, #20]
 8001458:	b29b      	uxth	r3, r3
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Clear CTSE and RTSE bits */
	tmpreg &= CR3_CLEAR_Mask;
 800145c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800145e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001462:	4013      	ands	r3, r2
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Configure the USART HFC -------------------------------------------------*/
	/* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
	tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	899b      	ldrh	r3, [r3, #12]
 800146a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800146c:	4313      	orrs	r3, r2
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Write to USART CR3 */
	USARTx->CR3 = (uint16_t) tmpreg;
 8001470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001472:	b29a      	uxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	829a      	strh	r2, [r3, #20]

	/*---------------------------- USART BRR Configuration -----------------------*/
	/* Configure the USART Baud Rate -------------------------------------------*/
	RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fdb5 	bl	8000fec <RCC_GetClocksFreq>
	if (usartxbase == USART1_BASE) {
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001488:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800148c:	429a      	cmp	r2, r3
 800148e:	d102      	bne.n	8001496 <USART_Init+0xc6>
		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
 8001494:	e001      	b.n	800149a <USART_Init+0xca>
	} else {
		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	899b      	ldrh	r3, [r3, #12]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da0f      	bge.n	80014c8 <USART_Init+0xf8>
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 80014a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014aa:	4613      	mov	r3, r2
 80014ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014b0:	189b      	adds	r3, r3, r2
 80014b2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80014b6:	189a      	adds	r2, r3, r2
				/ (2 * (USART_InitStruct->USART_BaudRate)));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock)
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	e00e      	b.n	80014e6 <USART_Init+0x116>
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 80014c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ca:	4613      	mov	r3, r2
 80014cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014d0:	189b      	adds	r3, r3, r2
 80014d2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80014d6:	189a      	adds	r2, r3, r2
				/ (4 * (USART_InitStruct->USART_BaudRate)));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
		integerdivider = ((25 * apbclock)
				/ (2 * (USART_InitStruct->USART_BaudRate)));
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock)
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
				/ (4 * (USART_InitStruct->USART_BaudRate)));
	}
	tmpreg = (integerdivider / 100) << 4;
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	f248 531f 	movw	r3, #34079	; 0x851f
 80014ec:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80014f0:	fba3 1302 	umull	r1, r3, r3, r2
 80014f4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80014f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Determine the fractional part */
	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001504:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	623b      	str	r3, [r7, #32]

	/* Implement the fractional part in the register */
	if ((USARTx->CR1 & CR1_OVER8_Set )!= 0){
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	899b      	ldrh	r3, [r3, #12]
 8001516:	b29b      	uxth	r3, r3
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21b      	sxth	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	da12      	bge.n	8001546 <USART_Init+0x176>
		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t) 0x07);
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800152a:	f248 531f 	movw	r3, #34079	; 0x851f
 800152e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001532:	fba3 1302 	umull	r1, r3, r3, r2
 8001536:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001540:	4313      	orrs	r3, r2
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001544:	e011      	b.n	800156a <USART_Init+0x19a>
	} else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t) 0x0F);
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800154c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001550:	f248 531f 	movw	r3, #34079	; 0x851f
 8001554:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001558:	fba3 1302 	umull	r1, r3, r3, r2
 800155c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001566:	4313      	orrs	r3, r2
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write to USART BRR */
	USARTx->BRR = (uint16_t) tmpreg;
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	b29a      	uxth	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	811a      	strh	r2, [r3, #8]
}
 8001572:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop

0800157c <USART_Cmd>:
 *           USART1, USART2, USART3, UART4 or UART5.
 * @param  NewState: new state of the USARTx peripheral.
 *         This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <USART_Cmd+0x24>
		/* Enable the selected USART by setting the UE bit in the CR1 register */
		USARTx->CR1 |= CR1_UE_Set;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	899b      	ldrh	r3, [r3, #12]
 8001592:	b29b      	uxth	r3, r3
 8001594:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001598:	b29a      	uxth	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	819a      	strh	r2, [r3, #12]
 800159e:	e007      	b.n	80015b0 <USART_Cmd+0x34>
	} else {
		/* Disable the selected USART by clearing the UE bit in the CR1 register */
		USARTx->CR1 &= CR1_UE_Reset;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	899b      	ldrh	r3, [r3, #12]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	819a      	strh	r2, [r3, #12]
	}
}
 80015b0:	f107 070c 	add.w	r7, r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <USART_ITConfig>:
 * @param  NewState: new state of the specified USARTx interrupts.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT,
		FunctionalState NewState) {
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	460a      	mov	r2, r1
 80015c8:	807a      	strh	r2, [r7, #2]
 80015ca:	707b      	strb	r3, [r7, #1]
	uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
	uint32_t usartxbase = 0x00;
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
	/* The CTS interrupt is not available for UART4 and UART5 */
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t) USARTx;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	617b      	str	r3, [r7, #20]

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	613b      	str	r3, [r7, #16]

	/* Get the interrupt position */
	itpos = USART_IT & IT_Mask;
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	60fb      	str	r3, [r7, #12]
	itmask = (((uint32_t) 0x01) << itpos);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f04f 0201 	mov.w	r2, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	60bb      	str	r3, [r7, #8]

	if (usartreg == 0x01) /* The IT is in CR1 register */
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d104      	bne.n	8001618 <USART_ITConfig+0x5c>
	{
		usartxbase += 0x0C;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f103 030c 	add.w	r3, r3, #12
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e00b      	b.n	8001630 <USART_ITConfig+0x74>
	} else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d104      	bne.n	8001628 <USART_ITConfig+0x6c>
	{
		usartxbase += 0x10;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f103 0310 	add.w	r3, r3, #16
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e003      	b.n	8001630 <USART_ITConfig+0x74>
	} else /* The IT is in CR3 register */
	{
		usartxbase += 0x14;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f103 0314 	add.w	r3, r3, #20
 800162e:	617b      	str	r3, [r7, #20]
	}
	if (NewState != DISABLE) {
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <USART_ITConfig+0x88>
		*(__IO uint32_t*) usartxbase |= itmask;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	6811      	ldr	r1, [r2, #0]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e007      	b.n	8001654 <USART_ITConfig+0x98>
	} else {
		*(__IO uint32_t*) usartxbase &= ~itmask;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	6811      	ldr	r1, [r2, #0]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	ea6f 0202 	mvn.w	r2, r2
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
	}
}
 8001654:	f107 071c 	add.w	r7, r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <USART_SendData>:
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @param  Data: the data to transmit.
 * @retval None
 */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data) {
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx)); assert_param(IS_USART_DATA(Data));

	/* Transmit Data */
	USARTx->DR = (Data & (uint16_t) 0x01FF);
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8001672:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8001676:	b29a      	uxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	809a      	strh	r2, [r3, #4]
}
 800167c:	f107 070c 	add.w	r7, r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop

08001688 <USART_ReceiveData>:
 * @param  USARTx: Select the USART or the UART peripheral. 
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @retval The received data.
 */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx));

	/* Receive Data */
	return (uint16_t) (USARTx->DR & (uint16_t) 0x01FF);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	889b      	ldrh	r3, [r3, #4]
 8001694:	b29b      	uxth	r3, r3
 8001696:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800169a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800169e:	b29b      	uxth	r3, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	f107 070c 	add.w	r7, r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <USART_GetFlagStatus>:
 *     @arg USART_FLAG_NE:   Noise Error flag
 *     @arg USART_FLAG_FE:   Framing Error flag
 *     @arg USART_FLAG_PE:   Parity Error flag
 * @retval The new state of USART_FLAG (SET or RESET).
 */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG) {
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
	FlagStatus bitstatus = RESET;
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
	/* The CTS flag is not available for UART4 and UART5 */
	if (USART_FLAG == USART_FLAG_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	if ((USARTx->SR & USART_FLAG) != (uint16_t) RESET) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4013      	ands	r3, r2
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <USART_GetFlagStatus+0x2a>
		bitstatus = SET;
 80016ce:	f04f 0301 	mov.w	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e002      	b.n	80016dc <USART_GetFlagStatus+0x30>
	} else {
		bitstatus = RESET;
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	f107 0714 	add.w	r7, r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <USART_GetITStatus>:
 *     @arg USART_IT_NE:   Noise Error interrupt
 *     @arg USART_IT_FE:   Framing Error interrupt
 *     @arg USART_IT_PE:   Parity Error interrupt
 * @retval The new state of USART_IT (SET or RESET).
 */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT) {
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
	uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
	ITStatus bitstatus = RESET;
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	74fb      	strb	r3, [r7, #19]
	if (USART_IT == USART_IT_CTS ) {
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	/* Get the USART register index */
	usartreg = (((uint8_t) USART_IT) >> 0x05);
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001718:	b2db      	uxtb	r3, r3
 800171a:	60bb      	str	r3, [r7, #8]
	/* Get the interrupt position */
	itmask = USART_IT & IT_Mask;
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	617b      	str	r3, [r7, #20]
	itmask = (uint32_t) 0x01 << itmask;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f04f 0201 	mov.w	r2, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]

	if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d106      	bne.n	8001744 <USART_GetITStatus+0x58>
	{
		itmask &= USARTx->CR1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	899b      	ldrh	r3, [r3, #12]
 800173a:	b29b      	uxth	r3, r3
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	4013      	ands	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00f      	b.n	8001764 <USART_GetITStatus+0x78>
	} else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d106      	bne.n	8001758 <USART_GetITStatus+0x6c>
	{
		itmask &= USARTx->CR2;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8a1b      	ldrh	r3, [r3, #16]
 800174e:	b29b      	uxth	r3, r3
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	4013      	ands	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e005      	b.n	8001764 <USART_GetITStatus+0x78>
	} else /* The IT  is in CR3 register */
	{
		itmask &= USARTx->CR3;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	8a9b      	ldrh	r3, [r3, #20]
 800175c:	b29b      	uxth	r3, r3
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
	}

	bitpos = USART_IT >> 0x08;
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	60fb      	str	r3, [r7, #12]
	bitpos = (uint32_t) 0x01 << bitpos;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f04f 0201 	mov.w	r2, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	60fb      	str	r3, [r7, #12]
	bitpos &= USARTx->SR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
	if ((itmask != (uint16_t) RESET) && (bitpos != (uint16_t) RESET)) {
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <USART_GetITStatus+0xae>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <USART_GetITStatus+0xae>
		bitstatus = SET;
 8001792:	f04f 0301 	mov.w	r3, #1
 8001796:	74fb      	strb	r3, [r7, #19]
 8001798:	e002      	b.n	80017a0 <USART_GetITStatus+0xb4>
	} else {
		bitstatus = RESET;
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	74fb      	strb	r3, [r7, #19]
	}

	return bitstatus;
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	f107 071c 	add.w	r7, r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f023 0307 	bic.w	r3, r3, #7
 80017ce:	f103 0308 	add.w	r3, r3, #8
 80017d2:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 80017d4:	f000 ff52 	bl	800267c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80017d8:	f641 4328 	movw	r3, #7208	; 0x1c28
 80017dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d108      	bne.n	80017f8 <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <pvPortMalloc+0xc4>)
 80017e8:	f023 0307 	bic.w	r3, r3, #7
 80017ec:	461a      	mov	r2, r3
 80017ee:	f641 4328 	movw	r3, #7208	; 0x1c28
 80017f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017f6:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80017f8:	f641 4324 	movw	r3, #7204	; 0x1c24
 80017fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	18d2      	adds	r2, r2, r3
 8001806:	f641 33f7 	movw	r3, #7159	; 0x1bf7
 800180a:	429a      	cmp	r2, r3
 800180c:	d825      	bhi.n	800185a <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800180e:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	18d2      	adds	r2, r2, r3
 800181c:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001824:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001826:	429a      	cmp	r2, r3
 8001828:	d917      	bls.n	800185a <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800182a:	f641 4328 	movw	r3, #7208	; 0x1c28
 800182e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	18d3      	adds	r3, r2, r3
 8001840:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8001842:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	18d2      	adds	r2, r2, r3
 8001850:	f641 4324 	movw	r3, #7204	; 0x1c24
 8001854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001858:	601a      	str	r2, [r3, #0]
		}
	}
	xTaskResumeAll();
 800185a:	f000 ff21 	bl	80026a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <pvPortMalloc+0xb8>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001864:	f002 fbc8 	bl	8003ff8 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	4618      	mov	r0, r3
 800186c:	f107 0710 	add.w	r7, r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000002c 	.word	0x2000002c

08001878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <vPortFree+0x14>
 8001886:	f000 f97d 	bl	8001b84 <ulPortSetInterruptMask>
 800188a:	e7fe      	b.n	800188a <vPortFree+0x12>
}
 800188c:	f107 0708 	add.w	r7, r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001898:	f641 4324 	movw	r3, #7204	; 0x1c24
 800189c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 80018a6:	f103 0318 	add.w	r3, r3, #24
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop

080018b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f103 0208 	add.w	r2, r3, #8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f103 0208 	add.w	r2, r3, #8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f103 0208 	add.w	r2, r3, #8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
}
 80018ea:	f107 070c 	add.w	r7, r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
}
 8001904:	f107 070c 	add.w	r7, r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f103 0201 	add.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	f107 0714 	add.w	r7, r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001976:	d103      	bne.n	8001980 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e00d      	b.n	800199c <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f103 0308 	add.w	r3, r3, #8
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e002      	b.n	8001990 <vListInsert+0x30>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	429a      	cmp	r2, r3
 800199a:	d9f6      	bls.n	800198a <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f103 0201 	add.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	f107 0714 	add.w	r7, r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6892      	ldr	r2, [r2, #8]
 80019e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6852      	ldr	r2, [r2, #4]
 80019ee:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d103      	bne.n	8001a08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f103 32ff 	add.w	r2, r3, #4294967295
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	f107 0714 	add.w	r7, r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f1a3 0304 	sub.w	r3, r3, #4
 8001a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a46:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f1a3 0304 	sub.w	r3, r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1a3 0304 	sub.w	r3, r3, #4
 8001a5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1a3 0314 	sub.w	r3, r3, #20
 8001a6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f1a3 0320 	sub.w	r3, r3, #32
 8001a7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f107 0714 	add.w	r7, r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <pxCurrentTCBConst2>)
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	6808      	ldr	r0, [r1, #0]
 8001a92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a96:	f380 8809 	msr	PSP, r0
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	f380 8811 	msr	BASEPRI, r0
 8001aa2:	f04e 0e0d 	orr.w	lr, lr, #13
 8001aa6:	4770      	bx	lr

08001aa8 <pxCurrentTCBConst2>:
 8001aa8:	20001c2c 	.word	0x20001c2c

08001aac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <prvPortStartFirstTask+0x10>)
 8001aae:	6800      	ldr	r0, [r0, #0]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f380 8808 	msr	MSP, r0
 8001ab6:	b662      	cpsie	i
 8001ab8:	df00      	svc	0
 8001aba:	bf00      	nop
 8001abc:	e000ed08 	.word	0xe000ed08

08001ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001ac4:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001ac8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001acc:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001ad0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001ada:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001adc:	f64e 5320 	movw	r3, #60704	; 0xed20
 8001ae0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001ae4:	f64e 5220 	movw	r2, #60704	; 0xed20
 8001ae8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001af2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001af4:	f000 f884 	bl	8001c00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001af8:	f240 0314 	movw	r3, #20
 8001afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001b06:	f7ff ffd1 	bl	8001aac <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8001b0a:	f04f 0300 	mov.w	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b18:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001b1c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b24:	601a      	str	r2, [r3, #0]
}
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001b30:	f000 f828 	bl	8001b84 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001b34:	f240 0314 	movw	r3, #20
 8001b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f103 0201 	add.w	r2, r3, #1
 8001b42:	f240 0314 	movw	r3, #20
 8001b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8001b54:	f240 0314 	movw	r3, #20
 8001b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8001b62:	f240 0314 	movw	r3, #20
 8001b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b6a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001b6c:	f240 0314 	movw	r3, #20
 8001b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f000 f80b 	bl	8001b98 <vPortClearInterruptMask>
	}
}
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001b84:	f3ef 8011 	mrs	r0, BASEPRI
 8001b88:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001b8c:	f381 8811 	msr	BASEPRI, r1
 8001b90:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8001b92:	f04f 0300 	mov.w	r3, #0
}
 8001b96:	4618      	mov	r0, r3

08001b98 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8001b98:	f380 8811 	msr	BASEPRI, r0
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop

08001ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001ba0:	f3ef 8009 	mrs	r0, PSP
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <pxCurrentTCBConst>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bac:	6010      	str	r0, [r2, #0]
 8001bae:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001bb2:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001bb6:	f380 8811 	msr	BASEPRI, r0
 8001bba:	f000 ff1d 	bl	80029f8 <vTaskSwitchContext>
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f380 8811 	msr	BASEPRI, r0
 8001bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	6808      	ldr	r0, [r1, #0]
 8001bce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bd2:	f380 8809 	msr	PSP, r0
 8001bd6:	4770      	bx	lr

08001bd8 <pxCurrentTCBConst>:
 8001bd8:	20001c2c 	.word	0x20001c2c

08001bdc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001be0:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001be4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bec:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8001bee:	f7ff ffc9 	bl	8001b84 <ulPortSetInterruptMask>
	{
		vTaskIncrementTick();
 8001bf2:	f000 fe1b 	bl	800282c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001bf6:	f04f 0000 	mov.w	r0, #0
 8001bfa:	f7ff ffcd 	bl	8001b98 <vPortClearInterruptMask>
}
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8001c04:	f24e 0314 	movw	r3, #57364	; 0xe014
 8001c08:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001c0c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8001c12:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001c16:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001c1a:	f04f 0207 	mov.w	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop

08001c28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <xQueueGenericReset+0x1a>
 8001c3c:	f7ff ffa2 	bl	8001b84 <ulPortSetInterruptMask>
 8001c40:	e7fe      	b.n	8001c40 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001c42:	f7ff ff73 	bl	8001b2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	18d2      	adds	r2, r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	f103 33ff 	add.w	r3, r3, #4294967295
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	18d2      	adds	r2, r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295
 8001c94:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10f      	bne.n	8001cbc <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d017      	beq.n	8001cd4 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f103 0310 	add.w	r3, r3, #16
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 ffc0 	bl	8002c30 <xTaskRemoveFromEventList>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10e      	bne.n	8001cd4 <xQueueGenericReset+0xac>
				{
					portYIELD_WITHIN_API();
 8001cb6:	f7ff ff2d 	bl	8001b14 <vPortYieldFromISR>
 8001cba:	e00b      	b.n	8001cd4 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f103 0310 	add.w	r3, r3, #16
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fdf6 	bl	80018b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fdf0 	bl	80018b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cd4:	f7ff ff3c 	bl	8001b50 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cd8:	f04f 0301 	mov.w	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f107 0710 	add.w	r7, r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop

08001ce8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d029      	beq.n	8001d56 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8001d02:	f04f 004c 	mov.w	r0, #76	; 0x4c
 8001d06:	f7ff fd53 	bl	80017b0 <pvPortMalloc>
 8001d0a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d021      	beq.n	8001d56 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	f103 0301 	add.w	r3, r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8001d20:	6978      	ldr	r0, [r7, #20]
 8001d22:	f7ff fd45 	bl	80017b0 <pvPortMalloc>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d40:	69b8      	ldr	r0, [r7, #24]
 8001d42:	f04f 0101 	mov.w	r1, #1
 8001d46:	f7ff ff6f 	bl	8001c28 <xQueueGenericReset>
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e002      	b.n	8001d56 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001d50:	69b8      	ldr	r0, [r7, #24]
 8001d52:	f7ff fd91 	bl	8001878 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <xQueueGenericCreate+0x7a>
 8001d5c:	f7ff ff12 	bl	8001b84 <ulPortSetInterruptMask>
 8001d60:	e7fe      	b.n	8001d60 <xQueueGenericCreate+0x78>

	return xReturn;
 8001d62:	69fb      	ldr	r3, [r7, #28]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	f107 0720 	add.w	r7, r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop

08001d70 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <xQueueGenericSend+0x24>
 8001d8e:	f7ff fef9 	bl	8001b84 <ulPortSetInterruptMask>
 8001d92:	e7fe      	b.n	8001d92 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <xQueueGenericSend+0x32>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <xQueueGenericSend+0x38>
 8001da2:	f04f 0301 	mov.w	r3, #1
 8001da6:	e001      	b.n	8001dac <xQueueGenericSend+0x3c>
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d103      	bne.n	8001db8 <xQueueGenericSend+0x48>
 8001db0:	f7ff fee8 	bl	8001b84 <ulPortSetInterruptMask>
 8001db4:	e7fe      	b.n	8001db4 <xQueueGenericSend+0x44>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8001db6:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001db8:	f7ff feb8 	bl	8001b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d218      	bcs.n	8001dfa <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dc8:	69b8      	ldr	r0, [r7, #24]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	f000 f9b1 	bl	8002134 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <xQueueGenericSend+0x80>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 ff25 	bl	8002c30 <xTaskRemoveFromEventList>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <xQueueGenericSend+0x80>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8001dec:	f7ff fe92 	bl	8001b14 <vPortYieldFromISR>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001df0:	f7ff feae 	bl	8001b50 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001df4:	f04f 0301 	mov.w	r3, #1
 8001df8:	e05d      	b.n	8001eb6 <xQueueGenericSend+0x146>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <xQueueGenericSend+0x9a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e00:	f7ff fea6 	bl	8001b50 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e055      	b.n	8001eb6 <xQueueGenericSend+0x146>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 ff73 	bl	8002d00 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e1a:	f04f 0301 	mov.w	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e20:	f7ff fe96 	bl	8001b50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e24:	f000 fc2a 	bl	800267c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e28:	f7ff fe80 	bl	8001b2c <vPortEnterCritical>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d103      	bne.n	8001e3e <xQueueGenericSend+0xce>
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d103      	bne.n	8001e50 <xQueueGenericSend+0xe0>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	649a      	str	r2, [r3, #72]	; 0x48
 8001e50:	f7ff fe7e 	bl	8001b50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e54:	f107 0210 	add.w	r2, r7, #16
 8001e58:	f107 0304 	add.w	r3, r7, #4
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f000 ff6a 	bl	8002d38 <xTaskCheckForTimeOut>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d11e      	bne.n	8001ea8 <xQueueGenericSend+0x138>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e6a:	69b8      	ldr	r0, [r7, #24]
 8001e6c:	f000 fa56 	bl	800231c <prvIsQueueFull>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f103 0210 	add.w	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f000 fe63 	bl	8002b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e86:	69b8      	ldr	r0, [r7, #24]
 8001e88:	f000 f9de 	bl	8002248 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e8c:	f000 fc08 	bl	80026a0 <xTaskResumeAll>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d18f      	bne.n	8001db6 <xQueueGenericSend+0x46>
				{
					portYIELD_WITHIN_API();
 8001e96:	f7ff fe3d 	bl	8001b14 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8001e9a:	e78c      	b.n	8001db6 <xQueueGenericSend+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e9c:	69b8      	ldr	r0, [r7, #24]
 8001e9e:	f000 f9d3 	bl	8002248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ea2:	f000 fbfd 	bl	80026a0 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8001ea6:	e786      	b.n	8001db6 <xQueueGenericSend+0x46>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ea8:	69b8      	ldr	r0, [r7, #24]
 8001eaa:	f000 f9cd 	bl	8002248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001eae:	f000 fbf7 	bl	80026a0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001eb2:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f107 0720 	add.w	r7, r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
	configASSERT( pxQueue );
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <xQueueGenericSendFromISR+0x1e>
 8001ed8:	f7ff fe54 	bl	8001b84 <ulPortSetInterruptMask>
 8001edc:	e7fe      	b.n	8001edc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <xQueueGenericSendFromISR+0x2c>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <xQueueGenericSendFromISR+0x32>
 8001eec:	f04f 0301 	mov.w	r3, #1
 8001ef0:	e001      	b.n	8001ef6 <xQueueGenericSendFromISR+0x36>
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <xQueueGenericSendFromISR+0x40>
 8001efa:	f7ff fe43 	bl	8001b84 <ulPortSetInterruptMask>
 8001efe:	e7fe      	b.n	8001efe <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f00:	f7ff fe40 	bl	8001b84 <ulPortSetInterruptMask>
 8001f04:	6178      	str	r0, [r7, #20]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d228      	bcs.n	8001f64 <xQueueGenericSendFromISR+0xa4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f12:	69b8      	ldr	r0, [r7, #24]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	f000 f90c 	bl	8002134 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d114      	bne.n	8001f50 <xQueueGenericSendFromISR+0x90>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fe7b 	bl	8002c30 <xTaskRemoveFromEventList>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f04f 0201 	mov.w	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e005      	b.n	8001f5c <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	f103 0201 	add.w	r2, r3, #1
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8001f5c:	f04f 0301 	mov.w	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e002      	b.n	8001f6a <xQueueGenericSendFromISR+0xaa>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff fe14 	bl	8001b98 <vPortClearInterruptMask>

	return xReturn;
 8001f70:	69fb      	ldr	r3, [r7, #28]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	f107 0720 	add.w	r7, r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue );
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <xQueueGenericReceive+0x24>
 8001f9a:	f7ff fdf3 	bl	8001b84 <ulPortSetInterruptMask>
 8001f9e:	e7fe      	b.n	8001f9e <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <xQueueGenericReceive+0x32>
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <xQueueGenericReceive+0x38>
 8001fae:	f04f 0301 	mov.w	r3, #1
 8001fb2:	e001      	b.n	8001fb8 <xQueueGenericReceive+0x3c>
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <xQueueGenericReceive+0x48>
 8001fbc:	f7ff fde2 	bl	8001b84 <ulPortSetInterruptMask>
 8001fc0:	e7fe      	b.n	8001fc0 <xQueueGenericReceive+0x44>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8001fc2:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fc4:	f7ff fdb2 	bl	8001b2c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d03f      	beq.n	8002050 <xQueueGenericReceive+0xd4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fd6:	6a38      	ldr	r0, [r7, #32]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	f000 f90d 	bl	80021f8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d11e      	bne.n	8002022 <xQueueGenericReceive+0xa6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	f103 32ff 	add.w	r2, r3, #4294967295
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <xQueueGenericReceive+0x86>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8001ff8:	f001 f884 	bl	8003104 <xTaskGetCurrentTaskHandle>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01d      	beq.n	8002046 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f103 0310 	add.w	r3, r3, #16
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fe0d 	bl	8002c30 <xTaskRemoveFromEventList>
 8002016:	4603      	mov	r3, r0
 8002018:	2b01      	cmp	r3, #1
 800201a:	d114      	bne.n	8002046 <xQueueGenericReceive+0xca>
						{
							portYIELD_WITHIN_API();
 800201c:	f7ff fd7a 	bl	8001b14 <vPortYieldFromISR>
 8002020:	e011      	b.n	8002046 <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <xQueueGenericReceive+0xca>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fdfa 	bl	8002c30 <xTaskRemoveFromEventList>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8002042:	f7ff fd67 	bl	8001b14 <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 8002046:	f7ff fd83 	bl	8001b50 <vPortExitCritical>
				return pdPASS;
 800204a:	f04f 0301 	mov.w	r3, #1
 800204e:	e06b      	b.n	8002128 <xQueueGenericReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d104      	bne.n	8002060 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002056:	f7ff fd7b 	bl	8001b50 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e063      	b.n	8002128 <xQueueGenericReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fe48 	bl	8002d00 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002070:	f04f 0301 	mov.w	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		}
		taskEXIT_CRITICAL();
 8002076:	f7ff fd6b 	bl	8001b50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800207a:	f000 faff 	bl	800267c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800207e:	f7ff fd55 	bl	8001b2c <vPortEnterCritical>
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d103      	bne.n	8002094 <xQueueGenericReceive+0x118>
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d103      	bne.n	80020a6 <xQueueGenericReceive+0x12a>
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	649a      	str	r2, [r3, #72]	; 0x48
 80020a6:	f7ff fd53 	bl	8001b50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020aa:	f107 0214 	add.w	r2, r7, #20
 80020ae:	f107 0304 	add.w	r3, r7, #4
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f000 fe3f 	bl	8002d38 <xTaskCheckForTimeOut>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12c      	bne.n	800211a <xQueueGenericReceive+0x19e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020c0:	6a38      	ldr	r0, [r7, #32]
 80020c2:	f000 f911 	bl	80022e8 <prvIsQueueEmpty>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d108      	bne.n	80020e6 <xQueueGenericReceive+0x16a>
					{
						portENTER_CRITICAL();
 80020d4:	f7ff fd2a 	bl	8001b2c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 f845 	bl	800316c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80020e2:	f7ff fd35 	bl	8001b50 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f000 fd2b 	bl	8002b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80020f6:	6a38      	ldr	r0, [r7, #32]
 80020f8:	f000 f8a6 	bl	8002248 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80020fc:	f000 fad0 	bl	80026a0 <xTaskResumeAll>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f47f af5d 	bne.w	8001fc2 <xQueueGenericReceive+0x46>
				{
					portYIELD_WITHIN_API();
 8002108:	f7ff fd04 	bl	8001b14 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800210c:	e759      	b.n	8001fc2 <xQueueGenericReceive+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800210e:	6a38      	ldr	r0, [r7, #32]
 8002110:	f000 f89a 	bl	8002248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002114:	f000 fac4 	bl	80026a0 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002118:	e753      	b.n	8001fc2 <xQueueGenericReceive+0x46>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800211a:	6a38      	ldr	r0, [r7, #32]
 800211c:	f000 f894 	bl	8002248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002120:	f000 fabe 	bl	80026a0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002124:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8002128:	4618      	mov	r0, r3
 800212a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop

08002134 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d148      	bne.n	80021e2 <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	f001 f877 	bl	8003248 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	e03e      	b.n	80021e2 <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11a      	bne.n	80021a0 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4610      	mov	r0, r2
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	461a      	mov	r2, r3
 8002178:	f001 ffe0 	bl	800413c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	18d2      	adds	r2, r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d325      	bcc.n	80021e2 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	e020      	b.n	80021e2 <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4610      	mov	r0, r2
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	461a      	mov	r2, r3
 80021ae:	f001 ffc5 	bl	800413c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f1c3 0300 	rsb	r3, r3, #0
 80021be:	18d2      	adds	r2, r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d208      	bcs.n	80021e2 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f1c3 0300 	rsb	r3, r3, #0
 80021dc:	18d2      	adds	r2, r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	f103 0201 	add.w	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021ee:	f107 0710 	add.w	r7, r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	18d2      	adds	r2, r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d303      	bcc.n	800222c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	f001 ff7f 	bl	800413c <memcpy>
	}
}
 800223e:	f107 0708 	add.w	r7, r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop

08002248 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002250:	f7ff fc6c 	bl	8001b2c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002254:	e014      	b.n	8002280 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <prvUnlockQueue+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fce3 	bl	8002c30 <xTaskRemoveFromEventList>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <prvUnlockQueue+0x2c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002270:	f000 fdc0 	bl	8002df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	f103 32ff 	add.w	r2, r3, #4294967295
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002284:	2b00      	cmp	r3, #0
 8002286:	dce6      	bgt.n	8002256 <prvUnlockQueue+0xe>
 8002288:	e000      	b.n	800228c <prvUnlockQueue+0x44>
						vTaskMissedYield();
					}
				}
				else
				{
					break;
 800228a:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f04f 32ff 	mov.w	r2, #4294967295
 8002292:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002294:	f7ff fc5c 	bl	8001b50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002298:	f7ff fc48 	bl	8001b2c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800229c:	e014      	b.n	80022c8 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 0310 	add.w	r3, r3, #16
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fcbf 	bl	8002c30 <xTaskRemoveFromEventList>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 80022b8:	f000 fd9c 	bl	8002df4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	dce6      	bgt.n	800229e <prvUnlockQueue+0x56>
 80022d0:	e000      	b.n	80022d4 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 80022d2:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80022dc:	f7ff fc38 	bl	8001b50 <vPortExitCritical>
}
 80022e0:	f107 0708 	add.w	r7, r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80022f0:	f7ff fc1c 	bl	8001b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == 0 )
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
 80022fc:	f04f 0301 	mov.w	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e002      	b.n	800230a <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800230a:	f7ff fc21 	bl	8001b50 <vPortExitCritical>

	return xReturn;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	f107 0710 	add.w	r7, r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop

0800231c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002324:	f7ff fc02 	bl	8001b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	429a      	cmp	r2, r3
 8002332:	d103      	bne.n	800233c <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
 8002334:	f04f 0301 	mov.w	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e002      	b.n	8002342 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002342:	f7ff fc05 	bl	8001b50 <vPortExitCritical>

	return xReturn;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	f107 0710 	add.w	r7, r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop

08002354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
	xQUEUE *pxQueue;

		pxQueue = ( xQUEUE * ) xQueue;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002362:	f7ff fbe3 	bl	8001b2c <vPortEnterCritical>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236e:	d103      	bne.n	8002378 <vQueueWaitForMessageRestricted+0x24>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d103      	bne.n	800238a <vQueueWaitForMessageRestricted+0x36>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	649a      	str	r2, [r3, #72]	; 0x48
 800238a:	f7ff fbe1 	bl	8001b50 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <vQueueWaitForMessageRestricted+0x50>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800239c:	4618      	mov	r0, r3
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	f000 fc16 	bl	8002bd0 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ff4f 	bl	8002248 <prvUnlockQueue>
	}
 80023aa:	f107 0710 	add.w	r7, r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop

080023b4 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <xTaskGenericCreate+0x1c>
 80023ca:	f7ff fbdb 	bl	8001b84 <ulPortSetInterruptMask>
 80023ce:	e7fe      	b.n	80023ce <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d902      	bls.n	80023dc <xTaskGenericCreate+0x28>
 80023d6:	f7ff fbd5 	bl	8001b84 <ulPortSetInterruptMask>
 80023da:	e7fe      	b.n	80023da <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	4618      	mov	r0, r3
 80023e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023e2:	f000 fe47 	bl	8003074 <prvAllocateTCBAndStack>
 80023e6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80b5 	beq.w	800255a <xTaskGenericCreate+0x1a6>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80023fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f023 0307 	bic.w	r3, r3, #7
 8002408:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <xTaskGenericCreate+0x66>
 8002414:	f7ff fbb6 	bl	8001b84 <ulPortSetInterruptMask>
 8002418:	e7fe      	b.n	8002418 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	69b8      	ldr	r0, [r7, #24]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	f000 fd03 	bl	8002e30 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	f7ff fafc 	bl	8001a2c <pxPortInitialiseStack>
 8002434:	4602      	mov	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <xTaskGenericCreate+0x98>
 8002446:	f7ff fb9d 	bl	8001b84 <ulPortSetInterruptMask>
 800244a:	e7fe      	b.n	800244a <xTaskGenericCreate+0x96>

		if( ( void * ) pxCreatedTask != NULL )
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <xTaskGenericCreate+0xa4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8002458:	f7ff fb68 	bl	8001b2c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800245c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f103 0201 	add.w	r2, r3, #1
 800246a:	f641 5304 	movw	r3, #7428	; 0x1d04
 800246e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002472:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002474:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <xTaskGenericCreate+0xee>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002482:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 800248e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d118      	bne.n	80024ce <xTaskGenericCreate+0x11a>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800249c:	f000 fd04 	bl	8002ea8 <prvInitialiseTaskLists>
 80024a0:	e015      	b.n	80024ce <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80024a2:	f641 5314 	movw	r3, #7444	; 0x1d14
 80024a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10e      	bne.n	80024ce <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80024b0:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80024b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	429a      	cmp	r2, r3
 80024c0:	d805      	bhi.n	80024ce <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
 80024c2:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80024c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d2:	f641 530c 	movw	r3, #7436	; 0x1d0c
 80024d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d906      	bls.n	80024ee <xTaskGenericCreate+0x13a>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	f641 530c 	movw	r3, #7436	; 0x1d0c
 80024e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024ec:	601a      	str	r2, [r3, #0]
			}

			uxTaskNumber++;
 80024ee:	f641 5328 	movw	r3, #7464	; 0x1d28
 80024f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f103 0201 	add.w	r2, r3, #1
 80024fc:	f641 5328 	movw	r3, #7464	; 0x1d28
 8002500:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002504:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250a:	f641 5310 	movw	r3, #7440	; 0x1d10
 800250e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d906      	bls.n	8002526 <xTaskGenericCreate+0x172>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252a:	4613      	mov	r3, r2
 800252c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002530:	189b      	adds	r3, r3, r2
 8002532:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002536:	f641 4230 	movw	r2, #7216	; 0x1c30
 800253a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800253e:	189a      	adds	r2, r3, r2
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f103 0304 	add.w	r3, r3, #4
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7ff f9e1 	bl	8001910 <vListInsertEnd>

			xReturn = pdPASS;
 800254e:	f04f 0301 	mov.w	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002554:	f7ff fafc 	bl	8001b50 <vPortExitCritical>
 8002558:	e002      	b.n	8002560 <xTaskGenericCreate+0x1ac>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d111      	bne.n	800258a <xTaskGenericCreate+0x1d6>
	{
		if( xSchedulerRunning != pdFALSE )
 8002566:	f641 5314 	movw	r3, #7444	; 0x1d14
 800256a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <xTaskGenericCreate+0x1d6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002574:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	429a      	cmp	r2, r3
 8002584:	d201      	bcs.n	800258a <xTaskGenericCreate+0x1d6>
			{
				portYIELD_WITHIN_API();
 8002586:	f7ff fac5 	bl	8001b14 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 800258a:	69fb      	ldr	r3, [r7, #28]
}
 800258c:	4618      	mov	r0, r3
 800258e:	f107 0720 	add.w	r7, r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop

08002598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d019      	beq.n	80025e0 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
 80025ac:	f000 f866 	bl	800267c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80025b0:	f641 5308 	movw	r3, #7432	; 0x1d08
 80025b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 80025c0:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80025c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f103 0304 	add.w	r3, r3, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fa00 	bl	80019d4 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80025d4:	68b8      	ldr	r0, [r7, #8]
 80025d6:	f000 fd07 	bl	8002fe8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025da:	f000 f861 	bl	80026a0 <xTaskResumeAll>
 80025de:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
 80025e6:	f7ff fa95 	bl	8001b14 <vPortYieldFromISR>
		}
	}
 80025ea:	f107 0710 	add.w	r7, r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop

080025f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	9303      	str	r3, [sp, #12]
 8002612:	f642 600d 	movw	r0, #11789	; 0x2e0d
 8002616:	f6c0 0000 	movt	r0, #2048	; 0x800
 800261a:	f244 41f0 	movw	r1, #17648	; 0x44f0
 800261e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002622:	f04f 0246 	mov.w	r2, #70	; 0x46
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	f7ff fec3 	bl	80023b4 <xTaskGenericCreate>
 800262e:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <vTaskStartScheduler+0x48>
		{
			xReturn = xTimerCreateTimerTask();
 8002636:	f000 fe4f 	bl	80032d8 <xTimerCreateTimerTask>
 800263a:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d112      	bne.n	8002668 <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8002642:	f7ff fa9f 	bl	8001b84 <ulPortSetInterruptMask>

		xSchedulerRunning = pdTRUE;
 8002646:	f641 5314 	movw	r3, #7444	; 0x1d14
 800264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800264e:	f04f 0201 	mov.w	r2, #1
 8002652:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8002654:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002662:	f7ff fa2d 	bl	8001ac0 <xPortStartScheduler>
 8002666:	e005      	b.n	8002674 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <vTaskStartScheduler+0x80>
 800266e:	f7ff fa89 	bl	8001b84 <ulPortSetInterruptMask>
 8002672:	e7fe      	b.n	8002672 <vTaskStartScheduler+0x7e>
	}
}
 8002674:	f107 0708 	add.w	r7, r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8002680:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002684:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f103 0201 	add.w	r2, r3, #1
 800268e:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002692:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop

080026a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026ac:	f641 5318 	movw	r3, #7448	; 0x1d18
 80026b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <xTaskResumeAll+0x20>
 80026ba:	f7ff fa63 	bl	8001b84 <ulPortSetInterruptMask>
 80026be:	e7fe      	b.n	80026be <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80026c0:	f7ff fa34 	bl	8001b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026c4:	f641 5318 	movw	r3, #7448	; 0x1d18
 80026c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f103 32ff 	add.w	r2, r3, #4294967295
 80026d2:	f641 5318 	movw	r3, #7448	; 0x1d18
 80026d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026da:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80026dc:	f641 5318 	movw	r3, #7448	; 0x1d18
 80026e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8084 	bne.w	80027f4 <xTaskResumeAll+0x154>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80026ec:	f641 5304 	movw	r3, #7428	; 0x1d04
 80026f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d07c      	beq.n	80027f4 <xTaskResumeAll+0x154>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002700:	e03b      	b.n	800277a <xTaskResumeAll+0xda>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8002702:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8002706:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
 800270e:	f104 0318 	add.w	r3, r4, #24
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f95e 	bl	80019d4 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8002718:	f104 0304 	add.w	r3, r4, #4
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f959 	bl	80019d4 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002724:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d905      	bls.n	800273e <xTaskResumeAll+0x9e>
 8002732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002734:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002740:	4613      	mov	r3, r2
 8002742:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002746:	189b      	adds	r3, r3, r2
 8002748:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800274c:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002750:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002754:	189a      	adds	r2, r3, r2
 8002756:	f104 0304 	add.w	r3, r4, #4
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f7ff f8d7 	bl	8001910 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002762:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002764:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002768:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <xTaskResumeAll+0xda>
					{
						xYieldRequired = pdTRUE;
 8002774:	f04f 0301 	mov.w	r3, #1
 8002778:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 800277a:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 800277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1bc      	bne.n	8002702 <xTaskResumeAll+0x62>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002788:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d018      	beq.n	80027c8 <xTaskResumeAll+0x128>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002796:	e00d      	b.n	80027b4 <xTaskResumeAll+0x114>
					{
						vTaskIncrementTick();
 8002798:	f000 f848 	bl	800282c <vTaskIncrementTick>
						--uxMissedTicks;
 800279c:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80027a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80027aa:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80027ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027b2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80027b4:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80027b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ea      	bne.n	8002798 <xTaskResumeAll+0xf8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 80027c2:	f04f 0301 	mov.w	r3, #1
 80027c6:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d006      	beq.n	80027dc <xTaskResumeAll+0x13c>
 80027ce:	f641 5320 	movw	r3, #7456	; 0x1d20
 80027d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d10b      	bne.n	80027f4 <xTaskResumeAll+0x154>
				{
					xAlreadyYielded = pdTRUE;
 80027dc:	f04f 0301 	mov.w	r3, #1
 80027e0:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 80027e2:	f641 5320 	movw	r3, #7456	; 0x1d20
 80027e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 80027f0:	f7ff f990 	bl	8001b14 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80027f4:	f7ff f9ac 	bl	8001b50 <vPortExitCritical>

	return xAlreadyYielded;
 80027f8:	687b      	ldr	r3, [r7, #4]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	f107 070c 	add.w	r7, r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800280a:	f7ff f98f 	bl	8001b2c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800280e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 800281a:	f7ff f999 	bl	8001b50 <vPortExitCritical>

	return xTicks;
 800281e:	687b      	ldr	r3, [r7, #4]
}
 8002820:	4618      	mov	r0, r3
 8002822:	f107 0708 	add.w	r7, r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop

0800282c <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002832:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 80ca 	bne.w	80029d6 <vTaskIncrementTick+0x1aa>
	{
		++xTickCount;
 8002842:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f103 0201 	add.w	r2, r3, #1
 8002850:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002858:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 800285a:	f641 5308 	movw	r3, #7432	; 0x1d08
 800285e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d14b      	bne.n	8002900 <vTaskIncrementTick+0xd4>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8002868:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 800286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <vTaskIncrementTick+0x52>
 8002878:	f7ff f984 	bl	8001b84 <ulPortSetInterruptMask>
 800287c:	e7fe      	b.n	800287c <vTaskIncrementTick+0x50>

			pxTemp = pxDelayedTaskList;
 800287e:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002882:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 800288a:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 800288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800289c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 800289e:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 80028a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 80028aa:	f641 5324 	movw	r3, #7460	; 0x1d24
 80028ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f103 0201 	add.w	r2, r3, #1
 80028b8:	f641 5324 	movw	r3, #7460	; 0x1d24
 80028bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028c0:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028c2:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 80028c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <vTaskIncrementTick+0xb6>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 80028d2:	f240 0318 	movw	r3, #24
 80028d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e00e      	b.n	8002900 <vTaskIncrementTick+0xd4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028e2:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 80028e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	f240 0318 	movw	r3, #24
 80028fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028fe:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8002900:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f240 0318 	movw	r3, #24
 800290e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d36a      	bcc.n	80029ee <vTaskIncrementTick+0x1c2>
 8002918:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 800291c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <vTaskIncrementTick+0x10c>
 8002928:	f240 0318 	movw	r3, #24
 800292c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e05a      	b.n	80029ee <vTaskIncrementTick+0x1c2>
 8002938:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 800293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002952:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d206      	bcs.n	800296c <vTaskIncrementTick+0x140>
 800295e:	f240 0318 	movw	r3, #24
 8002962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e040      	b.n	80029ee <vTaskIncrementTick+0x1c2>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f103 0304 	add.w	r3, r3, #4
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f82e 	bl	80019d4 <uxListRemove>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <vTaskIncrementTick+0x160>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f103 0318 	add.w	r3, r3, #24
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f824 	bl	80019d4 <uxListRemove>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d906      	bls.n	80029ac <vTaskIncrementTick+0x180>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a2:	f641 5310 	movw	r3, #7440	; 0x1d10
 80029a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	4613      	mov	r3, r2
 80029b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029bc:	f641 4230 	movw	r2, #7216	; 0x1c30
 80029c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80029c4:	189a      	adds	r2, r3, r2
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f103 0304 	add.w	r3, r3, #4
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe ff9e 	bl	8001910 <vListInsertEnd>
 80029d4:	e7a0      	b.n	8002918 <vTaskIncrementTick+0xec>
	}
	else
	{
		++uxMissedTicks;
 80029d6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80029da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f103 0201 	add.w	r2, r3, #1
 80029e4:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80029e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ec:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
 80029ee:	f107 0710 	add.w	r7, r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop

080029f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80029fe:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8002a0c:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a14:	f04f 0201 	mov.w	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e093      	b.n	8002b44 <vTaskSwitchContext+0x14c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8002a1c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d80f      	bhi.n	8002a58 <vTaskSwitchContext+0x60>
 8002a38:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f001 fad4 	bl	8004000 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8002a58:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4618      	mov	r0, r3
 8002a66:	f244 51d8 	movw	r1, #17880	; 0x45d8
 8002a6a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002a6e:	f04f 0214 	mov.w	r2, #20
 8002a72:	f001 fb07 	bl	8004084 <memcmp>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d026      	beq.n	8002aca <vTaskSwitchContext+0xd2>
 8002a7c:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f001 fab2 	bl	8004000 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a9c:	e015      	b.n	8002aca <vTaskSwitchContext+0xd2>
 8002a9e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <vTaskSwitchContext+0xba>
 8002aac:	f7ff f86a 	bl	8001b84 <ulPortSetInterruptMask>
 8002ab0:	e7fe      	b.n	8002ab0 <vTaskSwitchContext+0xb8>
 8002ab2:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f103 32ff 	add.w	r2, r3, #4294967295
 8002ac0:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002ad8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002adc:	460b      	mov	r3, r1
 8002ade:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ae2:	185b      	adds	r3, r3, r1
 8002ae4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0d6      	beq.n	8002a9e <vTaskSwitchContext+0xa6>
 8002af0:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b06:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002b0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b0e:	189b      	adds	r3, r3, r2
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f103 0308 	add.w	r3, r3, #8
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d104      	bne.n	8002b34 <vTaskSwitchContext+0x13c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
 8002b44:	f107 0708 	add.w	r7, r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <vTaskPlaceOnEventList+0x16>
 8002b5c:	f7ff f812 	bl	8001b84 <ulPortSetInterruptMask>
 8002b60:	e7fe      	b.n	8002b60 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002b62:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f103 0318 	add.w	r3, r3, #24
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fe fef4 	bl	8001960 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002b78:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f103 0304 	add.w	r3, r3, #4
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe ff24 	bl	80019d4 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d10e      	bne.n	8002bb2 <vTaskPlaceOnEventList+0x66>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002b94:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f103 0304 	add.w	r3, r3, #4
 8002ba2:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 8002ba6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fe feb0 	bl	8001910 <vListInsertEnd>
 8002bb0:	e00a      	b.n	8002bc8 <vTaskPlaceOnEventList+0x7c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002bb2:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	18d3      	adds	r3, r2, r3
 8002bc0:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fa10 	bl	8002fe8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002bc8:	f107 0710 	add.w	r7, r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <vTaskPlaceOnEventListRestricted+0x16>
 8002be0:	f7fe ffd0 	bl	8001b84 <ulPortSetInterruptMask>
 8002be4:	e7fe      	b.n	8002be4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002be6:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f103 0318 	add.w	r3, r3, #24
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fe fe8a 	bl	8001910 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8002bfc:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f103 0304 	add.w	r3, r3, #4
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fee2 	bl	80019d4 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002c10:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	18d3      	adds	r3, r2, r3
 8002c1e:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f9e1 	bl	8002fe8 <prvAddCurrentTaskToDelayedList>
	}
 8002c26:	f107 0710 	add.w	r7, r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop

08002c30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <xTaskRemoveFromEventList+0x1c>
 8002c46:	f7fe ff9d 	bl	8001b84 <ulPortSetInterruptMask>
 8002c4a:	e7fe      	b.n	8002c4a <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f103 0318 	add.w	r3, r3, #24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe febe 	bl	80019d4 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002c58:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d12a      	bne.n	8002cbc <xTaskRemoveFromEventList+0x8c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f103 0304 	add.w	r3, r3, #4
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe feb1 	bl	80019d4 <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d906      	bls.n	8002c92 <xTaskRemoveFromEventList+0x62>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c88:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	4613      	mov	r3, r2
 8002c98:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ca2:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002ca6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002caa:	189a      	adds	r2, r3, r2
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f103 0304 	add.w	r3, r3, #4
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7fe fe2b 	bl	8001910 <vListInsertEnd>
 8002cba:	e009      	b.n	8002cd0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f103 0318 	add.w	r3, r3, #24
 8002cc2:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 8002cc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7fe fe20 	bl	8001910 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d303      	bcc.n	8002cec <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8002ce4:	f04f 0301 	mov.w	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	e002      	b.n	8002cf2 <xTaskRemoveFromEventList+0xc2>
	}
	else
	{
		xReturn = pdFALSE;
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f107 0710 	add.w	r7, r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop

08002d00 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <vTaskSetTimeOutState+0x14>
 8002d0e:	f7fe ff39 	bl	8001b84 <ulPortSetInterruptMask>
 8002d12:	e7fe      	b.n	8002d12 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d14:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d22:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	605a      	str	r2, [r3, #4]
}
 8002d30:	f107 0708 	add.w	r7, r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xTaskCheckForTimeOut+0x16>
 8002d48:	f7fe ff1c 	bl	8001b84 <ulPortSetInterruptMask>
 8002d4c:	e7fe      	b.n	8002d4c <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <xTaskCheckForTimeOut+0x22>
 8002d54:	f7fe ff16 	bl	8001b84 <ulPortSetInterruptMask>
 8002d58:	e7fe      	b.n	8002d58 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8002d5a:	f7fe fee7 	bl	8001b2c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d103      	bne.n	8002d70 <xTaskCheckForTimeOut+0x38>
			{
				xReturn = pdFALSE;
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e038      	b.n	8002de2 <xTaskCheckForTimeOut+0xaa>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	f641 5324 	movw	r3, #7460	; 0x1d24
 8002d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d00c      	beq.n	8002d9c <xTaskCheckForTimeOut+0x64>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d803      	bhi.n	8002d9c <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002d94:	f04f 0301 	mov.w	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e022      	b.n	8002de2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8002d9c:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d213      	bcs.n	8002ddc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	f641 5308 	movw	r3, #7432	; 0x1d08
 8002dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	1acb      	subs	r3, r1, r3
 8002dc8:	18d2      	adds	r2, r2, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff96 	bl	8002d00 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e002      	b.n	8002de2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 8002ddc:	f04f 0301 	mov.w	r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002de2:	f7fe feb5 	bl	8001b50 <vPortExitCritical>

	return xReturn;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	f107 0710 	add.w	r7, r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8002df8:	f641 5320 	movw	r3, #7456	; 0x1d20
 8002dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e00:	f04f 0201 	mov.w	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
}
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8002e14:	f000 f89a 	bl	8002f4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8002e18:	f641 4330 	movw	r3, #7216	; 0x1c30
 8002e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d901      	bls.n	8002e2a <prvIdleTask+0x1e>
			{
				taskYIELD();
 8002e26:	f7fe fe75 	bl	8001b14 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002e2a:	f001 f8ef 	bl	800400c <vApplicationIdleHook>
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002e2e:	e7f1      	b.n	8002e14 <prvIdleTask+0x8>

08002e30 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002e44:	4618      	mov	r0, r3
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	f04f 020a 	mov.w	r2, #10
 8002e4c:	f001 faba 	bl	80043c4 <strncpy>
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d902      	bls.n	8002e66 <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8002e60:	f04f 0304 	mov.w	r3, #4
 8002e64:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f103 0304 	add.w	r3, r3, #4
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fd3b 	bl	80018f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f103 0318 	add.w	r3, r3, #24
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fd35 	bl	80018f4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1c3 0205 	rsb	r2, r3, #5
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif /* portUSING_MPU_WRAPPERS */
}
 8002ea0:	f107 0710 	add.w	r7, r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	e012      	b.n	8002edc <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ec4:	f641 4230 	movw	r2, #7216	; 0x1c30
 8002ec8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002ecc:	189b      	adds	r3, r3, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fcf0 	bl	80018b4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f103 0301 	add.w	r3, r3, #1
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d9e9      	bls.n	8002eb6 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8002ee2:	f641 4094 	movw	r0, #7316	; 0x1c94
 8002ee6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002eea:	f7fe fce3 	bl	80018b4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8002eee:	f641 40a8 	movw	r0, #7336	; 0x1ca8
 8002ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ef6:	f7fe fcdd 	bl	80018b4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8002efa:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 8002efe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f02:	f7fe fcd7 	bl	80018b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8002f06:	f641 40d8 	movw	r0, #7384	; 0x1cd8
 8002f0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f0e:	f7fe fcd1 	bl	80018b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8002f12:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 8002f16:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f1a:	f7fe fccb 	bl	80018b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f1e:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8002f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f26:	f641 4294 	movw	r2, #7316	; 0x1c94
 8002f2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f30:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8002f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f38:	f641 42a8 	movw	r2, #7336	; 0x1ca8
 8002f3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	f107 0708 	add.w	r7, r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8002f52:	e03d      	b.n	8002fd0 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
 8002f54:	f7ff fb92 	bl	800267c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002f58:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 8002f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2300      	movne	r3, #0
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8002f6e:	f7ff fb97 	bl	80026a0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d12b      	bne.n	8002fd0 <prvCheckTasksWaitingTermination+0x84>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8002f78:	f7fe fdd8 	bl	8001b2c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8002f7c:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 8002f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f103 0304 	add.w	r3, r3, #4
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe fd1f 	bl	80019d4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002f96:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f103 32ff 	add.w	r2, r3, #4294967295
 8002fa4:	f641 5304 	movw	r3, #7428	; 0x1d04
 8002fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fac:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8002fae:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8002fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f103 32ff 	add.w	r2, r3, #4294967295
 8002fbc:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8002fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fc4:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002fc6:	f7fe fdc3 	bl	8001b50 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002fca:	6838      	ldr	r0, [r7, #0]
 8002fcc:	f000 f88a 	bl	80030e4 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8002fd0:	f641 43ec 	movw	r3, #7404	; 0x1cec
 8002fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ba      	bne.n	8002f54 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8002fde:	f107 0708 	add.w	r7, r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop

08002fe8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002ff0:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8002ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8002ffe:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d210      	bcs.n	8003030 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800300e:	f641 43c0 	movw	r3, #7360	; 0x1cc0
 8003012:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f103 0304 	add.w	r3, r3, #4
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f7fe fc99 	bl	8001960 <vListInsert>
 800302e:	e01d      	b.n	800306c <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003030:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 8003034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800303e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f103 0304 	add.w	r3, r3, #4
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fe fc88 	bl	8001960 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8003050:	f240 0318 	movw	r3, #24
 8003054:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	d205      	bcs.n	800306c <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8003060:	f240 0318 	movw	r3, #24
 8003064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800306c:	f107 0708 	add.w	r7, r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8003080:	f04f 0044 	mov.w	r0, #68	; 0x44
 8003084:	f7fe fb94 	bl	80017b0 <pvPortMalloc>
 8003088:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <prvAllocateTCBAndStack+0x32>
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fb87 	bl	80017b0 <pvPortMalloc>
 80030a2:	4603      	mov	r3, r0
 80030a4:	e000      	b.n	80030a8 <prvAllocateTCBAndStack+0x34>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7fe fbdf 	bl	8001878 <vPortFree>
			pxNewTCB = NULL;
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e00a      	b.n	80030d8 <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030cc:	4610      	mov	r0, r2
 80030ce:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 80030d2:	461a      	mov	r2, r3
 80030d4:	f001 f8e0 	bl	8004298 <memset>
		}
	}

	return pxNewTCB;
 80030d8:	68fb      	ldr	r3, [r7, #12]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	f107 0710 	add.w	r7, r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fbc1 	bl	8001878 <vPortFree>
		vPortFree( pxTCB );
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fbbe 	bl	8001878 <vPortFree>
	}
 80030fc:	f107 0708 	add.w	r7, r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800310a:	f641 432c 	movw	r3, #7212	; 0x1c2c
 800310e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003116:	687b      	ldr	r3, [r7, #4]
	}
 8003118:	4618      	mov	r0, r3
 800311a:	f107 070c 	add.w	r7, r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800312a:	f641 5314 	movw	r3, #7444	; 0x1d14
 800312e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	e00d      	b.n	800315c <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003140:	f641 5318 	movw	r3, #7448	; 0x1d18
 8003144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800314e:	f04f 0301 	mov.w	r3, #1
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	e002      	b.n	800315c <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003156:	f04f 0302 	mov.w	r3, #2
 800315a:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800315c:	687b      	ldr	r3, [r7, #4]
	}
 800315e:	4618      	mov	r0, r3
 8003160:	f107 070c 	add.w	r7, r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop

0800316c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d05f      	beq.n	800323e <vTaskPriorityInherit+0xd2>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	429a      	cmp	r2, r3
 8003190:	d255      	bcs.n	800323e <vTaskPriorityInherit+0xd2>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8003192:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f1c3 0205 	rsb	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6959      	ldr	r1, [r3, #20]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4613      	mov	r3, r2
 80031b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031ba:	f641 4230 	movw	r2, #7216	; 0x1c30
 80031be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	4299      	cmp	r1, r3
 80031c6:	d132      	bne.n	800322e <vTaskPriorityInherit+0xc2>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f103 0304 	add.w	r3, r3, #4
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fc00 	bl	80019d4 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80031d4:	f641 432c 	movw	r3, #7212	; 0x1c2c
 80031d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	f641 5310 	movw	r3, #7440	; 0x1d10
 80031ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d906      	bls.n	8003204 <vTaskPriorityInherit+0x98>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	f641 5310 	movw	r3, #7440	; 0x1d10
 80031fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	4613      	mov	r3, r2
 800320a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800320e:	189b      	adds	r3, r3, r2
 8003210:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003214:	f641 4230 	movw	r2, #7216	; 0x1c30
 8003218:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800321c:	189a      	adds	r2, r3, r2
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f103 0304 	add.w	r3, r3, #4
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fe fb72 	bl	8001910 <vListInsertEnd>
 800322c:	e007      	b.n	800323e <vTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800322e:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8003232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 800323e:	f107 0710 	add.w	r7, r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop

08003248 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d039      	beq.n	80032ce <vTaskPriorityDisinherit+0x86>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	429a      	cmp	r2, r3
 8003264:	d033      	beq.n	80032ce <vTaskPriorityDisinherit+0x86>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f103 0304 	add.w	r3, r3, #4
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe fbb1 	bl	80019d4 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	f1c3 0205 	rsb	r2, r3, #5
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	f641 5310 	movw	r3, #7440	; 0x1d10
 800328e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d906      	bls.n	80032a6 <vTaskPriorityDisinherit+0x5e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	f641 5310 	movw	r3, #7440	; 0x1d10
 80032a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032aa:	4613      	mov	r3, r2
 80032ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032b0:	189b      	adds	r3, r3, r2
 80032b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032b6:	f641 4230 	movw	r2, #7216	; 0x1c30
 80032ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80032be:	189a      	adds	r2, r3, r2
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f103 0304 	add.w	r3, r3, #4
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f7fe fb21 	bl	8001910 <vListInsertEnd>
			}
		}
	}
 80032ce:	f107 0710 	add.w	r7, r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop

080032d8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80032e4:	f000 faa4 	bl	8003830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80032e8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80032ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01a      	beq.n	800332c <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80032f6:	f04f 0303 	mov.w	r3, #3
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	9303      	str	r3, [sp, #12]
 800330e:	f243 406d 	movw	r0, #13421	; 0x346d
 8003312:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003316:	f244 41f8 	movw	r1, #17656	; 0x44f8
 800331a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800331e:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f7ff f845 	bl	80023b4 <xTaskGenericCreate>
 800332a:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <xTimerCreateTimerTask+0x60>
 8003332:	f7fe fc27 	bl	8001b84 <ulPortSetInterruptMask>
 8003336:	e7fe      	b.n	8003336 <xTimerCreateTimerTask+0x5e>
	return xReturn;
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	4618      	mov	r0, r3
 800333c:	f107 0708 	add.w	r7, r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003358:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800335c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d03d      	beq.n	80033e2 <xTimerGenericCommand+0x9e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d125      	bne.n	80033c4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003378:	f7ff fed4 	bl	8003124 <xTaskGetSchedulerState>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10f      	bne.n	80033a2 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8003382:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003386:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	f107 0310 	add.w	r3, r7, #16
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f7fe fce9 	bl	8001d70 <xQueueGenericSend>
 800339e:	61f8      	str	r0, [r7, #28]
 80033a0:	e01f      	b.n	80033e2 <xTimerGenericCommand+0x9e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033a2:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80033a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	f107 0310 	add.w	r3, r7, #16
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f7fe fcd8 	bl	8001d70 <xQueueGenericSend>
 80033c0:	61f8      	str	r0, [r7, #28]
 80033c2:	e00e      	b.n	80033e2 <xTimerGenericCommand+0x9e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033c4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80033c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	f7fe fd70 	bl	8001ec0 <xQueueGenericSendFromISR>
 80033e0:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 80033e2:	69fb      	ldr	r3, [r7, #28]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	f107 0720 	add.w	r7, r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop

080033f0 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033fa:	f641 5354 	movw	r3, #7508	; 0x1d54
 80033fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f103 0304 	add.w	r3, r3, #4
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fadf 	bl	80019d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d11e      	bne.n	800345c <prvProcessExpiredTimer+0x6c>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	4619      	mov	r1, r3
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f000 f8bf 	bl	80035b0 <prvInsertTimerInActiveList>
 8003432:	4603      	mov	r3, r0
 8003434:	2b01      	cmp	r3, #1
 8003436:	d111      	bne.n	800345c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f7ff ff7b 	bl	8003344 <xTimerGenericCommand>
 800344e:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <prvProcessExpiredTimer+0x6c>
 8003456:	f7fe fb95 	bl	8001b84 <ulPortSetInterruptMask>
 800345a:	e7fe      	b.n	800345a <prvProcessExpiredTimer+0x6a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	4798      	blx	r3
}
 8003464:	f107 0710 	add.w	r7, r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003474:	f107 0308 	add.w	r3, r7, #8
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f843 	bl	8003504 <prvGetNextExpireTime>
 800347e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	4619      	mov	r1, r3
 8003486:	f000 f803 	bl	8003490 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800348a:	f000 f8db 	bl	8003644 <prvProcessReceivedCommands>
	}
 800348e:	e7f1      	b.n	8003474 <prvTimerTask+0x8>

08003490 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 800349a:	f7ff f8ef 	bl	800267c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800349e:	f107 0308 	add.w	r3, r7, #8
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f858 	bl	8003558 <prvSampleTimeNow>
 80034a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d121      	bne.n	80034f4 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <prvProcessTimerOrBlockTask+0x3c>
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d806      	bhi.n	80034cc <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 80034be:	f7ff f8ef 	bl	80026a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	f7ff ff93 	bl	80033f0 <prvProcessExpiredTimer>
 80034ca:	e017      	b.n	80034fc <prvProcessTimerOrBlockTask+0x6c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80034cc:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80034d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fe ff38 	bl	8002354 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80034e4:	f7ff f8dc 	bl	80026a0 <xTaskResumeAll>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <prvProcessTimerOrBlockTask+0x6a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 80034ee:	f7fe fb11 	bl	8001b14 <vPortYieldFromISR>
 80034f2:	e002      	b.n	80034fa <prvProcessTimerOrBlockTask+0x6a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 80034f4:	f7ff f8d4 	bl	80026a0 <xTaskResumeAll>
 80034f8:	e000      	b.n	80034fc <prvProcessTimerOrBlockTask+0x6c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 80034fa:	bf00      	nop
		else
		{
			xTaskResumeAll();
		}
	}
}
 80034fc:	f107 0710 	add.w	r7, r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800350c:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2300      	movne	r3, #0
 800351e:	2301      	moveq	r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <prvGetNextExpireTime+0x3e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003530:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e002      	b.n	8003548 <prvGetNextExpireTime+0x44>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	4618      	mov	r0, r3
 800354c:	f107 0714 	add.w	r7, r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop

08003558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8003560:	f7ff f950 	bl	8002804 <xTaskGetTickCount>
 8003564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003566:	f641 5360 	movw	r3, #7520	; 0x1d60
 800356a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20c      	bcs.n	8003590 <prvSampleTimeNow+0x38>
	{
		prvSwitchTimerLists( xLastTime );
 8003576:	f641 5360 	movw	r3, #7520	; 0x1d60
 800357a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f8e1 	bl	8003748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f04f 0201 	mov.w	r2, #1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e003      	b.n	8003598 <prvSampleTimeNow+0x40>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003598:	f641 5360 	movw	r3, #7520	; 0x1d60
 800359c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80035a4:	68fb      	ldr	r3, [r7, #12]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	f107 0710 	add.w	r7, r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d817      	bhi.n	8003608 <prvInsertTimerInActiveList+0x58>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d303      	bcc.n	80035ee <prvInsertTimerInActiveList+0x3e>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80035e6:	f04f 0301 	mov.w	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e024      	b.n	8003638 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035ee:	f641 5358 	movw	r3, #7512	; 0x1d58
 80035f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f103 0304 	add.w	r3, r3, #4
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	f7fe f9ad 	bl	8001960 <vListInsert>
 8003606:	e017      	b.n	8003638 <prvInsertTimerInActiveList+0x88>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d207      	bcs.n	8003620 <prvInsertTimerInActiveList+0x70>
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d303      	bcc.n	8003620 <prvInsertTimerInActiveList+0x70>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003618:	f04f 0301 	mov.w	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e00b      	b.n	8003638 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003620:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f103 0304 	add.w	r3, r3, #4
 8003630:	4610      	mov	r0, r2
 8003632:	4619      	mov	r1, r3
 8003634:	f7fe f994 	bl	8001960 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003638:	697b      	ldr	r3, [r7, #20]
}
 800363a:	4618      	mov	r0, r3
 800363c:	f107 0718 	add.w	r7, r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800364a:	e066      	b.n	800371a <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <prvProcessReceivedCommands+0x20>
		{
			/* The timer is in a list, remove it. */
			uxListRemove( &( pxTimer->xTimerListItem ) );
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f103 0304 	add.w	r3, r3, #4
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe f9b8 	bl	80019d4 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003664:	f107 0304 	add.w	r3, r7, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff75 	bl	8003558 <prvSampleTimeNow>
 800366e:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d84e      	bhi.n	8003714 <prvProcessReceivedCommands+0xd0>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <prvProcessReceivedCommands+0x38>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	0800368d 	.word	0x0800368d
 8003680:	08003715 	.word	0x08003715
 8003684:	080036e3 	.word	0x080036e3
 8003688:	0800370d 	.word	0x0800370d
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	18d2      	adds	r2, r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	69f8      	ldr	r0, [r7, #28]
 8003698:	4611      	mov	r1, r2
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	f7ff ff88 	bl	80035b0 <prvInsertTimerInActiveList>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d138      	bne.n	8003718 <prvProcessReceivedCommands+0xd4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	69f8      	ldr	r0, [r7, #28]
 80036ac:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d130      	bne.n	8003718 <prvProcessReceivedCommands+0xd4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	9200      	str	r2, [sp, #0]
 80036c4:	69f8      	ldr	r0, [r7, #28]
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	461a      	mov	r2, r3
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	f7ff fe38 	bl	8003344 <xTimerGenericCommand>
 80036d4:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11d      	bne.n	8003718 <prvProcessReceivedCommands+0xd4>
 80036dc:	f7fe fa52 	bl	8001b84 <ulPortSetInterruptMask>
 80036e0:	e7fe      	b.n	80036e0 <prvProcessReceivedCommands+0x9c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <prvProcessReceivedCommands+0xb2>
 80036f0:	f7fe fa48 	bl	8001b84 <ulPortSetInterruptMask>
 80036f4:	e7fe      	b.n	80036f4 <prvProcessReceivedCommands+0xb0>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	18d3      	adds	r3, r2, r3
 80036fe:	69f8      	ldr	r0, [r7, #28]
 8003700:	4619      	mov	r1, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f7ff ff53 	bl	80035b0 <prvInsertTimerInActiveList>
				break;
 800370a:	e006      	b.n	800371a <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 800370c:	69f8      	ldr	r0, [r7, #28]
 800370e:	f7fe f8b3 	bl	8001878 <vPortFree>
				break;
 8003712:	e002      	b.n	800371a <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
 8003714:	bf00      	nop
 8003716:	e000      	b.n	800371a <prvProcessReceivedCommands+0xd6>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 8003718:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800371a:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800371e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	f107 0308 	add.w	r3, r7, #8
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	f7fe fc22 	bl	8001f7c <xQueueGenericReceive>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d186      	bne.n	800364c <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 800373e:	f107 0720 	add.w	r7, r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop

08003748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003750:	e04b      	b.n	80037ea <prvSwitchTimerLists+0xa2>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003752:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003762:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003766:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f103 0304 	add.w	r3, r3, #4
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe f92b 	bl	80019d4 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	69b8      	ldr	r0, [r7, #24]
 8003784:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d12d      	bne.n	80037ea <prvSwitchTimerLists+0xa2>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	18d3      	adds	r3, r2, r3
 8003796:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	429a      	cmp	r2, r3
 800379e:	d912      	bls.n	80037c6 <prvSwitchTimerLists+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037ac:	f641 5354 	movw	r3, #7508	; 0x1d54
 80037b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f103 0304 	add.w	r3, r3, #4
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	f7fe f8ce 	bl	8001960 <vListInsert>
 80037c4:	e011      	b.n	80037ea <prvSwitchTimerLists+0xa2>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	69b8      	ldr	r0, [r7, #24]
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	f7ff fdb4 	bl	8003344 <xTimerGenericCommand>
 80037dc:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <prvSwitchTimerLists+0xa2>
 80037e4:	f7fe f9ce 	bl	8001b84 <ulPortSetInterruptMask>
 80037e8:	e7fe      	b.n	80037e8 <prvSwitchTimerLists+0xa0>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037ea:	f641 5354 	movw	r3, #7508	; 0x1d54
 80037ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ab      	bne.n	8003752 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80037fa:	f641 5354 	movw	r3, #7508	; 0x1d54
 80037fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8003806:	f641 5358 	movw	r3, #7512	; 0x1d58
 800380a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003818:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800381a:	f641 5358 	movw	r3, #7512	; 0x1d58
 800381e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	f107 0720 	add.w	r7, r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop

08003830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003834:	f7fe f97a 	bl	8001b2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003838:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800383c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d12b      	bne.n	800389e <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
 8003846:	f641 502c 	movw	r0, #7468	; 0x1d2c
 800384a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800384e:	f7fe f831 	bl	80018b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003852:	f641 5040 	movw	r0, #7488	; 0x1d40
 8003856:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800385a:	f7fe f82b 	bl	80018b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800385e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8003862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003866:	f641 522c 	movw	r2, #7468	; 0x1d2c
 800386a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800386e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003870:	f641 5358 	movw	r3, #7512	; 0x1d58
 8003874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003878:	f641 5240 	movw	r2, #7488	; 0x1d40
 800387c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003880:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8003882:	f04f 0005 	mov.w	r0, #5
 8003886:	f04f 010c 	mov.w	r1, #12
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f7fe fa2b 	bl	8001ce8 <xQueueGenericCreate>
 8003892:	4602      	mov	r2, r0
 8003894:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800389c:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 800389e:	f7fe f957 	bl	8001b50 <vPortExitCritical>
}
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <TIM7_IRQHandler>:
{
	( void )pxMBPortCBTimerExpired(  );
}

void TIM7_IRQHandler()
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80038a8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80038ac:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80038b0:	f04f 0101 	mov.w	r1, #1
 80038b4:	f7fd fd7a 	bl	80013ac <TIM_ClearITPendingBit>
	( void )pxMBPortCBTimerExpired(  );
 80038b8:	f641 5368 	movw	r3, #7528	; 0x1d68
 80038bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4798      	blx	r3
}
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop

080038c8 <Reset_Handler>:
 80038c8:	2100      	movs	r1, #0
 80038ca:	f000 b804 	b.w	80038d6 <LoopCopyDataInit>

080038ce <CopyDataInit>:
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <LoopFillZerobss+0x12>)
 80038d0:	585b      	ldr	r3, [r3, r1]
 80038d2:	5043      	str	r3, [r0, r1]
 80038d4:	3104      	adds	r1, #4

080038d6 <LoopCopyDataInit>:
 80038d6:	480b      	ldr	r0, [pc, #44]	; (8003904 <LoopFillZerobss+0x16>)
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <LoopFillZerobss+0x1a>)
 80038da:	1842      	adds	r2, r0, r1
 80038dc:	429a      	cmp	r2, r3
 80038de:	f4ff aff6 	bcc.w	80038ce <CopyDataInit>
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <LoopFillZerobss+0x1e>)
 80038e4:	f000 b803 	b.w	80038ee <LoopFillZerobss>

080038e8 <FillZerobss>:
 80038e8:	2300      	movs	r3, #0
 80038ea:	f842 3b04 	str.w	r3, [r2], #4

080038ee <LoopFillZerobss>:
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <LoopFillZerobss+0x22>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	f4ff aff9 	bcc.w	80038e8 <FillZerobss>
 80038f6:	f000 f80f 	bl	8003918 <SystemInit>
 80038fa:	f000 fb41 	bl	8003f80 <main>
 80038fe:	4770      	bx	lr
 8003900:	08004af0 	.word	0x08004af0
 8003904:	20000000 	.word	0x20000000
 8003908:	20000020 	.word	0x20000020
 800390c:	20000020 	.word	0x20000020
 8003910:	20001d78 	.word	0x20001d78

08003914 <ADC1_IRQHandler>:
 8003914:	f7ff bffe 	b.w	8003914 <ADC1_IRQHandler>

08003918 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	/* Reset the RCC clock configuration to the default reset state(for debug purpose) */
	/* Set HSION bit */
	RCC ->CR |= (uint32_t) 0x00000001;
 800391c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003920:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003928:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
	RCC ->CFGR &= (uint32_t) 0xF8FF0000;
 8003934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003938:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800393c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003940:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 800394e:	400b      	ands	r3, r1
 8003950:	6053      	str	r3, [r2, #4]
#else
	RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   

	/* Reset HSEON, CSSON and PLLON bits */RCC ->CR &= (uint32_t) 0xFEF6FFFF;
 8003952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003956:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800395a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800395e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003968:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800396c:	601a      	str	r2, [r3, #0]

	/* Reset HSEBYP bit */RCC ->CR &= (uint32_t) 0xFFFBFFFF;
 800396e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800397a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003984:	601a      	str	r2, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */RCC ->CFGR &=
 8003986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800398e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003992:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003996:	6852      	ldr	r2, [r2, #4]
 8003998:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800399c:	605a      	str	r2, [r3, #4]
	RCC->CIR = 0x00FF0000;

	/* Reset CFGR2 register */
	RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
	/* Disable all interrupts and clear pending bits  */RCC ->CIR = 0x009F0000;
 800399e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80039aa:	609a      	str	r2, [r3, #8]

	/* Reset CFGR2 register */RCC ->CFGR2 = 0x00000000;
 80039ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* DATA_IN_ExtSRAM */
#endif 

	/* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
	/* Configure the Flash Latency cycles and enable prefetch buffer */
	SetSysClock();
 80039ba:	f000 f809 	bl	80039d0 <SetSysClock>

#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB ->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80039be:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80039c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop

080039d0 <SetSysClock>:
/**
 * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 * @param  None
 * @retval None
 */
static void SetSysClock(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
	SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
	SetSysClockTo24();
 80039d4:	f000 f802 	bl	80039dc <SetSysClockTo24>
	SetSysClockTo72();
#endif

	/* If none of the define above is enabled, the HSI is used as System clock
	 source (default after reset) */
}
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop

080039dc <SetSysClockTo24>:
 *         and PCLK1 prescalers.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
static void SetSysClockTo24(void) {
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	/* Enable HSE */RCC ->CR |= ((uint32_t) RCC_CR_HSEON );
 80039ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a04:	601a      	str	r2, [r3, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do {
		HSEStatus = RCC ->CR & RCC_CR_HSERDY;
 8003a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f103 0301 	add.w	r3, r3, #1
 8003a1c:	607b      	str	r3, [r7, #4]
	} while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT ));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <SetSysClockTo24+0x50>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003a2a:	d1ec      	bne.n	8003a06 <SetSysClockTo24+0x2a>

	if ((RCC ->CR & RCC_CR_HSERDY )!= RESET) {
 8003a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <SetSysClockTo24+0x6a>
		HSEStatus = (uint32_t) 0x01;
 8003a3e:	f04f 0301 	mov.w	r3, #1
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	e002      	b.n	8003a4c <SetSysClockTo24+0x70>
	} else {
		HSEStatus = (uint32_t) 0x00;
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t) 0x01) {
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d16d      	bne.n	8003b2e <SetSysClockTo24+0x152>
		FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
		FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
#endif

		/* HCLK = SYSCLK */
		RCC ->CFGR |= (uint32_t) RCC_CFGR_HPRE_DIV1;
 8003a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a62:	6852      	ldr	r2, [r2, #4]
 8003a64:	605a      	str	r2, [r3, #4]

		/* PCLK2 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE2_DIV1;
 8003a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a76:	6852      	ldr	r2, [r2, #4]
 8003a78:	605a      	str	r2, [r3, #4]

		/* PCLK1 = HCLK */RCC ->CFGR |= (uint32_t) RCC_CFGR_PPRE1_DIV1;
 8003a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a8a:	6852      	ldr	r2, [r2, #4]
 8003a8c:	605a      	str	r2, [r3, #4]
		/* Wait till PLL2 is ready */
		while((RCC->CR & RCC_CR_PLL2RDY) == 0)
		{
		}
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */RCC ->CFGR &=
 8003a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a9e:	6852      	ldr	r2, [r2, #4]
 8003aa0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003aa4:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE
						| RCC_CFGR_PLLMULL ));
		RCC ->CFGR |= (uint32_t) (RCC_CFGR_PLLSRC_PREDIV1
 8003aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aaa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ab2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ab6:	6852      	ldr	r2, [r2, #4]
 8003ab8:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 8003abc:	605a      	str	r2, [r3, #4]
		/*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

		/* Enable PLL */RCC ->CR |= RCC_CR_PLLON;
 8003abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003ad4:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is ready */
		while ((RCC ->CR & RCC_CR_PLLRDY )== 0){
 8003ad6:	bf00      	nop
 8003ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f6      	beq.n	8003ad8 <SetSysClockTo24+0xfc>
		}

		/* Select PLL as system clock source */RCC ->CFGR &=
 8003aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003af6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003afa:	6852      	ldr	r2, [r2, #4]
 8003afc:	f022 0203 	bic.w	r2, r2, #3
 8003b00:	605a      	str	r2, [r3, #4]
				(uint32_t) ((uint32_t) ~(RCC_CFGR_SW ));
		RCC ->CFGR |= (uint32_t) RCC_CFGR_SW_PLL;
 8003b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b12:	6852      	ldr	r2, [r2, #4]
 8003b14:	f042 0202 	orr.w	r2, r2, #2
 8003b18:	605a      	str	r2, [r3, #4]

		/* Wait till PLL is used as system clock source */
		while ((RCC ->CFGR & (uint32_t) RCC_CFGR_SWS )!= (uint32_t)0x08){
 8003b1a:	bf00      	nop
 8003b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d1f6      	bne.n	8003b1c <SetSysClockTo24+0x140>
}
else
{ /* If HSE fails to start-up, the application will have wrong clock 
 configuration. User can add here some code to deal with this error */
}
}
 8003b2e:	f107 070c 	add.w	r7, r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <SetupClock>:
volatile uint16_t counter = 0;

unsigned char error_handle (unsigned char err);

void SetupClock()
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	RCC_DeInit ();                    /* RCC system reset(for debug purpose)*/
 8003b3c:	f7fd f8f8 	bl	8000d30 <RCC_DeInit>
	      RCC_HSEConfig (RCC_HSE_ON);       /* Enable HSE                         */
 8003b40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003b44:	f7fd f948 	bl	8000dd8 <RCC_HSEConfig>

	      /* Wait till HSE is ready                                               */
	      while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 8003b48:	bf00      	nop
 8003b4a:	f04f 0031 	mov.w	r0, #49	; 0x31
 8003b4e:	f7fd fb87 	bl	8001260 <RCC_GetFlagStatus>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f8      	beq.n	8003b4a <SetupClock+0x12>

	      RCC_HCLKConfig   (RCC_SYSCLK_Div1);   /* HCLK   = SYSCLK                */
 8003b58:	f04f 0000 	mov.w	r0, #0
 8003b5c:	f7fd f9e4 	bl	8000f28 <RCC_HCLKConfig>
	      RCC_PCLK2Config  (RCC_HCLK_Div1);     /* PCLK2  = HCLK                  */
 8003b60:	f04f 0000 	mov.w	r0, #0
 8003b64:	f7fd fa20 	bl	8000fa8 <RCC_PCLK2Config>
	      RCC_PCLK1Config  (RCC_HCLK_Div1);     /* PCLK1  = HCLK1                */
 8003b68:	f04f 0000 	mov.w	r0, #0
 8003b6c:	f7fd f9fc 	bl	8000f68 <RCC_PCLK1Config>
	      //RCC_ADCCLKConfig (RCC_PCLK2_Div4);    /* ADCCLK = PCLK2/4               */

	      /* PLLCLK = 8MHz * 6 = 48 MHz                                           */
	      RCC_PLLConfig (RCC_PLLSource_PREDIV1, RCC_PLLMul_6);
 8003b70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003b74:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003b78:	f7fd f972 	bl	8000e60 <RCC_PLLConfig>

	      RCC_PLLCmd (ENABLE);                  /* Enable PLL                     */
 8003b7c:	f04f 0001 	mov.w	r0, #1
 8003b80:	f7fd f992 	bl	8000ea8 <RCC_PLLCmd>

	      /* Wait till PLL is ready                                               */
	      while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8003b84:	bf00      	nop
 8003b86:	f04f 0039 	mov.w	r0, #57	; 0x39
 8003b8a:	f7fd fb69 	bl	8001260 <RCC_GetFlagStatus>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f8      	beq.n	8003b86 <SetupClock+0x4e>

	      /* Select PLL as system clock source                                    */
	      RCC_SYSCLKConfig (RCC_SYSCLKSource_PLLCLK);
 8003b94:	f04f 0002 	mov.w	r0, #2
 8003b98:	f7fd f996 	bl	8000ec8 <RCC_SYSCLKConfig>

	      /* Wait till PLL is used as system clock source                         */
	      while (RCC_GetSYSCLKSource() != 0x08);
 8003b9c:	bf00      	nop
 8003b9e:	f7fd f9b3 	bl	8000f08 <RCC_GetSYSCLKSource>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d1fa      	bne.n	8003b9e <SetupClock+0x66>

}
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop

08003bac <LEDsInit>:

void LEDsInit()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003bb2:	f04f 0010 	mov.w	r0, #16
 8003bb6:	f04f 0101 	mov.w	r1, #1
 8003bba:	f7fd fafd 	bl	80011b8 <RCC_APB2PeriphClockCmd>
   GPIO_InitTypeDef GPIO_InitStructure;
   /* Ñâåòîäèîäû íà PC8, PC9          */
   GPIO_InitStructure.GPIO_Pin   = LED_GREEN | LED_BLUE;
 8003bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bc2:	80bb      	strh	r3, [r7, #4]
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003bc4:	f04f 0303 	mov.w	r3, #3
 8003bc8:	71bb      	strb	r3, [r7, #6]
   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 8003bca:	f04f 0310 	mov.w	r3, #16
 8003bce:	71fb      	strb	r3, [r7, #7]
   GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8003bd0:	f107 0304 	add.w	r3, r7, #4
 8003bd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bd8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7fc ff77 	bl	8000ad0 <GPIO_Init>
}
 8003be2:	f107 0708 	add.w	r7, r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop

08003bec <BtnInit>:

void BtnInit()
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8003bf2:	f04f 0004 	mov.w	r0, #4
 8003bf6:	f04f 0101 	mov.w	r1, #1
 8003bfa:	f7fd fadd 	bl	80011b8 <RCC_APB2PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8003bfe:	f04f 0301 	mov.w	r3, #1
 8003c02:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003c04:	f04f 0304 	mov.w	r3, #4
 8003c08:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003c0a:	f107 0304 	add.w	r3, r7, #4
 8003c0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c12:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003c16:	4619      	mov	r1, r3
 8003c18:	f7fc ff5a 	bl	8000ad0 <GPIO_Init>
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 8003c1c:	f04f 0000 	mov.w	r0, #0
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	f7fd f82c 	bl	8000c80 <GPIO_EXTILineConfig>
}
 8003c28:	f107 0708 	add.w	r7, r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <USART_GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_GPIO_Configuration(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  /* Enable GPIOA clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003c36:	f04f 0004 	mov.w	r0, #4
 8003c3a:	f04f 0101 	mov.w	r1, #1
 8003c3e:	f7fd fabb 	bl	80011b8 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure USART1 Tx (PA.09) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c46:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003c48:	f04f 0318 	mov.w	r3, #24
 8003c4c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003c4e:	f04f 0303 	mov.w	r3, #3
 8003c52:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003c54:	f107 0304 	add.w	r3, r7, #4
 8003c58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c5c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003c60:	4619      	mov	r1, r3
 8003c62:	f7fc ff35 	bl	8000ad0 <GPIO_Init>

  /* Configure USART1 Rx (PA.10) as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c6a:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003c6c:	f04f 0304 	mov.w	r3, #4
 8003c70:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003c72:	f107 0304 	add.w	r3, r7, #4
 8003c76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c7a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f7fc ff26 	bl	8000ad0 <GPIO_Init>
}
 8003c84:	f107 0708 	add.w	r7, r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <USART_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Configuration(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
  /* Enable USART1 */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8003c92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c96:	f04f 0101 	mov.w	r1, #1
 8003c9a:	f7fd fa8d 	bl	80011b8 <RCC_APB2PeriphClockCmd>
        - USART CPOL: Clock is active low
        - USART CPHA: Data is captured on the middle
        - USART LastBit: The clock pulse of the last data bit is not output to
                         the SCLK pin
  */
  USART_InitStructure.USART_BaudRate = BAUDRATE;
 8003c9e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ca2:	603b      	str	r3, [r7, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	80bb      	strh	r3, [r7, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	80fb      	strh	r3, [r7, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	813b      	strh	r3, [r7, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	81bb      	strh	r3, [r7, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003cbc:	f04f 030c 	mov.w	r3, #12
 8003cc0:	817b      	strh	r3, [r7, #10]

  USART_Init(USART1, &USART_InitStructure);
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003cc8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fd fb7f 	bl	80013d0 <USART_Init>

  /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
 8003cd2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003cd6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003cda:	f04f 0101 	mov.w	r1, #1
 8003cde:	f7fd fc4d 	bl	800157c <USART_Cmd>

  uart_print_string(USART1, "\n===== UART1 инициализирован =====",1);
 8003ce2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003ce6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003cea:	f244 5100 	movw	r1, #17664	; 0x4500
 8003cee:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003cf2:	f04f 0201 	mov.w	r2, #1
 8003cf6:	f7fc fbe5 	bl	80004c4 <uart_print_string>
}
 8003cfa:	f107 0710 	add.w	r7, r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop

08003d04 <EXTI_Configuration>:

void EXTI_Configuration(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8003d0a:	f04f 0301 	mov.w	r3, #1
 8003d0e:	603b      	str	r3, [r7, #0]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	713b      	strb	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8003d16:	f04f 0308 	mov.w	r3, #8
 8003d1a:	717b      	strb	r3, [r7, #5]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003d1c:	f04f 0301 	mov.w	r3, #1
 8003d20:	71bb      	strb	r3, [r7, #6]
  EXTI_Init(&EXTI_InitStructure);
 8003d22:	463b      	mov	r3, r7
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fc fe27 	bl	8000978 <EXTI_Init>
}
 8003d2a:	f107 0708 	add.w	r7, r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop

08003d34 <NVIC_Configuration_USART1>:

void NVIC_Configuration_USART1(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Place the vector table into FLASH */
	//NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8003d3a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003d3e:	f7fc fd93 	bl	8000868 <NVIC_PriorityGroupConfig>

	//select NVIC channel to configure
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8003d42:	f04f 0325 	mov.w	r3, #37	; 0x25
 8003d46:	713b      	strb	r3, [r7, #4]
	//set priority to lowest
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 8003d48:	f04f 030f 	mov.w	r3, #15
 8003d4c:	717b      	strb	r3, [r7, #5]
	//set subpriority to lowest
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 8003d4e:	f04f 030f 	mov.w	r3, #15
 8003d52:	71bb      	strb	r3, [r7, #6]
	//enable IRQ channel
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003d54:	f04f 0301 	mov.w	r3, #1
 8003d58:	71fb      	strb	r3, [r7, #7]
	//update NVIC registers
	NVIC_Init(&NVIC_InitStructure);
 8003d5a:	f107 0304 	add.w	r3, r7, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fc fd96 	bl	8000890 <NVIC_Init>

	//disable Transmit Data Register empty interrupt
	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8003d64:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003d68:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003d6c:	f240 7127 	movw	r1, #1831	; 0x727
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f7fd fc22 	bl	80015bc <USART_ITConfig>
	//enable Receive Data register not empty interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003d78:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003d7c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003d80:	f240 5125 	movw	r1, #1317	; 0x525
 8003d84:	f04f 0201 	mov.w	r2, #1
 8003d88:	f7fd fc18 	bl	80015bc <USART_ITConfig>


}
 8003d8c:	f107 0708 	add.w	r7, r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <NVIC_Configuration_USER_BUTTON>:

void NVIC_Configuration_USER_BUTTON(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8003d9a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003d9e:	f7fc fd63 	bl	8000868 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8003da2:	f04f 0306 	mov.w	r3, #6
 8003da6:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 8003da8:	f04f 030f 	mov.w	r3, #15
 8003dac:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = configLIBRARY_LOWEST_INTERRUPT_PRIORITY;
 8003dae:	f04f 030f 	mov.w	r3, #15
 8003db2:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003db4:	f04f 0301 	mov.w	r3, #1
 8003db8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8003dba:	f107 0304 	add.w	r3, r7, #4
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc fd66 	bl	8000890 <NVIC_Init>
}
 8003dc4:	f107 0708 	add.w	r7, r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
        EXTI_ClearITPendingBit(EXTI_Line0);
 8003dd0:	f04f 0001 	mov.w	r0, #1
 8003dd4:	f7fc fe6c 	bl	8000ab0 <EXTI_ClearITPendingBit>

        uart_print_string(USART1, "Тынц",1);
 8003dd8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003ddc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003de0:	f244 5134 	movw	r1, #17716	; 0x4534
 8003de4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003de8:	f04f 0201 	mov.w	r2, #1
 8003dec:	f7fc fb6a 	bl	80004c4 <uart_print_string>
		{
			LED_PORT->ODR |= LED_GREEN;
 8003df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dfc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e00:	68d2      	ldr	r2, [r2, #12]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	60da      	str	r2, [r3, #12]
			//vTaskDelay(10);
			delay_ms(10);
 8003e08:	f04f 000a 	mov.w	r0, #10
 8003e0c:	f7fc fc86 	bl	800071c <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 8003e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e1c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8003e26:	60da      	str	r2, [r3, #12]
		}
}
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop

08003e2c <vFreeRTOSInitAll>:

void vFreeRTOSInitAll()
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
	SetupClock();
 8003e30:	f7ff fe82 	bl	8003b38 <SetupClock>

	LEDsInit();
 8003e34:	f7ff feba 	bl	8003bac <LEDsInit>
	BtnInit();
 8003e38:	f7ff fed8 	bl	8003bec <BtnInit>

	EXTI_Configuration();
 8003e3c:	f7ff ff62 	bl	8003d04 <EXTI_Configuration>

	USART_GPIO_Configuration();
 8003e40:	f7ff fef6 	bl	8003c30 <USART_GPIO_Configuration>
	USART_Configuration();
 8003e44:	f7ff ff22 	bl	8003c8c <USART_Configuration>

	NVIC_Configuration_USER_BUTTON();
 8003e48:	f7ff ffa4 	bl	8003d94 <NVIC_Configuration_USER_BUTTON>
	NVIC_Configuration_USART1();
 8003e4c:	f7ff ff72 	bl	8003d34 <NVIC_Configuration_USART1>

	TIM6Init();
 8003e50:	f7fc fc2c 	bl	80006ac <TIM6Init>

}
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop

08003e58 <vTaskLED>:

void vTaskLED(void *pvParameters)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

        for (;;) {
        	//delay_ms(500);
        	LED_PORT->ODR ^= LED_BLUE;
 8003e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e6c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8003e76:	60da      	str	r2, [r3, #12]
            vTaskDelay(500);
 8003e78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e7c:	f7fe fb8c 	bl	8002598 <vTaskDelay>

        }
 8003e80:	e7ee      	b.n	8003e60 <vTaskLED+0x8>
 8003e82:	bf00      	nop

08003e84 <USART1_IRQHandler>:
        vTaskDelete(NULL);

}

void USART1_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003e8a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003e8e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003e92:	f240 5125 	movw	r1, #1317	; 0x525
 8003e96:	f7fd fc29 	bl	80016ec <USART_GetITStatus>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <USART1_IRQHandler+0x3a>
	    {
		   // перемырг
		   //LED_PORT->ODR |= LED_BLUE;
		   //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
		   uint16_t i = USART_ReceiveData(USART1);
 8003ea0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003ea4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003ea8:	f7fd fbee 	bl	8001688 <USART_ReceiveData>
 8003eac:	4603      	mov	r3, r0
 8003eae:	80fb      	strh	r3, [r7, #6]
		   UARTSend(&i, 1);
 8003eb0:	f107 0306 	add.w	r3, r7, #6
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f04f 0101 	mov.w	r1, #1
 8003eba:	f000 f8b3 	bl	8004024 <UARTSend>
		   //LED_PORT->ODR ^= LED_BLUE;
		   //UARTSend(&i, 1);
          // UARTSend(" <-- data\r\n", 10);
        }
}
 8003ebe:	f107 0708 	add.w	r7, r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <vTaskDS1821>:

    vTaskDelete(NULL);
}

void vTaskDS1821(void *pvParameters)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	uart_print_string(USART1,"Температура:   ",0);
 8003ed0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003ed4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003ed8:	f244 5164 	movw	r1, #17764	; 0x4564
 8003edc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f7fc faee 	bl	80004c4 <uart_print_string>
			//error_handle(One_Wire_Reset(One_Wire_Pin));

			//error_handle(DS1821_Write_Status(One_Wire_Pin));

			//error_handle(DS1821_Start_Conversion(One_Wire_Pin));
			DS1821_Start_Conversion(One_Wire_Pin);
 8003ee8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003eec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003ef0:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003ef4:	f7fc f96c 	bl	80001d0 <DS1821_Start_Conversion>
			//delay_ms(750);

			//error_handle(DS1821_Stop_Conversion(One_Wire_Pin));
			//error_handle(DS1821_Read_Temp(&t, One_Wire_Pin));
			DS1821_Read_Temp(&t, One_Wire_Pin);
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	4618      	mov	r0, r3
 8003efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f02:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003f06:	f04f 0280 	mov.w	r2, #128	; 0x80
 8003f0a:	f7fc f983 	bl	8000214 <DS1821_Read_Temp>
			uart_send_char(USART1, 8);
 8003f0e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003f12:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003f16:	f04f 0108 	mov.w	r1, #8
 8003f1a:	f7fc fabb 	bl	8000494 <uart_send_char>
			uart_send_char(USART1, 8);
 8003f1e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003f22:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003f26:	f04f 0108 	mov.w	r1, #8
 8003f2a:	f7fc fab3 	bl	8000494 <uart_send_char>
			uart_print_value(USART1, t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003f34:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7fc fae5 	bl	8000508 <uart_print_value>
			//uart_print_string(USART1,"",1);
			LED_PORT->ODR |= LED_GREEN;
 8003f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f4a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f4e:	68d2      	ldr	r2, [r2, #12]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f54:	60da      	str	r2, [r3, #12]
						//vTaskDelay(10);
			delay_ms(10);
 8003f56:	f04f 000a 	mov.w	r0, #10
 8003f5a:	f7fc fbdf 	bl	800071c <delay_ms>
			LED_PORT->ODR ^= LED_GREEN;
 8003f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f6a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f6e:	68d2      	ldr	r2, [r2, #12]
 8003f70:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8003f74:	60da      	str	r2, [r3, #12]
			//////////////////
			vTaskDelay(1000);
 8003f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f7a:	f7fe fb0d 	bl	8002598 <vTaskDelay>
	}
 8003f7e:	e7b3      	b.n	8003ee8 <vTaskDS1821+0x20>

08003f80 <main>:
}



int main()
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af04      	add	r7, sp, #16
	vFreeRTOSInitAll();
 8003f86:	f7ff ff51 	bl	8003e2c <vFreeRTOSInitAll>

	xTaskCreate( vTaskLED, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, NULL, 2,
 8003f8a:	f04f 0302 	mov.w	r3, #2
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	f643 6059 	movw	r0, #15961	; 0x3e59
 8003fa6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003faa:	f244 5180 	movw	r1, #17792	; 0x4580
 8003fae:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003fb2:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	f7fe f9fb 	bl	80023b4 <xTaskGenericCreate>
	                        ( xTaskHandle * ) NULL);
	//xTaskCreate(vTaskUSART_TX, (signed char*)"USART_TX", configMINIMAL_STACK_SIZE, NULL, 2,
      //      				( xTaskHandle * ) NULL);
	xTaskCreate( vTaskDS1821, ( signed char * ) "DS1821", configMINIMAL_STACK_SIZE, NULL, 2,
 8003fbe:	f04f 0302 	mov.w	r3, #2
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	9303      	str	r3, [sp, #12]
 8003fd6:	f643 60c9 	movw	r0, #16073	; 0x3ec9
 8003fda:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003fde:	f244 5184 	movw	r1, #17796	; 0x4584
 8003fe2:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003fe6:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	f7fe f9e1 	bl	80023b4 <xTaskGenericCreate>
		                        ( xTaskHandle * ) NULL);
	vTaskStartScheduler();
 8003ff2:	f7fe faff 	bl	80025f4 <vTaskStartScheduler>

	for(;;)
	{
//
	}
 8003ff6:	e7fe      	b.n	8003ff6 <main+0x76>

08003ff8 <vApplicationMallocFailedHook>:
		}
		if (err==One_Wire_Success) return 0; else return 1;//uart_print_string(USART1, "GoodLuck!",1);
}

void vApplicationMallocFailedHook( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003ffc:	e7fe      	b.n	8003ffc <vApplicationMallocFailedHook+0x4>
 8003ffe:	bf00      	nop

08004000 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 800400a:	e7fe      	b.n	800400a <vApplicationStackOverflowHook+0xa>

0800400c <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004012:	f7fd fc3f 	bl	8001894 <xPortGetFreeHeapSize>
 8004016:	4603      	mov	r3, r0
 8004018:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800401a:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800401c:	f107 0708 	add.w	r7, r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UARTSend>:
*                : - ulCount  : buffer's length
* Output         : None
* Return         : None
*******************************************************************************/
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 800402e:	e018      	b.n	8004062 <UARTSend+0x3e>
    {
        USART_SendData(USART1, (uint16_t) *pucBuffer++);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	f102 0201 	add.w	r2, r2, #1
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004040:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004044:	4619      	mov	r1, r3
 8004046:	f7fd fb0b 	bl	8001660 <USART_SendData>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 800404a:	bf00      	nop
 800404c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004050:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004054:	f04f 0140 	mov.w	r1, #64	; 0x40
 8004058:	f7fd fb28 	bl	80016ac <USART_GetFlagStatus>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f4      	beq.n	800404c <UARTSend+0x28>
void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2300      	moveq	r3, #0
 800406a:	2301      	movne	r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	f102 32ff 	add.w	r2, r2, #4294967295
 8004074:	603a      	str	r2, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1da      	bne.n	8004030 <UARTSend+0xc>
        /* Loop until the end of transmission */
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
        {
        }
    }
}
 800407a:	f107 0708 	add.w	r7, r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop

08004084 <memcmp>:
 8004084:	2a03      	cmp	r2, #3
 8004086:	b4f0      	push	{r4, r5, r6, r7}
 8004088:	d931      	bls.n	80040ee <memcmp+0x6a>
 800408a:	ea41 0300 	orr.w	r3, r1, r0
 800408e:	079c      	lsls	r4, r3, #30
 8004090:	d12e      	bne.n	80040f0 <memcmp+0x6c>
 8004092:	6806      	ldr	r6, [r0, #0]
 8004094:	680f      	ldr	r7, [r1, #0]
 8004096:	1f15      	subs	r5, r2, #4
 8004098:	1d03      	adds	r3, r0, #4
 800409a:	1d0c      	adds	r4, r1, #4
 800409c:	42be      	cmp	r6, r7
 800409e:	f3c5 0c80 	ubfx	ip, r5, #2, #1
 80040a2:	d124      	bne.n	80040ee <memcmp+0x6a>
 80040a4:	2d03      	cmp	r5, #3
 80040a6:	462a      	mov	r2, r5
 80040a8:	d91f      	bls.n	80040ea <memcmp+0x66>
 80040aa:	f1bc 0f00 	cmp.w	ip, #0
 80040ae:	d008      	beq.n	80040c2 <memcmp+0x3e>
 80040b0:	681e      	ldr	r6, [r3, #0]
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	4621      	mov	r1, r4
 80040b6:	4618      	mov	r0, r3
 80040b8:	3404      	adds	r4, #4
 80040ba:	3304      	adds	r3, #4
 80040bc:	42ae      	cmp	r6, r5
 80040be:	d011      	beq.n	80040e4 <memcmp+0x60>
 80040c0:	e015      	b.n	80040ee <memcmp+0x6a>
 80040c2:	4621      	mov	r1, r4
 80040c4:	4618      	mov	r0, r3
 80040c6:	681c      	ldr	r4, [r3, #0]
 80040c8:	680b      	ldr	r3, [r1, #0]
 80040ca:	1d05      	adds	r5, r0, #4
 80040cc:	1d0e      	adds	r6, r1, #4
 80040ce:	429c      	cmp	r4, r3
 80040d0:	d10d      	bne.n	80040ee <memcmp+0x6a>
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	682e      	ldr	r6, [r5, #0]
 80040d8:	680d      	ldr	r5, [r1, #0]
 80040da:	3a04      	subs	r2, #4
 80040dc:	1d03      	adds	r3, r0, #4
 80040de:	1d0c      	adds	r4, r1, #4
 80040e0:	42ae      	cmp	r6, r5
 80040e2:	d104      	bne.n	80040ee <memcmp+0x6a>
 80040e4:	3a04      	subs	r2, #4
 80040e6:	2a03      	cmp	r2, #3
 80040e8:	d8eb      	bhi.n	80040c2 <memcmp+0x3e>
 80040ea:	4621      	mov	r1, r4
 80040ec:	4618      	mov	r0, r3
 80040ee:	b31a      	cbz	r2, 8004138 <memcmp+0xb4>
 80040f0:	7803      	ldrb	r3, [r0, #0]
 80040f2:	780c      	ldrb	r4, [r1, #0]
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	d10a      	bne.n	800410e <memcmp+0x8a>
 80040f8:	1e55      	subs	r5, r2, #1
 80040fa:	2200      	movs	r2, #0
 80040fc:	07eb      	lsls	r3, r5, #31
 80040fe:	d514      	bpl.n	800412a <memcmp+0xa6>
 8004100:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004104:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004108:	2201      	movs	r2, #1
 800410a:	42a3      	cmp	r3, r4
 800410c:	d00d      	beq.n	800412a <memcmp+0xa6>
 800410e:	1b18      	subs	r0, r3, r4
 8004110:	e010      	b.n	8004134 <memcmp+0xb0>
 8004112:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004116:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800411a:	42a3      	cmp	r3, r4
 800411c:	d1f7      	bne.n	800410e <memcmp+0x8a>
 800411e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004122:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004126:	42a3      	cmp	r3, r4
 8004128:	d1f1      	bne.n	800410e <memcmp+0x8a>
 800412a:	42aa      	cmp	r2, r5
 800412c:	f102 0202 	add.w	r2, r2, #2
 8004130:	d1ef      	bne.n	8004112 <memcmp+0x8e>
 8004132:	2000      	movs	r0, #0
 8004134:	bcf0      	pop	{r4, r5, r6, r7}
 8004136:	4770      	bx	lr
 8004138:	4610      	mov	r0, r2
 800413a:	e7fb      	b.n	8004134 <memcmp+0xb0>

0800413c <memcpy>:
 800413c:	2a0f      	cmp	r2, #15
 800413e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8004142:	f240 80a1 	bls.w	8004288 <memcpy+0x14c>
 8004146:	ea41 0300 	orr.w	r3, r1, r0
 800414a:	079b      	lsls	r3, r3, #30
 800414c:	f040 809e 	bne.w	800428c <memcpy+0x150>
 8004150:	680c      	ldr	r4, [r1, #0]
 8004152:	f1a2 0510 	sub.w	r5, r2, #16
 8004156:	6004      	str	r4, [r0, #0]
 8004158:	684b      	ldr	r3, [r1, #4]
 800415a:	46ac      	mov	ip, r5
 800415c:	6043      	str	r3, [r0, #4]
 800415e:	688c      	ldr	r4, [r1, #8]
 8004160:	f1bc 0f0f 	cmp.w	ip, #15
 8004164:	6084      	str	r4, [r0, #8]
 8004166:	68cc      	ldr	r4, [r1, #12]
 8004168:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800416c:	60c4      	str	r4, [r0, #12]
 800416e:	f100 0310 	add.w	r3, r0, #16
 8004172:	f101 0410 	add.w	r4, r1, #16
 8004176:	d92b      	bls.n	80041d0 <memcpy+0x94>
 8004178:	b175      	cbz	r5, 8004198 <memcpy+0x5c>
 800417a:	6825      	ldr	r5, [r4, #0]
 800417c:	f1ac 0c10 	sub.w	ip, ip, #16
 8004180:	601d      	str	r5, [r3, #0]
 8004182:	6865      	ldr	r5, [r4, #4]
 8004184:	605d      	str	r5, [r3, #4]
 8004186:	68a5      	ldr	r5, [r4, #8]
 8004188:	609d      	str	r5, [r3, #8]
 800418a:	68e5      	ldr	r5, [r4, #12]
 800418c:	3410      	adds	r4, #16
 800418e:	60dd      	str	r5, [r3, #12]
 8004190:	3310      	adds	r3, #16
 8004192:	f1bc 0f0f 	cmp.w	ip, #15
 8004196:	d91b      	bls.n	80041d0 <memcpy+0x94>
 8004198:	6827      	ldr	r7, [r4, #0]
 800419a:	f104 0610 	add.w	r6, r4, #16
 800419e:	601f      	str	r7, [r3, #0]
 80041a0:	6867      	ldr	r7, [r4, #4]
 80041a2:	f103 0510 	add.w	r5, r3, #16
 80041a6:	605f      	str	r7, [r3, #4]
 80041a8:	68a7      	ldr	r7, [r4, #8]
 80041aa:	f1ac 0c20 	sub.w	ip, ip, #32
 80041ae:	609f      	str	r7, [r3, #8]
 80041b0:	68e7      	ldr	r7, [r4, #12]
 80041b2:	60df      	str	r7, [r3, #12]
 80041b4:	6924      	ldr	r4, [r4, #16]
 80041b6:	611c      	str	r4, [r3, #16]
 80041b8:	6877      	ldr	r7, [r6, #4]
 80041ba:	f106 0410 	add.w	r4, r6, #16
 80041be:	606f      	str	r7, [r5, #4]
 80041c0:	68b7      	ldr	r7, [r6, #8]
 80041c2:	3320      	adds	r3, #32
 80041c4:	60af      	str	r7, [r5, #8]
 80041c6:	68f6      	ldr	r6, [r6, #12]
 80041c8:	f1bc 0f0f 	cmp.w	ip, #15
 80041cc:	60ee      	str	r6, [r5, #12]
 80041ce:	d8e3      	bhi.n	8004198 <memcpy+0x5c>
 80041d0:	f1a2 0810 	sub.w	r8, r2, #16
 80041d4:	f028 030f 	bic.w	r3, r8, #15
 80041d8:	f002 040f 	and.w	r4, r2, #15
 80041dc:	f103 0c10 	add.w	ip, r3, #16
 80041e0:	2c03      	cmp	r4, #3
 80041e2:	eb00 030c 	add.w	r3, r0, ip
 80041e6:	eb01 080c 	add.w	r8, r1, ip
 80041ea:	d951      	bls.n	8004290 <memcpy+0x154>
 80041ec:	1f21      	subs	r1, r4, #4
 80041ee:	ea4f 0991 	mov.w	r9, r1, lsr #2
 80041f2:	4644      	mov	r4, r8
 80041f4:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 80041f8:	f854 6b04 	ldr.w	r6, [r4], #4
 80041fc:	ebc8 010c 	rsb	r1, r8, ip
 8004200:	f10c 0c04 	add.w	ip, ip, #4
 8004204:	461d      	mov	r5, r3
 8004206:	4564      	cmp	r4, ip
 8004208:	f845 6b04 	str.w	r6, [r5], #4
 800420c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8004210:	d012      	beq.n	8004238 <memcpy+0xfc>
 8004212:	b129      	cbz	r1, 8004220 <memcpy+0xe4>
 8004214:	f854 1b04 	ldr.w	r1, [r4], #4
 8004218:	4564      	cmp	r4, ip
 800421a:	f845 1b04 	str.w	r1, [r5], #4
 800421e:	d00b      	beq.n	8004238 <memcpy+0xfc>
 8004220:	4627      	mov	r7, r4
 8004222:	f857 1b04 	ldr.w	r1, [r7], #4
 8004226:	462e      	mov	r6, r5
 8004228:	f846 1b04 	str.w	r1, [r6], #4
 800422c:	6864      	ldr	r4, [r4, #4]
 800422e:	606c      	str	r4, [r5, #4]
 8004230:	1d3c      	adds	r4, r7, #4
 8004232:	1d35      	adds	r5, r6, #4
 8004234:	4564      	cmp	r4, ip
 8004236:	d1f3      	bne.n	8004220 <memcpy+0xe4>
 8004238:	f109 0c01 	add.w	ip, r9, #1
 800423c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8004240:	f002 0203 	and.w	r2, r2, #3
 8004244:	eb08 0109 	add.w	r1, r8, r9
 8004248:	444b      	add	r3, r9
 800424a:	b1d2      	cbz	r2, 8004282 <memcpy+0x146>
 800424c:	780d      	ldrb	r5, [r1, #0]
 800424e:	189a      	adds	r2, r3, r2
 8004250:	43dc      	mvns	r4, r3
 8004252:	f803 5b01 	strb.w	r5, [r3], #1
 8004256:	1914      	adds	r4, r2, r4
 8004258:	4293      	cmp	r3, r2
 800425a:	f004 0401 	and.w	r4, r4, #1
 800425e:	d010      	beq.n	8004282 <memcpy+0x146>
 8004260:	b12c      	cbz	r4, 800426e <memcpy+0x132>
 8004262:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004266:	f803 4b01 	strb.w	r4, [r3], #1
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <memcpy+0x146>
 800426e:	784d      	ldrb	r5, [r1, #1]
 8004270:	461c      	mov	r4, r3
 8004272:	f804 5b01 	strb.w	r5, [r4], #1
 8004276:	788d      	ldrb	r5, [r1, #2]
 8004278:	3102      	adds	r1, #2
 800427a:	705d      	strb	r5, [r3, #1]
 800427c:	1c63      	adds	r3, r4, #1
 800427e:	4293      	cmp	r3, r2
 8004280:	d1f5      	bne.n	800426e <memcpy+0x132>
 8004282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8004286:	4770      	bx	lr
 8004288:	4603      	mov	r3, r0
 800428a:	e7de      	b.n	800424a <memcpy+0x10e>
 800428c:	4603      	mov	r3, r0
 800428e:	e7dd      	b.n	800424c <memcpy+0x110>
 8004290:	4641      	mov	r1, r8
 8004292:	4622      	mov	r2, r4
 8004294:	e7d9      	b.n	800424a <memcpy+0x10e>
 8004296:	bf00      	nop

08004298 <memset>:
 8004298:	b4f0      	push	{r4, r5, r6, r7}
 800429a:	0784      	lsls	r4, r0, #30
 800429c:	4603      	mov	r3, r0
 800429e:	f000 808d 	beq.w	80043bc <memset+0x124>
 80042a2:	1e54      	subs	r4, r2, #1
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	f000 8087 	beq.w	80043b8 <memset+0x120>
 80042aa:	07e5      	lsls	r5, r4, #31
 80042ac:	b2ce      	uxtb	r6, r1
 80042ae:	d411      	bmi.n	80042d4 <memset+0x3c>
 80042b0:	461a      	mov	r2, r3
 80042b2:	f802 6b01 	strb.w	r6, [r2], #1
 80042b6:	4613      	mov	r3, r2
 80042b8:	4615      	mov	r5, r2
 80042ba:	0792      	lsls	r2, r2, #30
 80042bc:	d010      	beq.n	80042e0 <memset+0x48>
 80042be:	1e62      	subs	r2, r4, #1
 80042c0:	2c00      	cmp	r4, #0
 80042c2:	d079      	beq.n	80043b8 <memset+0x120>
 80042c4:	f803 6b01 	strb.w	r6, [r3], #1
 80042c8:	4614      	mov	r4, r2
 80042ca:	079a      	lsls	r2, r3, #30
 80042cc:	461d      	mov	r5, r3
 80042ce:	d007      	beq.n	80042e0 <memset+0x48>
 80042d0:	3c01      	subs	r4, #1
 80042d2:	e7ed      	b.n	80042b0 <memset+0x18>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f803 6b01 	strb.w	r6, [r3], #1
 80042da:	079a      	lsls	r2, r3, #30
 80042dc:	461d      	mov	r5, r3
 80042de:	d1f7      	bne.n	80042d0 <memset+0x38>
 80042e0:	2c03      	cmp	r4, #3
 80042e2:	d952      	bls.n	800438a <memset+0xf2>
 80042e4:	b2ce      	uxtb	r6, r1
 80042e6:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 80042ea:	2c0f      	cmp	r4, #15
 80042ec:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 80042f0:	d92d      	bls.n	800434e <memset+0xb6>
 80042f2:	f1a4 0210 	sub.w	r2, r4, #16
 80042f6:	4617      	mov	r7, r2
 80042f8:	2f0f      	cmp	r7, #15
 80042fa:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	606b      	str	r3, [r5, #4]
 8004302:	60ab      	str	r3, [r5, #8]
 8004304:	60eb      	str	r3, [r5, #12]
 8004306:	f105 0210 	add.w	r2, r5, #16
 800430a:	d916      	bls.n	800433a <memset+0xa2>
 800430c:	b13e      	cbz	r6, 800431e <memset+0x86>
 800430e:	3f10      	subs	r7, #16
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	6053      	str	r3, [r2, #4]
 8004314:	6093      	str	r3, [r2, #8]
 8004316:	60d3      	str	r3, [r2, #12]
 8004318:	3210      	adds	r2, #16
 800431a:	2f0f      	cmp	r7, #15
 800431c:	d90d      	bls.n	800433a <memset+0xa2>
 800431e:	3f20      	subs	r7, #32
 8004320:	f102 0610 	add.w	r6, r2, #16
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	6053      	str	r3, [r2, #4]
 8004328:	6093      	str	r3, [r2, #8]
 800432a:	60d3      	str	r3, [r2, #12]
 800432c:	6113      	str	r3, [r2, #16]
 800432e:	6153      	str	r3, [r2, #20]
 8004330:	6193      	str	r3, [r2, #24]
 8004332:	61d3      	str	r3, [r2, #28]
 8004334:	3220      	adds	r2, #32
 8004336:	2f0f      	cmp	r7, #15
 8004338:	d8f1      	bhi.n	800431e <memset+0x86>
 800433a:	f1a4 0210 	sub.w	r2, r4, #16
 800433e:	f022 020f 	bic.w	r2, r2, #15
 8004342:	f004 040f 	and.w	r4, r4, #15
 8004346:	3210      	adds	r2, #16
 8004348:	2c03      	cmp	r4, #3
 800434a:	4415      	add	r5, r2
 800434c:	d91d      	bls.n	800438a <memset+0xf2>
 800434e:	1f27      	subs	r7, r4, #4
 8004350:	463e      	mov	r6, r7
 8004352:	462a      	mov	r2, r5
 8004354:	2e03      	cmp	r6, #3
 8004356:	f842 3b04 	str.w	r3, [r2], #4
 800435a:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800435e:	d90d      	bls.n	800437c <memset+0xe4>
 8004360:	b127      	cbz	r7, 800436c <memset+0xd4>
 8004362:	3e04      	subs	r6, #4
 8004364:	2e03      	cmp	r6, #3
 8004366:	f842 3b04 	str.w	r3, [r2], #4
 800436a:	d907      	bls.n	800437c <memset+0xe4>
 800436c:	4617      	mov	r7, r2
 800436e:	f847 3b04 	str.w	r3, [r7], #4
 8004372:	3e08      	subs	r6, #8
 8004374:	6053      	str	r3, [r2, #4]
 8004376:	1d3a      	adds	r2, r7, #4
 8004378:	2e03      	cmp	r6, #3
 800437a:	d8f7      	bhi.n	800436c <memset+0xd4>
 800437c:	1f23      	subs	r3, r4, #4
 800437e:	f023 0203 	bic.w	r2, r3, #3
 8004382:	1d13      	adds	r3, r2, #4
 8004384:	f004 0403 	and.w	r4, r4, #3
 8004388:	18ed      	adds	r5, r5, r3
 800438a:	b1ac      	cbz	r4, 80043b8 <memset+0x120>
 800438c:	b2c9      	uxtb	r1, r1
 800438e:	43ea      	mvns	r2, r5
 8004390:	192c      	adds	r4, r5, r4
 8004392:	f805 1b01 	strb.w	r1, [r5], #1
 8004396:	18a3      	adds	r3, r4, r2
 8004398:	42a5      	cmp	r5, r4
 800439a:	f003 0201 	and.w	r2, r3, #1
 800439e:	d00b      	beq.n	80043b8 <memset+0x120>
 80043a0:	b11a      	cbz	r2, 80043aa <memset+0x112>
 80043a2:	f805 1b01 	strb.w	r1, [r5], #1
 80043a6:	42a5      	cmp	r5, r4
 80043a8:	d006      	beq.n	80043b8 <memset+0x120>
 80043aa:	462b      	mov	r3, r5
 80043ac:	f803 1b01 	strb.w	r1, [r3], #1
 80043b0:	7069      	strb	r1, [r5, #1]
 80043b2:	1c5d      	adds	r5, r3, #1
 80043b4:	42a5      	cmp	r5, r4
 80043b6:	d1f8      	bne.n	80043aa <memset+0x112>
 80043b8:	bcf0      	pop	{r4, r5, r6, r7}
 80043ba:	4770      	bx	lr
 80043bc:	4605      	mov	r5, r0
 80043be:	4614      	mov	r4, r2
 80043c0:	e78e      	b.n	80042e0 <memset+0x48>
 80043c2:	bf00      	nop

080043c4 <strncpy>:
 80043c4:	ea41 0300 	orr.w	r3, r1, r0
 80043c8:	079b      	lsls	r3, r3, #30
 80043ca:	b4f0      	push	{r4, r5, r6, r7}
 80043cc:	d174      	bne.n	80044b8 <strncpy+0xf4>
 80043ce:	2a03      	cmp	r2, #3
 80043d0:	d972      	bls.n	80044b8 <strncpy+0xf4>
 80043d2:	460c      	mov	r4, r1
 80043d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80043d8:	1f16      	subs	r6, r2, #4
 80043da:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 80043de:	ea27 0705 	bic.w	r7, r7, r5
 80043e2:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 80043e6:	4603      	mov	r3, r0
 80043e8:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 80043ec:	d131      	bne.n	8004452 <strncpy+0x8e>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2e03      	cmp	r6, #3
 80043f2:	4632      	mov	r2, r6
 80043f4:	f843 5b04 	str.w	r5, [r3], #4
 80043f8:	d92a      	bls.n	8004450 <strncpy+0x8c>
 80043fa:	f1bc 0f00 	cmp.w	ip, #0
 80043fe:	d00a      	beq.n	8004416 <strncpy+0x52>
 8004400:	4621      	mov	r1, r4
 8004402:	f854 5b04 	ldr.w	r5, [r4], #4
 8004406:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800440a:	ea26 0605 	bic.w	r6, r6, r5
 800440e:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8004412:	d018      	beq.n	8004446 <strncpy+0x82>
 8004414:	e01d      	b.n	8004452 <strncpy+0x8e>
 8004416:	4626      	mov	r6, r4
 8004418:	f856 5b04 	ldr.w	r5, [r6], #4
 800441c:	4621      	mov	r1, r4
 800441e:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8004422:	ea27 0705 	bic.w	r7, r7, r5
 8004426:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800442a:	d112      	bne.n	8004452 <strncpy+0x8e>
 800442c:	f843 5b04 	str.w	r5, [r3], #4
 8004430:	6865      	ldr	r5, [r4, #4]
 8004432:	4631      	mov	r1, r6
 8004434:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8004438:	ea26 0605 	bic.w	r6, r6, r5
 800443c:	3a04      	subs	r2, #4
 800443e:	1d0c      	adds	r4, r1, #4
 8004440:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8004444:	d105      	bne.n	8004452 <strncpy+0x8e>
 8004446:	3a04      	subs	r2, #4
 8004448:	2a03      	cmp	r2, #3
 800444a:	f843 5b04 	str.w	r5, [r3], #4
 800444e:	d8e2      	bhi.n	8004416 <strncpy+0x52>
 8004450:	4621      	mov	r1, r4
 8004452:	b37a      	cbz	r2, 80044b4 <strncpy+0xf0>
 8004454:	780d      	ldrb	r5, [r1, #0]
 8004456:	3a01      	subs	r2, #1
 8004458:	f803 5b01 	strb.w	r5, [r3], #1
 800445c:	b19d      	cbz	r5, 8004486 <strncpy+0xc2>
 800445e:	f012 0f01 	tst.w	r2, #1
 8004462:	461c      	mov	r4, r3
 8004464:	d12a      	bne.n	80044bc <strncpy+0xf8>
 8004466:	4623      	mov	r3, r4
 8004468:	b322      	cbz	r2, 80044b4 <strncpy+0xf0>
 800446a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800446e:	3a01      	subs	r2, #1
 8004470:	f803 5b01 	strb.w	r5, [r3], #1
 8004474:	b13d      	cbz	r5, 8004486 <strncpy+0xc2>
 8004476:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800447a:	3a01      	subs	r2, #1
 800447c:	7065      	strb	r5, [r4, #1]
 800447e:	1c5c      	adds	r4, r3, #1
 8004480:	4623      	mov	r3, r4
 8004482:	2d00      	cmp	r5, #0
 8004484:	d1ef      	bne.n	8004466 <strncpy+0xa2>
 8004486:	b1aa      	cbz	r2, 80044b4 <strncpy+0xf0>
 8004488:	2100      	movs	r1, #0
 800448a:	189c      	adds	r4, r3, r2
 800448c:	43da      	mvns	r2, r3
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	18a2      	adds	r2, r4, r2
 8004494:	42a3      	cmp	r3, r4
 8004496:	f002 0201 	and.w	r2, r2, #1
 800449a:	d00b      	beq.n	80044b4 <strncpy+0xf0>
 800449c:	b11a      	cbz	r2, 80044a6 <strncpy+0xe2>
 800449e:	f803 1b01 	strb.w	r1, [r3], #1
 80044a2:	42a3      	cmp	r3, r4
 80044a4:	d006      	beq.n	80044b4 <strncpy+0xf0>
 80044a6:	461a      	mov	r2, r3
 80044a8:	f802 1b01 	strb.w	r1, [r2], #1
 80044ac:	7059      	strb	r1, [r3, #1]
 80044ae:	1c53      	adds	r3, r2, #1
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	d1f8      	bne.n	80044a6 <strncpy+0xe2>
 80044b4:	bcf0      	pop	{r4, r5, r6, r7}
 80044b6:	4770      	bx	lr
 80044b8:	4603      	mov	r3, r0
 80044ba:	e7ca      	b.n	8004452 <strncpy+0x8e>
 80044bc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80044c0:	461c      	mov	r4, r3
 80044c2:	f804 5b01 	strb.w	r5, [r4], #1
 80044c6:	3a01      	subs	r2, #1
 80044c8:	4623      	mov	r3, r4
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	d1cb      	bne.n	8004466 <strncpy+0xa2>
 80044ce:	e7da      	b.n	8004486 <strncpy+0xc2>
 80044d0:	33323130 	.word	0x33323130
 80044d4:	37363534 	.word	0x37363534
 80044d8:	00003938 	.word	0x00003938
 80044dc:	33323130 	.word	0x33323130
 80044e0:	37363534 	.word	0x37363534
 80044e4:	42413938 	.word	0x42413938
 80044e8:	46454443 	.word	0x46454443
 80044ec:	00000000 	.word	0x00000000
 80044f0:	454c4449 	.word	0x454c4449
 80044f4:	00000000 	.word	0x00000000
 80044f8:	20726d54 	.word	0x20726d54
 80044fc:	00637653 	.word	0x00637653
 8004500:	3d3d3d0a 	.word	0x3d3d3d0a
 8004504:	55203d3d 	.word	0x55203d3d
 8004508:	31545241 	.word	0x31545241
 800450c:	d0b8d020 	.word	0xd0b8d020
 8004510:	d1b8d0bd 	.word	0xd1b8d0bd
 8004514:	d0b8d086 	.word	0xd0b8d086
 8004518:	d0bbd0b0 	.word	0xd0bbd0b0
 800451c:	d0b7d0b8 	.word	0xd0b7d0b8
 8004520:	d080d1b8 	.word	0xd080d1b8
 8004524:	d0b2d0be 	.word	0xd0b2d0be
 8004528:	20bdd0b0 	.word	0x20bdd0b0
 800452c:	3d3d3d3d 	.word	0x3d3d3d3d
 8004530:	0000003d 	.word	0x0000003d
 8004534:	8bd1a2d0 	.word	0x8bd1a2d0
 8004538:	86d1bdd0 	.word	0x86d1bdd0
 800453c:	00000000 	.word	0x00000000
 8004540:	86d1a1d0 	.word	0x86d1a1d0
 8004544:	bad083d1 	.word	0xbad083d1
 8004548:	202cbed0 	.word	0x202cbed0
 800454c:	82d1bed0 	.word	0x82d1bed0
 8004550:	b0d0bbd0 	.word	0xb0d0bbd0
 8004554:	8cd1b4d0 	.word	0x8cd1b4d0
 8004558:	d0bcd020 	.word	0xd0bcd020
 800455c:	d1bdd0b5 	.word	0xd1bdd0b5
 8004560:	002e2e8f 	.word	0x002e2e8f
 8004564:	b5d0a2d0 	.word	0xb5d0a2d0
 8004568:	bfd0bcd0 	.word	0xbfd0bcd0
 800456c:	80d1b5d0 	.word	0x80d1b5d0
 8004570:	82d1b0d0 	.word	0x82d1b0d0
 8004574:	80d183d1 	.word	0x80d183d1
 8004578:	203ab0d0 	.word	0x203ab0d0
 800457c:	00002020 	.word	0x00002020
 8004580:	0044454c 	.word	0x0044454c
 8004584:	38315344 	.word	0x38315344
 8004588:	00003132 	.word	0x00003132
 800458c:	63637553 	.word	0x63637553
 8004590:	21737365 	.word	0x21737365
 8004594:	6f6f4720 	.word	0x6f6f4720
 8004598:	63754c64 	.word	0x63754c64
 800459c:	0000216b 	.word	0x0000216b
 80045a0:	65206f4e 	.word	0x65206f4e
 80045a4:	206f6863 	.word	0x206f6863
 80045a8:	6d6f7266 	.word	0x6d6f7266
 80045ac:	76656420 	.word	0x76656420
 80045b0:	21656369 	.word	0x21656369
 80045b4:	00000000 	.word	0x00000000
 80045b8:	206e6950 	.word	0x206e6950
 80045bc:	20574f4c 	.word	0x20574f4c
 80045c0:	6f727265 	.word	0x6f727265
 80045c4:	00002172 	.word	0x00002172
 80045c8:	20435243 	.word	0x20435243
 80045cc:	20746f6e 	.word	0x20746f6e
 80045d0:	6374616d 	.word	0x6374616d
 80045d4:	00002168 	.word	0x00002168

080045d8 <ucExpectedStackBytes.5898>:
 80045d8:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 80045e8:	a5a5a5a5                                ....
